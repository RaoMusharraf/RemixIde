{
	"id": "2a53521559399e2d315a46277d0ac5e5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SwapToken/FRGST.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\ncontract Token is ERC20, Ownable,ERC20Burnable {\n \n    address public Wallet;\n    bool public isSwap;\n    address public PancakeSwap;\n    uint256 public LPTransferAmount;\n    // address public constant WBNB = 0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889;\n    // uint24 public constant poolFee = 500; \n\n    uint24 public poolFee;\n    address public WBNB;\n    address public constant routerAddress = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    ISwapRouter public immutable swapRouter = ISwapRouter(routerAddress);\n     \n\n    struct Cap{\n        uint SellTax;\n        uint BuyTax;\n        uint XAmount;\n        uint currentAmount;\n    }\n    // mappings\n    mapping(address => bool) public whiteList;\n    mapping(uint => Cap) public Taxs;\n\n    IERC20 public linkToken;\n    IERC20 public WBNBToken;\n\n    constructor() ERC20(\"Froggies Token\", \"FRGST\") {\n        _mint(msg.sender, 100000000000000 * 10 ** decimals());\n        WBNBToken = IERC20(WBNB);\n        Wallet = address(this);\n        linkToken = IERC20(address(this));\n    }\n    // ============ WhiteList FUNCTIONS ============\n    /* \n        @dev WhiteList take address as a parameter and make this address true in the whiteList.  \n    */\n    function WhiteList(address _address) public {\n        whiteList[_address] = true;\n    } \n    // ============ swapExactInputSingle FUNCTIONS ============\n    /* \n        @dev swapExactInputSingle this function take amount of token that you want to swap.  \n    */\n    function swapExactInputSingle(uint256 amountIn,address recipientAddresss) public returns (uint256 amountOut)\n    {\n        linkToken.approve(address(swapRouter), amountIn);\n        // approve(address(swapRouter), amountIn);\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\n            .ExactInputSingleParams({\n                tokenIn: address(this),\n                tokenOut: WBNB,\n                fee: poolFee,\n                recipient: recipientAddresss,\n                deadline: block.timestamp,\n                amountIn: amountIn,\n                amountOutMinimum: 0,\n                sqrtPriceLimitX96: 0\n            });\n        amountOut = swapRouter.exactInputSingle(params);\n    }\n\n    // ============ transfer FUNCTIONS ============\n    /* \n        @dev transfer take two parameter address of receiver and amount that you want to send.  \n    */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        if(whiteList[msg.sender]){\n            return super.transfer(to, amount);        \n        }else{\n            if(msg.sender == PancakeSwap){\n                uint ReflectionAmount = ((amount*Taxs[1].BuyTax)/100);\n                uint LPAmount = ((amount*Taxs[2].BuyTax)/100);\n                uint InvestmentAmount = ((amount*Taxs[3].BuyTax)/100);\n                uint MarkettingAmount = ((amount*Taxs[4].BuyTax)/100);\n                if(((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0)) {\n                    super.transfer(PancakeSwap,(Taxs[2].XAmount/2));\n                    swapExactInputSingle((Taxs[2].XAmount/2),PancakeSwap);\n                    Taxs[2].currentAmount = (Taxs[2].currentAmount + LPAmount) -  Taxs[2].XAmount;\n                }else{\n                    Taxs[2].currentAmount += LPAmount;\n                }\n                if(((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0)) {\n                    swapExactInputSingle(Taxs[3].XAmount,address(this));\n                    Taxs[3].currentAmount = (Taxs[3].currentAmount + InvestmentAmount) -  Taxs[3].XAmount;\n                }else{\n                    Taxs[3].currentAmount += InvestmentAmount;\n                }\n                if(((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0))  {\n                    swapExactInputSingle(Taxs[4].XAmount,address(this));\n                    Taxs[4].currentAmount = (Taxs[4].currentAmount + MarkettingAmount) -  Taxs[4].XAmount;\n                }else{\n                    Taxs[4].currentAmount += MarkettingAmount;\n                }  \n                super.transfer(Wallet,ReflectionAmount);\n                super.transfer(Wallet,LPAmount);\n                super.transfer(Wallet,InvestmentAmount);\n                super.transfer(Wallet,MarkettingAmount);\n                return super.transfer(to, (amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount)));\n            }else if(to == PancakeSwap)\n            {\n                uint ReflectionAmount = ((amount*Taxs[1].SellTax)/100);\n                uint LPAmount = ((amount*Taxs[2].SellTax)/100);\n                uint InvestmentAmount = ((amount*Taxs[3].SellTax)/100);\n                uint MarkettingAmount = ((amount*Taxs[4].SellTax)/100);\n                if(((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0)) {\n                    super.transfer(PancakeSwap,(Taxs[2].XAmount/2));\n                    swapExactInputSingle((Taxs[2].XAmount/2),PancakeSwap);\n                    Taxs[2].currentAmount = (Taxs[2].currentAmount + LPAmount) -  Taxs[2].XAmount;\n                }else{\n                    Taxs[2].currentAmount += LPAmount;\n                }\n                if(((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0)) {\n                    swapExactInputSingle(Taxs[3].XAmount,address(this));\n                    Taxs[3].currentAmount = (Taxs[3].currentAmount + InvestmentAmount) -  Taxs[3].XAmount;\n                }else{\n                    Taxs[3].currentAmount += InvestmentAmount;\n                }\n                if(((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0)) {\n                    swapExactInputSingle(Taxs[4].XAmount,address(this));\n                    Taxs[4].currentAmount = (Taxs[4].currentAmount + MarkettingAmount) -  Taxs[4].XAmount;\n                }else{\n                    Taxs[4].currentAmount += MarkettingAmount;\n                }  \n                super.transfer(Wallet,ReflectionAmount);\n                super.transfer(Wallet,LPAmount);\n                super.transfer(Wallet,InvestmentAmount);\n                super.transfer(Wallet,MarkettingAmount);\n                return super.transfer(to,amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount));\n            }\n            else{\n                return super.transfer(to, amount);\n            }\n        }  \n    }\n\n    // ============ setReflectionSellTax FUNCTIONS ============\n    /* \n        @dev setReflectionSellTax take Tax percentage as a parameter and set this percentage to ReflectionSellTax variable.  \n    */\n    function setReflectionSellTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[1].SellTax = Tax;\n    }\n\n    // ============ setLPSellTax FUNCTIONS ============\n    /* \n        @dev setLPSellTax take Tax percentage as a parameter and set this percentage to LPSellTax variable.  \n    */\n    function setLPSellTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[2].SellTax = Tax;\n    }\n\n    // ============ setInvestmentSellTax FUNCTIONS ============\n    /* \n        @dev setInvestmentSellTax take Tax percentage as a parameter and set this percentage to InvestmentSellTax variable.  \n    */\n    function setInvestmentSellTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[3].SellTax = Tax;\n    }\n\n    // ============ setMarkettingSellTax FUNCTIONS ============\n    /* \n        @dev setMarkettingSellTax take Tax percentage as a parameter and set this percentage to MarkettingSellTax variable.  \n    */\n    function setMarkettingSellTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[4].SellTax = Tax;\n    }\n\n    // ============ setReflectionBuyTax FUNCTIONS ============\n    /* \n        @dev setReflectionBuyTax take Tax percentage as a parameter and set this percentage to ReflectionBuyTax variable.  \n    */\n    function setReflectionBuyTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[1].BuyTax = Tax;\n    }\n\n    // ============ setLPBuyTax FUNCTIONS ============\n    /* \n        @dev setLPBuyTax take Tax percentage as a parameter and set this percentage to LPBuyTax variable.  \n    */\n    function setLPBuyTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[2].BuyTax = Tax;\n    }\n\n    // ============ setInvestmentBuyTax FUNCTIONS ============\n    /* \n        @dev setInvestmentBuyTax take Tax percentage as a parameter and set this percentage to InvestmentBuyTax variable.  \n    */\n    function setInvestmentBuyTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[3].BuyTax = Tax;\n    }\n\n    // ============ setMarkettingBuyTax FUNCTIONS ============\n    /* \n        @dev setMarkettingBuyTax take Tax percentage as a parameter and set this percentage to MarkettingBuyTax variable.  \n    */\n    function setMarkettingBuyTax(uint Tax) public onlyOwner{\n        require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\");\n        Taxs[4].BuyTax = Tax;\n    }\n\n    // ============ setLPXAmount FUNCTIONS ============\n    /* \n        @dev setLPXAmount take Amount percentage as a parameter and set this percentage to LPXAmount variable.  \n    */\n    function setLPXAmount(uint Amount) public onlyOwner{\n        Taxs[2].XAmount = Amount;\n    }\n\n    // ============ setInvestmentXAmount FUNCTIONS ============\n    /* \n        @dev setInvestmentXAmount take Amount percentage as a parameter and set this percentage to InvestmentXAmount variable.  \n    */\n    function setInvestmentXAmount(uint Amount) public onlyOwner{\n        Taxs[3].XAmount = Amount;\n    }\n\n    // ============ setMarkettingXAmount FUNCTIONS ============\n    /* \n        @dev setMarkettingXAmount take Amount percentage as a parameter and set this percentage to MarkettingXAmount variable.  \n    */\n    function setMarkettingXAmount(uint Amount) public onlyOwner{\n        Taxs[4].XAmount = Amount;\n    }\n\n    // ============ setMarkettingSwap FUNCTIONS ============\n    /* \n        @dev setMarkettingSwap take bool parameter to open Swap.  \n    */\n    function setMarkettingSwap(bool check) public onlyOwner{\n        isSwap = check;\n    }\n\n    // ============ getBalanceWETh FUNCTIONS ============\n    /* \n        @dev getBalanceWETh this function takes address and return the balance of WBNB.  \n    */\n    function getBalanceWBNB(address contractAddress) view public returns(uint256 Balance){\n        return(WBNBToken.balanceOf(contractAddress));\n    }\n\n    // ============ WithdrawWETH FUNCTIONS ============\n    /* \n        @dev WithdrawWETH this function takes amount and transfer this amount to the connected address \n        but this function is onlyOwner Function(No one can run this function except admin).  \n    */\n    function WithdrawWBNB(address to,uint amount) public onlyOwner{\n        WBNBToken.transfer(to,amount);\n    }\n    function setTaxData(uint SaleT,uint BuyT,uint Amount,uint Typ) public onlyOwner {\n        require(Typ >0 && Typ < 5,\"Typ Must Be (1,2,3,4)\");\n        Taxs[Typ] = Cap(SaleT,BuyT,Amount,0);\n    }\n    // ============ setAddressFee FUNCTIONS ============\n    /* \n        @dev setAddress&Fee this function takes address(_PancakeSwapAddress,_WBNBAddress) and Fee amount(_poolFee). \n        @param Given parameter set according to their variables.\n    */\n    function setAddressFee(address _PancakeSwapAddress,address _WBNBAddress,uint24 _poolFee) public onlyOwner {\n        PancakeSwap = _PancakeSwapAddress;\n        WBNBToken = IERC20(_WBNBAddress);\n        WBNB = _WBNBAddress;\n        poolFee = _poolFee;\n    }\n}\n"
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1976:2089  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2047  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2055  _name = name_ */\n  tag_6\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2050:2055  name_ */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2047  _name */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2055  _name = name_ */\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2072  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2082  _symbol = symbol_ */\n  tag_8\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2075:2082  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2072  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2082  _symbol = symbol_ */\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1976:2089  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_16)\n    /* \"#utility.yul\":14:141   */\ntag_10:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:986   */\ntag_11:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_19\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_19:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_21\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_21\n  tag_10\n  jump\t// in\ntag_21:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_23\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_23\n  tag_10\n  jump\t// in\ntag_23:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_24\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_24:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_25:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_25)\ntag_27:\n    /* \"#utility.yul\":954:955   */\n  0x00\n    /* \"#utility.yul\":932:947   */\n  swap4\n  dup2\n  add\n    /* \"#utility.yul\":928:952   */\n  swap1\n  swap3\n  add\n    /* \"#utility.yul\":921:956   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":936:942   */\n  swap5\n    /* \"#utility.yul\":146:986   */\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":991:1553   */\ntag_3:\n    /* \"#utility.yul\":1090:1096   */\n  0x00\n    /* \"#utility.yul\":1098:1104   */\n  dup1\n    /* \"#utility.yul\":1151:1153   */\n  0x40\n    /* \"#utility.yul\":1139:1148   */\n  dup4\n    /* \"#utility.yul\":1130:1137   */\n  dup6\n    /* \"#utility.yul\":1126:1149   */\n  sub\n    /* \"#utility.yul\":1122:1154   */\n  slt\n    /* \"#utility.yul\":1119:1171   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":1167:1168   */\n  0x00\n    /* \"#utility.yul\":1164:1165   */\n  dup1\n    /* \"#utility.yul\":1157:1169   */\n  revert\n    /* \"#utility.yul\":1119:1171   */\ntag_29:\n    /* \"#utility.yul\":1194:1210   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1259:1273   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1256:1290   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":1286:1287   */\n  0x00\n    /* \"#utility.yul\":1283:1284   */\n  dup1\n    /* \"#utility.yul\":1276:1288   */\n  revert\n    /* \"#utility.yul\":1256:1290   */\ntag_30:\n    /* \"#utility.yul\":1309:1370   */\n  tag_31\n    /* \"#utility.yul\":1362:1369   */\n  dup7\n    /* \"#utility.yul\":1353:1359   */\n  dup4\n    /* \"#utility.yul\":1342:1351   */\n  dup8\n    /* \"#utility.yul\":1338:1360   */\n  add\n    /* \"#utility.yul\":1309:1370   */\n  tag_11\n  jump\t// in\ntag_31:\n    /* \"#utility.yul\":1299:1370   */\n  swap4\n  pop\n    /* \"#utility.yul\":1416:1418   */\n  0x20\n    /* \"#utility.yul\":1405:1414   */\n  dup6\n    /* \"#utility.yul\":1401:1419   */\n  add\n    /* \"#utility.yul\":1395:1420   */\n  mload\n    /* \"#utility.yul\":1379:1420   */\n  swap2\n  pop\n    /* \"#utility.yul\":1445:1447   */\n  dup1\n    /* \"#utility.yul\":1435:1443   */\n  dup3\n    /* \"#utility.yul\":1432:1448   */\n  gt\n    /* \"#utility.yul\":1429:1465   */\n  iszero\n  tag_32\n  jumpi\n    /* \"#utility.yul\":1461:1462   */\n  0x00\n    /* \"#utility.yul\":1458:1459   */\n  dup1\n    /* \"#utility.yul\":1451:1463   */\n  revert\n    /* \"#utility.yul\":1429:1465   */\ntag_32:\n  pop\n    /* \"#utility.yul\":1484:1547   */\n  tag_33\n    /* \"#utility.yul\":1539:1546   */\n  dup6\n    /* \"#utility.yul\":1528:1536   */\n  dup3\n    /* \"#utility.yul\":1517:1526   */\n  dup7\n    /* \"#utility.yul\":1513:1537   */\n  add\n    /* \"#utility.yul\":1484:1547   */\n  tag_11\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":1474:1547   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":991:1553   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1558:1938   */\ntag_12:\n    /* \"#utility.yul\":1637:1638   */\n  0x01\n    /* \"#utility.yul\":1633:1645   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1680:1692   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1701:1762   */\n  tag_35\n  jumpi\n    /* \"#utility.yul\":1755:1759   */\n  0x7f\n    /* \"#utility.yul\":1747:1753   */\n  dup3\n    /* \"#utility.yul\":1743:1760   */\n  and\n    /* \"#utility.yul\":1733:1760   */\n  swap2\n  pop\n    /* \"#utility.yul\":1701:1762   */\ntag_35:\n    /* \"#utility.yul\":1808:1810   */\n  0x20\n    /* \"#utility.yul\":1800:1806   */\n  dup3\n    /* \"#utility.yul\":1797:1811   */\n  lt\n    /* \"#utility.yul\":1777:1795   */\n  dup2\n    /* \"#utility.yul\":1774:1812   */\n  sub\n    /* \"#utility.yul\":1771:1932   */\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1854:1864   */\n  0x4e487b71\n    /* \"#utility.yul\":1849:1852   */\n  0xe0\n    /* \"#utility.yul\":1845:1865   */\n  shl\n    /* \"#utility.yul\":1842:1843   */\n  0x00\n    /* \"#utility.yul\":1835:1866   */\n  mstore\n    /* \"#utility.yul\":1889:1893   */\n  0x22\n    /* \"#utility.yul\":1886:1887   */\n  0x04\n    /* \"#utility.yul\":1879:1894   */\n  mstore\n    /* \"#utility.yul\":1917:1921   */\n  0x24\n    /* \"#utility.yul\":1914:1915   */\n  0x00\n    /* \"#utility.yul\":1907:1922   */\n  revert\n    /* \"#utility.yul\":1771:1932   */\ntag_36:\n  pop\n    /* \"#utility.yul\":1558:1938   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2069:2614   */\ntag_14:\n    /* \"#utility.yul\":2171:2173   */\n  0x1f\n    /* \"#utility.yul\":2166:2169   */\n  dup3\n    /* \"#utility.yul\":2163:2174   */\n  gt\n    /* \"#utility.yul\":2160:2608   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":2207:2208   */\n  0x00\n    /* \"#utility.yul\":2232:2237   */\n  dup2\n    /* \"#utility.yul\":2228:2230   */\n  dup2\n    /* \"#utility.yul\":2221:2238   */\n  mstore\n    /* \"#utility.yul\":2277:2281   */\n  0x20\n    /* \"#utility.yul\":2273:2275   */\n  dup2\n    /* \"#utility.yul\":2263:2282   */\n  keccak256\n    /* \"#utility.yul\":2347:2349   */\n  0x1f\n    /* \"#utility.yul\":2335:2345   */\n  dup6\n    /* \"#utility.yul\":2331:2350   */\n  add\n    /* \"#utility.yul\":2328:2329   */\n  0x05\n    /* \"#utility.yul\":2324:2351   */\n  shr\n    /* \"#utility.yul\":2318:2322   */\n  dup2\n    /* \"#utility.yul\":2314:2352   */\n  add\n    /* \"#utility.yul\":2383:2387   */\n  0x20\n    /* \"#utility.yul\":2371:2381   */\n  dup7\n    /* \"#utility.yul\":2368:2388   */\n  lt\n    /* \"#utility.yul\":2365:2412   */\n  iszero\n  tag_40\n  jumpi\n  pop\n    /* \"#utility.yul\":2406:2410   */\n  dup1\n    /* \"#utility.yul\":2365:2412   */\ntag_40:\n    /* \"#utility.yul\":2461:2463   */\n  0x1f\n    /* \"#utility.yul\":2456:2459   */\n  dup6\n    /* \"#utility.yul\":2452:2464   */\n  add\n    /* \"#utility.yul\":2449:2450   */\n  0x05\n    /* \"#utility.yul\":2445:2465   */\n  shr\n    /* \"#utility.yul\":2439:2443   */\n  dup3\n    /* \"#utility.yul\":2435:2466   */\n  add\n    /* \"#utility.yul\":2425:2466   */\n  swap2\n  pop\n    /* \"#utility.yul\":2516:2598   */\ntag_41:\n    /* \"#utility.yul\":2534:2536   */\n  dup2\n    /* \"#utility.yul\":2527:2532   */\n  dup2\n    /* \"#utility.yul\":2524:2537   */\n  lt\n    /* \"#utility.yul\":2516:2598   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":2579:2596   */\n  dup3\n  dup2\n  sstore\n    /* \"#utility.yul\":2560:2561   */\n  0x01\n    /* \"#utility.yul\":2549:2562   */\n  add\n    /* \"#utility.yul\":2516:2598   */\n  jump(tag_41)\ntag_43:\n    /* \"#utility.yul\":2520:2523   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2160:2608   */\ntag_39:\n    /* \"#utility.yul\":2069:2614   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2790:4142   */\ntag_7:\n    /* \"#utility.yul\":2910:2920   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":2932:2962   */\n  dup2\n  gt\n    /* \"#utility.yul\":2929:2985   */\n  iszero\n  tag_47\n  jumpi\n    /* \"#utility.yul\":2965:2983   */\n  tag_47\n  tag_10\n  jump\t// in\ntag_47:\n    /* \"#utility.yul\":2994:3091   */\n  tag_48\n    /* \"#utility.yul\":3084:3090   */\n  dup2\n    /* \"#utility.yul\":3044:3082   */\n  tag_49\n    /* \"#utility.yul\":3076:3080   */\n  dup5\n    /* \"#utility.yul\":3070:3081   */\n  sload\n    /* \"#utility.yul\":3044:3082   */\n  tag_12\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":3038:3042   */\n  dup5\n    /* \"#utility.yul\":2994:3091   */\n  tag_14\n  jump\t// in\ntag_48:\n    /* \"#utility.yul\":3146:3150   */\n  0x20\n  dup1\n    /* \"#utility.yul\":3210:3212   */\n  0x1f\n    /* \"#utility.yul\":3199:3213   */\n  dup4\n  gt\n    /* \"#utility.yul\":3227:3228   */\n  0x01\n    /* \"#utility.yul\":3222:3885   */\n  dup2\n  eq\n  tag_51\n  jumpi\n    /* \"#utility.yul\":3929:3930   */\n  0x00\n    /* \"#utility.yul\":3946:3952   */\n  dup5\n    /* \"#utility.yul\":3943:4032   */\n  iszero\n  tag_52\n  jumpi\n  pop\n    /* \"#utility.yul\":3998:4017   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":3992:4018   */\n  mload\n    /* \"#utility.yul\":3943:4032   */\ntag_52:\n  not(0x00)\n    /* \"#utility.yul\":2747:2748   */\n  0x03\n    /* \"#utility.yul\":2743:2754   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":2739:2763   */\n  shr\n    /* \"#utility.yul\":2735:2764   */\n  not\n    /* \"#utility.yul\":2725:2765   */\n  and\n    /* \"#utility.yul\":2771:2772   */\n  0x01\n    /* \"#utility.yul\":2767:2778   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":2722:2779   */\n  or\n    /* \"#utility.yul\":4045:4126   */\n  dup6\n  sstore\n    /* \"#utility.yul\":3192:4136   */\n  jump(tag_43)\n    /* \"#utility.yul\":3222:3885   */\ntag_51:\n    /* \"#utility.yul\":2016:2017   */\n  0x00\n    /* \"#utility.yul\":2009:2023   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":2053:2057   */\n  0x20\n    /* \"#utility.yul\":2040:2058   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":3258:3278   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":3376:3612   */\ntag_55:\n    /* \"#utility.yul\":3390:3397   */\n  dup3\n    /* \"#utility.yul\":3387:3388   */\n  dup2\n    /* \"#utility.yul\":3384:3398   */\n  lt\n    /* \"#utility.yul\":3376:3612   */\n  iszero\n  tag_57\n  jumpi\n    /* \"#utility.yul\":3479:3498   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":3473:3499   */\n  mload\n    /* \"#utility.yul\":3458:3500   */\n  dup3\n  sstore\n    /* \"#utility.yul\":3571:3598   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":3539:3540   */\n  0x01\n    /* \"#utility.yul\":3527:3541   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":3406:3425   */\n  dup5\n  add\n    /* \"#utility.yul\":3376:3612   */\n  jump(tag_55)\ntag_57:\n    /* \"#utility.yul\":3380:3383   */\n  pop\n    /* \"#utility.yul\":3640:3646   */\n  dup6\n    /* \"#utility.yul\":3631:3638   */\n  dup3\n    /* \"#utility.yul\":3628:3647   */\n  lt\n    /* \"#utility.yul\":3625:3826   */\n  iszero\n  tag_58\n  jumpi\n    /* \"#utility.yul\":3701:3720   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":3695:3721   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":3784:3785   */\n  0x03\n    /* \"#utility.yul\":3780:3794   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":3796:3799   */\n  0xf8\n    /* \"#utility.yul\":3776:3800   */\n  and\n    /* \"#utility.yul\":3772:3809   */\n  shr\n    /* \"#utility.yul\":3768:3810   */\n  not\n    /* \"#utility.yul\":3753:3811   */\n  and\n    /* \"#utility.yul\":3738:3812   */\n  dup2\n  sstore\n    /* \"#utility.yul\":3625:3826   */\ntag_58:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":3872:3873   */\n  0x01\n    /* \"#utility.yul\":3856:3870   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":3852:3874   */\n  add\n    /* \"#utility.yul\":3839:3875   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":2790:4142   */\n  jump\t// out\ntag_16:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1169:1183   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1162:1184   */\n      iszero\n        /* \"#utility.yul\":1144:1185   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1132:1134   */\n      0x20\n        /* \"#utility.yul\":1117:1135   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1004:1191   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3329:3341  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1342:1367   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1330:1332   */\n      0x20\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1196:1373   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3173:3175  18 */\n      0x12\n        /* \"#utility.yul\":1853:1889   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1841:1843   */\n      0x20\n        /* \"#utility.yul\":1826:1844   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1711:1895   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5871:6105  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3506:3524  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3480:3487  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3506:3524  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2365:2467  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6592:7019  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3727:3916  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2208:2221  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2240:2245  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2233:2245  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4514:4518  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4600  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4584:4591  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4593:4599  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4576  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4600  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4617:4621  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4610:4621  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_70:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5317:5321  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5411  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5389:5393  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5404:5410  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5388  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5411  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5448  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5431:5435  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5437:5439  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5441:5447  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5430  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5448  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5465:5469  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5871:6105  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5959:5963  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6077  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6029:6036  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6066:6076  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6063  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6029:6036  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6047  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6063  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6076  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6021  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6077  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2365:2467  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2421:2434  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2453:2460  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2446:2460  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6592:7019  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6685:6689  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6685:6689  bool */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6791  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6783:6790  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6775  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6791  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6739:6791  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6829:6844  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6809:6825  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6809:6844  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3170:3172   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3152:3173   */\n      mstore\n        /* \"#utility.yul\":3209:3211   */\n      0x25\n        /* \"#utility.yul\":3189:3207   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3182:3212   */\n      mstore\n        /* \"#utility.yul\":3248:3282   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3228:3246   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3221:3283   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3299:3317   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3292:3327   */\n      mstore\n        /* \"#utility.yul\":3344:3363   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6980  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6929:6934  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6936:6943  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6964:6979  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6945:6961  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6945:6979  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6928  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6980  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3727:3916  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3806:3810  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3888  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3877:3879  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3881:3887  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3869  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3888  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4063:4070  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4100  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4116  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10874  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10635:10654  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3576:3578   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3558:3579   */\n      mstore\n        /* \"#utility.yul\":3615:3617   */\n      0x24\n        /* \"#utility.yul\":3595:3613   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3588:3618   */\n      mstore\n        /* \"#utility.yul\":3654:3688   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3634:3652   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3627:3689   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3705:3723   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3698:3732   */\n      mstore\n        /* \"#utility.yul\":3749:3768   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3374:3774   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10713:10734  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3981:3983   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3963:3984   */\n      mstore\n        /* \"#utility.yul\":4020:4022   */\n      0x22\n        /* \"#utility.yul\":4000:4018   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3993:4023   */\n      mstore\n        /* \"#utility.yul\":4059:4093   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4039:4057   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4032:4094   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4110:4128   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4103:4135   */\n      mstore\n        /* \"#utility.yul\":4152:4171   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3779:4177   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10802  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10795  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10802  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10811  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10820  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1342:1367   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10874  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11155:11596  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11285:11309  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11337  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11322:11327  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11329:11336  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11321  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11337  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11285:11337  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11351:11367  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11351:11388  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11347:11590  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11438  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11412:11428  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11412:11438  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4384:4386   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4366:4387   */\n      mstore\n        /* \"#utility.yul\":4423:4425   */\n      0x1d\n        /* \"#utility.yul\":4403:4421   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4396:4426   */\n      mstore\n        /* \"#utility.yul\":4462:4493   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4442:4460   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4435:4494   */\n      mstore\n        /* \"#utility.yul\":4511:4529   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4182:4535   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11565  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11523:11528  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11530:11537  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11558:11564  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11539:11555  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11539:11564  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11522  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11565  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11275:11596  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11155:11596  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7473:8291  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7599:7617  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4742:4744   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4724:4745   */\n      mstore\n        /* \"#utility.yul\":4781:4783   */\n      0x25\n        /* \"#utility.yul\":4761:4779   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4754:4784   */\n      mstore\n        /* \"#utility.yul\":4820:4854   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4800:4818   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4793:4855   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4871:4889   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4864:4899   */\n      mstore\n        /* \"#utility.yul\":4916:4935   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4540:4941   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7677:7693  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5148:5150   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5130:5151   */\n      mstore\n        /* \"#utility.yul\":5187:5189   */\n      0x23\n        /* \"#utility.yul\":5167:5185   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5160:5190   */\n      mstore\n        /* \"#utility.yul\":5226:5260   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5206:5224   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5199:5261   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5277:5295   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5270:5303   */\n      mstore\n        /* \"#utility.yul\":5320:5339   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4946:5345   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7815:7830  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7793:7812  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7815:7830  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7848:7869  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5552:5554   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5534:5555   */\n      mstore\n        /* \"#utility.yul\":5591:5593   */\n      0x26\n        /* \"#utility.yul\":5571:5589   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5564:5594   */\n      mstore\n        /* \"#utility.yul\":5630:5664   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5610:5628   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5603:5665   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5681:5699   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5674:5710   */\n      mstore\n        /* \"#utility.yul\":5727:5746   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5350:5752   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7961  _balances[from] */\n      dup5\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7955  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7961  _balances[from] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7964:7984  fromBalance - amount */\n      dup8\n      dup8\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7984  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8174  _balances[to] */\n      swap4\n      dup8\n      and\n      dup1\n      dup4\n      mstore\n      swap2\n      dup5\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8184  _balances[to] += amount */\n      dup1\n      sload\n      dup8\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      swap3\n      mload\n        /* \"#utility.yul\":1342:1367   */\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8174  _balances[to] */\n      swap1\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1315:1333   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8284  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":12180:12301  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:562   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_143:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_143)\n    tag_145:\n        /* \"#utility.yul\":298:301   */\n      pop\n        /* \"#utility.yul\":483:484   */\n      0x00\n        /* \"#utility.yul\":478:480   */\n      0x40\n        /* \"#utility.yul\":469:475   */\n      dup3\n        /* \"#utility.yul\":458:467   */\n      dup7\n        /* \"#utility.yul\":454:476   */\n      add\n        /* \"#utility.yul\":450:481   */\n      add\n        /* \"#utility.yul\":443:485   */\n      mstore\n        /* \"#utility.yul\":553:555   */\n      0x40\n        /* \"#utility.yul\":546:548   */\n      0x1f\n        /* \"#utility.yul\":542:549   */\n      not\n        /* \"#utility.yul\":537:539   */\n      0x1f\n        /* \"#utility.yul\":529:535   */\n      dup4\n        /* \"#utility.yul\":525:540   */\n      add\n        /* \"#utility.yul\":521:550   */\n      and\n        /* \"#utility.yul\":510:519   */\n      dup6\n        /* \"#utility.yul\":506:551   */\n      add\n        /* \"#utility.yul\":502:556   */\n      add\n        /* \"#utility.yul\":494:556   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":14:562   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":567:740   */\n    tag_140:\n        /* \"#utility.yul\":635:655   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":684:715   */\n      dup2\n      and\n        /* \"#utility.yul\":674:716   */\n      dup2\n      eq\n        /* \"#utility.yul\":664:734   */\n      tag_147\n      jumpi\n        /* \"#utility.yul\":730:731   */\n      0x00\n        /* \"#utility.yul\":727:728   */\n      dup1\n        /* \"#utility.yul\":720:732   */\n      revert\n        /* \"#utility.yul\":664:734   */\n    tag_147:\n        /* \"#utility.yul\":567:740   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":745:999   */\n    tag_21:\n        /* \"#utility.yul\":813:819   */\n      0x00\n        /* \"#utility.yul\":821:827   */\n      dup1\n        /* \"#utility.yul\":874:876   */\n      0x40\n        /* \"#utility.yul\":862:871   */\n      dup4\n        /* \"#utility.yul\":853:860   */\n      dup6\n        /* \"#utility.yul\":849:872   */\n      sub\n        /* \"#utility.yul\":845:877   */\n      slt\n        /* \"#utility.yul\":842:894   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":890:891   */\n      0x00\n        /* \"#utility.yul\":887:888   */\n      dup1\n        /* \"#utility.yul\":880:892   */\n      revert\n        /* \"#utility.yul\":842:894   */\n    tag_149:\n        /* \"#utility.yul\":913:942   */\n      tag_150\n        /* \"#utility.yul\":932:941   */\n      dup4\n        /* \"#utility.yul\":913:942   */\n      tag_140\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":903:942   */\n      swap5\n        /* \"#utility.yul\":989:991   */\n      0x20\n        /* \"#utility.yul\":974:992   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":961:993   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":745:999   */\n      jump\t// out\n        /* \"#utility.yul\":1378:1706   */\n    tag_31:\n        /* \"#utility.yul\":1455:1461   */\n      0x00\n        /* \"#utility.yul\":1463:1469   */\n      dup1\n        /* \"#utility.yul\":1471:1477   */\n      0x00\n        /* \"#utility.yul\":1524:1526   */\n      0x60\n        /* \"#utility.yul\":1512:1521   */\n      dup5\n        /* \"#utility.yul\":1503:1510   */\n      dup7\n        /* \"#utility.yul\":1499:1522   */\n      sub\n        /* \"#utility.yul\":1495:1527   */\n      slt\n        /* \"#utility.yul\":1492:1544   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1540:1541   */\n      0x00\n        /* \"#utility.yul\":1537:1538   */\n      dup1\n        /* \"#utility.yul\":1530:1542   */\n      revert\n        /* \"#utility.yul\":1492:1544   */\n    tag_154:\n        /* \"#utility.yul\":1563:1592   */\n      tag_155\n        /* \"#utility.yul\":1582:1591   */\n      dup5\n        /* \"#utility.yul\":1563:1592   */\n      tag_140\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1553:1592   */\n      swap3\n      pop\n        /* \"#utility.yul\":1611:1649   */\n      tag_156\n        /* \"#utility.yul\":1645:1647   */\n      0x20\n        /* \"#utility.yul\":1634:1643   */\n      dup6\n        /* \"#utility.yul\":1630:1648   */\n      add\n        /* \"#utility.yul\":1611:1649   */\n      tag_140\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1601:1649   */\n      swap2\n      pop\n        /* \"#utility.yul\":1696:1698   */\n      0x40\n        /* \"#utility.yul\":1685:1694   */\n      dup5\n        /* \"#utility.yul\":1681:1699   */\n      add\n        /* \"#utility.yul\":1668:1700   */\n      calldataload\n        /* \"#utility.yul\":1658:1700   */\n      swap1\n      pop\n        /* \"#utility.yul\":1378:1706   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1900:2086   */\n    tag_44:\n        /* \"#utility.yul\":1959:1965   */\n      0x00\n        /* \"#utility.yul\":2012:2014   */\n      0x20\n        /* \"#utility.yul\":2000:2009   */\n      dup3\n        /* \"#utility.yul\":1991:1998   */\n      dup5\n        /* \"#utility.yul\":1987:2010   */\n      sub\n        /* \"#utility.yul\":1983:2015   */\n      slt\n        /* \"#utility.yul\":1980:2032   */\n      iszero\n      tag_159\n      jumpi\n        /* \"#utility.yul\":2028:2029   */\n      0x00\n        /* \"#utility.yul\":2025:2026   */\n      dup1\n        /* \"#utility.yul\":2018:2030   */\n      revert\n        /* \"#utility.yul\":1980:2032   */\n    tag_159:\n        /* \"#utility.yul\":2051:2080   */\n      tag_160\n        /* \"#utility.yul\":2070:2079   */\n      dup3\n        /* \"#utility.yul\":2051:2080   */\n      tag_140\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2041:2080   */\n      swap4\n        /* \"#utility.yul\":1900:2086   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2091:2351   */\n    tag_60:\n        /* \"#utility.yul\":2159:2165   */\n      0x00\n        /* \"#utility.yul\":2167:2173   */\n      dup1\n        /* \"#utility.yul\":2220:2222   */\n      0x40\n        /* \"#utility.yul\":2208:2217   */\n      dup4\n        /* \"#utility.yul\":2199:2206   */\n      dup6\n        /* \"#utility.yul\":2195:2218   */\n      sub\n        /* \"#utility.yul\":2191:2223   */\n      slt\n        /* \"#utility.yul\":2188:2240   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":2236:2237   */\n      0x00\n        /* \"#utility.yul\":2233:2234   */\n      dup1\n        /* \"#utility.yul\":2226:2238   */\n      revert\n        /* \"#utility.yul\":2188:2240   */\n    tag_162:\n        /* \"#utility.yul\":2259:2288   */\n      tag_163\n        /* \"#utility.yul\":2278:2287   */\n      dup4\n        /* \"#utility.yul\":2259:2288   */\n      tag_140\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2249:2288   */\n      swap2\n      pop\n        /* \"#utility.yul\":2307:2345   */\n      tag_164\n        /* \"#utility.yul\":2341:2343   */\n      0x20\n        /* \"#utility.yul\":2330:2339   */\n      dup5\n        /* \"#utility.yul\":2326:2344   */\n      add\n        /* \"#utility.yul\":2307:2345   */\n      tag_140\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2297:2345   */\n      swap1\n      pop\n        /* \"#utility.yul\":2091:2351   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2356:2736   */\n    tag_65:\n        /* \"#utility.yul\":2435:2436   */\n      0x01\n        /* \"#utility.yul\":2431:2443   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2478:2490   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2499:2560   */\n      tag_166\n      jumpi\n        /* \"#utility.yul\":2553:2557   */\n      0x7f\n        /* \"#utility.yul\":2545:2551   */\n      dup3\n        /* \"#utility.yul\":2541:2558   */\n      and\n        /* \"#utility.yul\":2531:2558   */\n      swap2\n      pop\n        /* \"#utility.yul\":2499:2560   */\n    tag_166:\n        /* \"#utility.yul\":2606:2608   */\n      0x20\n        /* \"#utility.yul\":2598:2604   */\n      dup3\n        /* \"#utility.yul\":2595:2609   */\n      lt\n        /* \"#utility.yul\":2575:2593   */\n      dup2\n        /* \"#utility.yul\":2572:2610   */\n      sub\n        /* \"#utility.yul\":2569:2730   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2652:2662   */\n      0x4e487b71\n        /* \"#utility.yul\":2647:2650   */\n      0xe0\n        /* \"#utility.yul\":2643:2663   */\n      shl\n        /* \"#utility.yul\":2640:2641   */\n      0x00\n        /* \"#utility.yul\":2633:2664   */\n      mstore\n        /* \"#utility.yul\":2687:2691   */\n      0x22\n        /* \"#utility.yul\":2684:2685   */\n      0x04\n        /* \"#utility.yul\":2677:2692   */\n      mstore\n        /* \"#utility.yul\":2715:2719   */\n      0x24\n        /* \"#utility.yul\":2712:2713   */\n      0x00\n        /* \"#utility.yul\":2705:2720   */\n      revert\n        /* \"#utility.yul\":2569:2730   */\n    tag_167:\n      pop\n        /* \"#utility.yul\":2356:2736   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2741:2963   */\n    tag_88:\n        /* \"#utility.yul\":2806:2815   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":2827:2837   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":2824:2957   */\n      iszero\n      tag_70\n      jumpi\n        /* \"#utility.yul\":2879:2889   */\n      0x4e487b71\n        /* \"#utility.yul\":2874:2877   */\n      0xe0\n        /* \"#utility.yul\":2870:2890   */\n      shl\n        /* \"#utility.yul\":2867:2868   */\n      0x00\n        /* \"#utility.yul\":2860:2891   */\n      mstore\n        /* \"#utility.yul\":2914:2918   */\n      0x11\n        /* \"#utility.yul\":2911:2912   */\n      0x04\n        /* \"#utility.yul\":2904:2919   */\n      mstore\n        /* \"#utility.yul\":2942:2946   */\n      0x24\n        /* \"#utility.yul\":2939:2940   */\n      0x00\n        /* \"#utility.yul\":2932:2947   */\n      revert\n\n    auxdata: 0xa2646970667358221220cf947a218c6a645dd9a9252b1bd943bfc8e91a7af80a050e3055122c393d924b64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_157": {
									"entryPoint": null,
									"id": 157,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 112,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 287,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 453,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 536,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 393,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 90,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4144:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:776:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:9",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:9"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:9"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:9"
															},
															"nodeType": "YulIf",
															"src": "220:55:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:9"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:9",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:9"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:9"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:9"
															},
															"nodeType": "YulIf",
															"src": "353:36:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:9"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:9"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:9",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:9",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:9"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:9"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:9",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:9"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:9"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:9"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:9"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:9"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:9"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:9"
															},
															"nodeType": "YulIf",
															"src": "536:72:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:9",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:9",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:9"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:9"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:9"
															},
															"nodeType": "YulIf",
															"src": "698:53:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:9"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:9"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:9"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:9",
																"statements": []
															},
															"src": "779:133:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "936:6:9"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "944:2:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "932:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "932:15:9"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "949:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "928:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "928:24:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "954:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "921:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "921:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "965:15:9",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "974:6:9"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "965:5:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:9",
														"type": ""
													}
												],
												"src": "146:840:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1109:444:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1155:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1164:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1167:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1157:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1157:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1157:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1130:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1139:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1126:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1126:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1151:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1122:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1122:32:9"
															},
															"nodeType": "YulIf",
															"src": "1119:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1180:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1194:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1194:16:9"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1184:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1219:28:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1237:2:9",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1241:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1233:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1233:10:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1245:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1229:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1229:18:9"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1223:2:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1274:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1283:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1286:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1276:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1276:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1276:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1262:6:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1270:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1259:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1259:14:9"
															},
															"nodeType": "YulIf",
															"src": "1256:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1299:71:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1342:9:9"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1353:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1338:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1338:22:9"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1362:7:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1309:28:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1309:61:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1299:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1379:41:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1405:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1416:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1401:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1401:18:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1395:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1395:25:9"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1383:8:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1449:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1458:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1461:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1451:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1451:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1451:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1435:8:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1445:2:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1432:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1432:16:9"
															},
															"nodeType": "YulIf",
															"src": "1429:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1474:73:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1517:9:9"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1528:8:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1513:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1513:24:9"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1539:7:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1484:28:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1484:63:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1474:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1067:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1078:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1090:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1098:6:9",
														"type": ""
													}
												],
												"src": "991:562:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1613:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1623:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1637:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1640:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1633:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1633:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1623:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1684:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1690:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1680:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1680:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1658:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1731:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1733:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1747:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1755:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1743:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1743:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1733:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1711:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1704:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:26:9"
															},
															"nodeType": "YulIf",
															"src": "1701:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1821:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1842:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1854:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1845:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1845:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1835:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1835:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1835:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1886:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1889:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1879:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1879:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1879:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1914:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1917:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1907:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1907:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1907:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1777:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1800:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1808:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1797:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1797:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1774:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1774:38:9"
															},
															"nodeType": "YulIf",
															"src": "1771:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1593:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1602:6:9",
														"type": ""
													}
												],
												"src": "1558:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1999:65:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2016:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "2019:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2009:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2009:14:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2009:14:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2032:26:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2050:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2053:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2040:9:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2040:18:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "2032:4:9"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "1982:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1990:4:9",
														"type": ""
													}
												],
												"src": "1943:121:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2150:464:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2183:425:9",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2197:11:9",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2207:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "2201:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2228:2:9"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "2232:5:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2221:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2221:17:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2221:17:9"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2251:31:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2273:2:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2277:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "2263:9:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2263:19:9"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "2255:4:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2295:57:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "2318:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2328:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "2335:10:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2347:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2331:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2331:19:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "2324:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2324:27:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2314:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2314:38:9"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "2299:11:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2389:23:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2391:19:9",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "2406:4:9"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "2391:11:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "2371:10:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2383:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "2368:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2368:20:9"
																		},
																		"nodeType": "YulIf",
																		"src": "2365:47:9"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2425:41:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "2439:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2449:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "2456:3:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2461:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2452:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2452:12:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "2445:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2445:20:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2435:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2435:31:9"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "2429:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2479:24:9",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "2492:11:9"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "2483:5:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2577:21:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "2586:5:9"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "2593:2:9"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "2579:6:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2579:17:9"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "2579:17:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2527:5:9"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "2534:2:9"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "2524:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2524:13:9"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "2538:26:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2540:22:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "2553:5:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2560:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2549:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2549:13:9"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "2540:5:9"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "2520:3:9",
																			"statements": []
																		},
																		"src": "2516:82:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2166:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2171:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2163:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2163:11:9"
															},
															"nodeType": "YulIf",
															"src": "2160:448:9"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2122:5:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2129:3:9",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "2134:10:9",
														"type": ""
													}
												],
												"src": "2069:545:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2704:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2714:65:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "2729:4:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2747:1:9",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "2750:3:9"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "2743:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2743:11:9"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2760:1:9",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "2756:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2756:6:9"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "2739:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2739:24:9"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2735:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2735:29:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2725:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2725:40:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2771:1:9",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "2774:3:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2767:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2767:11:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2722:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2722:57:9"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "2714:4:9"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2681:4:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2687:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "2695:4:9",
														"type": ""
													}
												],
												"src": "2619:166:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2886:1256:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2896:24:9",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2916:3:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2910:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2910:10:9"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "2900:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2963:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2965:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2965:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2965:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "2935:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2951:2:9",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2955:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "2947:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2947:10:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2959:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2943:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2943:18:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2932:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2932:30:9"
															},
															"nodeType": "YulIf",
															"src": "2929:56:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "3038:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "3076:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "3070:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3070:11:9"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "3044:25:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3044:38:9"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "3084:6:9"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "2994:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2994:97:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2994:97:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3100:18:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3117:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "3104:9:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3127:23:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3146:4:9",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "3131:11:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3159:24:9",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "3172:11:9"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "3159:9:9"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3229:656:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3243:35:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "3262:6:9"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3274:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "3270:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3270:7:9"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "3258:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3258:20:9"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "3247:7:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3291:49:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3335:4:9"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "3305:29:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3305:35:9"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "3295:6:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3353:10:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3362:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "3357:1:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3440:172:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3465:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "3483:3:9"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "3488:9:9"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "3479:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "3479:19:9"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "3473:5:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3473:26:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "3458:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3458:42:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3458:42:9"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "3517:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3531:6:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3539:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3527:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3527:14:9"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "3517:6:9"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "3558:40:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "3575:9:9"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "3586:11:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3571:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3571:27:9"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "3558:9:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "3387:1:9"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "3390:7:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "3384:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3384:14:9"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "3399:28:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "3401:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "3410:1:9"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "3413:11:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3406:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3406:19:9"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "3401:1:9"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "3380:3:9",
																					"statements": []
																				},
																				"src": "3376:236:9"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3660:166:9",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "3678:43:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "3705:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "3710:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "3701:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3701:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "3695:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3695:26:9"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "3682:9:9",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3745:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "3757:9:9"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "3784:1:9",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "3787:6:9"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "3780:3:9"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "3780:14:9"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "3796:3:9",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "3776:3:9"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "3776:24:9"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "3806:1:9",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "3802:3:9"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "3802:6:9"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "3772:3:9"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "3772:37:9"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "3768:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "3768:42:9"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "3753:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3753:58:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "3738:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3738:74:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3738:74:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "3631:7:9"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "3640:6:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "3628:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3628:19:9"
																				},
																				"nodeType": "YulIf",
																				"src": "3625:201:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3846:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "3860:1:9",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "3863:6:9"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "3856:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3856:14:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3872:1:9",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3852:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3852:22:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "3839:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3839:36:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3839:36:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3222:663:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3227:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3902:234:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3916:14:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3929:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "3920:5:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3965:67:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "3983:35:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "4002:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "4007:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "3998:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3998:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "3992:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3992:26:9"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "3983:5:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "3946:6:9"
																				},
																				"nodeType": "YulIf",
																				"src": "3943:89:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "4052:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "4111:5:9"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "4118:6:9"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "4058:52:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4058:67:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "4045:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4045:81:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4045:81:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3894:242:9",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "3202:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3210:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3199:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3199:14:9"
															},
															"nodeType": "YulSwitch",
															"src": "3192:944:9"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "2871:4:9",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2877:3:9",
														"type": ""
													}
												],
												"src": "2790:1352:9"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b4638038062000b4683398101604081905262000034916200011f565b600362000042838262000218565b50600462000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61085280620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c3919061069c565b60405180910390f35b6100df6100da366004610706565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610730565b61024c565b604051601281526020016100c3565b6100df610131366004610706565b610270565b6100f361014436600461076c565b6001600160a01b031660009081526020819052604090205490565b6100b6610292565b6100df610175366004610706565b6102a1565b6100df610188366004610706565b610321565b6100f361019b36600461078e565b61032f565b6060600380546101af906107c1565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c1565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d91906107fb565b61035a565b6060600480546101af906107c1565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260208190526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36104f2565b600060208083528351808285015260005b818110156106c9578581018301518582016040015282016106ad565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070157600080fd5b919050565b6000806040838503121561071957600080fd5b610722836106ea565b946020939093013593505050565b60008060006060848603121561074557600080fd5b61074e846106ea565b925061075c602085016106ea565b9150604084013590509250925092565b60006020828403121561077e57600080fd5b610787826106ea565b9392505050565b600080604083850312156107a157600080fd5b6107aa836106ea565b91506107b8602084016106ea565b90509250929050565b600181811c908216806107d557607f821691505b6020821081036107f557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea2646970667358221220cf947a218c6a645dd9a9252b1bd943bfc8e91a7af80a050e3055122c393d924b64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB46 CODESIZE SUB DUP1 PUSH3 0xB46 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x3 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x852 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x730 JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x76C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x292 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x78E JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7C1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x25A DUP6 DUP3 DUP6 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x265 DUP6 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x283 DUP4 DUP4 PUSH2 0x32F JUMP JUMPDEST PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x7FB JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x265 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A DUP5 DUP5 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30B JUMP JUMPDEST PUSH2 0x4F2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6C9 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6AD JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x701 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x722 DUP4 PUSH2 0x6EA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74E DUP5 PUSH2 0x6EA JUMP JUMPDEST SWAP3 POP PUSH2 0x75C PUSH1 0x20 DUP6 ADD PUSH2 0x6EA JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x787 DUP3 PUSH2 0x6EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7AA DUP4 PUSH2 0x6EA JUMP JUMPDEST SWAP2 POP PUSH2 0x7B8 PUSH1 0x20 DUP5 ADD PUSH2 0x6EA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7D5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF SWAP5 PUSH27 0x218C6A645DD9A9252B1BD943BFC8E91A7AF80A050E3055122C393D SWAP3 0x4B PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "1401:11610:1:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2042:5;:13;2050:5;2042;:13;:::i;:::-;-1:-1:-1;2065:7:1;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;1401:11610;;14:127:9;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:9;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:9;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:9:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:9;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:9;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:9;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:9;;;3992:26;3943:89;-1:-1:-1;;2747:1:9;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:9;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:9;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:9;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:9:o;:::-;1401:11610:1;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_698": {
									"entryPoint": null,
									"id": 698,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_633": {
									"entryPoint": 858,
									"id": 633,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_687": {
									"entryPoint": null,
									"id": 687,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_858": {
									"entryPoint": null,
									"id": 858,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_676": {
									"entryPoint": 1150,
									"id": 676,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_459": {
									"entryPoint": 1272,
									"id": 459,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_254": {
									"entryPoint": 815,
									"id": 254,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_279": {
									"entryPoint": 562,
									"id": 279,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_211": {
									"entryPoint": null,
									"id": 211,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_187": {
									"entryPoint": null,
									"id": 187,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_382": {
									"entryPoint": 673,
									"id": 382,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_341": {
									"entryPoint": 624,
									"id": 341,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_167": {
									"entryPoint": 416,
									"id": 167,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_177": {
									"entryPoint": 658,
									"id": 177,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_197": {
									"entryPoint": null,
									"id": 197,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_312": {
									"entryPoint": 588,
									"id": 312,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_236": {
									"entryPoint": 801,
									"id": 236,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1770,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1900,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1934,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1840,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1798,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1692,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2043,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1985,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5754:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:427:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:9",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:9",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:9"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:9"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:9",
																"statements": []
															},
															"src": "294:140:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "458:9:9"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "469:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "454:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "454:22:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "478:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "450:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "450:31:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "483:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "443:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "443:42:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "443:42:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "494:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "529:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "537:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "525:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "525:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "546:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "542:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "542:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "521:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "521:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "506:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "506:45:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "553:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:9",
														"type": ""
													}
												],
												"src": "14:548:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "616:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "626:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "648:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "635:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "635:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "626:5:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "718:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "727:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "730:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "720:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "720:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "720:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "677:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "688:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "703:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "708:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "699:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "699:11:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "712:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "695:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "695:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "684:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "684:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "674:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "674:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "667:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "667:50:9"
															},
															"nodeType": "YulIf",
															"src": "664:70:9"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "595:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "606:5:9",
														"type": ""
													}
												],
												"src": "567:173:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "832:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "878:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "887:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "890:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "880:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "880:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "880:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "853:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "862:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "849:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "849:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "874:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "845:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "845:32:9"
															},
															"nodeType": "YulIf",
															"src": "842:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "903:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "932:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "913:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "913:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "903:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "951:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "978:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "989:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "974:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "974:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "961:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "961:32:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "951:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "790:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "801:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "813:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "821:6:9",
														"type": ""
													}
												],
												"src": "745:254:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1099:92:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1109:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1121:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1132:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1117:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1117:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1109:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1151:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1176:6:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1169:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1169:14:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1162:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1162:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1144:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1144:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1144:41:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1090:4:9",
														"type": ""
													}
												],
												"src": "1004:187:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1297:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1307:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1319:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1330:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1315:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1315:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1307:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1349:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1360:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1342:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1342:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1342:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1266:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1277:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1288:4:9",
														"type": ""
													}
												],
												"src": "1196:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1482:224:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1528:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1537:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1540:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1530:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1530:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1530:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1503:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1512:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1499:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1499:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1524:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1495:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1495:32:9"
															},
															"nodeType": "YulIf",
															"src": "1492:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1553:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1582:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1563:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1563:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1553:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1601:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1634:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1645:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1630:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1630:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1611:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1611:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1601:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1658:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1685:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1696:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1681:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1681:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:32:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1658:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1432:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1443:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1455:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1463:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1471:6:9",
														"type": ""
													}
												],
												"src": "1378:328:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1808:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1818:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1830:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1841:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1826:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1826:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1818:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1860:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1875:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1883:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1871:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1871:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1853:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1853:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1853:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1777:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1788:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1799:4:9",
														"type": ""
													}
												],
												"src": "1711:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1970:116:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2016:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2025:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2028:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2018:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2018:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2018:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1991:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2000:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1987:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1987:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2012:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1983:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1983:32:9"
															},
															"nodeType": "YulIf",
															"src": "1980:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2041:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2070:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2051:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2051:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2041:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1936:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1947:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1959:6:9",
														"type": ""
													}
												],
												"src": "1900:186:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2178:173:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2224:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2233:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2236:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2226:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2226:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2226:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2199:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2208:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2195:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2195:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2220:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2191:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2191:32:9"
															},
															"nodeType": "YulIf",
															"src": "2188:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2249:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2278:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2259:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2259:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2249:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2297:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2330:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2341:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2326:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2326:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2307:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2307:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2297:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2136:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2147:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2159:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2167:6:9",
														"type": ""
													}
												],
												"src": "2091:260:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2411:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2421:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2435:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2438:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2431:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2431:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2421:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2452:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2482:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2488:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2478:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2478:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2456:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2529:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2531:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2545:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2553:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2541:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2541:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2531:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2509:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2502:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2502:26:9"
															},
															"nodeType": "YulIf",
															"src": "2499:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2619:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2640:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2647:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2652:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2643:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2643:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2633:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2633:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2633:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2684:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2687:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2677:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2677:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2677:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2712:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2715:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2705:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2705:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2705:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2575:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2598:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2606:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2595:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2595:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2572:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2572:38:9"
															},
															"nodeType": "YulIf",
															"src": "2569:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2391:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2400:6:9",
														"type": ""
													}
												],
												"src": "2356:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2789:174:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2799:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2810:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2813:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2806:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2806:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2799:3:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2846:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2867:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2874:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2879:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2870:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2870:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2860:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2860:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2860:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2911:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2914:4:9",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2904:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2904:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2904:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2939:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2942:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2932:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2932:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2932:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2830:1:9"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "2833:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2827:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2827:10:9"
															},
															"nodeType": "YulIf",
															"src": "2824:133:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2772:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2775:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2781:3:9",
														"type": ""
													}
												],
												"src": "2741:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3142:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3159:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3170:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3152:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3152:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3152:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3193:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3204:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3189:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3189:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3209:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3182:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3182:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3182:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3232:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3243:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3228:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3228:18:9"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3248:34:9",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3221:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3221:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3221:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3303:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3314:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3299:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3299:18:9"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3319:7:9",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3292:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3292:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3292:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3336:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3348:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3359:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3344:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3336:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3119:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3133:4:9",
														"type": ""
													}
												],
												"src": "2968:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:226:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3565:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3576:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3558:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3558:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3558:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3599:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3610:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3595:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3595:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3615:2:9",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3588:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3588:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3588:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3638:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3649:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3634:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3634:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3654:34:9",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3627:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3627:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3627:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3709:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3720:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3705:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3705:18:9"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3725:6:9",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3698:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3698:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3698:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3741:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3753:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3764:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3749:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3749:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3741:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3525:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3539:4:9",
														"type": ""
													}
												],
												"src": "3374:400:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3953:224:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3970:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3981:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3963:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3963:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3963:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4004:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4015:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4000:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4000:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4020:2:9",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3993:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3993:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3993:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4043:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4054:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4039:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4039:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4059:34:9",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4032:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4032:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4032:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4114:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4125:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4110:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4110:18:9"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4130:4:9",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4103:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4103:32:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4103:32:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4144:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4156:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4167:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4152:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4152:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4144:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3930:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3944:4:9",
														"type": ""
													}
												],
												"src": "3779:398:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4356:179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4373:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4384:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4366:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4366:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4366:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4407:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4403:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4403:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4423:2:9",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4396:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4396:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4396:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4446:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4457:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4442:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4442:18:9"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4462:31:9",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4435:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4435:59:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4435:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4503:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4515:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4526:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4511:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4511:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4503:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4333:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4347:4:9",
														"type": ""
													}
												],
												"src": "4182:353:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4714:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4731:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4742:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4724:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4724:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4724:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4765:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4776:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4761:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4761:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4781:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4754:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4754:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4754:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4804:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4815:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4800:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4800:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4820:34:9",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4793:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4793:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4793:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4875:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4886:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4871:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4871:18:9"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4891:7:9",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4864:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4864:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4864:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4908:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4920:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4931:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4916:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4908:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4691:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4705:4:9",
														"type": ""
													}
												],
												"src": "4540:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5120:225:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5137:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5148:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5130:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5130:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5130:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5171:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5182:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5167:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5167:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5187:2:9",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5160:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5160:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5160:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5210:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5221:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5206:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5206:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5226:34:9",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5199:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5199:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5199:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5281:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5292:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5277:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5277:18:9"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5297:5:9",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5270:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5270:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5270:33:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5312:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5324:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5335:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5320:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5320:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5312:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5097:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5111:4:9",
														"type": ""
													}
												],
												"src": "4946:399:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5524:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5541:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5552:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5534:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5534:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5534:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5575:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5586:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5571:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5571:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5591:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5564:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5564:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5564:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5614:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5625:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5610:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5610:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5630:34:9",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5603:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5603:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5603:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5685:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5696:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5681:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5681:18:9"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5701:8:9",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5674:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5674:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5674:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5719:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5731:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5742:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5727:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5727:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5719:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5501:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5515:4:9",
														"type": ""
													}
												],
												"src": "5350:402:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c3919061069c565b60405180910390f35b6100df6100da366004610706565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610730565b61024c565b604051601281526020016100c3565b6100df610131366004610706565b610270565b6100f361014436600461076c565b6001600160a01b031660009081526020819052604090205490565b6100b6610292565b6100df610175366004610706565b6102a1565b6100df610188366004610706565b610321565b6100f361019b36600461078e565b61032f565b6060600380546101af906107c1565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c1565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d91906107fb565b61035a565b6060600480546101af906107c1565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260208190526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36104f2565b600060208083528351808285015260005b818110156106c9578581018301518582016040015282016106ad565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070157600080fd5b919050565b6000806040838503121561071957600080fd5b610722836106ea565b946020939093013593505050565b60008060006060848603121561074557600080fd5b61074e846106ea565b925061075c602085016106ea565b9150604084013590509250925092565b60006020828403121561077e57600080fd5b610787826106ea565b9392505050565b600080604083850312156107a157600080fd5b6107aa836106ea565b91506107b8602084016106ea565b90509250929050565b600181811c908216806107d557607f821691505b6020821081036107f557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea2646970667358221220cf947a218c6a645dd9a9252b1bd943bfc8e91a7af80a050e3055122c393d924b64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x730 JUMP JUMPDEST PUSH2 0x24C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x76C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x292 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x706 JUMP JUMPDEST PUSH2 0x321 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x78E JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C1 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7C1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x35A JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x25A DUP6 DUP3 DUP6 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x265 DUP6 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x283 DUP4 DUP4 PUSH2 0x32F JUMP JUMPDEST PUSH2 0x28D SWAP2 SWAP1 PUSH2 0x7FB JUMP JUMPDEST PUSH2 0x35A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7C1 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AF DUP3 DUP7 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x314 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x265 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48A DUP5 DUP5 PUSH2 0x32F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30B JUMP JUMPDEST PUSH2 0x4F2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x35A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x636 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6C9 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6AD JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x701 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x722 DUP4 PUSH2 0x6EA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x745 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74E DUP5 PUSH2 0x6EA JUMP JUMPDEST SWAP3 POP PUSH2 0x75C PUSH1 0x20 DUP6 ADD PUSH2 0x6EA JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x787 DUP3 PUSH2 0x6EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7AA DUP4 PUSH2 0x6EA JUMP JUMPDEST SWAP2 POP PUSH2 0x7B8 PUSH1 0x20 DUP5 ADD PUSH2 0x6EA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7D5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x7F5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x246 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF SWAP5 PUSH27 0x218C6A645DD9A9252B1BD943BFC8E91A7AF80A050E3055122C393D SWAP3 0x4B PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "1401:11610:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:9;;1162:22;1144:41;;1132:2;1117:18;4431:197:1;1004:187:9;3242:106:1;3329:12;;3242:106;;;1342:25:9;;;1330:2;1315:18;3242:106:1;1196:177:9;5190:286:1;;;;;;:::i;:::-;;:::i;3091:91::-;;;3173:2;1853:36:9;;1841:2;1826:18;3091:91:1;1711:184:9;5871:234:1;;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:1;3480:7;3506:18;;;;;;;;;;;;3406:125;2365:102;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;;:::i;2154:98::-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:5;4568:32:1;719:10:5;4584:7:1;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:5;5373:38:1;5389:4;719:10:5;5404:6:1;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:1;;5190:286;-1:-1:-1;;;;5190:286:1:o;5871:234::-;5959:4;719:10:5;6013:64:1;719:10:5;6029:7:1;6066:10;6038:25;719:10:5;6029:7:1;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;6685:4;719:10:5;6685:4:1;6766:25;719:10:5;6783:7:1;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:1;;3170:2:9;6801:85:1;;;3152:21:9;3209:2;3189:18;;;3182:30;3248:34;3228:18;;;3221:62;-1:-1:-1;;;3299:18:9;;;3292:35;3344:19;;6801:85:1;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:5;3860:28:1;719:10:5;3877:2:1;3881:6;3860:9;:28::i;3974:149::-;-1:-1:-1;;;;;4089:18:1;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;10504:370::-;-1:-1:-1;;;;;10635:19:1;;10627:68;;;;-1:-1:-1;;;10627:68:1;;3576:2:9;10627:68:1;;;3558:21:9;3615:2;3595:18;;;3588:30;3654:34;3634:18;;;3627:62;-1:-1:-1;;;3705:18:9;;;3698:34;3749:19;;10627:68:1;3374:400:9;10627:68:1;-1:-1:-1;;;;;10713:21:1;;10705:68;;;;-1:-1:-1;;;10705:68:1;;3981:2:9;10705:68:1;;;3963:21:9;4020:2;4000:18;;;3993:30;4059:34;4039:18;;;4032:62;-1:-1:-1;;;4110:18:9;;;4103:32;4152:19;;10705:68:1;3779:398:9;10705:68:1;-1:-1:-1;;;;;10784:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1342:25:9;;;10835:32:1;;1315:18:9;10835:32:1;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:1;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:1;;4384:2:9;11404:68:1;;;4366:21:9;4423:2;4403:18;;;4396:30;4462:31;4442:18;;;4435:59;4511:18;;11404:68:1;4182:353:9;11404:68:1;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:1;;7591:68;;;;-1:-1:-1;;;7591:68:1;;4742:2:9;7591:68:1;;;4724:21:9;4781:2;4761:18;;;4754:30;4820:34;4800:18;;;4793:62;-1:-1:-1;;;4871:18:9;;;4864:35;4916:19;;7591:68:1;4540:401:9;7591:68:1;-1:-1:-1;;;;;7677:16:1;;7669:64;;;;-1:-1:-1;;;7669:64:1;;5148:2:9;7669:64:1;;;5130:21:9;5187:2;5167:18;;;5160:30;5226:34;5206:18;;;5199:62;-1:-1:-1;;;5277:18:9;;;5270:33;5320:19;;7669:64:1;4946:399:9;7669:64:1;-1:-1:-1;;;;;7815:15:1;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:1;;5552:2:9;7840:72:1;;;5534:21:9;5591:2;5571:18;;;5564:30;5630:34;5610:18;;;5603:62;-1:-1:-1;;;5681:18:9;;;5674:36;5727:19;;7840:72:1;5350:402:9;7840:72:1;-1:-1:-1;;;;;7946:15:1;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1342:25:9;;;8161:13:1;;8210:26;;1315:18:9;8210:26:1;;;;;;;8247:37;12180:121;14:548:9;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:9;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:9:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1900:186::-;1959:6;2012:2;2000:9;1991:7;1987:23;1983:32;1980:52;;;2028:1;2025;2018:12;1980:52;2051:29;2070:9;2051:29;:::i;:::-;2041:39;1900:186;-1:-1:-1;;;1900:186:9:o;2091:260::-;2159:6;2167;2220:2;2208:9;2199:7;2195:23;2191:32;2188:52;;;2236:1;2233;2226:12;2188:52;2259:29;2278:9;2259:29;:::i;:::-;2249:39;;2307:38;2341:2;2330:9;2326:18;2307:38;:::i;:::-;2297:48;;2091:260;;;;;:::o;2356:380::-;2435:1;2431:12;;;;2478;;;2499:61;;2553:4;2545:6;2541:17;2531:27;;2499:61;2606:2;2598:6;2595:14;2575:18;2572:38;2569:161;;2652:10;2647:3;2643:20;2640:1;2633:31;2687:4;2684:1;2677:15;2715:4;2712:1;2705:15;2569:161;;2356:380;;;:::o;2741:222::-;2806:9;;;2827:10;;;2824:133;;;2879:10;2874:3;2870:20;2867:1;2860:31;2914:4;2911:1;2904:15;2942:4;2939:1;2932:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "426000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24628",
								"balanceOf(address)": "2562",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51138",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "CODESIZE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 1976,
									"end": 2089,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "tag",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2047,
									"name": "PUSH",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 2050,
									"end": 2055,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2047,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 2042,
									"end": 2055,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2065,
									"end": 2072,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2075,
									"end": 2082,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2072,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 2065,
									"end": 2082,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 146,
									"end": 986,
									"name": "tag",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 146,
									"end": 986,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 369,
									"end": 387,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 9,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 588,
									"end": 606,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 954,
									"end": 955,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 932,
									"end": 947,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 932,
									"end": 947,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 932,
									"end": 947,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 928,
									"end": 952,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 928,
									"end": 952,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 928,
									"end": 952,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 921,
									"end": 956,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 921,
									"end": 956,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 921,
									"end": 956,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 921,
									"end": 956,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 936,
									"end": 942,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 146,
									"end": 986,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 986,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "tag",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1090,
									"end": 1096,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1098,
									"end": 1104,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1151,
									"end": 1153,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1139,
									"end": 1148,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1130,
									"end": 1137,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1126,
									"end": 1149,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1122,
									"end": 1154,
									"name": "SLT",
									"source": 9
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1167,
									"end": 1168,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1164,
									"end": 1165,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1157,
									"end": 1169,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "tag",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 1119,
									"end": 1171,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1194,
									"end": 1210,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1194,
									"end": 1210,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1259,
									"end": 1273,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1259,
									"end": 1273,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1259,
									"end": 1273,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1286,
									"end": 1287,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1283,
									"end": 1284,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1288,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "tag",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 1256,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 1362,
									"end": 1369,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1353,
									"end": 1359,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1342,
									"end": 1351,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 1338,
									"end": 1360,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 1309,
									"end": 1370,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "tag",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 1309,
									"end": 1370,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1299,
									"end": 1370,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1299,
									"end": 1370,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1416,
									"end": 1418,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1405,
									"end": 1414,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1401,
									"end": 1419,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1395,
									"end": 1420,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1379,
									"end": 1420,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1379,
									"end": 1420,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1445,
									"end": 1447,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1435,
									"end": 1443,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1432,
									"end": 1448,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1461,
									"end": 1462,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1458,
									"end": 1459,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1451,
									"end": 1463,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "tag",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1465,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "33"
								},
								{
									"begin": 1539,
									"end": 1546,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1528,
									"end": 1536,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1517,
									"end": 1526,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1513,
									"end": 1537,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 1484,
									"end": 1547,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "tag",
									"source": 9,
									"value": "33"
								},
								{
									"begin": 1484,
									"end": 1547,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1547,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1547,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1474,
									"end": 1547,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 991,
									"end": 1553,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "tag",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1637,
									"end": 1638,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 1633,
									"end": 1645,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1680,
									"end": 1692,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1680,
									"end": 1692,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1680,
									"end": 1692,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1755,
									"end": 1759,
									"name": "PUSH",
									"source": 9,
									"value": "7F"
								},
								{
									"begin": 1747,
									"end": 1753,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1743,
									"end": 1760,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1733,
									"end": 1760,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1733,
									"end": 1760,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "tag",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 1701,
									"end": 1762,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1808,
									"end": 1810,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1800,
									"end": 1806,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1797,
									"end": 1811,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1777,
									"end": 1795,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1774,
									"end": 1812,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "36"
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1854,
									"end": 1864,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 1849,
									"end": 1852,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 1845,
									"end": 1865,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1842,
									"end": 1843,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1835,
									"end": 1866,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1889,
									"end": 1893,
									"name": "PUSH",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 1886,
									"end": 1887,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1894,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1917,
									"end": 1921,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 1914,
									"end": 1915,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1907,
									"end": 1922,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "tag",
									"source": 9,
									"value": "36"
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1771,
									"end": 1932,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1558,
									"end": 1938,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1558,
									"end": 1938,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "tag",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2171,
									"end": 2173,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 2166,
									"end": 2169,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2163,
									"end": 2174,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2207,
									"end": 2208,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2232,
									"end": 2237,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2228,
									"end": 2230,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2221,
									"end": 2238,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2277,
									"end": 2281,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2273,
									"end": 2275,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2263,
									"end": 2282,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 2347,
									"end": 2349,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 2335,
									"end": 2345,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2331,
									"end": 2350,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2328,
									"end": 2329,
									"name": "PUSH",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 2324,
									"end": 2351,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2318,
									"end": 2322,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2314,
									"end": 2352,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2383,
									"end": 2387,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2371,
									"end": 2381,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 2368,
									"end": 2388,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2406,
									"end": 2410,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "tag",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2365,
									"end": 2412,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2461,
									"end": 2463,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 2456,
									"end": 2459,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2452,
									"end": 2464,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2449,
									"end": 2450,
									"name": "PUSH",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 2445,
									"end": 2465,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2439,
									"end": 2443,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2435,
									"end": 2466,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2425,
									"end": 2466,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2425,
									"end": 2466,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "tag",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2534,
									"end": 2536,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2527,
									"end": 2532,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2524,
									"end": 2537,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "43"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2579,
									"end": 2596,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2579,
									"end": 2596,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2579,
									"end": 2596,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2560,
									"end": 2561,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2549,
									"end": 2562,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "tag",
									"source": 9,
									"value": "43"
								},
								{
									"begin": 2516,
									"end": 2598,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2520,
									"end": 2523,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2520,
									"end": 2523,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2520,
									"end": 2523,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "tag",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 2160,
									"end": 2608,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2069,
									"end": 2614,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2069,
									"end": 2614,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "tag",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2910,
									"end": 2920,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2910,
									"end": 2920,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2932,
									"end": 2962,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2932,
									"end": 2962,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 2929,
									"end": 2985,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2929,
									"end": 2985,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 2929,
									"end": 2985,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "10"
								},
								{
									"begin": 2965,
									"end": 2983,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "tag",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 2965,
									"end": 2983,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 3084,
									"end": 3090,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 3076,
									"end": 3080,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3070,
									"end": 3081,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "12"
								},
								{
									"begin": 3044,
									"end": 3082,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "tag",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 3044,
									"end": 3082,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3038,
									"end": 3042,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 2994,
									"end": 3091,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "tag",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 2994,
									"end": 3091,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3146,
									"end": 3150,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3146,
									"end": 3150,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3210,
									"end": 3212,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 3199,
									"end": 3213,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3199,
									"end": 3213,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3227,
									"end": 3228,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "51"
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3929,
									"end": 3930,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3946,
									"end": 3952,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "52"
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3998,
									"end": 4017,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3998,
									"end": 4017,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3998,
									"end": 4017,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3992,
									"end": 4018,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "tag",
									"source": 9,
									"value": "52"
								},
								{
									"begin": 3943,
									"end": 4032,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2747,
									"end": 2748,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 2743,
									"end": 2754,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 2743,
									"end": 2754,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2743,
									"end": 2754,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2739,
									"end": 2763,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2735,
									"end": 2764,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 2725,
									"end": 2765,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 2771,
									"end": 2772,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2767,
									"end": 2778,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2767,
									"end": 2778,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2767,
									"end": 2778,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2722,
									"end": 2779,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 4045,
									"end": 4126,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 4045,
									"end": 4126,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 3192,
									"end": 4136,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "43"
								},
								{
									"begin": 3192,
									"end": 4136,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "tag",
									"source": 9,
									"value": "51"
								},
								{
									"begin": 3222,
									"end": 3885,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2016,
									"end": 2017,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2009,
									"end": 2023,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2053,
									"end": 2057,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2040,
									"end": 2058,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2040,
									"end": 2058,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3258,
									"end": 3278,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 3258,
									"end": 3278,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3258,
									"end": 3278,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "tag",
									"source": 9,
									"value": "55"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3390,
									"end": 3397,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3387,
									"end": 3388,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3384,
									"end": 3398,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "57"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3479,
									"end": 3498,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 3479,
									"end": 3498,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 3479,
									"end": 3498,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3473,
									"end": 3499,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3458,
									"end": 3500,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3458,
									"end": 3500,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3571,
									"end": 3598,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 3539,
									"end": 3540,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3527,
									"end": 3541,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3406,
									"end": 3425,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3406,
									"end": 3425,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "55"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "tag",
									"source": 9,
									"value": "57"
								},
								{
									"begin": 3376,
									"end": 3612,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3380,
									"end": 3383,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3640,
									"end": 3646,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3631,
									"end": 3638,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3628,
									"end": 3647,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "58"
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3701,
									"end": 3720,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 3701,
									"end": 3720,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3701,
									"end": 3720,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3695,
									"end": 3721,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3784,
									"end": 3785,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 3780,
									"end": 3794,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 3780,
									"end": 3794,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3780,
									"end": 3794,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 3796,
									"end": 3799,
									"name": "PUSH",
									"source": 9,
									"value": "F8"
								},
								{
									"begin": 3776,
									"end": 3800,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3772,
									"end": 3809,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 3768,
									"end": 3810,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 3753,
									"end": 3811,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3738,
									"end": 3812,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3738,
									"end": 3812,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "tag",
									"source": 9,
									"value": "58"
								},
								{
									"begin": 3625,
									"end": 3826,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3872,
									"end": 3873,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3856,
									"end": 3870,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3856,
									"end": 3870,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3856,
									"end": 3870,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 3852,
									"end": 3874,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3839,
									"end": 3875,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3839,
									"end": 3875,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2790,
									"end": 4142,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "tag",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 2790,
									"end": 4142,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cf947a218c6a645dd9a9252b1bd943bfc8e91a7af80a050e3055122c393d924b64736f6c63430008130033",
									".code": [
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "39509351"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "70A08231"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "95D89B41"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "A457C2D7"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "A9059CBB"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "DD62ED3E"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "6FDDE03"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "95EA7B3"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "18160DDD"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "23B872DD"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "313CE567"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2154,
											"end": 2252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 2154,
											"end": 2252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4431,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4431,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1169,
											"end": 1183,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1162,
											"end": 1184,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1144,
											"end": 1185,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1132,
											"end": 1134,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1117,
											"end": 1135,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1004,
											"end": 1191,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1330,
											"end": 1332,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1196,
											"end": 1373,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 5190,
											"end": 5476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5190,
											"end": 5476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3173,
											"end": 3175,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1889,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1841,
											"end": 1843,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1826,
											"end": 1844,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 1711,
											"end": 1895,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 5871,
											"end": 6105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5871,
											"end": 6105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3406,
											"end": 3531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3487,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2365,
											"end": 2467,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 6592,
											"end": 7019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6592,
											"end": 7019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 3727,
											"end": 3916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 3727,
											"end": 3916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3974,
											"end": 4123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3974,
											"end": 4123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2208,
											"end": 2221,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2240,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2233,
											"end": 2245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2233,
											"end": 2245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4514,
											"end": 4518,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4584,
											"end": 4591,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4593,
											"end": 4599,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4568,
											"end": 4576,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 4568,
											"end": 4600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4617,
											"end": 4621,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4610,
											"end": 4621,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4610,
											"end": 4621,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4610,
											"end": 4621,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5317,
											"end": 5321,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5389,
											"end": 5393,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5404,
											"end": 5410,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5373,
											"end": 5388,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 5373,
											"end": 5411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5431,
											"end": 5435,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5437,
											"end": 5439,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5441,
											"end": 5447,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5421,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 5421,
											"end": 5448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5465,
											"end": 5469,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5465,
											"end": 5469,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5190,
											"end": 5476,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5959,
											"end": 5963,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6013,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6066,
											"end": 6076,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 6038,
											"end": 6063,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "88"
										},
										{
											"begin": 6038,
											"end": 6076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6013,
											"end": 6021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6013,
											"end": 6077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2421,
											"end": 2434,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2453,
											"end": 2460,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 2446,
											"end": 2460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6685,
											"end": 6689,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6685,
											"end": 6689,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6783,
											"end": 6790,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6766,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 6766,
											"end": 6791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6739,
											"end": 6791,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6739,
											"end": 6791,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6829,
											"end": 6844,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6809,
											"end": 6825,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6809,
											"end": 6844,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 6809,
											"end": 6844,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3170,
											"end": 3172,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3152,
											"end": 3173,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3209,
											"end": 3211,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3189,
											"end": 3207,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3182,
											"end": 3212,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3248,
											"end": 3282,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3228,
											"end": 3246,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3221,
											"end": 3283,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3299,
											"end": 3317,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3292,
											"end": 3327,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3344,
											"end": 3363,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3344,
											"end": 3363,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 6980,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6929,
											"end": 6934,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6936,
											"end": 6943,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6964,
											"end": 6979,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6945,
											"end": 6961,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6945,
											"end": 6979,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 6928,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 6920,
											"end": 6980,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3806,
											"end": 3810,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3860,
											"end": 3888,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3877,
											"end": 3879,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3881,
											"end": 3887,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3860,
											"end": 3869,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 3860,
											"end": 3888,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4063,
											"end": 4070,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4100,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10635,
											"end": 10654,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10635,
											"end": 10654,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3576,
											"end": 3578,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3615,
											"end": 3617,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3588,
											"end": 3618,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3654,
											"end": 3688,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3627,
											"end": 3689,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3698,
											"end": 3732,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3749,
											"end": 3768,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3749,
											"end": 3768,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3374,
											"end": 3774,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3981,
											"end": 3983,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3963,
											"end": 3984,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4020,
											"end": 4022,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4000,
											"end": 4018,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3993,
											"end": 4023,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4059,
											"end": 4093,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4057,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4032,
											"end": 4094,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4110,
											"end": 4128,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4103,
											"end": 4135,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4152,
											"end": 4171,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4152,
											"end": 4171,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3779,
											"end": 4177,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10795,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11285,
											"end": 11309,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 11322,
											"end": 11327,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11329,
											"end": 11336,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11312,
											"end": 11321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 11312,
											"end": 11337,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11285,
											"end": 11337,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11285,
											"end": 11337,
											"name": "POP",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11351,
											"end": 11367,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11351,
											"end": 11388,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 11347,
											"end": 11590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11347,
											"end": 11590,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11432,
											"end": 11438,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11412,
											"end": 11428,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11412,
											"end": 11438,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 11412,
											"end": 11438,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4384,
											"end": 4386,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4366,
											"end": 4387,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4423,
											"end": 4425,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4396,
											"end": 4426,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4462,
											"end": 4493,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4442,
											"end": 4460,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4435,
											"end": 4494,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4511,
											"end": 4529,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4511,
											"end": 4529,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4182,
											"end": 4535,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11523,
											"end": 11528,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11530,
											"end": 11537,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11558,
											"end": 11564,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11539,
											"end": 11555,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11539,
											"end": 11564,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11514,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 11514,
											"end": 11565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "tag",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11275,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7473,
											"end": 8291,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 7473,
											"end": 8291,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7599,
											"end": 7617,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7599,
											"end": 7617,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4742,
											"end": 4744,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4745,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4781,
											"end": 4783,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4754,
											"end": 4784,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4820,
											"end": 4854,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4800,
											"end": 4818,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 4855,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4871,
											"end": 4889,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4864,
											"end": 4899,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4916,
											"end": 4935,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 4916,
											"end": 4935,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4540,
											"end": 4941,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7677,
											"end": 7693,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7677,
											"end": 7693,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5148,
											"end": 5150,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5130,
											"end": 5151,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5187,
											"end": 5189,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5167,
											"end": 5185,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5160,
											"end": 5190,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5226,
											"end": 5260,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5206,
											"end": 5224,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5199,
											"end": 5261,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5277,
											"end": 5295,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5270,
											"end": 5303,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5320,
											"end": 5339,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5320,
											"end": 5339,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4946,
											"end": 5345,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 7812,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5552,
											"end": 5554,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5534,
											"end": 5555,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5591,
											"end": 5593,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5571,
											"end": 5589,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5564,
											"end": 5594,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5630,
											"end": 5664,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5610,
											"end": 5628,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5603,
											"end": 5665,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5674,
											"end": 5710,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5727,
											"end": 5746,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 5727,
											"end": 5746,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5350,
											"end": 5752,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "tag",
											"source": 1,
											"value": "132"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7955,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7984,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7984,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1342,
											"end": 1367,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1315,
											"end": 1333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 8247,
											"end": 8284,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 298,
											"end": 301,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 483,
											"end": 484,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 478,
											"end": 480,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 458,
											"end": 467,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 454,
											"end": 476,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 450,
											"end": 481,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 443,
											"end": 485,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 553,
											"end": 555,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 546,
											"end": 548,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 542,
											"end": 549,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 537,
											"end": 539,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 529,
											"end": 535,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 525,
											"end": 540,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 521,
											"end": 550,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 506,
											"end": 551,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 502,
											"end": 556,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 494,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 14,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "tag",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 567,
											"end": 740,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 635,
											"end": 655,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 635,
											"end": 655,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 684,
											"end": 715,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 684,
											"end": 715,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 674,
											"end": 716,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 674,
											"end": 716,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 664,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 730,
											"end": 731,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 727,
											"end": 728,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 720,
											"end": 732,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 664,
											"end": 734,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 664,
											"end": 734,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 567,
											"end": 740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 745,
											"end": 999,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 745,
											"end": 999,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 813,
											"end": 819,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 821,
											"end": 827,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 874,
											"end": 876,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 862,
											"end": 871,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 853,
											"end": 860,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 849,
											"end": 872,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 845,
											"end": 877,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 842,
											"end": 894,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 842,
											"end": 894,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 890,
											"end": 891,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 887,
											"end": 888,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 880,
											"end": 892,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 842,
											"end": 894,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 842,
											"end": 894,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 932,
											"end": 941,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 913,
											"end": 942,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 913,
											"end": 942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 913,
											"end": 942,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 913,
											"end": 942,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 903,
											"end": 942,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 989,
											"end": 991,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 974,
											"end": 992,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 974,
											"end": 992,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 961,
											"end": 993,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 961,
											"end": 993,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 745,
											"end": 999,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1455,
											"end": 1461,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1463,
											"end": 1469,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1471,
											"end": 1477,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1524,
											"end": 1526,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1512,
											"end": 1521,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1503,
											"end": 1510,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1495,
											"end": 1527,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1540,
											"end": 1541,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1537,
											"end": 1538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1530,
											"end": 1542,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 1492,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 1563,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 1563,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1553,
											"end": 1592,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 1645,
											"end": 1647,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1634,
											"end": 1643,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1630,
											"end": 1648,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 1611,
											"end": 1649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 1611,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 1649,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1696,
											"end": 1698,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1685,
											"end": 1694,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1681,
											"end": 1699,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1668,
											"end": 1700,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1658,
											"end": 1700,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1378,
											"end": 1706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1959,
											"end": 1965,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2012,
											"end": 2014,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2000,
											"end": 2009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1991,
											"end": 1998,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1987,
											"end": 2010,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1983,
											"end": 2015,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2028,
											"end": 2029,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2018,
											"end": 2030,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 1980,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2070,
											"end": 2079,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2051,
											"end": 2080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 2051,
											"end": 2080,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2041,
											"end": 2080,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 2086,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1900,
											"end": 2086,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2159,
											"end": 2165,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2167,
											"end": 2173,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2220,
											"end": 2222,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2208,
											"end": 2217,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2206,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2195,
											"end": 2218,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2191,
											"end": 2223,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2236,
											"end": 2237,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2234,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2226,
											"end": 2238,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 2188,
											"end": 2240,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2278,
											"end": 2287,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2259,
											"end": 2288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 2259,
											"end": 2288,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2249,
											"end": 2288,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2249,
											"end": 2288,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2330,
											"end": 2339,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2326,
											"end": 2344,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2307,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 2307,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2345,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2297,
											"end": 2345,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2091,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2435,
											"end": 2436,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 2431,
											"end": 2443,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2478,
											"end": 2490,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2557,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 2545,
											"end": 2551,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2531,
											"end": 2558,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2531,
											"end": 2558,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 2499,
											"end": 2560,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2606,
											"end": 2608,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2598,
											"end": 2604,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2595,
											"end": 2609,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2575,
											"end": 2593,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2572,
											"end": 2610,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2652,
											"end": 2662,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2643,
											"end": 2663,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2633,
											"end": 2664,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2687,
											"end": 2691,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 2684,
											"end": 2685,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2677,
											"end": 2692,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2715,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2712,
											"end": 2713,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2705,
											"end": 2720,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2569,
											"end": 2730,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2736,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2741,
											"end": 2963,
											"name": "tag",
											"source": 9,
											"value": "88"
										},
										{
											"begin": 2741,
											"end": 2963,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2806,
											"end": 2815,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2827,
											"end": 2837,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 2824,
											"end": 2957,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2879,
											"end": 2889,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 2874,
											"end": 2877,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2870,
											"end": 2890,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2867,
											"end": 2868,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2860,
											"end": 2891,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2914,
											"end": 2918,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 2911,
											"end": 2912,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2904,
											"end": 2919,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2942,
											"end": 2946,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 2939,
											"end": 2940,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2932,
											"end": 2947,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
								"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
								"contracts/SwapToken/FRGST.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 128,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 134,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 136,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 140,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c0f62d3d5bef22b5ca00cc3903e7de6152cb68d2d22401a463f373cda54c00f\",\"dweb:/ipfs/QmSfzjZux7LC7NW2f7rjCXTHeFMUCWERqDkhpCTBy7kxTe\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 128,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 134,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 136,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 138,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 140,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"IUniswapV3SwapCallback": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Callback for IUniswapV3PoolActions#swap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Any contract that calls IUniswapV3PoolActions#swap must implement this interface",
						"version": 1
					}
				}
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ISwapRouter": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountIn",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOutMinimum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactInputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes",
											"name": "path",
											"type": "bytes"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutput",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "tokenIn",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "tokenOut",
											"type": "address"
										},
										{
											"internalType": "uint24",
											"name": "fee",
											"type": "uint24"
										},
										{
											"internalType": "address",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountOut",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amountInMaximum",
											"type": "uint256"
										},
										{
											"internalType": "uint160",
											"name": "sqrtPriceLimitX96",
											"type": "uint160"
										}
									],
									"internalType": "struct ISwapRouter.ExactOutputSingleParams",
									"name": "params",
									"type": "tuple"
								}
							],
							"name": "exactOutputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount0Delta",
									"type": "int256"
								},
								{
									"internalType": "int256",
									"name": "amount1Delta",
									"type": "int256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "uniswapV3SwapCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"
								},
								"returns": {
									"amountOut": "The amount of the received token"
								}
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"params": {
									"params": "The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"params": {
									"params": "The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"
								},
								"returns": {
									"amountIn": "The amount of the input token"
								}
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"details": "In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",
								"params": {
									"amount0Delta": "The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",
									"amount1Delta": "The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",
									"data": "Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
								}
							}
						},
						"title": "Router token swapping functionality",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"exactInput((bytes,address,uint256,uint256,uint256))": "c04b8d59",
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "414bf389",
							"exactOutput((bytes,address,uint256,uint256,uint256))": "f28c0498",
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": "db3e2198",
							"uniswapV3SwapCallback(int256,int256,bytes)": "fa461e33"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"exactInput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another along the specified path"
							},
							"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps `amountIn` of one token for as much as possible of another token"
							},
							"exactOutput((bytes,address,uint256,uint256,uint256))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"
							},
							"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))": {
								"notice": "Swaps as little as possible of one token for `amountOut` of another token"
							},
							"uniswapV3SwapCallback(int256,int256,bytes)": {
								"notice": "Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."
							}
						},
						"notice": "Functions for swapping tokens via Uniswap V3",
						"version": 1
					}
				}
			},
			"contracts/SwapToken/FRGST.sol": {
				"Token": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "LPTransferAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "PancakeSwap",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "Taxs",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "SellTax",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "BuyTax",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "XAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "currentAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WBNB",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "WBNBToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Wallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "WhiteList",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "WithdrawWBNB",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "contractAddress",
									"type": "address"
								}
							],
							"name": "getBalanceWBNB",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "Balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isSwap",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "linkToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolFee",
							"outputs": [
								{
									"internalType": "uint24",
									"name": "",
									"type": "uint24"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "routerAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_PancakeSwapAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_WBNBAddress",
									"type": "address"
								},
								{
									"internalType": "uint24",
									"name": "_poolFee",
									"type": "uint24"
								}
							],
							"name": "setAddressFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setInvestmentBuyTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setInvestmentSellTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Amount",
									"type": "uint256"
								}
							],
							"name": "setInvestmentXAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setLPBuyTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setLPSellTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Amount",
									"type": "uint256"
								}
							],
							"name": "setLPXAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setMarkettingBuyTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setMarkettingSellTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"name": "setMarkettingSwap",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Amount",
									"type": "uint256"
								}
							],
							"name": "setMarkettingXAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setReflectionBuyTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "Tax",
									"type": "uint256"
								}
							],
							"name": "setReflectionSellTax",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "SaleT",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "BuyT",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Typ",
									"type": "uint256"
								}
							],
							"name": "setTaxData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "recipientAddresss",
									"type": "address"
								}
							],
							"name": "swapExactInputSingle",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "swapRouter",
							"outputs": [
								{
									"internalType": "contract ISwapRouter",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "whiteList",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SwapToken/FRGST.sol\":369:12293  contract Token is ERC20, Ownable,ERC20Burnable {... */\n  mstore(0x40, 0xa0)\n    /* \"contracts/SwapToken/FRGST.sol\":765:807  0xE592427A0AEce92De3Edee1F18E0157C05861564 */\n  0xe592427a0aece92de3edee1f18e0157c05861564\n    /* \"contracts/SwapToken/FRGST.sol\":813:881  ISwapRouter public immutable swapRouter = ISwapRouter(routerAddress) */\n  0x80\n  mstore\n    /* \"contracts/SwapToken/FRGST.sol\":1170:1396  constructor() ERC20(\"Froggies Token\", \"FRGST\") {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1976:2089  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0e\n  dup2\n  mstore\n  0x20\n  add\n  shl(0x91, 0x233937b3b3b4b2b9902a37b5b2b7)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xda, 0x119491d4d5)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2050:2055  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2047  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2055  _name = name_ */\n  swap1\n  dup2\n  tag_6\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2072  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2082  _symbol = symbol_ */\n  tag_8\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2075:2082  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2072  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2082  _symbol = symbol_ */\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1976:2089  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_11\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_12)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_11:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_13\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_10:\n    /* \"contracts/SwapToken/FRGST.sol\":1227:1280  _mint(msg.sender, 100000000000000 * 10 ** decimals()) */\n  tag_15\n    /* \"contracts/SwapToken/FRGST.sol\":1233:1243  msg.sender */\n  caller\n    /* \"contracts/SwapToken/FRGST.sol\":1263:1279  10 ** decimals() */\n  tag_18\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3173:3175  18 */\n  0x12\n    /* \"contracts/SwapToken/FRGST.sol\":1263:1265  10 */\n  0x0a\n    /* \"contracts/SwapToken/FRGST.sol\":1263:1279  10 ** decimals() */\n  tag_19\n  jump\t// in\ntag_18:\n    /* \"contracts/SwapToken/FRGST.sol\":1245:1279  100000000000000 * 10 ** decimals() */\n  tag_20\n  swap1\n    /* \"contracts/SwapToken/FRGST.sol\":1245:1260  100000000000000 */\n  0x5af3107a4000\n    /* \"contracts/SwapToken/FRGST.sol\":1245:1279  100000000000000 * 10 ** decimals() */\n  tag_21\n  jump\t// in\ntag_20:\n    /* \"contracts/SwapToken/FRGST.sol\":1227:1232  _mint */\n  tag_22\n    /* \"contracts/SwapToken/FRGST.sol\":1227:1280  _mint(msg.sender, 100000000000000 * 10 ** decimals()) */\n  jump\t// in\ntag_15:\n    /* \"contracts/SwapToken/FRGST.sol\":1309:1313  WBNB */\n  sload(0x09)\n    /* \"contracts/SwapToken/FRGST.sol\":1290:1299  WBNBToken */\n  0x0d\n    /* \"contracts/SwapToken/FRGST.sol\":1290:1314  WBNBToken = IERC20(WBNB) */\n  dup1\n  sload\n    /* \"contracts/SwapToken/FRGST.sol\":1309:1313  WBNB */\n  0x01000000\n  swap1\n  swap3\n  div\n  sub(shl(0xa0, 0x01), 0x01)\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"contracts/SwapToken/FRGST.sol\":1290:1314  WBNBToken = IERC20(WBNB) */\n  swap3\n  dup4\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/SwapToken/FRGST.sol\":1324:1330  Wallet */\n  0x06\n    /* \"contracts/SwapToken/FRGST.sol\":1324:1346  Wallet = address(this) */\n  dup1\n  sload\n    /* \"contracts/SwapToken/FRGST.sol\":1341:1345  this */\n  address\n    /* \"contracts/SwapToken/FRGST.sol\":1324:1346  Wallet = address(this) */\n  swap1\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/SwapToken/FRGST.sol\":1356:1365  linkToken */\n  0x0c\n    /* \"contracts/SwapToken/FRGST.sol\":1356:1389  linkToken = IERC20(address(this)) */\n  dup1\n  sload\n  swap1\n  swap3\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/SwapToken/FRGST.sol\":369:12293  contract Token is ERC20, Ownable,ERC20Burnable {... */\n  jump(tag_49)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_12:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n  swap1\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_13:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  0x05\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8567:9102  function _mint(address account, uint256 amount) internal virtual {... */\ntag_22:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8650:8671  account != address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8642:8707  require(account != address(0), \"ERC20: mint to the zero address\") */\n  tag_28\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":4625:4627   */\n  0x20\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8642:8707  require(account != address(0), \"ERC20: mint to the zero address\") */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":4607:4628   */\n  mstore\n    /* \"#utility.yul\":4664:4666   */\n  0x1f\n    /* \"#utility.yul\":4644:4662   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":4637:4667   */\n  mstore\n    /* \"#utility.yul\":4703:4736   */\n  0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n    /* \"#utility.yul\":4683:4701   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":4676:4737   */\n  mstore\n    /* \"#utility.yul\":4754:4772   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8642:8707  require(account != address(0), \"ERC20: mint to the zero address\") */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_28:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8794:8800  amount */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8778:8790  _totalSupply */\n  0x02\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8778:8800  _totalSupply += amount */\n  dup3\n  dup3\n  sload\n  tag_33\n  swap2\n  swap1\n  tag_34\n  jump\t// in\ntag_33:\n  swap1\n  swap2\n  sstore\n  pop\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8946:8964  _balances[account] */\n  dup3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8946:8955  _balances */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8946:8964  _balances[account] */\n  dup2\n  dup2\n  mstore\n  0x20\n  dup2\n  dup2\n  mstore\n  0x40\n  dup1\n  dup4\n  keccak256\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8946:8974  _balances[account] += amount */\n  dup1\n  sload\n  dup7\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8999:9036  Transfer(address(0), account, amount) */\n  mload\n    /* \"#utility.yul\":5059:5084   */\n  dup5\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8999:9036  Transfer(address(0), account, amount) */\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n  swap2\n    /* \"#utility.yul\":5032:5050   */\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8999:9036  Transfer(address(0), account, amount) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8567:9102  function _mint(address account, uint256 amount) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":12180:12301  function _beforeTokenTransfer(... */\ntag_32:\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_41:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:526   */\ntag_42:\n    /* \"#utility.yul\":225:226   */\n  0x01\n    /* \"#utility.yul\":221:233   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":268:280   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":289:350   */\n  tag_52\n  jumpi\n    /* \"#utility.yul\":343:347   */\n  0x7f\n    /* \"#utility.yul\":335:341   */\n  dup3\n    /* \"#utility.yul\":331:348   */\n  and\n    /* \"#utility.yul\":321:348   */\n  swap2\n  pop\n    /* \"#utility.yul\":289:350   */\ntag_52:\n    /* \"#utility.yul\":396:398   */\n  0x20\n    /* \"#utility.yul\":388:394   */\n  dup3\n    /* \"#utility.yul\":385:399   */\n  lt\n    /* \"#utility.yul\":365:383   */\n  dup2\n    /* \"#utility.yul\":362:400   */\n  sub\n    /* \"#utility.yul\":359:520   */\n  tag_53\n  jumpi\n    /* \"#utility.yul\":442:452   */\n  0x4e487b71\n    /* \"#utility.yul\":437:440   */\n  0xe0\n    /* \"#utility.yul\":433:453   */\n  shl\n    /* \"#utility.yul\":430:431   */\n  0x00\n    /* \"#utility.yul\":423:454   */\n  mstore\n    /* \"#utility.yul\":477:481   */\n  0x22\n    /* \"#utility.yul\":474:475   */\n  0x04\n    /* \"#utility.yul\":467:482   */\n  mstore\n    /* \"#utility.yul\":505:509   */\n  0x24\n    /* \"#utility.yul\":502:503   */\n  0x00\n    /* \"#utility.yul\":495:510   */\n  revert\n    /* \"#utility.yul\":359:520   */\ntag_53:\n  pop\n    /* \"#utility.yul\":146:526   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":657:1202   */\ntag_44:\n    /* \"#utility.yul\":759:761   */\n  0x1f\n    /* \"#utility.yul\":754:757   */\n  dup3\n    /* \"#utility.yul\":751:762   */\n  gt\n    /* \"#utility.yul\":748:1196   */\n  iszero\n  tag_32\n  jumpi\n    /* \"#utility.yul\":795:796   */\n  0x00\n    /* \"#utility.yul\":820:825   */\n  dup2\n    /* \"#utility.yul\":816:818   */\n  dup2\n    /* \"#utility.yul\":809:826   */\n  mstore\n    /* \"#utility.yul\":865:869   */\n  0x20\n    /* \"#utility.yul\":861:863   */\n  dup2\n    /* \"#utility.yul\":851:870   */\n  keccak256\n    /* \"#utility.yul\":935:937   */\n  0x1f\n    /* \"#utility.yul\":923:933   */\n  dup6\n    /* \"#utility.yul\":919:938   */\n  add\n    /* \"#utility.yul\":916:917   */\n  0x05\n    /* \"#utility.yul\":912:939   */\n  shr\n    /* \"#utility.yul\":906:910   */\n  dup2\n    /* \"#utility.yul\":902:940   */\n  add\n    /* \"#utility.yul\":971:975   */\n  0x20\n    /* \"#utility.yul\":959:969   */\n  dup7\n    /* \"#utility.yul\":956:976   */\n  lt\n    /* \"#utility.yul\":953:1000   */\n  iszero\n  tag_57\n  jumpi\n  pop\n    /* \"#utility.yul\":994:998   */\n  dup1\n    /* \"#utility.yul\":953:1000   */\ntag_57:\n    /* \"#utility.yul\":1049:1051   */\n  0x1f\n    /* \"#utility.yul\":1044:1047   */\n  dup6\n    /* \"#utility.yul\":1040:1052   */\n  add\n    /* \"#utility.yul\":1037:1038   */\n  0x05\n    /* \"#utility.yul\":1033:1053   */\n  shr\n    /* \"#utility.yul\":1027:1031   */\n  dup3\n    /* \"#utility.yul\":1023:1054   */\n  add\n    /* \"#utility.yul\":1013:1054   */\n  swap2\n  pop\n    /* \"#utility.yul\":1104:1186   */\ntag_58:\n    /* \"#utility.yul\":1122:1124   */\n  dup2\n    /* \"#utility.yul\":1115:1120   */\n  dup2\n    /* \"#utility.yul\":1112:1125   */\n  lt\n    /* \"#utility.yul\":1104:1186   */\n  iszero\n  tag_60\n  jumpi\n    /* \"#utility.yul\":1167:1184   */\n  dup3\n  dup2\n  sstore\n    /* \"#utility.yul\":1148:1149   */\n  0x01\n    /* \"#utility.yul\":1137:1150   */\n  add\n    /* \"#utility.yul\":1104:1186   */\n  jump(tag_58)\ntag_60:\n    /* \"#utility.yul\":1108:1111   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":657:1202   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1378:2730   */\ntag_7:\n    /* \"#utility.yul\":1498:1508   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1520:1550   */\n  dup2\n  gt\n    /* \"#utility.yul\":1517:1573   */\n  iszero\n  tag_64\n  jumpi\n    /* \"#utility.yul\":1553:1571   */\n  tag_64\n  tag_41\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":1582:1679   */\n  tag_65\n    /* \"#utility.yul\":1672:1678   */\n  dup2\n    /* \"#utility.yul\":1632:1670   */\n  tag_66\n    /* \"#utility.yul\":1664:1668   */\n  dup5\n    /* \"#utility.yul\":1658:1669   */\n  sload\n    /* \"#utility.yul\":1632:1670   */\n  tag_42\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":1626:1630   */\n  dup5\n    /* \"#utility.yul\":1582:1679   */\n  tag_44\n  jump\t// in\ntag_65:\n    /* \"#utility.yul\":1734:1738   */\n  0x20\n  dup1\n    /* \"#utility.yul\":1798:1800   */\n  0x1f\n    /* \"#utility.yul\":1787:1801   */\n  dup4\n  gt\n    /* \"#utility.yul\":1815:1816   */\n  0x01\n    /* \"#utility.yul\":1810:2473   */\n  dup2\n  eq\n  tag_68\n  jumpi\n    /* \"#utility.yul\":2517:2518   */\n  0x00\n    /* \"#utility.yul\":2534:2540   */\n  dup5\n    /* \"#utility.yul\":2531:2620   */\n  iszero\n  tag_69\n  jumpi\n  pop\n    /* \"#utility.yul\":2586:2605   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":2580:2606   */\n  mload\n    /* \"#utility.yul\":2531:2620   */\ntag_69:\n  not(0x00)\n    /* \"#utility.yul\":1335:1336   */\n  0x03\n    /* \"#utility.yul\":1331:1342   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":1327:1351   */\n  shr\n    /* \"#utility.yul\":1323:1352   */\n  not\n    /* \"#utility.yul\":1313:1353   */\n  and\n    /* \"#utility.yul\":1359:1360   */\n  0x01\n    /* \"#utility.yul\":1355:1366   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1310:1367   */\n  or\n    /* \"#utility.yul\":2633:2714   */\n  dup6\n  sstore\n    /* \"#utility.yul\":1780:2724   */\n  jump(tag_60)\n    /* \"#utility.yul\":1810:2473   */\ntag_68:\n    /* \"#utility.yul\":604:605   */\n  0x00\n    /* \"#utility.yul\":597:611   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":641:645   */\n  0x20\n    /* \"#utility.yul\":628:646   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":1846:1866   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":1964:2200   */\ntag_72:\n    /* \"#utility.yul\":1978:1985   */\n  dup3\n    /* \"#utility.yul\":1975:1976   */\n  dup2\n    /* \"#utility.yul\":1972:1986   */\n  lt\n    /* \"#utility.yul\":1964:2200   */\n  iszero\n  tag_74\n  jumpi\n    /* \"#utility.yul\":2067:2086   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":2061:2087   */\n  mload\n    /* \"#utility.yul\":2046:2088   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2159:2186   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":2127:2128   */\n  0x01\n    /* \"#utility.yul\":2115:2129   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":1994:2013   */\n  dup5\n  add\n    /* \"#utility.yul\":1964:2200   */\n  jump(tag_72)\ntag_74:\n    /* \"#utility.yul\":1968:1971   */\n  pop\n    /* \"#utility.yul\":2228:2234   */\n  dup6\n    /* \"#utility.yul\":2219:2226   */\n  dup3\n    /* \"#utility.yul\":2216:2235   */\n  lt\n    /* \"#utility.yul\":2213:2414   */\n  iszero\n  tag_75\n  jumpi\n    /* \"#utility.yul\":2289:2308   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":2283:2309   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2372:2373   */\n  0x03\n    /* \"#utility.yul\":2368:2382   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":2384:2387   */\n  0xf8\n    /* \"#utility.yul\":2364:2388   */\n  and\n    /* \"#utility.yul\":2360:2397   */\n  shr\n    /* \"#utility.yul\":2356:2398   */\n  not\n    /* \"#utility.yul\":2341:2399   */\n  and\n    /* \"#utility.yul\":2326:2400   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2213:2414   */\ntag_75:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2460:2461   */\n  0x01\n    /* \"#utility.yul\":2444:2458   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":2440:2462   */\n  add\n    /* \"#utility.yul\":2427:2463   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":1378:2730   */\n  jump\t// out\n    /* \"#utility.yul\":2735:2862   */\ntag_46:\n    /* \"#utility.yul\":2796:2806   */\n  0x4e487b71\n    /* \"#utility.yul\":2791:2794   */\n  0xe0\n    /* \"#utility.yul\":2787:2807   */\n  shl\n    /* \"#utility.yul\":2784:2785   */\n  0x00\n    /* \"#utility.yul\":2777:2808   */\n  mstore\n    /* \"#utility.yul\":2827:2831   */\n  0x11\n    /* \"#utility.yul\":2824:2825   */\n  0x04\n    /* \"#utility.yul\":2817:2832   */\n  mstore\n    /* \"#utility.yul\":2851:2855   */\n  0x24\n    /* \"#utility.yul\":2848:2849   */\n  0x00\n    /* \"#utility.yul\":2841:2856   */\n  revert\n    /* \"#utility.yul\":2867:3289   */\ntag_47:\n    /* \"#utility.yul\":2956:2957   */\n  0x01\n    /* \"#utility.yul\":2999:3004   */\n  dup2\n    /* \"#utility.yul\":2956:2957   */\n  dup2\n    /* \"#utility.yul\":3013:3283   */\ntag_78:\n    /* \"#utility.yul\":3034:3041   */\n  dup1\n    /* \"#utility.yul\":3024:3032   */\n  dup6\n    /* \"#utility.yul\":3021:3042   */\n  gt\n    /* \"#utility.yul\":3013:3283   */\n  iszero\n  tag_80\n  jumpi\n    /* \"#utility.yul\":3093:3097   */\n  dup2\n    /* \"#utility.yul\":3089:3090   */\n  0x00\n    /* \"#utility.yul\":3085:3091   */\n  not\n    /* \"#utility.yul\":3081:3098   */\n  div\n    /* \"#utility.yul\":3075:3079   */\n  dup3\n    /* \"#utility.yul\":3072:3099   */\n  gt\n    /* \"#utility.yul\":3069:3122   */\n  iszero\n  tag_82\n  jumpi\n    /* \"#utility.yul\":3102:3120   */\n  tag_82\n  tag_46\n  jump\t// in\ntag_82:\n    /* \"#utility.yul\":3152:3159   */\n  dup1\n    /* \"#utility.yul\":3142:3150   */\n  dup6\n    /* \"#utility.yul\":3138:3160   */\n  and\n    /* \"#utility.yul\":3135:3190   */\n  iszero\n  tag_83\n  jumpi\n    /* \"#utility.yul\":3172:3188   */\n  swap2\n  dup2\n  mul\n  swap2\n    /* \"#utility.yul\":3135:3190   */\ntag_83:\n    /* \"#utility.yul\":3251:3273   */\n  swap4\n  dup5\n  shr\n  swap4\n    /* \"#utility.yul\":3211:3226   */\n  swap1\n  dup1\n  mul\n  swap1\n    /* \"#utility.yul\":3013:3283   */\n  jump(tag_78)\ntag_80:\n    /* \"#utility.yul\":3017:3020   */\n  pop\n    /* \"#utility.yul\":2867:3289   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3294:4100   */\ntag_48:\n    /* \"#utility.yul\":3343:3348   */\n  0x00\n    /* \"#utility.yul\":3373:3381   */\n  dup3\n    /* \"#utility.yul\":3363:3443   */\n  tag_85\n  jumpi\n  pop\n    /* \"#utility.yul\":3414:3415   */\n  0x01\n    /* \"#utility.yul\":3428:3433   */\n  jump(tag_84)\n    /* \"#utility.yul\":3363:3443   */\ntag_85:\n    /* \"#utility.yul\":3462:3466   */\n  dup2\n    /* \"#utility.yul\":3452:3528   */\n  tag_86\n  jumpi\n  pop\n    /* \"#utility.yul\":3499:3500   */\n  0x00\n    /* \"#utility.yul\":3513:3518   */\n  jump(tag_84)\n    /* \"#utility.yul\":3452:3528   */\ntag_86:\n    /* \"#utility.yul\":3544:3548   */\n  dup2\n    /* \"#utility.yul\":3562:3563   */\n  0x01\n    /* \"#utility.yul\":3557:3616   */\n  dup2\n  eq\n  tag_88\n  jumpi\n    /* \"#utility.yul\":3630:3631   */\n  0x02\n    /* \"#utility.yul\":3625:3755   */\n  dup2\n  eq\n  tag_89\n  jumpi\n    /* \"#utility.yul\":3537:3755   */\n  jump(tag_87)\n    /* \"#utility.yul\":3557:3616   */\ntag_88:\n    /* \"#utility.yul\":3587:3588   */\n  0x01\n    /* \"#utility.yul\":3578:3588   */\n  swap2\n  pop\n    /* \"#utility.yul\":3601:3606   */\n  pop\n  jump(tag_84)\n    /* \"#utility.yul\":3625:3755   */\ntag_89:\n    /* \"#utility.yul\":3662:3665   */\n  0xff\n    /* \"#utility.yul\":3652:3660   */\n  dup5\n    /* \"#utility.yul\":3649:3666   */\n  gt\n    /* \"#utility.yul\":3646:3689   */\n  iszero\n  tag_91\n  jumpi\n    /* \"#utility.yul\":3669:3687   */\n  tag_91\n  tag_46\n  jump\t// in\ntag_91:\n  pop\n  pop\n    /* \"#utility.yul\":3725:3726   */\n  0x01\n    /* \"#utility.yul\":3711:3727   */\n  dup3\n  shl\n    /* \"#utility.yul\":3740:3745   */\n  jump(tag_84)\n    /* \"#utility.yul\":3537:3755   */\ntag_87:\n  pop\n    /* \"#utility.yul\":3839:3841   */\n  0x20\n    /* \"#utility.yul\":3829:3837   */\n  dup4\n    /* \"#utility.yul\":3826:3842   */\n  lt\n    /* \"#utility.yul\":3820:3823   */\n  0x0133\n    /* \"#utility.yul\":3814:3818   */\n  dup4\n    /* \"#utility.yul\":3811:3824   */\n  lt\n    /* \"#utility.yul\":3807:3843   */\n  and\n    /* \"#utility.yul\":3801:3803   */\n  0x4e\n    /* \"#utility.yul\":3791:3799   */\n  dup5\n    /* \"#utility.yul\":3788:3804   */\n  lt\n    /* \"#utility.yul\":3783:3785   */\n  0x0b\n    /* \"#utility.yul\":3777:3781   */\n  dup5\n    /* \"#utility.yul\":3774:3786   */\n  lt\n    /* \"#utility.yul\":3770:3805   */\n  and\n    /* \"#utility.yul\":3767:3844   */\n  or\n    /* \"#utility.yul\":3764:3923   */\n  iszero\n  tag_92\n  jumpi\n  pop\n    /* \"#utility.yul\":3876:3895   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":3908:3913   */\n  jump(tag_84)\n    /* \"#utility.yul\":3764:3923   */\ntag_92:\n    /* \"#utility.yul\":3955:3989   */\n  tag_93\n    /* \"#utility.yul\":3980:3988   */\n  dup4\n    /* \"#utility.yul\":3974:3978   */\n  dup4\n    /* \"#utility.yul\":3955:3989   */\n  tag_47\n  jump\t// in\ntag_93:\n    /* \"#utility.yul\":4025:4031   */\n  dup1\n    /* \"#utility.yul\":4021:4022   */\n  0x00\n    /* \"#utility.yul\":4017:4023   */\n  not\n    /* \"#utility.yul\":4013:4032   */\n  div\n    /* \"#utility.yul\":4004:4011   */\n  dup3\n    /* \"#utility.yul\":4001:4033   */\n  gt\n    /* \"#utility.yul\":3998:4056   */\n  iszero\n  tag_95\n  jumpi\n    /* \"#utility.yul\":4036:4054   */\n  tag_95\n  tag_46\n  jump\t// in\ntag_95:\n    /* \"#utility.yul\":4074:4094   */\n  mul\n  swap1\n  pop\n    /* \"#utility.yul\":3294:4100   */\ntag_84:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4105:4245   */\ntag_19:\n    /* \"#utility.yul\":4163:4168   */\n  0x00\n    /* \"#utility.yul\":4192:4239   */\n  tag_97\n    /* \"#utility.yul\":4233:4237   */\n  0xff\n    /* \"#utility.yul\":4223:4231   */\n  dup5\n    /* \"#utility.yul\":4219:4238   */\n  and\n    /* \"#utility.yul\":4213:4217   */\n  dup4\n    /* \"#utility.yul\":4192:4239   */\n  tag_48\n  jump\t// in\ntag_97:\n    /* \"#utility.yul\":4183:4239   */\n  swap4\n    /* \"#utility.yul\":4105:4245   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4250:4418   */\ntag_21:\n    /* \"#utility.yul\":4323:4332   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":4354:4363   */\n  dup2\n  iszero\n    /* \"#utility.yul\":4371:4386   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":4365:4387   */\n  dup5\n  eq\n    /* \"#utility.yul\":4351:4388   */\n  or\n    /* \"#utility.yul\":4341:4412   */\n  tag_84\n  jumpi\n    /* \"#utility.yul\":4392:4410   */\n  tag_84\n  tag_46\n  jump\t// in\n    /* \"#utility.yul\":4783:4908   */\ntag_34:\n    /* \"#utility.yul\":4848:4857   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":4869:4879   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":4866:4902   */\n  iszero\n  tag_84\n  jumpi\n    /* \"#utility.yul\":4882:4900   */\n  tag_84\n  tag_46\n  jump\t// in\n    /* \"#utility.yul\":4913:5090   */\ntag_49:\n    /* \"contracts/SwapToken/FRGST.sol\":369:12293  contract Token is ERC20, Ownable,ERC20Burnable {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xf6527f81eeaf908e0895a4d7b9404be1d63848646154c2e6b54da1b823c531a4\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/SwapToken/FRGST.sol\":369:12293  contract Token is ERC20, Ownable,ERC20Burnable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x793ea8d1\n      gt\n      tag_49\n      jumpi\n      dup1\n      0xafe2ddd7\n      gt\n      tag_50\n      jumpi\n      dup1\n      0xdd62ed3e\n      gt\n      tag_51\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_43\n      jumpi\n      dup1\n      0xe319c2ce\n      eq\n      tag_44\n      jumpi\n      dup1\n      0xe465d64d\n      eq\n      tag_45\n      jumpi\n      dup1\n      0xe67d6921\n      eq\n      tag_46\n      jumpi\n      dup1\n      0xea173a39\n      eq\n      tag_47\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      dup1\n      0xafe2ddd7\n      eq\n      tag_37\n      jumpi\n      dup1\n      0xb9e43eee\n      eq\n      tag_38\n      jumpi\n      dup1\n      0xc31c9c07\n      eq\n      tag_39\n      jumpi\n      dup1\n      0xc90880c1\n      eq\n      tag_40\n      jumpi\n      dup1\n      0xca5fb573\n      eq\n      tag_41\n      jumpi\n      dup1\n      0xccbd73e7\n      eq\n      tag_42\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      dup1\n      0x8dd95002\n      gt\n      tag_52\n      jumpi\n      dup1\n      0x8dd95002\n      eq\n      tag_31\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_32\n      jumpi\n      dup1\n      0x9c42ac13\n      eq\n      tag_33\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_34\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_35\n      jumpi\n      dup1\n      0xab72498d\n      eq\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_52:\n      dup1\n      0x793ea8d1\n      eq\n      tag_26\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_27\n      jumpi\n      dup1\n      0x82fab2ad\n      eq\n      tag_28\n      jumpi\n      dup1\n      0x8568b3a5\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_30\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      dup1\n      0x313ce567\n      gt\n      tag_53\n      jumpi\n      dup1\n      0x446b5d5f\n      gt\n      tag_54\n      jumpi\n      dup1\n      0x446b5d5f\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x5202ea6d\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x57970e93\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x6bc20157\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_24\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_54:\n      dup1\n      0x313ce567\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x3268cc56\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x36eab316\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x372c12b1\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      dup1\n      0x172cc5a7\n      gt\n      tag_55\n      jumpi\n      dup1\n      0x172cc5a7\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x1901156d\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x196fd4be\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x24e2a33e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      dup1\n      0x0445a103\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x089fe6aa\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x0e1b39fb\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/SwapToken/FRGST.sol\":8848:9000  function setLPBuyTax(uint Tax) public onlyOwner{... */\n    tag_3:\n      tag_56\n      tag_57\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_57:\n      tag_59\n      jump\t// in\n    tag_56:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n    tag_4:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      tag_62\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_62:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/SwapToken/FRGST.sol\":673:694  uint24 public poolFee */\n    tag_5:\n      sload(0x09)\n      tag_64\n      swap1\n      0xffffff\n      and\n      dup2\n      jump\n    tag_64:\n      mload(0x40)\n        /* \"#utility.yul\":926:934   */\n      0xffffff\n        /* \"#utility.yul\":914:935   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":896:936   */\n      dup2\n      mstore\n        /* \"#utility.yul\":884:886   */\n      0x20\n        /* \"#utility.yul\":869:887   */\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":673:694  uint24 public poolFee */\n      tag_62\n        /* \"#utility.yul\":752:942   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_6:\n      tag_68\n      tag_69\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n    tag_68:\n      mload(0x40)\n        /* \"#utility.yul\":1549:1563   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1542:1564   */\n      iszero\n        /* \"#utility.yul\":1524:1565   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1512:1514   */\n      0x20\n        /* \"#utility.yul\":1497:1515   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_62\n        /* \"#utility.yul\":1384:1571   */\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":424:445  address public Wallet */\n    tag_7:\n      sload(0x06)\n      tag_74\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_74:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1740:1772   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1722:1773   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1710:1712   */\n      0x20\n        /* \"#utility.yul\":1695:1713   */\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":424:445  address public Wallet */\n      tag_62\n        /* \"#utility.yul\":1576:1779   */\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":7396:7550  function setLPSellTax(uint Tax) public onlyOwner{... */\n    tag_8:\n      tag_56\n      tag_79\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_79:\n      tag_80\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_9:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3329:3341  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_81:\n      mload(0x40)\n        /* \"#utility.yul\":1930:1955   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1918:1920   */\n      0x20\n        /* \"#utility.yul\":1903:1921   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_62\n        /* \"#utility.yul\":1784:1961   */\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":11584:11777  function setTaxData(uint SaleT,uint BuyT,uint Amount,uint Typ) public onlyOwner {... */\n    tag_10:\n      tag_56\n      tag_86\n      calldatasize\n      0x04\n      tag_87\n      jump\t// in\n    tag_86:\n      tag_88\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":475:501  address public PancakeSwap */\n    tag_11:\n      sload(0x07)\n      tag_74\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n    tag_12:\n      tag_68\n      tag_93\n      calldatasize\n      0x04\n      tag_94\n      jump\t// in\n    tag_93:\n      tag_95\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":10795:10881  function setMarkettingSwap(bool check) public onlyOwner{... */\n    tag_13:\n      tag_56\n      tag_98\n      calldatasize\n      0x04\n      tag_99\n      jump\t// in\n    tag_98:\n      tag_100\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n    tag_14:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3173:3175  18 */\n      0x12\n        /* \"#utility.yul\":3200:3236   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3188:3190   */\n      0x20\n        /* \"#utility.yul\":3173:3191   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n      tag_62\n        /* \"#utility.yul\":3058:3242   */\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":725:807  address public constant routerAddress = 0xE592427A0AEce92De3Edee1F18E0157C05861564 */\n    tag_15:\n      tag_74\n        /* \"contracts/SwapToken/FRGST.sol\":765:807  0xE592427A0AEce92De3Edee1F18E0157C05861564 */\n      0xe592427a0aece92de3edee1f18e0157c05861564\n        /* \"contracts/SwapToken/FRGST.sol\":725:807  address public constant routerAddress = 0xE592427A0AEce92De3Edee1F18E0157C05861564 */\n      dup2\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":8504:8664  function setReflectionBuyTax(uint Tax) public onlyOwner{... */\n    tag_16:\n      tag_56\n      tag_109\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_109:\n      tag_110\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":1025:1066  mapping(address => bool) public whiteList */\n    tag_17:\n      tag_68\n      tag_112\n      calldatasize\n      0x04\n      tag_113\n      jump\t// in\n    tag_112:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5871:6105  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_18:\n      tag_68\n      tag_117\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_117:\n      tag_118\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":578:667  function burn(uint256 amount) public virtual {... */\n    tag_19:\n      tag_56\n      tag_121\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_121:\n      tag_122\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":7047:7209  function setReflectionSellTax(uint Tax) public onlyOwner{... */\n    tag_20:\n      tag_56\n      tag_124\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_124:\n      tag_125\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":507:538  uint256 public LPTransferAmount */\n    tag_21:\n      tag_81\n      sload(0x08)\n      dup2\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":1111:1134  IERC20 public linkToken */\n    tag_22:\n      sload(0x0c)\n      tag_74\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":1567:1654  function WhiteList(address _address) public {... */\n    tag_23:\n      tag_56\n      tag_134\n      calldatasize\n      0x04\n      tag_113\n      jump\t// in\n    tag_134:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":1621:1640  whiteList[_address] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":1621:1630  whiteList */\n      0x0a\n        /* \"contracts/SwapToken/FRGST.sol\":1621:1640  whiteList[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/SwapToken/FRGST.sol\":1621:1647  whiteList[_address] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":1643:1647  true */\n      0x01\n        /* \"contracts/SwapToken/FRGST.sol\":1621:1647  whiteList[_address] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":1567:1654  function WhiteList(address _address) public {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_24:\n      tag_81\n      tag_137\n      calldatasize\n      0x04\n      tag_113\n      jump\t// in\n    tag_137:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3506:3524  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3480:3487  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3506:3524  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_25:\n      tag_56\n      tag_141\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":1833:2545  function swapExactInputSingle(uint256 amountIn,address recipientAddresss) public returns (uint256 amountOut)... */\n    tag_26:\n      tag_81\n      tag_143\n      calldatasize\n      0x04\n      tag_144\n      jump\t// in\n    tag_143:\n      tag_145\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":973:1134  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_27:\n      tag_56\n      tag_148\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_148:\n      tag_149\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":1140:1163  IERC20 public WBNBToken */\n    tag_28:\n      sload(0x0d)\n      tag_74\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":11050:11196  function getBalanceWBNB(address contractAddress) view public returns(uint256 Balance){... */\n    tag_29:\n      tag_81\n      tag_154\n      calldatasize\n      0x04\n      tag_113\n      jump\t// in\n    tag_154:\n      tag_155\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_30:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      jump(tag_74)\n        /* \"contracts/SwapToken/FRGST.sol\":700:719  address public WBNB */\n    tag_31:\n      sload(0x09)\n      tag_74\n      swap1\n      0x01000000\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2365:2467  function symbol() public view virtual override returns (string memory) {... */\n    tag_32:\n      tag_60\n      tag_164\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":10546:10646  function setMarkettingXAmount(uint Amount) public onlyOwner{... */\n    tag_33:\n      tag_56\n      tag_167\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_167:\n      tag_168\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6592:7019  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_34:\n      tag_68\n      tag_170\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_170:\n      tag_171\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":2715:6836  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_35:\n      tag_68\n      tag_174\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_174:\n      tag_175\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":10232:10332  function setInvestmentXAmount(uint Amount) public onlyOwner{... */\n    tag_36:\n      tag_56\n      tag_178\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_178:\n      tag_179\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":8134:8296  function setMarkettingSellTax(uint Tax) public onlyOwner{... */\n    tag_37:\n      tag_56\n      tag_181\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_181:\n      tag_182\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":11471:11579  function WithdrawWBNB(address to,uint amount) public onlyOwner{... */\n    tag_38:\n      tag_56\n      tag_184\n      calldatasize\n      0x04\n      tag_70\n      jump\t// in\n    tag_184:\n      tag_185\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":813:881  ISwapRouter public immutable swapRouter = ISwapRouter(routerAddress) */\n    tag_39:\n      tag_74\n      immutable(\"0xf6527f81eeaf908e0895a4d7b9404be1d63848646154c2e6b54da1b823c531a4\")\n      dup2\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":9576:9736  function setMarkettingBuyTax(uint Tax) public onlyOwner{... */\n    tag_40:\n      tag_56\n      tag_191\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_191:\n      tag_192\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":12036:12291  function setAddressFee(address _PancakeSwapAddress,address _WBNBAddress,uint24 _poolFee) public onlyOwner {... */\n    tag_41:\n      tag_56\n      tag_194\n      calldatasize\n      0x04\n      tag_195\n      jump\t// in\n    tag_194:\n      tag_196\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":1072:1104  mapping(uint => Cap) public Taxs */\n    tag_42:\n      tag_197\n      tag_198\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_198:\n      mstore(0x20, 0x0b)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      dup4\n      add\n      sload\n      0x03\n      swap1\n      swap4\n      add\n      sload\n      swap2\n      swap3\n      swap1\n      swap2\n      dup5\n      jump\n    tag_197:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":4804:4829   */\n      swap5\n      dup6\n      mstore\n        /* \"#utility.yul\":4860:4862   */\n      0x20\n        /* \"#utility.yul\":4845:4863   */\n      dup6\n      add\n        /* \"#utility.yul\":4838:4872   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":4888:4906   */\n      swap2\n      dup4\n      add\n        /* \"#utility.yul\":4881:4915   */\n      mstore\n        /* \"#utility.yul\":4946:4948   */\n      0x60\n        /* \"#utility.yul\":4931:4949   */\n      dup3\n      add\n        /* \"#utility.yul\":4924:4958   */\n      mstore\n        /* \"#utility.yul\":4791:4794   */\n      0x80\n        /* \"#utility.yul\":4776:4795   */\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":1072:1104  mapping(uint => Cap) public Taxs */\n      tag_62\n        /* \"#utility.yul\":4573:4964   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_43:\n      tag_81\n      tag_203\n      calldatasize\n      0x04\n      tag_204\n      jump\t// in\n    tag_203:\n      tag_205\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":451:469  bool public isSwap */\n    tag_44:\n      sload(0x06)\n      tag_68\n      swap1\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":9926:10018  function setLPXAmount(uint Amount) public onlyOwner{... */\n    tag_45:\n      tag_56\n      tag_211\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_211:\n      tag_212\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":9208:9368  function setInvestmentBuyTax(uint Tax) public onlyOwner{... */\n    tag_46:\n      tag_56\n      tag_214\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_214:\n      tag_215\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":7761:7923  function setInvestmentSellTax(uint Tax) public onlyOwner{... */\n    tag_47:\n      tag_56\n      tag_217\n      calldatasize\n      0x04\n      tag_58\n      jump\t// in\n    tag_217:\n      tag_218\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_48:\n      tag_56\n      tag_220\n      calldatasize\n      0x04\n      tag_113\n      jump\t// in\n    tag_220:\n      tag_221\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":8848:9000  function setLPBuyTax(uint Tax) public onlyOwner{... */\n    tag_59:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_223\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_223:\n        /* \"contracts/SwapToken/FRGST.sol\":8931:8933  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":8925:8928  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":8925:8933  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":8905:8963  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_227\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_228:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_227:\n        /* \"contracts/SwapToken/FRGST.sol\":8978:8979  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":8973:8980  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":8973:8977  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":8973:8980  Taxs[2] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":8973:8987  Taxs[2].BuyTax */\n      0xa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91635\n        /* \"contracts/SwapToken/FRGST.sol\":8973:8993  Taxs[2].BuyTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":8848:9000  function setLPBuyTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2208:2221  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2240:2245  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2233:2245  return _name */\n      dup1\n      sload\n      tag_231\n      swap1\n      tag_232\n      jump\t// in\n    tag_231:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_233\n      swap1\n      tag_232\n      jump\t// in\n    tag_233:\n      dup1\n      iszero\n      tag_234\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_235\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_234)\n    tag_235:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_236:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_236\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_234:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4514:4518  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4600  _approve(owner, spender, amount) */\n      tag_240\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4584:4591  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4593:4599  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4576  _approve */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4600  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_240:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4617:4621  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4610:4621  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_237:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":7396:7550  function setLPSellTax(uint Tax) public onlyOwner{... */\n    tag_80:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_243\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_243:\n        /* \"contracts/SwapToken/FRGST.sol\":7480:7482  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":7474:7477  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":7474:7482  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":7454:7512  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_246\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_246:\n        /* \"contracts/SwapToken/FRGST.sol\":7527:7528  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":7522:7529  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":7522:7526  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":7522:7529  Taxs[2] */\n      0x20\n      mstore\n      0xa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91634\n        /* \"contracts/SwapToken/FRGST.sol\":7522:7543  Taxs[2].SellTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":7396:7550  function setLPSellTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":11584:11777  function setTaxData(uint SaleT,uint BuyT,uint Amount,uint Typ) public onlyOwner {... */\n    tag_88:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_250\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_250:\n        /* \"contracts/SwapToken/FRGST.sol\":11687:11688  0 */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":11682:11685  Typ */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":11682:11688  Typ >0 */\n      gt\n        /* \"contracts/SwapToken/FRGST.sol\":11682:11699  Typ >0 && Typ < 5 */\n      dup1\n      iszero\n      tag_252\n      jumpi\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":11698:11699  5 */\n      0x05\n        /* \"contracts/SwapToken/FRGST.sol\":11692:11695  Typ */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":11692:11699  Typ < 5 */\n      lt\n        /* \"contracts/SwapToken/FRGST.sol\":11682:11699  Typ >0 && Typ < 5 */\n    tag_252:\n        /* \"contracts/SwapToken/FRGST.sol\":11674:11724  require(Typ >0 && Typ < 5,\"Typ Must Be (1,2,3,4)\") */\n      tag_253\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6176:6178   */\n      0x20\n        /* \"contracts/SwapToken/FRGST.sol\":11674:11724  require(Typ >0 && Typ < 5,\"Typ Must Be (1,2,3,4)\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6158:6179   */\n      mstore\n        /* \"#utility.yul\":6215:6217   */\n      0x15\n        /* \"#utility.yul\":6195:6213   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6188:6218   */\n      mstore\n      shl(0x58, 0x547970204d7573742042652028312c322c332c3429)\n        /* \"#utility.yul\":6234:6252   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6227:6278   */\n      mstore\n        /* \"#utility.yul\":6295:6313   */\n      0x64\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":11674:11724  require(Typ >0 && Typ < 5,\"Typ Must Be (1,2,3,4)\") */\n      tag_228\n        /* \"#utility.yul\":5974:6319   */\n      jump\n        /* \"contracts/SwapToken/FRGST.sol\":11674:11724  require(Typ >0 && Typ < 5,\"Typ Must Be (1,2,3,4)\") */\n    tag_253:\n        /* \"contracts/SwapToken/FRGST.sol\":11746:11770  Cap(SaleT,BuyT,Amount,0) */\n      0x40\n      dup1\n      mload\n      0x80\n      dup2\n      add\n      dup3\n      mstore\n      swap5\n      dup6\n      mstore\n      0x20\n      dup1\n      dup7\n      add\n      swap5\n      dup6\n      mstore\n      dup6\n      dup3\n      add\n      swap4\n      dup5\n      mstore\n      0x00\n      0x60\n      dup8\n      add\n      dup2\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":11734:11743  Taxs[Typ] */\n      swap4\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":11734:11738  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":11734:11743  Taxs[Typ] */\n      swap1\n      swap2\n      mstore\n      keccak256\n        /* \"contracts/SwapToken/FRGST.sol\":11734:11770  Taxs[Typ] = Cap(SaleT,BuyT,Amount,0) */\n      swap4\n      mload\n      dup5\n      sstore\n      swap2\n      mload\n      0x01\n      dup5\n      add\n      sstore\n      mload\n      0x02\n      dup4\n      add\n      sstore\n      mload\n      0x03\n      swap1\n      swap2\n      add\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":11584:11777  function setTaxData(uint SaleT,uint BuyT,uint Amount,uint Typ) public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n    tag_95:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5317:5321  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5411  _spendAllowance(from, spender, amount) */\n      tag_258\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5389:5393  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5404:5410  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5388  _spendAllowance */\n      tag_259\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5411  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_258:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5448  _transfer(from, to, amount) */\n      tag_260\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5431:5435  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5437:5439  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5441:5447  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5430  _transfer */\n      tag_261\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5448  _transfer(from, to, amount) */\n      jump\t// in\n    tag_260:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5465:5469  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":10795:10881  function setMarkettingSwap(bool check) public onlyOwner{... */\n    tag_100:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_263\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_263:\n        /* \"contracts/SwapToken/FRGST.sol\":10860:10866  isSwap */\n      0x06\n        /* \"contracts/SwapToken/FRGST.sol\":10860:10874  isSwap = check */\n      dup1\n      sload\n      swap2\n      iszero\n      iszero\n      shl(0xa0, 0x01)\n      mul\n      not(shl(0xa0, 0xff))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":10795:10881  function setMarkettingSwap(bool check) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":8504:8664  function setReflectionBuyTax(uint Tax) public onlyOwner{... */\n    tag_110:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_267\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_267:\n        /* \"contracts/SwapToken/FRGST.sol\":8595:8597  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":8589:8592  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":8589:8597  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":8569:8627  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_270\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_270:\n        /* \"contracts/SwapToken/FRGST.sol\":8642:8643  1 */\n      0x01\n        /* \"contracts/SwapToken/FRGST.sol\":8637:8644  Taxs[1] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":8637:8641  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":8637:8644  Taxs[1] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":8637:8651  Taxs[1].BuyTax */\n      0x72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5d0\n        /* \"contracts/SwapToken/FRGST.sol\":8637:8657  Taxs[1].BuyTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":8504:8664  function setReflectionBuyTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5871:6105  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_118:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5959:5963  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6077  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_240\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6029:6036  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6066:6076  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6063  allowance(owner, spender) */\n      tag_275\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6029:6036  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6047  allowance */\n      tag_205\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6063  allowance(owner, spender) */\n      jump\t// in\n    tag_275:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6076  allowance(owner, spender) + addedValue */\n      tag_276\n      swap2\n      swap1\n      tag_277\n      jump\t// in\n    tag_276:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6021  _approve */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6077  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":578:667  function burn(uint256 amount) public virtual {... */\n    tag_122:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":633:660  _burn(_msgSender(), amount) */\n      tag_279\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":653:659  amount */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":633:638  _burn */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":633:660  _burn(_msgSender(), amount) */\n      jump\t// in\n    tag_279:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":578:667  function burn(uint256 amount) public virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":7047:7209  function setReflectionSellTax(uint Tax) public onlyOwner{... */\n    tag_125:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_283\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_283:\n        /* \"contracts/SwapToken/FRGST.sol\":7139:7141  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":7133:7136  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":7133:7141  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":7113:7171  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_286\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_286:\n        /* \"contracts/SwapToken/FRGST.sol\":7186:7187  1 */\n      0x01\n        /* \"contracts/SwapToken/FRGST.sol\":7181:7188  Taxs[1] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":7181:7185  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":7181:7188  Taxs[1] */\n      0x20\n      mstore\n      0x72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5cf\n        /* \"contracts/SwapToken/FRGST.sol\":7181:7202  Taxs[1].SellTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":7047:7209  function setReflectionSellTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_141:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_291\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_291:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_293\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_294\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_293:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":1833:2545  function swapExactInputSingle(uint256 amountIn,address recipientAddresss) public returns (uint256 amountOut)... */\n    tag_145:\n        /* \"contracts/SwapToken/FRGST.sol\":1956:1965  linkToken */\n      sload(0x0c)\n        /* \"contracts/SwapToken/FRGST.sol\":1956:2004  linkToken.approve(address(swapRouter), amountIn) */\n      mload(0x40)\n      shl(0xe0, 0x095ea7b3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":1982:1992  swapRouter */\n      immutable(\"0xf6527f81eeaf908e0895a4d7b9404be1d63848646154c2e6b54da1b823c531a4\")\n        /* \"#utility.yul\":6778:6810   */\n      dup2\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":1956:2004  linkToken.approve(address(swapRouter), amountIn) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":6760:6811   */\n      mstore\n        /* \"#utility.yul\":6827:6845   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6820:6854   */\n      dup6\n      swap1\n      mstore\n      0x00\n      swap3\n        /* \"contracts/SwapToken/FRGST.sol\":1956:1965  linkToken */\n      and\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":1956:1973  linkToken.approve */\n      0x095ea7b3\n      swap1\n        /* \"#utility.yul\":6733:6751   */\n      0x44\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":1956:2004  linkToken.approve(address(swapRouter), amountIn) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_299\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_299:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_300\n      swap2\n      swap1\n      tag_301\n      jump\t// in\n    tag_300:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":2116:2481  ISwapRouter... */\n      0x40\n      dup1\n      mload\n      0x0100\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2199:2203  this */\n      address\n        /* \"contracts/SwapToken/FRGST.sol\":2116:2481  ISwapRouter... */\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2232:2236  WBNB */\n      sload(0x09)\n      sub(shl(0xa0, 0x01), 0x01)\n      0x01000000\n      dup3\n      div\n      dup2\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":2116:2481  ISwapRouter... */\n      0x20\n      dup5\n      add\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2259:2266  poolFee */\n      0xffffff\n      swap3\n      dup4\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":2116:2481  ISwapRouter... */\n      dup5\n      dup7\n      add\n      swap1\n      dup2\n      mstore\n      dup8\n      dup4\n      and\n      0x60\n      dup7\n      add\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2340:2355  block.timestamp */\n      timestamp\n        /* \"contracts/SwapToken/FRGST.sol\":2116:2481  ISwapRouter... */\n      0x80\n      dup8\n      add\n      swap1\n      dup2\n      mstore\n      0xa0\n      dup8\n      add\n      dup12\n      dup2\n      mstore\n      0x00\n      0xc0\n      dup10\n      add\n      dup2\n      dup2\n      mstore\n      0xe0\n      dup11\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2503:2538  swapRouter.exactInputSingle(params) */\n      swap10\n      mload\n      shl(0xe0, 0x414bf389)\n      dup2\n      mstore\n        /* \"#utility.yul\":7400:7413   */\n      dup10\n      mload\n        /* \"#utility.yul\":7396:7418   */\n      dup9\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":2503:2538  swapRouter.exactInputSingle(params) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7378:7419   */\n      mstore\n        /* \"#utility.yul\":7461:7485   */\n      swap6\n      mload\n        /* \"#utility.yul\":7457:7490   */\n      dup8\n      and\n        /* \"#utility.yul\":7435:7455   */\n      0x24\n      dup8\n      add\n        /* \"#utility.yul\":7428:7491   */\n      mstore\n        /* \"#utility.yul\":7533:7557   */\n      swap4\n      mload\n        /* \"#utility.yul\":7529:7568   */\n      swap1\n      swap7\n      and\n        /* \"#utility.yul\":7507:7527   */\n      0x44\n      dup6\n      add\n        /* \"#utility.yul\":7500:7569   */\n      mstore\n        /* \"#utility.yul\":7611:7635   */\n      swap1\n      mload\n        /* \"#utility.yul\":7607:7640   */\n      dup5\n      and\n        /* \"#utility.yul\":7585:7605   */\n      0x64\n      dup5\n      add\n        /* \"#utility.yul\":7578:7641   */\n      mstore\n        /* \"#utility.yul\":7679:7703   */\n      mload\n        /* \"#utility.yul\":7657:7677   */\n      0x84\n      dup4\n      add\n        /* \"#utility.yul\":7650:7704   */\n      mstore\n        /* \"#utility.yul\":7742:7766   */\n      swap3\n      mload\n        /* \"#utility.yul\":7720:7740   */\n      0xa4\n      dup3\n      add\n        /* \"#utility.yul\":7713:7767   */\n      mstore\n        /* \"#utility.yul\":7805:7829   */\n      swap4\n      mload\n        /* \"#utility.yul\":7783:7803   */\n      0xc4\n      dup6\n      add\n        /* \"#utility.yul\":7776:7830   */\n      mstore\n        /* \"#utility.yul\":7872:7896   */\n      swap1\n      mload\n        /* \"#utility.yul\":7868:7901   */\n      dup2\n      and\n        /* \"#utility.yul\":7846:7866   */\n      0xe4\n      dup5\n      add\n        /* \"#utility.yul\":7839:7902   */\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2116:2481  ISwapRouter... */\n      swap1\n      swap2\n        /* \"contracts/SwapToken/FRGST.sol\":2503:2513  swapRouter */\n      immutable(\"0xf6527f81eeaf908e0895a4d7b9404be1d63848646154c2e6b54da1b823c531a4\")\n        /* \"contracts/SwapToken/FRGST.sol\":2503:2530  swapRouter.exactInputSingle */\n      swap1\n      swap2\n      and\n      swap1\n      0x414bf389\n      swap1\n        /* \"#utility.yul\":7312:7331   */\n      0x0104\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":2503:2538  swapRouter.exactInputSingle(params) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_305\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_305:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_306\n      swap2\n      swap1\n      tag_307\n      jump\t// in\n    tag_306:\n        /* \"contracts/SwapToken/FRGST.sol\":2491:2538  amountOut = swapRouter.exactInputSingle(params) */\n      swap5\n        /* \"contracts/SwapToken/FRGST.sol\":1833:2545  function swapExactInputSingle(uint256 amountIn,address recipientAddresss) public returns (uint256 amountOut)... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":973:1134  function burnFrom(address account, uint256 amount) public virtual {... */\n    tag_149:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1049:1095  _spendAllowance(account, _msgSender(), amount) */\n      tag_309\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1065:1072  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1088:1094  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1049:1064  _spendAllowance */\n      tag_259\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1049:1095  _spendAllowance(account, _msgSender(), amount) */\n      jump\t// in\n    tag_309:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1105:1127  _burn(account, amount) */\n      tag_311\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1111:1118  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1120:1126  amount */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1105:1110  _burn */\n      tag_281\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1105:1127  _burn(account, amount) */\n      jump\t// in\n    tag_311:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":973:1134  function burnFrom(address account, uint256 amount) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":11050:11196  function getBalanceWBNB(address contractAddress) view public returns(uint256 Balance){... */\n    tag_155:\n        /* \"contracts/SwapToken/FRGST.sol\":11152:11161  WBNBToken */\n      sload(0x0d)\n        /* \"contracts/SwapToken/FRGST.sol\":11152:11188  WBNBToken.balanceOf(contractAddress) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1740:1772   */\n      dup4\n      dup2\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":11152:11188  WBNBToken.balanceOf(contractAddress) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":1722:1773   */\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":11119:11134  uint256 Balance */\n      0x00\n      swap3\n        /* \"contracts/SwapToken/FRGST.sol\":11152:11161  WBNBToken */\n      and\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":11152:11171  WBNBToken.balanceOf */\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":1695:1713   */\n      0x24\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":11152:11188  WBNBToken.balanceOf(contractAddress) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_315\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_315:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_237\n      swap2\n      swap1\n      tag_307\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2365:2467  function symbol() public view virtual override returns (string memory) {... */\n    tag_164:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2421:2434  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2453:2460  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2446:2460  return _symbol */\n      dup1\n      sload\n      tag_231\n      swap1\n      tag_232\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":10546:10646  function setMarkettingXAmount(uint Amount) public onlyOwner{... */\n    tag_168:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_325\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_325:\n        /* \"contracts/SwapToken/FRGST.sol\":10620:10621  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":10615:10622  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":10615:10619  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":10615:10622  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_7d5afdc40f419cd4c454e66a5a6871164baa29e2e52bd3ec4f887d908a6ea2fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":10615:10639  Taxs[4].XAmount = Amount */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":10546:10646  function setMarkettingXAmount(uint Amount) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6592:7019  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_171:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6685:6689  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6685:6689  bool */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6791  allowance(owner, spender) */\n      tag_329\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6783:6790  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6775  allowance */\n      tag_205\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6791  allowance(owner, spender) */\n      jump\t// in\n    tag_329:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6739:6791  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6829:6844  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6809:6825  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6809:6844  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_330\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8304:8306   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8286:8307   */\n      mstore\n        /* \"#utility.yul\":8343:8345   */\n      0x25\n        /* \"#utility.yul\":8323:8341   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8316:8346   */\n      mstore\n        /* \"#utility.yul\":8382:8416   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":8362:8380   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8355:8417   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":8433:8451   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8426:8461   */\n      mstore\n        /* \"#utility.yul\":8478:8497   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_228\n        /* \"#utility.yul\":8102:8503   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_330:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6980  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_260\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6929:6934  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6936:6943  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6964:6979  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6945:6961  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6945:6979  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6928  _approve */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6980  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":2715:6836  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_175:\n        /* \"contracts/SwapToken/FRGST.sol\":2823:2833  msg.sender */\n      caller\n        /* \"contracts/SwapToken/FRGST.sol\":2794:2798  bool */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":2813:2834  whiteList[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2813:2822  whiteList */\n      0x0a\n        /* \"contracts/SwapToken/FRGST.sol\":2813:2834  whiteList[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":2810:6828  if(whiteList[msg.sender]){... */\n      iszero\n      tag_335\n      jumpi\n        /* \"contracts/SwapToken/FRGST.sol\":2856:2882  super.transfer(to, amount) */\n      tag_336\n        /* \"contracts/SwapToken/FRGST.sol\":2871:2873  to */\n      dup4\n        /* \"contracts/SwapToken/FRGST.sol\":2875:2881  amount */\n      dup4\n        /* \"contracts/SwapToken/FRGST.sol\":2856:2870  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":2856:2882  super.transfer(to, amount) */\n      jump\t// in\n    tag_336:\n        /* \"contracts/SwapToken/FRGST.sol\":2849:2882  return super.transfer(to, amount) */\n      swap1\n      pop\n      jump(tag_237)\n        /* \"contracts/SwapToken/FRGST.sol\":2810:6828  if(whiteList[msg.sender]){... */\n    tag_335:\n        /* \"contracts/SwapToken/FRGST.sol\":2936:2947  PancakeSwap */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x07))\n        /* \"contracts/SwapToken/FRGST.sol\":2922:2932  msg.sender */\n      caller\n        /* \"contracts/SwapToken/FRGST.sol\":2922:2947  msg.sender == PancakeSwap */\n      sub\n        /* \"contracts/SwapToken/FRGST.sol\":2919:6818  if(msg.sender == PancakeSwap){... */\n      tag_339\n      jumpi\n        /* \"contracts/SwapToken/FRGST.sol\":3004:3005  1 */\n      0x01\n        /* \"contracts/SwapToken/FRGST.sol\":2966:2987  uint ReflectionAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":2999:3006  Taxs[1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2999:3003  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":2999:3006  Taxs[1] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":2999:3013  Taxs[1].BuyTax */\n      sload(0x72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5d0)\n        /* \"contracts/SwapToken/FRGST.sol\":3015:3018  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":2992:3013  amount*Taxs[1].BuyTax */\n      tag_340\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":2992:2998  amount */\n      dup6\n        /* \"contracts/SwapToken/FRGST.sol\":2992:3013  amount*Taxs[1].BuyTax */\n      tag_341\n      jump\t// in\n    tag_340:\n        /* \"contracts/SwapToken/FRGST.sol\":2991:3018  (amount*Taxs[1].BuyTax)/100 */\n      tag_342\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_342:\n        /* \"contracts/SwapToken/FRGST.sol\":3067:3068  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3037:3050  uint LPAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":3062:3069  Taxs[2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3062:3066  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3062:3069  Taxs[2] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3062:3076  Taxs[2].BuyTax */\n      sload(0xa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91635)\n        /* \"contracts/SwapToken/FRGST.sol\":2966:3019  uint ReflectionAmount = ((amount*Taxs[1].BuyTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3037:3050  uint LPAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3078:3081  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3055:3076  amount*Taxs[2].BuyTax */\n      tag_344\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3055:3061  amount */\n      dup7\n        /* \"contracts/SwapToken/FRGST.sol\":3055:3076  amount*Taxs[2].BuyTax */\n      tag_341\n      jump\t// in\n    tag_344:\n        /* \"contracts/SwapToken/FRGST.sol\":3054:3081  (amount*Taxs[2].BuyTax)/100 */\n      tag_345\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_345:\n        /* \"contracts/SwapToken/FRGST.sol\":3138:3139  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":3100:3121  uint InvestmentAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":3133:3140  Taxs[3] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3133:3137  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3133:3140  Taxs[3] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3133:3147  Taxs[3].BuyTax */\n      sload(0x64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33f)\n        /* \"contracts/SwapToken/FRGST.sol\":3037:3082  uint LPAmount = ((amount*Taxs[2].BuyTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3100:3121  uint InvestmentAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3149:3152  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3126:3147  amount*Taxs[3].BuyTax */\n      tag_346\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3126:3132  amount */\n      dup8\n        /* \"contracts/SwapToken/FRGST.sol\":3126:3147  amount*Taxs[3].BuyTax */\n      tag_341\n      jump\t// in\n    tag_346:\n        /* \"contracts/SwapToken/FRGST.sol\":3125:3152  (amount*Taxs[3].BuyTax)/100 */\n      tag_347\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_347:\n        /* \"contracts/SwapToken/FRGST.sol\":3209:3210  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":3171:3192  uint MarkettingAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":3204:3211  Taxs[4] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3204:3208  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3204:3211  Taxs[4] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3204:3218  Taxs[4].BuyTax */\n      sload(0x12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c785)\n        /* \"contracts/SwapToken/FRGST.sol\":3100:3153  uint InvestmentAmount = ((amount*Taxs[3].BuyTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3171:3192  uint MarkettingAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3220:3223  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3197:3218  amount*Taxs[4].BuyTax */\n      tag_348\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3197:3203  amount */\n      dup9\n        /* \"contracts/SwapToken/FRGST.sol\":3197:3218  amount*Taxs[4].BuyTax */\n      tag_341\n      jump\t// in\n    tag_348:\n        /* \"contracts/SwapToken/FRGST.sol\":3196:3223  (amount*Taxs[4].BuyTax)/100 */\n      tag_349\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_349:\n        /* \"contracts/SwapToken/FRGST.sol\":3289:3290  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3284:3291  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3284:3288  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3284:3291  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3284:3299  Taxs[2].XAmount */\n      sload\n      0x00\n      dup1\n      mload\n      0x20\n      data_01ae0451e5a3376fcae57e2b9e1da8e102c4453020935abb5805ca3e0e709d81\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3247:3268  Taxs[2].currentAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3171:3224  uint MarkettingAmount = ((amount*Taxs[4].BuyTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3284:3299  Taxs[2].XAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3247:3279  Taxs[2].currentAmount + LPAmount */\n      tag_350\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3271:3279  LPAmount */\n      dup6\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3247:3279  Taxs[2].currentAmount + LPAmount */\n      tag_277\n      jump\t// in\n    tag_350:\n        /* \"contracts/SwapToken/FRGST.sol\":3246:3299  (Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount */\n      lt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":3245:3326  ((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0) */\n      dup1\n      iszero\n      tag_351\n      jumpi\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3310:3311  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3305:3312  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3305:3309  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3305:3312  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3305:3320  Taxs[2].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3305:3325  Taxs[2].XAmount != 0 */\n      iszero\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":3245:3326  ((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0) */\n    tag_351:\n        /* \"contracts/SwapToken/FRGST.sol\":3242:3668  if(((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0)) {... */\n      iszero\n      tag_352\n      jumpi\n        /* \"contracts/SwapToken/FRGST.sol\":3365:3376  PancakeSwap */\n      sload(0x07)\n        /* \"contracts/SwapToken/FRGST.sol\":3394:3395  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3365:3376  PancakeSwap */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":3378:3385  Taxs[2] */\n      dup2\n      swap1\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3378:3382  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3378:3385  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3378:3393  Taxs[2].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3350:3397  super.transfer(PancakeSwap,(Taxs[2].XAmount/2)) */\n      tag_353\n      swap3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":3365:3376  PancakeSwap */\n      and\n      swap2\n        /* \"contracts/SwapToken/FRGST.sol\":3378:3395  Taxs[2].XAmount/2 */\n      tag_354\n      swap2\n      tag_343\n      jump\t// in\n    tag_354:\n        /* \"contracts/SwapToken/FRGST.sol\":3350:3364  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":3350:3397  super.transfer(PancakeSwap,(Taxs[2].XAmount/2)) */\n      jump\t// in\n    tag_353:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3457:3458  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3441:3448  Taxs[2] */\n      0x00\n      dup2\n      swap1\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3441:3445  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3441:3448  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3441:3456  Taxs[2].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3419:3472  swapExactInputSingle((Taxs[2].XAmount/2),PancakeSwap) */\n      tag_355\n      swap2\n        /* \"contracts/SwapToken/FRGST.sol\":3441:3458  Taxs[2].XAmount/2 */\n      tag_356\n      swap2\n      tag_343\n      jump\t// in\n    tag_356:\n        /* \"contracts/SwapToken/FRGST.sol\":3460:3471  PancakeSwap */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x07))\n        /* \"contracts/SwapToken/FRGST.sol\":3419:3439  swapExactInputSingle */\n      tag_145\n        /* \"contracts/SwapToken/FRGST.sol\":3419:3472  swapExactInputSingle((Taxs[2].XAmount/2),PancakeSwap) */\n      jump\t// in\n    tag_355:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3561:3562  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3556:3563  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3556:3560  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3556:3563  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3556:3571  Taxs[2].XAmount */\n      sload\n      0x00\n      dup1\n      mload\n      0x20\n      data_01ae0451e5a3376fcae57e2b9e1da8e102c4453020935abb5805ca3e0e709d81\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3519:3540  Taxs[2].currentAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3519:3551  Taxs[2].currentAmount + LPAmount */\n      tag_357\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3543:3551  LPAmount */\n      dup6\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3519:3551  Taxs[2].currentAmount + LPAmount */\n      tag_277\n      jump\t// in\n    tag_357:\n        /* \"contracts/SwapToken/FRGST.sol\":3518:3571  (Taxs[2].currentAmount + LPAmount) -  Taxs[2].XAmount */\n      tag_358\n      swap2\n      swap1\n      tag_359\n      jump\t// in\n    tag_358:\n        /* \"contracts/SwapToken/FRGST.sol\":3499:3500  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3494:3501  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3494:3498  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3494:3501  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_01ae0451e5a3376fcae57e2b9e1da8e102c4453020935abb5805ca3e0e709d81\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3494:3571  Taxs[2].currentAmount = (Taxs[2].currentAmount + LPAmount) -  Taxs[2].XAmount */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":3242:3668  if(((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0)) {... */\n      jump(tag_360)\n    tag_352:\n        /* \"contracts/SwapToken/FRGST.sol\":3621:3622  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3623  Taxs[2] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3620  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3623  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_01ae0451e5a3376fcae57e2b9e1da8e102c4453020935abb5805ca3e0e709d81\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3649  Taxs[2].currentAmount += LPAmount */\n      dup1\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3641:3649  LPAmount */\n      dup6\n      swap3\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3623  Taxs[2] */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3649  Taxs[2].currentAmount += LPAmount */\n      tag_361\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3641:3649  LPAmount */\n      dup5\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3616:3649  Taxs[2].currentAmount += LPAmount */\n      tag_277\n      jump\t// in\n    tag_361:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3242:3668  if(((Taxs[2].currentAmount + LPAmount) >= Taxs[2].XAmount) && (Taxs[2].XAmount != 0)) {... */\n    tag_360:\n        /* \"contracts/SwapToken/FRGST.sol\":3740:3741  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":3735:3742  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3735:3739  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3735:3742  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f574df558a4ef90b0f9140707b04d8bd5a2b90f8b0e4dd892b3084d5906c37fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3735:3750  Taxs[3].XAmount */\n      sload\n      0x00\n      dup1\n      mload\n      0x20\n      data_cd257bd0bf1ac8f5dbcd7cb80f6302024596a08f94617259c19eb1ec41cf4cb2\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3690:3711  Taxs[3].currentAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3690:3730  Taxs[3].currentAmount + InvestmentAmount */\n      tag_362\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3714:3730  InvestmentAmount */\n      dup5\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3690:3730  Taxs[3].currentAmount + InvestmentAmount */\n      tag_277\n      jump\t// in\n    tag_362:\n        /* \"contracts/SwapToken/FRGST.sol\":3689:3750  (Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount */\n      lt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":3688:3777  ((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0) */\n      dup1\n      iszero\n      tag_363\n      jumpi\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3761:3762  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":3756:3763  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3756:3760  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3756:3763  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f574df558a4ef90b0f9140707b04d8bd5a2b90f8b0e4dd892b3084d5906c37fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3756:3771  Taxs[3].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3756:3776  Taxs[3].XAmount != 0 */\n      iszero\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":3688:3777  ((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0) */\n    tag_363:\n        /* \"contracts/SwapToken/FRGST.sol\":3685:4064  if(((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0)) {... */\n      iszero\n      tag_364\n      jumpi\n        /* \"contracts/SwapToken/FRGST.sol\":3827:3828  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":3822:3829  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3822:3826  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3822:3829  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f574df558a4ef90b0f9140707b04d8bd5a2b90f8b0e4dd892b3084d5906c37fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3822:3837  Taxs[3].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3801:3852  swapExactInputSingle(Taxs[3].XAmount,address(this)) */\n      tag_365\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3846:3850  this */\n      address\n        /* \"contracts/SwapToken/FRGST.sol\":3801:3821  swapExactInputSingle */\n      tag_145\n        /* \"contracts/SwapToken/FRGST.sol\":3801:3852  swapExactInputSingle(Taxs[3].XAmount,address(this)) */\n      jump\t// in\n    tag_365:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3949:3950  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":3944:3951  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3944:3948  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3944:3951  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f574df558a4ef90b0f9140707b04d8bd5a2b90f8b0e4dd892b3084d5906c37fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3944:3959  Taxs[3].XAmount */\n      sload\n      0x00\n      dup1\n      mload\n      0x20\n      data_cd257bd0bf1ac8f5dbcd7cb80f6302024596a08f94617259c19eb1ec41cf4cb2\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3899:3920  Taxs[3].currentAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":3899:3939  Taxs[3].currentAmount + InvestmentAmount */\n      tag_366\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3923:3939  InvestmentAmount */\n      dup5\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":3899:3939  Taxs[3].currentAmount + InvestmentAmount */\n      tag_277\n      jump\t// in\n    tag_366:\n        /* \"contracts/SwapToken/FRGST.sol\":3898:3959  (Taxs[3].currentAmount + InvestmentAmount) -  Taxs[3].XAmount */\n      tag_367\n      swap2\n      swap1\n      tag_359\n      jump\t// in\n    tag_367:\n        /* \"contracts/SwapToken/FRGST.sol\":3879:3880  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":3874:3881  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3874:3878  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":3874:3881  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_cd257bd0bf1ac8f5dbcd7cb80f6302024596a08f94617259c19eb1ec41cf4cb2\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":3874:3959  Taxs[3].currentAmount = (Taxs[3].currentAmount + InvestmentAmount) -  Taxs[3].XAmount */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":3685:4064  if(((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0)) {... */\n      jump(tag_368)\n    tag_364:\n        /* \"contracts/SwapToken/FRGST.sol\":4009:4010  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4011  Taxs[3] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4008  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4011  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_cd257bd0bf1ac8f5dbcd7cb80f6302024596a08f94617259c19eb1ec41cf4cb2\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4045  Taxs[3].currentAmount += InvestmentAmount */\n      dup1\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4029:4045  InvestmentAmount */\n      dup5\n      swap3\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4011  Taxs[3] */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4045  Taxs[3].currentAmount += InvestmentAmount */\n      tag_369\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4029:4045  InvestmentAmount */\n      dup5\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4004:4045  Taxs[3].currentAmount += InvestmentAmount */\n      tag_277\n      jump\t// in\n    tag_369:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":3685:4064  if(((Taxs[3].currentAmount + InvestmentAmount) >= Taxs[3].XAmount) && (Taxs[3].XAmount != 0)) {... */\n    tag_368:\n        /* \"contracts/SwapToken/FRGST.sol\":4136:4137  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":4131:4138  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4131:4135  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4131:4138  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_7d5afdc40f419cd4c454e66a5a6871164baa29e2e52bd3ec4f887d908a6ea2fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4131:4146  Taxs[4].XAmount */\n      sload\n      0x00\n      dup1\n      mload\n      0x20\n      data_74583ccecd8ad1b0ed6ceeb51c0f8c852ae662e302540ff65c0210e7eed14bfc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4086:4107  Taxs[4].currentAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4086:4126  Taxs[4].currentAmount + MarkettingAmount */\n      tag_370\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4110:4126  MarkettingAmount */\n      dup4\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4086:4126  Taxs[4].currentAmount + MarkettingAmount */\n      tag_277\n      jump\t// in\n    tag_370:\n        /* \"contracts/SwapToken/FRGST.sol\":4085:4146  (Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount */\n      lt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":4084:4157  ((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap */\n      dup1\n      iszero\n      tag_371\n      jumpi\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4151:4157  isSwap */\n      sload(0x06)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":4084:4157  ((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap */\n    tag_371:\n        /* \"contracts/SwapToken/FRGST.sol\":4084:4183  ((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0) */\n      dup1\n      iszero\n      tag_372\n      jumpi\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4167:4168  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":4162:4169  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4162:4166  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4162:4169  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_7d5afdc40f419cd4c454e66a5a6871164baa29e2e52bd3ec4f887d908a6ea2fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4162:4177  Taxs[4].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4162:4182  Taxs[4].XAmount != 0 */\n      iszero\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":4084:4183  ((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0) */\n    tag_372:\n        /* \"contracts/SwapToken/FRGST.sol\":4081:4471  if(((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0))  {... */\n      iszero\n      tag_373\n      jumpi\n        /* \"contracts/SwapToken/FRGST.sol\":4234:4235  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":4229:4236  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4229:4233  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4229:4236  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_7d5afdc40f419cd4c454e66a5a6871164baa29e2e52bd3ec4f887d908a6ea2fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4229:4244  Taxs[4].XAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4208:4259  swapExactInputSingle(Taxs[4].XAmount,address(this)) */\n      tag_374\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4253:4257  this */\n      address\n        /* \"contracts/SwapToken/FRGST.sol\":4208:4228  swapExactInputSingle */\n      tag_145\n        /* \"contracts/SwapToken/FRGST.sol\":4208:4259  swapExactInputSingle(Taxs[4].XAmount,address(this)) */\n      jump\t// in\n    tag_374:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4356:4357  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":4351:4358  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4351:4355  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4351:4358  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_7d5afdc40f419cd4c454e66a5a6871164baa29e2e52bd3ec4f887d908a6ea2fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4351:4366  Taxs[4].XAmount */\n      sload\n      0x00\n      dup1\n      mload\n      0x20\n      data_74583ccecd8ad1b0ed6ceeb51c0f8c852ae662e302540ff65c0210e7eed14bfc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4306:4327  Taxs[4].currentAmount */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4306:4346  Taxs[4].currentAmount + MarkettingAmount */\n      tag_375\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4330:4346  MarkettingAmount */\n      dup4\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4306:4346  Taxs[4].currentAmount + MarkettingAmount */\n      tag_277\n      jump\t// in\n    tag_375:\n        /* \"contracts/SwapToken/FRGST.sol\":4305:4366  (Taxs[4].currentAmount + MarkettingAmount) -  Taxs[4].XAmount */\n      tag_376\n      swap2\n      swap1\n      tag_359\n      jump\t// in\n    tag_376:\n        /* \"contracts/SwapToken/FRGST.sol\":4286:4287  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":4281:4288  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4281:4285  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4281:4288  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_74583ccecd8ad1b0ed6ceeb51c0f8c852ae662e302540ff65c0210e7eed14bfc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4281:4366  Taxs[4].currentAmount = (Taxs[4].currentAmount + MarkettingAmount) -  Taxs[4].XAmount */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":4081:4471  if(((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0))  {... */\n      jump(tag_377)\n    tag_373:\n        /* \"contracts/SwapToken/FRGST.sol\":4416:4417  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4418  Taxs[4] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4415  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4418  Taxs[4] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_74583ccecd8ad1b0ed6ceeb51c0f8c852ae662e302540ff65c0210e7eed14bfc\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4452  Taxs[4].currentAmount += MarkettingAmount */\n      dup1\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4436:4452  MarkettingAmount */\n      dup4\n      swap3\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4418  Taxs[4] */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4452  Taxs[4].currentAmount += MarkettingAmount */\n      tag_378\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4436:4452  MarkettingAmount */\n      dup5\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4411:4452  Taxs[4].currentAmount += MarkettingAmount */\n      tag_277\n      jump\t// in\n    tag_378:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4081:4471  if(((Taxs[4].currentAmount + MarkettingAmount) >= Taxs[4].XAmount) && isSwap && (Taxs[4].XAmount != 0))  {... */\n    tag_377:\n        /* \"contracts/SwapToken/FRGST.sol\":4505:4511  Wallet */\n      sload(0x06)\n        /* \"contracts/SwapToken/FRGST.sol\":4490:4529  super.transfer(Wallet,ReflectionAmount) */\n      tag_379\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":4505:4511  Wallet */\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":4512:4528  ReflectionAmount */\n      dup6\n        /* \"contracts/SwapToken/FRGST.sol\":4490:4504  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":4490:4529  super.transfer(Wallet,ReflectionAmount) */\n      jump\t// in\n    tag_379:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4562:4568  Wallet */\n      sload(0x06)\n        /* \"contracts/SwapToken/FRGST.sol\":4547:4578  super.transfer(Wallet,LPAmount) */\n      tag_380\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":4562:4568  Wallet */\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":4569:4577  LPAmount */\n      dup5\n        /* \"contracts/SwapToken/FRGST.sol\":4547:4561  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":4547:4578  super.transfer(Wallet,LPAmount) */\n      jump\t// in\n    tag_380:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4611:4617  Wallet */\n      sload(0x06)\n        /* \"contracts/SwapToken/FRGST.sol\":4596:4635  super.transfer(Wallet,InvestmentAmount) */\n      tag_381\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":4611:4617  Wallet */\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":4618:4634  InvestmentAmount */\n      dup4\n        /* \"contracts/SwapToken/FRGST.sol\":4596:4610  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":4596:4635  super.transfer(Wallet,InvestmentAmount) */\n      jump\t// in\n    tag_381:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4668:4674  Wallet */\n      sload(0x06)\n        /* \"contracts/SwapToken/FRGST.sol\":4653:4692  super.transfer(Wallet,MarkettingAmount) */\n      tag_382\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SwapToken/FRGST.sol\":4668:4674  Wallet */\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":4675:4691  MarkettingAmount */\n      dup3\n        /* \"contracts/SwapToken/FRGST.sol\":4653:4667  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":4653:4692  super.transfer(Wallet,MarkettingAmount) */\n      jump\t// in\n    tag_382:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4717:4807  super.transfer(to, (amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount))) */\n      tag_383\n        /* \"contracts/SwapToken/FRGST.sol\":4732:4734  to */\n      dup8\n        /* \"contracts/SwapToken/FRGST.sol\":4788:4804  MarkettingAmount */\n      dup3\n        /* \"contracts/SwapToken/FRGST.sol\":4771:4787  InvestmentAmount */\n      dup5\n        /* \"contracts/SwapToken/FRGST.sol\":4745:4770  ReflectionAmount+LPAmount */\n      tag_384\n        /* \"contracts/SwapToken/FRGST.sol\":4762:4770  LPAmount */\n      dup8\n        /* \"contracts/SwapToken/FRGST.sol\":4745:4761  ReflectionAmount */\n      dup10\n        /* \"contracts/SwapToken/FRGST.sol\":4745:4770  ReflectionAmount+LPAmount */\n      tag_277\n      jump\t// in\n    tag_384:\n        /* \"contracts/SwapToken/FRGST.sol\":4745:4787  ReflectionAmount+LPAmount+InvestmentAmount */\n      tag_385\n      swap2\n      swap1\n      tag_277\n      jump\t// in\n    tag_385:\n        /* \"contracts/SwapToken/FRGST.sol\":4745:4804  ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount */\n      tag_386\n      swap2\n      swap1\n      tag_277\n      jump\t// in\n    tag_386:\n        /* \"contracts/SwapToken/FRGST.sol\":4737:4805  amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount) */\n      tag_354\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4737:4743  amount */\n      dup10\n        /* \"contracts/SwapToken/FRGST.sol\":4737:4805  amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount) */\n      tag_359\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":4717:4807  super.transfer(to, (amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount))) */\n    tag_383:\n        /* \"contracts/SwapToken/FRGST.sol\":4710:4807  return super.transfer(to, (amount-(ReflectionAmount+LPAmount+InvestmentAmount+MarkettingAmount))) */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_237)\n        /* \"contracts/SwapToken/FRGST.sol\":2919:6818  if(msg.sender == PancakeSwap){... */\n    tag_339:\n        /* \"contracts/SwapToken/FRGST.sol\":4836:4847  PancakeSwap */\n      sload(0x07)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":4830:4847  to == PancakeSwap */\n      swap1\n      dup5\n      and\n      sub\n        /* \"contracts/SwapToken/FRGST.sol\":4827:6818  if(to == PancakeSwap)... */\n      tag_389\n      jumpi\n        /* \"contracts/SwapToken/FRGST.sol\":4917:4918  1 */\n      0x01\n        /* \"contracts/SwapToken/FRGST.sol\":4879:4900  uint ReflectionAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":4912:4919  Taxs[1] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4912:4916  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4912:4919  Taxs[1] */\n      0x20\n      mstore\n      0x72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5cf\n        /* \"contracts/SwapToken/FRGST.sol\":4912:4927  Taxs[1].SellTax */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4929:4932  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4905:4927  amount*Taxs[1].SellTax */\n      tag_390\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4905:4911  amount */\n      dup6\n        /* \"contracts/SwapToken/FRGST.sol\":4905:4927  amount*Taxs[1].SellTax */\n      tag_341\n      jump\t// in\n    tag_390:\n        /* \"contracts/SwapToken/FRGST.sol\":4904:4932  (amount*Taxs[1].SellTax)/100 */\n      tag_391\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_391:\n        /* \"contracts/SwapToken/FRGST.sol\":4981:4982  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":4951:4964  uint LPAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":4976:4983  Taxs[2] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":4976:4980  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":4976:4983  Taxs[2] */\n      0x20\n      mstore\n      0xa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91634\n        /* \"contracts/SwapToken/FRGST.sol\":4976:4991  Taxs[2].SellTax */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4879:4933  uint ReflectionAmount = ((amount*Taxs[1].SellTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":4951:4964  uint LPAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4993:4996  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4969:4991  amount*Taxs[2].SellTax */\n      tag_392\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":4969:4975  amount */\n      dup7\n        /* \"contracts/SwapToken/FRGST.sol\":4969:4991  amount*Taxs[2].SellTax */\n      tag_341\n      jump\t// in\n    tag_392:\n        /* \"contracts/SwapToken/FRGST.sol\":4968:4996  (amount*Taxs[2].SellTax)/100 */\n      tag_393\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_393:\n        /* \"contracts/SwapToken/FRGST.sol\":5053:5054  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":5015:5036  uint InvestmentAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":5048:5055  Taxs[3] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":5048:5052  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":5048:5055  Taxs[3] */\n      0x20\n      mstore\n      0x64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e\n        /* \"contracts/SwapToken/FRGST.sol\":5048:5063  Taxs[3].SellTax */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":4951:4997  uint LPAmount = ((amount*Taxs[2].SellTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":5015:5036  uint InvestmentAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":5065:5068  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":5041:5063  amount*Taxs[3].SellTax */\n      tag_394\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":5041:5047  amount */\n      dup8\n        /* \"contracts/SwapToken/FRGST.sol\":5041:5063  amount*Taxs[3].SellTax */\n      tag_341\n      jump\t// in\n    tag_394:\n        /* \"contracts/SwapToken/FRGST.sol\":5040:5068  (amount*Taxs[3].SellTax)/100 */\n      tag_395\n      swap2\n      swap1\n      tag_343\n      jump\t// in\n    tag_395:\n        /* \"contracts/SwapToken/FRGST.sol\":5125:5126  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":5087:5108  uint MarkettingAmount */\n      0x00\n        /* \"contracts/SwapToken/FRGST.sol\":5120:5127  Taxs[4] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":5120:5124  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":5120:5127  Taxs[4] */\n      0x20\n      mstore\n      0x12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784\n        /* \"contracts/SwapToken/FRGST.sol\":5120:5135  Taxs[4].SellTax */\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":5015:5069  uint InvestmentAmount = ((amount*Taxs[3].SellTax)/100) */\n      swap2\n      swap3\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":5087:5108  uint MarkettingAmount */\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":5137:5140  100 */\n      0x64\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":5113:5135  amount*Taxs[4].SellTax */\n      tag_348\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":5113:5119  amount */\n      dup9\n        /* \"contracts/SwapToken/FRGST.sol\":5113:5135  amount*Taxs[4].SellTax */\n      tag_341\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":4827:6818  if(to == PancakeSwap)... */\n    tag_389:\n        /* \"contracts/SwapToken/FRGST.sol\":6777:6803  super.transfer(to, amount) */\n      tag_336\n        /* \"contracts/SwapToken/FRGST.sol\":6792:6794  to */\n      dup4\n        /* \"contracts/SwapToken/FRGST.sol\":6796:6802  amount */\n      dup4\n        /* \"contracts/SwapToken/FRGST.sol\":6777:6791  super.transfer */\n      tag_337\n        /* \"contracts/SwapToken/FRGST.sol\":6777:6803  super.transfer(to, amount) */\n      jump\t// in\n        /* \"contracts/SwapToken/FRGST.sol\":10232:10332  function setInvestmentXAmount(uint Amount) public onlyOwner{... */\n    tag_179:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_438\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_438:\n        /* \"contracts/SwapToken/FRGST.sol\":10306:10307  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":10301:10308  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":10301:10305  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":10301:10308  Taxs[3] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_f574df558a4ef90b0f9140707b04d8bd5a2b90f8b0e4dd892b3084d5906c37fa\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":10301:10325  Taxs[3].XAmount = Amount */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":10232:10332  function setInvestmentXAmount(uint Amount) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":8134:8296  function setMarkettingSellTax(uint Tax) public onlyOwner{... */\n    tag_182:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_441\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_441:\n        /* \"contracts/SwapToken/FRGST.sol\":8226:8228  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":8220:8223  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":8220:8228  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":8200:8258  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_444\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_444:\n        /* \"contracts/SwapToken/FRGST.sol\":8273:8274  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":8268:8275  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":8268:8272  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":8268:8275  Taxs[4] */\n      0x20\n      mstore\n      0x12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784\n        /* \"contracts/SwapToken/FRGST.sol\":8268:8289  Taxs[4].SellTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":8134:8296  function setMarkettingSellTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":11471:11579  function WithdrawWBNB(address to,uint amount) public onlyOwner{... */\n    tag_185:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_447\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_447:\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11552  WBNBToken */\n      sload(0x0d)\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11572  WBNBToken.transfer(to,amount) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6778:6810   */\n      dup5\n      dup2\n      and\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11572  WBNBToken.transfer(to,amount) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":6760:6811   */\n      mstore\n        /* \"#utility.yul\":6827:6845   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6820:6854   */\n      dup5\n      swap1\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11552  WBNBToken */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11561  WBNBToken.transfer */\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":6733:6751   */\n      0x44\n      add\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11572  WBNBToken.transfer(to,amount) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_451\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_451:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_452\n      swap2\n      swap1\n      tag_301\n      jump\t// in\n    tag_452:\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":11471:11579  function WithdrawWBNB(address to,uint amount) public onlyOwner{... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":9576:9736  function setMarkettingBuyTax(uint Tax) public onlyOwner{... */\n    tag_192:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_454\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_454:\n        /* \"contracts/SwapToken/FRGST.sol\":9667:9669  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":9661:9664  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":9661:9669  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":9641:9699  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_457\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_457:\n        /* \"contracts/SwapToken/FRGST.sol\":9714:9715  4 */\n      0x04\n        /* \"contracts/SwapToken/FRGST.sol\":9709:9716  Taxs[4] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":9709:9713  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":9709:9716  Taxs[4] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":9709:9723  Taxs[4].BuyTax */\n      0x12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c785\n        /* \"contracts/SwapToken/FRGST.sol\":9709:9729  Taxs[4].BuyTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":9576:9736  function setMarkettingBuyTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":12036:12291  function setAddressFee(address _PancakeSwapAddress,address _WBNBAddress,uint24 _poolFee) public onlyOwner {... */\n    tag_196:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_460\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_460:\n        /* \"contracts/SwapToken/FRGST.sol\":12152:12163  PancakeSwap */\n      0x07\n        /* \"contracts/SwapToken/FRGST.sol\":12152:12185  PancakeSwap = _PancakeSwapAddress */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap2\n      dup3\n      and\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":12195:12204  WBNBToken */\n      0x0d\n        /* \"contracts/SwapToken/FRGST.sol\":12195:12227  WBNBToken = IERC20(_WBNBAddress) */\n      dup1\n      sload\n      swap4\n      swap1\n      swap5\n      and\n      swap3\n      and\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":12237:12241  WBNB */\n      0x09\n        /* \"contracts/SwapToken/FRGST.sol\":12237:12256  WBNB = _WBNBAddress */\n      dup1\n      sload\n        /* \"contracts/SwapToken/FRGST.sol\":12266:12284  poolFee = _poolFee */\n      0xffffff\n      swap1\n      swap4\n      and\n      not(0xffffff)\n        /* \"contracts/SwapToken/FRGST.sol\":12237:12256  WBNB = _WBNBAddress */\n      0x01000000\n      swap1\n      swap4\n      mul\n        /* \"contracts/SwapToken/FRGST.sol\":12266:12284  poolFee = _poolFee */\n      swap3\n      swap1\n      swap3\n      and\n      not(sub(shl(0xb8, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      or\n      swap1\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":12036:12291  function setAddressFee(address _PancakeSwapAddress,address _WBNBAddress,uint24 _poolFee) public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_205:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4063:4070  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4100  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4116  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":9926:10018  function setLPXAmount(uint Amount) public onlyOwner{... */\n    tag_212:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_464\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_464:\n        /* \"contracts/SwapToken/FRGST.sol\":9992:9993  2 */\n      0x02\n        /* \"contracts/SwapToken/FRGST.sol\":9987:9994  Taxs[2] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":9987:9991  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":9987:9994  Taxs[2] */\n      0x20\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":9987:10011  Taxs[2].XAmount = Amount */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":9926:10018  function setLPXAmount(uint Amount) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":9208:9368  function setInvestmentBuyTax(uint Tax) public onlyOwner{... */\n    tag_215:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_467\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_467:\n        /* \"contracts/SwapToken/FRGST.sol\":9299:9301  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":9293:9296  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":9293:9301  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":9273:9331  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_470\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_470:\n        /* \"contracts/SwapToken/FRGST.sol\":9346:9347  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":9341:9348  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":9341:9345  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":9341:9348  Taxs[3] */\n      0x20\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":9341:9355  Taxs[3].BuyTax */\n      0x64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33f\n        /* \"contracts/SwapToken/FRGST.sol\":9341:9361  Taxs[3].BuyTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":9208:9368  function setInvestmentBuyTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/SwapToken/FRGST.sol\":7761:7923  function setInvestmentSellTax(uint Tax) public onlyOwner{... */\n    tag_218:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_473\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_473:\n        /* \"contracts/SwapToken/FRGST.sol\":7853:7855  15 */\n      0x0f\n        /* \"contracts/SwapToken/FRGST.sol\":7847:7850  Tax */\n      dup2\n        /* \"contracts/SwapToken/FRGST.sol\":7847:7855  Tax <=15 */\n      gt\n      iszero\n        /* \"contracts/SwapToken/FRGST.sol\":7827:7885  require(Tax >= 0 && Tax <=15,\"Tax Amount must be 0 to 15\") */\n      tag_476\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_228\n      swap1\n      tag_229\n      jump\t// in\n    tag_476:\n        /* \"contracts/SwapToken/FRGST.sol\":7900:7901  3 */\n      0x03\n        /* \"contracts/SwapToken/FRGST.sol\":7895:7902  Taxs[3] */\n      0x00\n      mstore\n        /* \"contracts/SwapToken/FRGST.sol\":7895:7899  Taxs */\n      0x0b\n        /* \"contracts/SwapToken/FRGST.sol\":7895:7902  Taxs[3] */\n      0x20\n      mstore\n      0x64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e\n        /* \"contracts/SwapToken/FRGST.sol\":7895:7916  Taxs[3].SellTax = Tax */\n      sstore\n        /* \"contracts/SwapToken/FRGST.sol\":7761:7923  function setInvestmentSellTax(uint Tax) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_221:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_479\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_224\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_479:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_481\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9238:9240   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9220:9241   */\n      mstore\n        /* \"#utility.yul\":9277:9279   */\n      0x26\n        /* \"#utility.yul\":9257:9275   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9250:9280   */\n      mstore\n        /* \"#utility.yul\":9316:9350   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":9296:9314   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9289:9351   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":9367:9385   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9360:9396   */\n      mstore\n        /* \"#utility.yul\":9413:9432   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_228\n        /* \"#utility.yul\":9036:9438   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_481:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_279\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_294\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_224:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_293\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9645:9647   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9627:9648   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":9664:9682   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9657:9687   */\n      mstore\n        /* \"#utility.yul\":9723:9757   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":9703:9721   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9696:9758   */\n      mstore\n        /* \"#utility.yul\":9775:9793   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_228\n        /* \"#utility.yul\":9443:9799   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10874  function _approve(... */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10635:10654  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_493\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10006:10008   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9988:10009   */\n      mstore\n        /* \"#utility.yul\":10045:10047   */\n      0x24\n        /* \"#utility.yul\":10025:10043   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":10018:10048   */\n      mstore\n        /* \"#utility.yul\":10084:10118   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":10064:10082   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10057:10119   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":10135:10153   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10128:10162   */\n      mstore\n        /* \"#utility.yul\":10179:10198   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_228\n        /* \"#utility.yul\":9804:10204   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_493:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10713:10734  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_496\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10411:10413   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10393:10414   */\n      mstore\n        /* \"#utility.yul\":10450:10452   */\n      0x22\n        /* \"#utility.yul\":10430:10448   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10423:10453   */\n      mstore\n        /* \"#utility.yul\":10489:10523   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":10469:10487   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10462:10524   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":10540:10558   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10533:10565   */\n      mstore\n        /* \"#utility.yul\":10582:10601   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_228\n        /* \"#utility.yul\":10209:10607   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_496:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10802  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10795  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10802  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10811  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10820  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1930:1955   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1903:1921   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10874  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11155:11596  function _spendAllowance(... */\n    tag_259:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11285:11309  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11337  allowance(owner, spender) */\n      tag_501\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11322:11327  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11329:11336  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11321  allowance */\n      tag_205\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11337  allowance(owner, spender) */\n      jump\t// in\n    tag_501:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11285:11337  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11351:11367  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11351:11388  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11347:11590  if (currentAllowance != type(uint256).max) {... */\n      tag_506\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11438  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11412:11428  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11412:11438  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_503\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10814:10816   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10796:10817   */\n      mstore\n        /* \"#utility.yul\":10853:10855   */\n      0x1d\n        /* \"#utility.yul\":10833:10851   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10826:10856   */\n      mstore\n        /* \"#utility.yul\":10892:10923   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":10872:10890   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10865:10924   */\n      mstore\n        /* \"#utility.yul\":10941:10959   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_228\n        /* \"#utility.yul\":10612:10965   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_503:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11565  _approve(owner, spender, currentAllowance - amount) */\n      tag_506\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11523:11528  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11530:11537  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11558:11564  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11539:11555  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11539:11564  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11522  _approve */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11565  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_506:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11275:11596  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11155:11596  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7473:8291  function _transfer(... */\n    tag_261:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7599:7617  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_508\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11172:11174   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11154:11175   */\n      mstore\n        /* \"#utility.yul\":11211:11213   */\n      0x25\n        /* \"#utility.yul\":11191:11209   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11184:11214   */\n      mstore\n        /* \"#utility.yul\":11250:11284   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":11230:11248   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11223:11285   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":11301:11319   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11294:11329   */\n      mstore\n        /* \"#utility.yul\":11346:11365   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_228\n        /* \"#utility.yul\":10970:11371   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_508:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7677:7693  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_511\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11578:11580   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11560:11581   */\n      mstore\n        /* \"#utility.yul\":11617:11619   */\n      0x23\n        /* \"#utility.yul\":11597:11615   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11590:11620   */\n      mstore\n        /* \"#utility.yul\":11656:11690   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":11636:11654   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11629:11691   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":11707:11725   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11700:11733   */\n      mstore\n        /* \"#utility.yul\":11750:11769   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_228\n        /* \"#utility.yul\":11376:11775   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_511:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7815:7830  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7793:7812  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7815:7830  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7848:7869  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_516\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11982:11984   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11964:11985   */\n      mstore\n        /* \"#utility.yul\":12021:12023   */\n      0x26\n        /* \"#utility.yul\":12001:12019   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11994:12024   */\n      mstore\n        /* \"#utility.yul\":12060:12094   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":12040:12058   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12033:12095   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":12111:12129   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12104:12140   */\n      mstore\n        /* \"#utility.yul\":12157:12176   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_228\n        /* \"#utility.yul\":11780:12182   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_516:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7961  _balances[from] */\n      dup5\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7955  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7961  _balances[from] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7964:7984  fromBalance - amount */\n      dup8\n      dup8\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7984  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8174  _balances[to] */\n      swap4\n      dup8\n      and\n      dup1\n      dup4\n      mstore\n      swap2\n      dup5\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8184  _balances[to] += amount */\n      dup1\n      sload\n      dup8\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      swap3\n      mload\n        /* \"#utility.yul\":1930:1955   */\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8174  _balances[to] */\n      swap1\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1903:1921   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8284  _afterTokenTransfer(from, to, amount) */\n      tag_506\n        /* \"contracts/SwapToken/FRGST.sol\":11471:11579  function WithdrawWBNB(address to,uint amount) public onlyOwner{... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9422:10081  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_281:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9505:9526  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9497:9564  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_523\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12389:12391   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9497:9564  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12371:12392   */\n      mstore\n        /* \"#utility.yul\":12428:12430   */\n      0x21\n        /* \"#utility.yul\":12408:12426   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12401:12431   */\n      mstore\n        /* \"#utility.yul\":12467:12501   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":12447:12465   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12440:12502   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":12518:12536   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12511:12542   */\n      mstore\n        /* \"#utility.yul\":12559:12578   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9497:9564  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_228\n        /* \"#utility.yul\":12187:12584   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9497:9564  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_523:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9660:9678  _balances[account] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9635:9657  uint256 accountBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9660:9678  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9696:9720  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9688:9759  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_527\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12791:12793   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9688:9759  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12773:12794   */\n      mstore\n        /* \"#utility.yul\":12830:12832   */\n      0x22\n        /* \"#utility.yul\":12810:12828   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12803:12833   */\n      mstore\n        /* \"#utility.yul\":12869:12903   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":12849:12867   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12842:12904   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":12920:12938   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12913:12945   */\n      mstore\n        /* \"#utility.yul\":12962:12981   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9688:9759  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_228\n        /* \"#utility.yul\":12589:12987   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9688:9759  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_527:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9793:9811  _balances[account] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9793:9802  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9793:9811  _balances[account] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9814:9837  accountBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9793:9837  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9930:9942  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9930:9952  _totalSupply -= amount */\n      dup1\n      sload\n      dup8\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9978:10015  Transfer(account, address(0), amount) */\n      mload\n        /* \"#utility.yul\":1930:1955   */\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9793:9802  _balances */\n      swap2\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9793:9811  _balances[account] */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9978:10015  Transfer(account, address(0), amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1903:1921   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9978:10015  Transfer(account, address(0), amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/SwapToken/FRGST.sol\":11543:11572  WBNBToken.transfer(to,amount) */\n      pop\n        /* \"contracts/SwapToken/FRGST.sol\":11471:11579  function WithdrawWBNB(address to,uint amount) public onlyOwner{... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_294:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      0x05\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3727:3916  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_337:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3806:3810  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3888  _transfer(owner, to, amount) */\n      tag_240\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3877:3879  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3881:3887  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3869  _transfer */\n      tag_261\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3888  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"#utility.yul\":14:194   */\n    tag_58:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_543\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_543:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":199:747   */\n    tag_63:\n        /* \"#utility.yul\":311:315   */\n      0x00\n        /* \"#utility.yul\":340:342   */\n      0x20\n        /* \"#utility.yul\":369:371   */\n      dup1\n        /* \"#utility.yul\":358:367   */\n      dup4\n        /* \"#utility.yul\":351:372   */\n      mstore\n        /* \"#utility.yul\":401:407   */\n      dup4\n        /* \"#utility.yul\":395:408   */\n      mload\n        /* \"#utility.yul\":444:450   */\n      dup1\n        /* \"#utility.yul\":439:441   */\n      dup3\n        /* \"#utility.yul\":428:437   */\n      dup6\n        /* \"#utility.yul\":424:442   */\n      add\n        /* \"#utility.yul\":417:451   */\n      mstore\n        /* \"#utility.yul\":469:470   */\n      0x00\n        /* \"#utility.yul\":479:619   */\n    tag_545:\n        /* \"#utility.yul\":493:499   */\n      dup2\n        /* \"#utility.yul\":490:491   */\n      dup2\n        /* \"#utility.yul\":487:500   */\n      lt\n        /* \"#utility.yul\":479:619   */\n      iszero\n      tag_547\n      jumpi\n        /* \"#utility.yul\":588:602   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":584:607   */\n      dup4\n      add\n        /* \"#utility.yul\":578:608   */\n      mload\n        /* \"#utility.yul\":554:571   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":573:575   */\n      0x40\n        /* \"#utility.yul\":550:576   */\n      add\n        /* \"#utility.yul\":543:609   */\n      mstore\n        /* \"#utility.yul\":508:518   */\n      dup3\n      add\n        /* \"#utility.yul\":479:619   */\n      jump(tag_545)\n    tag_547:\n        /* \"#utility.yul\":483:486   */\n      pop\n        /* \"#utility.yul\":668:669   */\n      0x00\n        /* \"#utility.yul\":663:665   */\n      0x40\n        /* \"#utility.yul\":654:660   */\n      dup3\n        /* \"#utility.yul\":643:652   */\n      dup7\n        /* \"#utility.yul\":639:661   */\n      add\n        /* \"#utility.yul\":635:666   */\n      add\n        /* \"#utility.yul\":628:670   */\n      mstore\n        /* \"#utility.yul\":738:740   */\n      0x40\n        /* \"#utility.yul\":731:733   */\n      0x1f\n        /* \"#utility.yul\":727:734   */\n      not\n        /* \"#utility.yul\":722:724   */\n      0x1f\n        /* \"#utility.yul\":714:720   */\n      dup4\n        /* \"#utility.yul\":710:725   */\n      add\n        /* \"#utility.yul\":706:735   */\n      and\n        /* \"#utility.yul\":695:704   */\n      dup6\n        /* \"#utility.yul\":691:736   */\n      add\n        /* \"#utility.yul\":687:741   */\n      add\n        /* \"#utility.yul\":679:741   */\n      swap3\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":199:747   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":947:1120   */\n    tag_538:\n        /* \"#utility.yul\":1015:1035   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1064:1095   */\n      dup2\n      and\n        /* \"#utility.yul\":1054:1096   */\n      dup2\n      eq\n        /* \"#utility.yul\":1044:1114   */\n      tag_550\n      jumpi\n        /* \"#utility.yul\":1110:1111   */\n      0x00\n        /* \"#utility.yul\":1107:1108   */\n      dup1\n        /* \"#utility.yul\":1100:1112   */\n      revert\n        /* \"#utility.yul\":1044:1114   */\n    tag_550:\n        /* \"#utility.yul\":947:1120   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1125:1379   */\n    tag_70:\n        /* \"#utility.yul\":1193:1199   */\n      0x00\n        /* \"#utility.yul\":1201:1207   */\n      dup1\n        /* \"#utility.yul\":1254:1256   */\n      0x40\n        /* \"#utility.yul\":1242:1251   */\n      dup4\n        /* \"#utility.yul\":1233:1240   */\n      dup6\n        /* \"#utility.yul\":1229:1252   */\n      sub\n        /* \"#utility.yul\":1225:1257   */\n      slt\n        /* \"#utility.yul\":1222:1274   */\n      iszero\n      tag_552\n      jumpi\n        /* \"#utility.yul\":1270:1271   */\n      0x00\n        /* \"#utility.yul\":1267:1268   */\n      dup1\n        /* \"#utility.yul\":1260:1272   */\n      revert\n        /* \"#utility.yul\":1222:1274   */\n    tag_552:\n        /* \"#utility.yul\":1293:1322   */\n      tag_553\n        /* \"#utility.yul\":1312:1321   */\n      dup4\n        /* \"#utility.yul\":1293:1322   */\n      tag_538\n      jump\t// in\n    tag_553:\n        /* \"#utility.yul\":1283:1322   */\n      swap5\n        /* \"#utility.yul\":1369:1371   */\n      0x20\n        /* \"#utility.yul\":1354:1372   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1341:1373   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1125:1379   */\n      jump\t// out\n        /* \"#utility.yul\":1966:2351   */\n    tag_87:\n        /* \"#utility.yul\":2052:2058   */\n      0x00\n        /* \"#utility.yul\":2060:2066   */\n      dup1\n        /* \"#utility.yul\":2068:2074   */\n      0x00\n        /* \"#utility.yul\":2076:2082   */\n      dup1\n        /* \"#utility.yul\":2129:2132   */\n      0x80\n        /* \"#utility.yul\":2117:2126   */\n      dup6\n        /* \"#utility.yul\":2108:2115   */\n      dup8\n        /* \"#utility.yul\":2104:2127   */\n      sub\n        /* \"#utility.yul\":2100:2133   */\n      slt\n        /* \"#utility.yul\":2097:2150   */\n      iszero\n      tag_558\n      jumpi\n        /* \"#utility.yul\":2146:2147   */\n      0x00\n        /* \"#utility.yul\":2143:2144   */\n      dup1\n        /* \"#utility.yul\":2136:2148   */\n      revert\n        /* \"#utility.yul\":2097:2150   */\n    tag_558:\n      pop\n      pop\n        /* \"#utility.yul\":2169:2192   */\n      dup3\n      calldataload\n      swap5\n        /* \"#utility.yul\":2239:2241   */\n      0x20\n        /* \"#utility.yul\":2224:2242   */\n      dup5\n      add\n        /* \"#utility.yul\":2211:2243   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":2290:2292   */\n      0x40\n        /* \"#utility.yul\":2275:2293   */\n      dup5\n      add\n        /* \"#utility.yul\":2262:2294   */\n      calldataload\n      swap4\n        /* \"#utility.yul\":2341:2343   */\n      0x60\n        /* \"#utility.yul\":2326:2344   */\n      add\n        /* \"#utility.yul\":2313:2345   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":1966:2351   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2356:2684   */\n    tag_94:\n        /* \"#utility.yul\":2433:2439   */\n      0x00\n        /* \"#utility.yul\":2441:2447   */\n      dup1\n        /* \"#utility.yul\":2449:2455   */\n      0x00\n        /* \"#utility.yul\":2502:2504   */\n      0x60\n        /* \"#utility.yul\":2490:2499   */\n      dup5\n        /* \"#utility.yul\":2481:2488   */\n      dup7\n        /* \"#utility.yul\":2477:2500   */\n      sub\n        /* \"#utility.yul\":2473:2505   */\n      slt\n        /* \"#utility.yul\":2470:2522   */\n      iszero\n      tag_560\n      jumpi\n        /* \"#utility.yul\":2518:2519   */\n      0x00\n        /* \"#utility.yul\":2515:2516   */\n      dup1\n        /* \"#utility.yul\":2508:2520   */\n      revert\n        /* \"#utility.yul\":2470:2522   */\n    tag_560:\n        /* \"#utility.yul\":2541:2570   */\n      tag_561\n        /* \"#utility.yul\":2560:2569   */\n      dup5\n        /* \"#utility.yul\":2541:2570   */\n      tag_538\n      jump\t// in\n    tag_561:\n        /* \"#utility.yul\":2531:2570   */\n      swap3\n      pop\n        /* \"#utility.yul\":2589:2627   */\n      tag_562\n        /* \"#utility.yul\":2623:2625   */\n      0x20\n        /* \"#utility.yul\":2612:2621   */\n      dup6\n        /* \"#utility.yul\":2608:2626   */\n      add\n        /* \"#utility.yul\":2589:2627   */\n      tag_538\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":2579:2627   */\n      swap2\n      pop\n        /* \"#utility.yul\":2674:2676   */\n      0x40\n        /* \"#utility.yul\":2663:2672   */\n      dup5\n        /* \"#utility.yul\":2659:2677   */\n      add\n        /* \"#utility.yul\":2646:2678   */\n      calldataload\n        /* \"#utility.yul\":2636:2678   */\n      swap1\n      pop\n        /* \"#utility.yul\":2356:2684   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2689:2807   */\n    tag_539:\n        /* \"#utility.yul\":2775:2780   */\n      dup1\n        /* \"#utility.yul\":2768:2781   */\n      iszero\n        /* \"#utility.yul\":2761:2782   */\n      iszero\n        /* \"#utility.yul\":2754:2759   */\n      dup2\n        /* \"#utility.yul\":2751:2783   */\n      eq\n        /* \"#utility.yul\":2741:2801   */\n      tag_279\n      jumpi\n        /* \"#utility.yul\":2797:2798   */\n      0x00\n        /* \"#utility.yul\":2794:2795   */\n      dup1\n        /* \"#utility.yul\":2787:2799   */\n      revert\n        /* \"#utility.yul\":2812:3053   */\n    tag_99:\n        /* \"#utility.yul\":2868:2874   */\n      0x00\n        /* \"#utility.yul\":2921:2923   */\n      0x20\n        /* \"#utility.yul\":2909:2918   */\n      dup3\n        /* \"#utility.yul\":2900:2907   */\n      dup5\n        /* \"#utility.yul\":2896:2919   */\n      sub\n        /* \"#utility.yul\":2892:2924   */\n      slt\n        /* \"#utility.yul\":2889:2941   */\n      iszero\n      tag_566\n      jumpi\n        /* \"#utility.yul\":2937:2938   */\n      0x00\n        /* \"#utility.yul\":2934:2935   */\n      dup1\n        /* \"#utility.yul\":2927:2939   */\n      revert\n        /* \"#utility.yul\":2889:2941   */\n    tag_566:\n        /* \"#utility.yul\":2976:2985   */\n      dup2\n        /* \"#utility.yul\":2963:2986   */\n      calldataload\n        /* \"#utility.yul\":2995:3023   */\n      tag_567\n        /* \"#utility.yul\":3017:3022   */\n      dup2\n        /* \"#utility.yul\":2995:3023   */\n      tag_539\n      jump\t// in\n    tag_567:\n        /* \"#utility.yul\":3042:3047   */\n      swap4\n        /* \"#utility.yul\":2812:3053   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3247:3433   */\n    tag_113:\n        /* \"#utility.yul\":3306:3312   */\n      0x00\n        /* \"#utility.yul\":3359:3361   */\n      0x20\n        /* \"#utility.yul\":3347:3356   */\n      dup3\n        /* \"#utility.yul\":3338:3345   */\n      dup5\n        /* \"#utility.yul\":3334:3357   */\n      sub\n        /* \"#utility.yul\":3330:3362   */\n      slt\n        /* \"#utility.yul\":3327:3379   */\n      iszero\n      tag_570\n      jumpi\n        /* \"#utility.yul\":3375:3376   */\n      0x00\n        /* \"#utility.yul\":3372:3373   */\n      dup1\n        /* \"#utility.yul\":3365:3377   */\n      revert\n        /* \"#utility.yul\":3327:3379   */\n    tag_570:\n        /* \"#utility.yul\":3398:3427   */\n      tag_567\n        /* \"#utility.yul\":3417:3426   */\n      dup3\n        /* \"#utility.yul\":3398:3427   */\n      tag_538\n      jump\t// in\n        /* \"#utility.yul\":3660:3914   */\n    tag_144:\n        /* \"#utility.yul\":3728:3734   */\n      0x00\n        /* \"#utility.yul\":3736:3742   */\n      dup1\n        /* \"#utility.yul\":3789:3791   */\n      0x40\n        /* \"#utility.yul\":3777:3786   */\n      dup4\n        /* \"#utility.yul\":3768:3775   */\n      dup6\n        /* \"#utility.yul\":3764:3787   */\n      sub\n        /* \"#utility.yul\":3760:3792   */\n      slt\n        /* \"#utility.yul\":3757:3809   */\n      iszero\n      tag_574\n      jumpi\n        /* \"#utility.yul\":3805:3806   */\n      0x00\n        /* \"#utility.yul\":3802:3803   */\n      dup1\n        /* \"#utility.yul\":3795:3807   */\n      revert\n        /* \"#utility.yul\":3757:3809   */\n    tag_574:\n        /* \"#utility.yul\":3841:3850   */\n      dup3\n        /* \"#utility.yul\":3828:3851   */\n      calldataload\n        /* \"#utility.yul\":3818:3851   */\n      swap2\n      pop\n        /* \"#utility.yul\":3870:3908   */\n      tag_575\n        /* \"#utility.yul\":3904:3906   */\n      0x20\n        /* \"#utility.yul\":3893:3902   */\n      dup5\n        /* \"#utility.yul\":3889:3907   */\n      add\n        /* \"#utility.yul\":3870:3908   */\n      tag_538\n      jump\t// in\n    tag_575:\n        /* \"#utility.yul\":3860:3908   */\n      swap1\n      pop\n        /* \"#utility.yul\":3660:3914   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4146:4568   */\n    tag_195:\n        /* \"#utility.yul\":4222:4228   */\n      0x00\n        /* \"#utility.yul\":4230:4236   */\n      dup1\n        /* \"#utility.yul\":4238:4244   */\n      0x00\n        /* \"#utility.yul\":4291:4293   */\n      0x60\n        /* \"#utility.yul\":4279:4288   */\n      dup5\n        /* \"#utility.yul\":4270:4277   */\n      dup7\n        /* \"#utility.yul\":4266:4289   */\n      sub\n        /* \"#utility.yul\":4262:4294   */\n      slt\n        /* \"#utility.yul\":4259:4311   */\n      iszero\n      tag_578\n      jumpi\n        /* \"#utility.yul\":4307:4308   */\n      0x00\n        /* \"#utility.yul\":4304:4305   */\n      dup1\n        /* \"#utility.yul\":4297:4309   */\n      revert\n        /* \"#utility.yul\":4259:4311   */\n    tag_578:\n        /* \"#utility.yul\":4330:4359   */\n      tag_579\n        /* \"#utility.yul\":4349:4358   */\n      dup5\n        /* \"#utility.yul\":4330:4359   */\n      tag_538\n      jump\t// in\n    tag_579:\n        /* \"#utility.yul\":4320:4359   */\n      swap3\n      pop\n        /* \"#utility.yul\":4378:4416   */\n      tag_580\n        /* \"#utility.yul\":4412:4414   */\n      0x20\n        /* \"#utility.yul\":4401:4410   */\n      dup6\n        /* \"#utility.yul\":4397:4415   */\n      add\n        /* \"#utility.yul\":4378:4416   */\n      tag_538\n      jump\t// in\n    tag_580:\n        /* \"#utility.yul\":4368:4416   */\n      swap2\n      pop\n        /* \"#utility.yul\":4466:4468   */\n      0x40\n        /* \"#utility.yul\":4455:4464   */\n      dup5\n        /* \"#utility.yul\":4451:4469   */\n      add\n        /* \"#utility.yul\":4438:4470   */\n      calldataload\n        /* \"#utility.yul\":4510:4518   */\n      0xffffff\n        /* \"#utility.yul\":4503:4508   */\n      dup2\n        /* \"#utility.yul\":4499:4519   */\n      and\n        /* \"#utility.yul\":4492:4497   */\n      dup2\n        /* \"#utility.yul\":4489:4520   */\n      eq\n        /* \"#utility.yul\":4479:4538   */\n      tag_581\n      jumpi\n        /* \"#utility.yul\":4534:4535   */\n      0x00\n        /* \"#utility.yul\":4531:4532   */\n      dup1\n        /* \"#utility.yul\":4524:4536   */\n      revert\n        /* \"#utility.yul\":4479:4538   */\n    tag_581:\n        /* \"#utility.yul\":4557:4562   */\n      dup1\n        /* \"#utility.yul\":4547:4562   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":4146:4568   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4969:5229   */\n    tag_204:\n        /* \"#utility.yul\":5037:5043   */\n      0x00\n        /* \"#utility.yul\":5045:5051   */\n      dup1\n        /* \"#utility.yul\":5098:5100   */\n      0x40\n        /* \"#utility.yul\":5086:5095   */\n      dup4\n        /* \"#utility.yul\":5077:5084   */\n      dup6\n        /* \"#utility.yul\":5073:5096   */\n      sub\n        /* \"#utility.yul\":5069:5101   */\n      slt\n        /* \"#utility.yul\":5066:5118   */\n      iszero\n      tag_584\n      jumpi\n        /* \"#utility.yul\":5114:5115   */\n      0x00\n        /* \"#utility.yul\":5111:5112   */\n      dup1\n        /* \"#utility.yul\":5104:5116   */\n      revert\n        /* \"#utility.yul\":5066:5118   */\n    tag_584:\n        /* \"#utility.yul\":5137:5166   */\n      tag_585\n        /* \"#utility.yul\":5156:5165   */\n      dup4\n        /* \"#utility.yul\":5137:5166   */\n      tag_538\n      jump\t// in\n    tag_585:\n        /* \"#utility.yul\":5127:5166   */\n      swap2\n      pop\n        /* \"#utility.yul\":5185:5223   */\n      tag_575\n        /* \"#utility.yul\":5219:5221   */\n      0x20\n        /* \"#utility.yul\":5208:5217   */\n      dup5\n        /* \"#utility.yul\":5204:5222   */\n      add\n        /* \"#utility.yul\":5185:5223   */\n      tag_538\n      jump\t// in\n        /* \"#utility.yul\":5234:5584   */\n    tag_229:\n        /* \"#utility.yul\":5436:5438   */\n      0x20\n        /* \"#utility.yul\":5418:5439   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5475:5477   */\n      0x1a\n        /* \"#utility.yul\":5455:5473   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5448:5478   */\n      mstore\n        /* \"#utility.yul\":5514:5542   */\n      0x54617820416d6f756e74206d757374206265203020746f203135000000000000\n        /* \"#utility.yul\":5509:5511   */\n      0x40\n        /* \"#utility.yul\":5494:5512   */\n      dup3\n      add\n        /* \"#utility.yul\":5487:5543   */\n      mstore\n        /* \"#utility.yul\":5575:5577   */\n      0x60\n        /* \"#utility.yul\":5560:5578   */\n      add\n      swap1\n        /* \"#utility.yul\":5234:5584   */\n      jump\t// out\n        /* \"#utility.yul\":5589:5969   */\n    tag_232:\n        /* \"#utility.yul\":5668:5669   */\n      0x01\n        /* \"#utility.yul\":5664:5676   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5711:5723   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5732:5793   */\n      tag_589\n      jumpi\n        /* \"#utility.yul\":5786:5790   */\n      0x7f\n        /* \"#utility.yul\":5778:5784   */\n      dup3\n        /* \"#utility.yul\":5774:5791   */\n      and\n        /* \"#utility.yul\":5764:5791   */\n      swap2\n      pop\n        /* \"#utility.yul\":5732:5793   */\n    tag_589:\n        /* \"#utility.yul\":5839:5841   */\n      0x20\n        /* \"#utility.yul\":5831:5837   */\n      dup3\n        /* \"#utility.yul\":5828:5842   */\n      lt\n        /* \"#utility.yul\":5808:5826   */\n      dup2\n        /* \"#utility.yul\":5805:5843   */\n      sub\n        /* \"#utility.yul\":5802:5963   */\n      tag_590\n      jumpi\n        /* \"#utility.yul\":5885:5895   */\n      0x4e487b71\n        /* \"#utility.yul\":5880:5883   */\n      0xe0\n        /* \"#utility.yul\":5876:5896   */\n      shl\n        /* \"#utility.yul\":5873:5874   */\n      0x00\n        /* \"#utility.yul\":5866:5897   */\n      mstore\n        /* \"#utility.yul\":5920:5924   */\n      0x22\n        /* \"#utility.yul\":5917:5918   */\n      0x04\n        /* \"#utility.yul\":5910:5925   */\n      mstore\n        /* \"#utility.yul\":5948:5952   */\n      0x24\n        /* \"#utility.yul\":5945:5946   */\n      0x00\n        /* \"#utility.yul\":5938:5953   */\n      revert\n        /* \"#utility.yul\":5802:5963   */\n    tag_590:\n      pop\n        /* \"#utility.yul\":5589:5969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6324:6451   */\n    tag_540:\n        /* \"#utility.yul\":6385:6395   */\n      0x4e487b71\n        /* \"#utility.yul\":6380:6383   */\n      0xe0\n        /* \"#utility.yul\":6376:6396   */\n      shl\n        /* \"#utility.yul\":6373:6374   */\n      0x00\n        /* \"#utility.yul\":6366:6397   */\n      mstore\n        /* \"#utility.yul\":6416:6420   */\n      0x11\n        /* \"#utility.yul\":6413:6414   */\n      0x04\n        /* \"#utility.yul\":6406:6421   */\n      mstore\n        /* \"#utility.yul\":6440:6444   */\n      0x24\n        /* \"#utility.yul\":6437:6438   */\n      0x00\n        /* \"#utility.yul\":6430:6445   */\n      revert\n        /* \"#utility.yul\":6456:6581   */\n    tag_277:\n        /* \"#utility.yul\":6521:6530   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":6542:6552   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":6539:6575   */\n      iszero\n      tag_237\n      jumpi\n        /* \"#utility.yul\":6555:6573   */\n      tag_237\n      tag_540\n      jump\t// in\n        /* \"#utility.yul\":6865:7110   */\n    tag_301:\n        /* \"#utility.yul\":6932:6938   */\n      0x00\n        /* \"#utility.yul\":6985:6987   */\n      0x20\n        /* \"#utility.yul\":6973:6982   */\n      dup3\n        /* \"#utility.yul\":6964:6971   */\n      dup5\n        /* \"#utility.yul\":6960:6983   */\n      sub\n        /* \"#utility.yul\":6956:6988   */\n      slt\n        /* \"#utility.yul\":6953:7005   */\n      iszero\n      tag_598\n      jumpi\n        /* \"#utility.yul\":7001:7002   */\n      0x00\n        /* \"#utility.yul\":6998:6999   */\n      dup1\n        /* \"#utility.yul\":6991:7003   */\n      revert\n        /* \"#utility.yul\":6953:7005   */\n    tag_598:\n        /* \"#utility.yul\":7033:7042   */\n      dup2\n        /* \"#utility.yul\":7027:7043   */\n      mload\n        /* \"#utility.yul\":7052:7080   */\n      tag_567\n        /* \"#utility.yul\":7074:7079   */\n      dup2\n        /* \"#utility.yul\":7052:7080   */\n      tag_539\n      jump\t// in\n        /* \"#utility.yul\":7913:8097   */\n    tag_307:\n        /* \"#utility.yul\":7983:7989   */\n      0x00\n        /* \"#utility.yul\":8036:8038   */\n      0x20\n        /* \"#utility.yul\":8024:8033   */\n      dup3\n        /* \"#utility.yul\":8015:8022   */\n      dup5\n        /* \"#utility.yul\":8011:8034   */\n      sub\n        /* \"#utility.yul\":8007:8039   */\n      slt\n        /* \"#utility.yul\":8004:8056   */\n      iszero\n      tag_602\n      jumpi\n        /* \"#utility.yul\":8052:8053   */\n      0x00\n        /* \"#utility.yul\":8049:8050   */\n      dup1\n        /* \"#utility.yul\":8042:8054   */\n      revert\n        /* \"#utility.yul\":8004:8056   */\n    tag_602:\n      pop\n        /* \"#utility.yul\":8075:8091   */\n      mload\n      swap2\n        /* \"#utility.yul\":7913:8097   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8508:8676   */\n    tag_341:\n        /* \"#utility.yul\":8581:8590   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":8612:8621   */\n      dup2\n      iszero\n        /* \"#utility.yul\":8629:8644   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":8623:8645   */\n      dup5\n      eq\n        /* \"#utility.yul\":8609:8646   */\n      or\n        /* \"#utility.yul\":8599:8670   */\n      tag_237\n      jumpi\n        /* \"#utility.yul\":8650:8668   */\n      tag_237\n      tag_540\n      jump\t// in\n        /* \"#utility.yul\":8681:8898   */\n    tag_343:\n        /* \"#utility.yul\":8721:8722   */\n      0x00\n        /* \"#utility.yul\":8747:8748   */\n      dup3\n        /* \"#utility.yul\":8737:8869   */\n      tag_608\n      jumpi\n        /* \"#utility.yul\":8791:8801   */\n      0x4e487b71\n        /* \"#utility.yul\":8786:8789   */\n      0xe0\n        /* \"#utility.yul\":8782:8802   */\n      shl\n        /* \"#utility.yul\":8779:8780   */\n      0x00\n        /* \"#utility.yul\":8772:8803   */\n      mstore\n        /* \"#utility.yul\":8826:8830   */\n      0x12\n        /* \"#utility.yul\":8823:8824   */\n      0x04\n        /* \"#utility.yul\":8816:8831   */\n      mstore\n        /* \"#utility.yul\":8854:8858   */\n      0x24\n        /* \"#utility.yul\":8851:8852   */\n      0x00\n        /* \"#utility.yul\":8844:8859   */\n      revert\n        /* \"#utility.yul\":8737:8869   */\n    tag_608:\n      pop\n        /* \"#utility.yul\":8883:8892   */\n      div\n      swap1\n        /* \"#utility.yul\":8681:8898   */\n      jump\t// out\n        /* \"#utility.yul\":8903:9031   */\n    tag_359:\n        /* \"#utility.yul\":8970:8979   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":8991:9002   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":8988:9025   */\n      iszero\n      tag_237\n      jumpi\n        /* \"#utility.yul\":9005:9023   */\n      tag_237\n      tag_540\n      jump\t// in\n    stop\n    data_01ae0451e5a3376fcae57e2b9e1da8e102c4453020935abb5805ca3e0e709d81 a50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91637\n    data_207f108adf1d6c644b6ad33067fd4794aef88983b5068a410f42a411daa17b80 a50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91636\n    data_74583ccecd8ad1b0ed6ceeb51c0f8c852ae662e302540ff65c0210e7eed14bfc 12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c787\n    data_7d5afdc40f419cd4c454e66a5a6871164baa29e2e52bd3ec4f887d908a6ea2fa 12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c786\n    data_cd257bd0bf1ac8f5dbcd7cb80f6302024596a08f94617259c19eb1ec41cf4cb2 64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d341\n    data_f574df558a4ef90b0f9140707b04d8bd5a2b90f8b0e4dd892b3084d5906c37fa 64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d340\n\n    auxdata: 0xa2646970667358221220150217ebea8d1435229002edec20fb7d374c0490f3640c17467241ef91c347c764736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1081": {
									"entryPoint": null,
									"id": 1081,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_157": {
									"entryPoint": null,
									"id": 157,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_698": {
									"entryPoint": null,
									"id": 698,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_687": {
									"entryPoint": 567,
									"id": 687,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_mint_516": {
									"entryPoint": 369,
									"id": 516,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_858": {
									"entryPoint": 283,
									"id": 858,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 287,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decimals_187": {
									"entryPoint": null,
									"id": 187,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1267,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 962,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 1217,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 1035,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1241,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 654,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 736,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 594,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 940,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 572,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5092:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "201:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "211:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "225:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "228:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "221:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "221:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "242:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "272:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "278:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "268:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "268:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "246:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "319:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "321:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "335:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "343:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "331:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "331:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "321:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "299:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "292:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "292:26:9"
															},
															"nodeType": "YulIf",
															"src": "289:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "409:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "430:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "437:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "442:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "433:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "433:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "423:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "423:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "423:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "474:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "477:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "467:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "467:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "467:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "502:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "505:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "495:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "495:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "495:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "365:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "388:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "396:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "385:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "385:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "362:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "362:38:9"
															},
															"nodeType": "YulIf",
															"src": "359:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "181:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "190:6:9",
														"type": ""
													}
												],
												"src": "146:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "587:65:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "604:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "607:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "597:14:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "597:14:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "620:26:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "638:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "641:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "628:9:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "628:18:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "620:4:9"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "570:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "578:4:9",
														"type": ""
													}
												],
												"src": "531:121:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "738:464:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "771:425:9",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "785:11:9",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "795:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "789:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "816:2:9"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "820:5:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "809:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "809:17:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "809:17:9"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "839:31:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "861:2:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "865:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "851:9:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "851:19:9"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "843:4:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "883:57:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "906:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "916:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "923:10:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "935:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "919:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "919:19:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "912:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "912:27:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "902:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "902:38:9"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "887:11:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "977:23:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "979:19:9",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "994:4:9"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "979:11:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "959:10:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "971:4:9",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "956:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:20:9"
																		},
																		"nodeType": "YulIf",
																		"src": "953:47:9"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1013:41:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "1027:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1037:1:9",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "1044:3:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1049:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1040:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1040:12:9"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "1033:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1033:20:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1023:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1023:31:9"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "1017:2:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1067:24:9",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "1080:11:9"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "1071:5:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "1165:21:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "1174:5:9"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "1181:2:9"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "1167:6:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1167:17:9"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "1167:17:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "1115:5:9"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "1122:2:9"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "1112:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1112:13:9"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "1126:26:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "1128:22:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "1141:5:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1148:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1137:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1137:13:9"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "1128:5:9"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "1108:3:9",
																			"statements": []
																		},
																		"src": "1104:82:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "754:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "759:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "751:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "751:11:9"
															},
															"nodeType": "YulIf",
															"src": "748:448:9"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "710:5:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "717:3:9",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "722:10:9",
														"type": ""
													}
												],
												"src": "657:545:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1292:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1302:65:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "1317:4:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1335:1:9",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "1338:3:9"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1331:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1331:11:9"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1348:1:9",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "1344:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1344:6:9"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "1327:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1327:24:9"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "1323:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1323:29:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1313:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1313:40:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1359:1:9",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "1362:3:9"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1355:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1355:11:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1310:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1310:57:9"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "1302:4:9"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1269:4:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "1275:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "1283:4:9",
														"type": ""
													}
												],
												"src": "1207:166:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1474:1256:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1484:24:9",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "1504:3:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1498:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1498:10:9"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "1488:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1551:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1553:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1553:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1553:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "1523:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1539:2:9",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1543:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "1535:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1535:10:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1547:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1531:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1531:18:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1520:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1520:30:9"
															},
															"nodeType": "YulIf",
															"src": "1517:56:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "1626:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "1664:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "1658:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1658:11:9"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "1632:25:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1632:38:9"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "1672:6:9"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "1582:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1582:97:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1582:97:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1688:18:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1705:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "1692:9:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1715:23:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1734:4:9",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "1719:11:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1747:24:9",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "1760:11:9"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "1747:9:9"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "1817:656:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1831:35:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "1850:6:9"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1862:2:9",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "1858:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1858:7:9"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1846:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1846:20:9"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "1835:7:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1879:49:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "1923:4:9"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "1893:29:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1893:35:9"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "1883:6:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "1941:10:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1950:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "1945:1:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2028:172:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "2053:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "2071:3:9"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "2076:9:9"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "2067:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2067:19:9"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "2061:5:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2061:26:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "2046:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2046:42:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2046:42:9"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2105:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "2119:6:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2127:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2115:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2115:14:9"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "2105:6:9"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "2146:40:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "2163:9:9"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "2174:11:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "2159:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2159:27:9"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "2146:9:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1975:1:9"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "1978:7:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "1972:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1972:14:9"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "1987:28:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "1989:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "1998:1:9"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "2001:11:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "1994:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1994:19:9"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1989:1:9"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "1968:3:9",
																					"statements": []
																				},
																				"src": "1964:236:9"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2248:166:9",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "2266:43:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "2293:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "2298:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2289:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2289:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2283:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2283:26:9"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "2270:9:9",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "2333:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "2345:9:9"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "2372:1:9",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "2375:6:9"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "2368:3:9"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "2368:14:9"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "2384:3:9",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "2364:3:9"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "2364:24:9"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "2394:1:9",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "2390:3:9"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "2390:6:9"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "2360:3:9"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "2360:37:9"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "2356:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "2356:42:9"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "2341:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2341:58:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "2326:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2326:74:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "2326:74:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "2219:7:9"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "2228:6:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "2216:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2216:19:9"
																				},
																				"nodeType": "YulIf",
																				"src": "2213:201:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "2434:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "2448:1:9",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "2451:6:9"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "2444:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2444:14:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2460:1:9",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2440:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2440:22:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "2427:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2427:36:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2427:36:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "1810:663:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1815:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "2490:234:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "2504:14:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2517:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "2508:5:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "2553:67:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "2571:35:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "2590:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "2595:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "2586:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "2586:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2580:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2580:26:9"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "2571:5:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "2534:6:9"
																				},
																				"nodeType": "YulIf",
																				"src": "2531:89:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "2640:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "2699:5:9"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "2706:6:9"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "2646:52:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2646:67:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "2633:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2633:81:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "2633:81:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "2482:242:9",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "1790:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1798:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1787:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1787:14:9"
															},
															"nodeType": "YulSwitch",
															"src": "1780:944:9"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "1459:4:9",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1465:3:9",
														"type": ""
													}
												],
												"src": "1378:1352:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2767:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2784:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2791:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2796:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2787:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2787:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2777:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2777:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2777:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2824:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2827:4:9",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2817:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2817:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2817:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2848:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2851:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2841:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2841:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2841:15:9"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2735:127:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2931:358:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2941:16:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2956:1:9",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "2945:7:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2966:16:9",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "2975:7:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "2966:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2991:13:9",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "2999:5:9"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "2991:4:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3055:228:9",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "3100:22:9",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "3102:16:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3102:18:9"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "3102:18:9"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3075:4:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3089:1:9",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "3085:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3085:6:9"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "3093:4:9"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "3081:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3081:17:9"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "3072:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3072:27:9"
																		},
																		"nodeType": "YulIf",
																		"src": "3069:53:9"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "3161:29:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "3163:25:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "3176:5:9"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "3183:4:9"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "3172:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3172:16:9"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "3163:5:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "3142:8:9"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "3152:7:9"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "3138:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3138:22:9"
																		},
																		"nodeType": "YulIf",
																		"src": "3135:55:9"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3203:23:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3215:4:9"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3221:4:9"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "3211:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3211:15:9"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "3203:4:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3239:34:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "3255:7:9"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "3264:8:9"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "3251:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3251:22:9"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "3239:8:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "3024:8:9"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "3034:7:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3021:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3021:21:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3043:3:9",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3017:3:9",
																"statements": []
															},
															"src": "3013:270:9"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "2895:5:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "2902:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "2915:5:9",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "2922:4:9",
														"type": ""
													}
												],
												"src": "2867:422:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3353:747:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3391:52:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3405:10:9",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3414:1:9",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "3405:5:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "3428:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "3373:8:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3366:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3366:16:9"
															},
															"nodeType": "YulIf",
															"src": "3363:80:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3476:52:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3490:10:9",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "3499:1:9",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "3490:5:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "3513:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "3462:4:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3455:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3455:12:9"
															},
															"nodeType": "YulIf",
															"src": "3452:76:9"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3564:52:9",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "3578:10:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3587:1:9",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "3578:5:9"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "3601:5:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3557:59:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3562:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3632:123:9",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3667:22:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "3669:16:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3669:18:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3669:18:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "3652:8:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3662:3:9",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "3649:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3649:17:9"
																				},
																				"nodeType": "YulIf",
																				"src": "3646:43:9"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "3702:25:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "3715:8:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3725:1:9",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3711:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3711:16:9"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "3702:5:9"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "3740:5:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3625:130:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3630:1:9",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "3544:4:9"
															},
															"nodeType": "YulSwitch",
															"src": "3537:218:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3853:70:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3867:28:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3880:4:9"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "3886:8:9"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "3876:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3876:19:9"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "3867:5:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "3908:5:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "3777:4:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3783:2:9",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "3774:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3774:12:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "3791:8:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3801:2:9",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "3788:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3788:16:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3770:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3770:35:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "3814:4:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3820:3:9",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "3811:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3811:13:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "3829:8:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3839:2:9",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "3826:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3826:16:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3807:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3807:36:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3767:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3767:77:9"
															},
															"nodeType": "YulIf",
															"src": "3764:159:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3932:57:9",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "3974:4:9"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "3980:8:9"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "3955:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3955:34:9"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "3936:7:9",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "3945:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4034:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4036:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4036:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4036:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "4004:7:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4021:1:9",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4017:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4017:6:9"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "4025:6:9"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4013:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4013:19:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4001:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4001:32:9"
															},
															"nodeType": "YulIf",
															"src": "3998:58:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4065:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "4078:7:9"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "4087:6:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4074:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4074:20:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "4065:5:9"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "3324:4:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "3330:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "3343:5:9",
														"type": ""
													}
												],
												"src": "3294:806:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4173:72:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4183:56:9",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "4213:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "4223:8:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4233:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4219:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4219:19:9"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "4192:20:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4192:47:9"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "4183:5:9"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "4144:4:9",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "4150:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "4163:5:9",
														"type": ""
													}
												],
												"src": "4105:140:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4302:116:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4312:20:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4327:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4330:1:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4323:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4323:9:9"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4312:7:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4390:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4392:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4392:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4392:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4361:1:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4354:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4354:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "4368:1:9"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "4375:7:9"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "4384:1:9"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "4371:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4371:15:9"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "4365:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4365:22:9"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "4351:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4351:37:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4344:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4344:45:9"
															},
															"nodeType": "YulIf",
															"src": "4341:71:9"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4281:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4284:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4290:7:9",
														"type": ""
													}
												],
												"src": "4250:168:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4597:181:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4614:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4625:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4607:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4607:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4607:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4648:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4659:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4644:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4644:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4664:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4637:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4637:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4637:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4687:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4698:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4683:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4683:18:9"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4703:33:9",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4676:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4676:61:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4676:61:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4746:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4758:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4769:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4754:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4754:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4746:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4574:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4588:4:9",
														"type": ""
													}
												],
												"src": "4423:355:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4831:77:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4841:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4852:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4855:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4848:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4848:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "4841:3:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4880:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4882:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4882:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4882:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4872:1:9"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "4875:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4869:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4869:10:9"
															},
															"nodeType": "YulIf",
															"src": "4866:36:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4814:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4817:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "4823:3:9",
														"type": ""
													}
												],
												"src": "4783:125:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5014:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5024:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5036:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5047:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5032:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5032:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5024:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5066:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5077:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5059:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5059:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5059:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4983:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4994:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5005:4:9",
														"type": ""
													}
												],
												"src": "4913:177:9"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a060405273e592427a0aece92de3edee1f18e0157c058615646080523480156200002957600080fd5b506040518060400160405280600e81526020016d233937b3b3b4b2b9902a37b5b2b760911b81525060405180604001604052806005815260200164119491d4d560da1b8152508160039081620000809190620002e0565b5060046200008f8282620002e0565b505050620000ac620000a66200011b60201b60201c565b6200011f565b620000d733620000bf6012600a620004c1565b620000d190655af3107a4000620004d9565b62000171565b600954600d805463010000009092046001600160a01b03166001600160a01b031992831617905560068054309083168117909155600c805490921617905562000509565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001cc5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001e09190620004f3565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026757607f821691505b6020821081036200028857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023757600081815260208120601f850160051c81016020861015620002b75750805b601f850160051c820191505b81811015620002d857828155600101620002c3565b505050505050565b81516001600160401b03811115620002fc57620002fc6200023c565b62000314816200030d845462000252565b846200028e565b602080601f8311600181146200034c5760008415620003335750858301515b600019600386901b1c1916600185901b178555620002d8565b600085815260208120601f198616915b828110156200037d578886015182559484019460019091019084016200035c565b50858210156200039c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000403578160001904821115620003e757620003e7620003ac565b80851615620003f557918102915b93841c9390800290620003c7565b509250929050565b6000826200041c57506001620004bb565b816200042b57506000620004bb565b81600181146200044457600281146200044f576200046f565b6001915050620004bb565b60ff841115620004635762000463620003ac565b50506001821b620004bb565b5060208310610133831016604e8410600b841016171562000494575081810a620004bb565b620004a08383620003c2565b8060001904821115620004b757620004b7620003ac565b0290505b92915050565b6000620004d260ff8416836200040b565b9392505050565b8082028115828204841417620004bb57620004bb620003ac565b80820180821115620004bb57620004bb620003ac565b60805161204562000533600039600081816105b201528181610a1d0152610b4d01526120456000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c8063793ea8d11161015c578063afe2ddd7116100ce578063dd62ed3e11610087578063dd62ed3e1461064f578063e319c2ce14610662578063e465d64d14610676578063e67d692114610689578063ea173a391461069c578063f2fde38b146106af57600080fd5b8063afe2ddd714610587578063b9e43eee1461059a578063c31c9c07146105ad578063c90880c1146105d4578063ca5fb573146105e7578063ccbd73e7146105fa57600080fd5b80638dd95002116101205780638dd950021461051957806395d89b41146105335780639c42ac131461053b578063a457c2d71461054e578063a9059cbb14610561578063ab72498d1461057457600080fd5b8063793ea8d1146104bc57806379cc6790146104cf57806382fab2ad146104e25780638568b3a5146104f55780638da5cb5b1461050857600080fd5b8063313ce56711610200578063446b5d5f116101b9578063446b5d5f1461042a5780635202ea6d1461043d57806357970e93146104465780636bc201571461045957806370a082311461048b578063715018a6146104b457600080fd5b8063313ce567146103a45780633268cc56146103b357806336eab316146103ce578063372c12b1146103e1578063395093511461040457806342966c681461041757600080fd5b8063172cc5a711610252578063172cc5a71461033357806318160ddd146103465780631901156d14610358578063196fd4be1461036b57806323b872dd1461037e57806324e2a33e1461039157600080fd5b80630445a1031461028f57806306fdde03146102a4578063089fe6aa146102c2578063095ea7b3146102e55780630e1b39fb14610308575b600080fd5b6102a261029d366004611c26565b6106c2565b005b6102ac610722565b6040516102b99190611c3f565b60405180910390f35b6009546102d19062ffffff1681565b60405162ffffff90911681526020016102b9565b6102f86102f3366004611ca9565b6107b4565b60405190151581526020016102b9565b60065461031b906001600160a01b031681565b6040516001600160a01b0390911681526020016102b9565b6102a2610341366004611c26565b6107ce565b6002545b6040519081526020016102b9565b6102a2610366366004611cd3565b610825565b60075461031b906001600160a01b031681565b6102f861038c366004611d05565b6108c8565b6102a261039f366004611d4f565b6108ec565b604051601281526020016102b9565b61031b73e592427a0aece92de3edee1f18e0157c0586156481565b6102a26103dc366004611c26565b610912565b6102f86103ef366004611d73565b600a6020526000908152604090205460ff1681565b6102f8610412366004611ca9565b610969565b6102a2610425366004611c26565b61098b565b6102a2610438366004611c26565b610998565b61034a60085481565b600c5461031b906001600160a01b031681565b6102a2610467366004611d73565b6001600160a01b03166000908152600a60205260409020805460ff19166001179055565b61034a610499366004611d73565b6001600160a01b031660009081526020819052604090205490565b6102a26109ef565b61034a6104ca366004611d8e565b610a03565b6102a26104dd366004611ca9565b610bc5565b600d5461031b906001600160a01b031681565b61034a610503366004611d73565b610bde565b6005546001600160a01b031661031b565b60095461031b90630100000090046001600160a01b031681565b6102ac610c4d565b6102a2610549366004611c26565b610c5c565b6102f861055c366004611ca9565b610c80565b6102f861056f366004611ca9565b610cfb565b6102a2610582366004611c26565b6113c8565b6102a2610595366004611c26565b6113ec565b6102a26105a8366004611ca9565b611443565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b6102a26105e2366004611c26565b6114c7565b6102a26105f5366004611dba565b61151e565b61062f610608366004611c26565b600b6020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016102b9565b61034a61065d366004611e09565b611585565b6006546102f890600160a01b900460ff1681565b6102a2610684366004611c26565b6115b0565b6102a2610697366004611c26565b6115d4565b6102a26106aa366004611c26565b61162b565b6102a26106bd366004611d73565b611682565b6106ca6116f8565b600f8111156106f45760405162461bcd60e51b81526004016106eb90611e33565b60405180910390fd5b6002600052600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163555565b60606003805461073190611e6a565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90611e6a565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b5050505050905090565b6000336107c2818585611752565b60019150505b92915050565b6107d66116f8565b600f8111156107f75760405162461bcd60e51b81526004016106eb90611e33565b6002600052600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163455565b61082d6116f8565b60008111801561083d5750600581105b6108815760405162461bcd60e51b8152602060048201526015602482015274547970204d7573742042652028312c322c332c342960581b60448201526064016106eb565b604080516080810182529485526020808601948552858201938452600060608701818152938152600b90915220935184559151600184015551600283015551600390910155565b6000336108d6858285611876565b6108e18585856118f0565b506001949350505050565b6108f46116f8565b60068054911515600160a01b0260ff60a01b19909216919091179055565b61091a6116f8565b600f81111561093b5760405162461bcd60e51b81526004016106eb90611e33565b6001600052600b6020527f72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5d055565b6000336107c281858561097c8383611585565b6109869190611eba565b611752565b6109953382611a94565b50565b6109a06116f8565b600f8111156109c15760405162461bcd60e51b81526004016106eb90611e33565b6001600052600b6020527f72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5cf55565b6109f76116f8565b610a016000611bc6565b565b600c5460405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600092169063095ea7b3906044016020604051808303816000875af1158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190611ecd565b5060408051610100810182523081526009546001600160a01b036301000000820481166020840190815262ffffff92831684860190815287831660608601908152426080870190815260a087018b8152600060c0890181815260e08a01918252995163414bf38960e01b815289518816600482015295518716602487015293519096166044850152905184166064840152516084830152925160a4820152935160c48501529051811660e484015290917f00000000000000000000000000000000000000000000000000000000000000009091169063414bf38990610104016020604051808303816000875af1158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190611eea565b949350505050565b610bd0823383611876565b610bda8282611a94565b5050565b600d546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c89190611eea565b60606004805461073190611e6a565b610c646116f8565b6004600052600b602052600080516020611fb083398151915255565b60003381610c8e8286611585565b905083811015610cee5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106eb565b6108e18286868403611752565b336000908152600a602052604081205460ff1615610d2457610d1d8383611c18565b90506107c8565b6007546001600160a01b031633036112925760016000908152600b6020527f72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5d054606490610d719085611f03565b610d7b9190611f1a565b60026000908152600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916355491925090606490610dba9086611f03565b610dc49190611f1a565b60036000908152600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33f5491925090606490610e039087611f03565b610e0d9190611f1a565b60046000908152600b6020527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c7855491925090606490610e4c9088611f03565b610e569190611f1a565b6002600052600b602052600080516020611f7083398151915254600080516020611f508339815191525491925090610e8f908590611eba565b10158015610eb557506002600052600b602052600080516020611f708339815191525415155b15610f8f5760075460026000819052600b602052600080516020611f7083398151915254610ef5926001600160a01b031691610ef091611f1a565b611c18565b5060026000819052600b602052600080516020611f7083398151915254610f3091610f1f91611f1a565b6007546001600160a01b0316610a03565b506002600052600b602052600080516020611f7083398151915254600080516020611f5083398151915254610f66908590611eba565b610f709190611f3c565b6002600052600b602052600080516020611f5083398151915255610fc0565b60026000908152600b602052600080516020611f508339815191528054859290610fba908490611eba565b90915550505b6003600052600b602052600080516020611ff083398151915254600080516020611fd083398151915254610ff5908490611eba565b1015801561101b57506003600052600b602052600080516020611ff08339815191525415155b156110a3576003600052600b602052600080516020611ff0833981519152546110449030610a03565b506003600052600b602052600080516020611ff083398151915254600080516020611fd08339815191525461107a908490611eba565b6110849190611f3c565b6003600052600b602052600080516020611fd0833981519152556110d4565b60036000908152600b602052600080516020611fd083398151915280548492906110ce908490611eba565b90915550505b6004600052600b602052600080516020611fb083398151915254600080516020611f9083398151915254611109908390611eba565b101580156111205750600654600160a01b900460ff165b801561114457506004600052600b602052600080516020611fb08339815191525415155b156111cc576004600052600b602052600080516020611fb08339815191525461116d9030610a03565b506004600052600b602052600080516020611fb083398151915254600080516020611f90833981519152546111a3908390611eba565b6111ad9190611f3c565b6004600052600b602052600080516020611f90833981519152556111fd565b60046000908152600b602052600080516020611f9083398151915280548392906111f7908490611eba565b90915550505b600654611213906001600160a01b031685611c18565b5060065461122a906001600160a01b031684611c18565b50600654611241906001600160a01b031683611c18565b50600654611258906001600160a01b031682611c18565b506112878782846112698789611eba565b6112739190611eba565b61127d9190611eba565b610ef09089611f3c565b9450505050506107c8565b6007546001600160a01b03908116908416036113be5760016000908152600b6020527f72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5cf546064906112e39085611f03565b6112ed9190611f1a565b60026000908152600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91634549192509060649061132c9086611f03565b6113369190611f1a565b60036000908152600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e54919250906064906113759087611f03565b61137f9190611f1a565b60046000908152600b6020527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c7845491925090606490610e4c9088611f03565b610d1d8383611c18565b6113d06116f8565b6003600052600b602052600080516020611ff083398151915255565b6113f46116f8565b600f8111156114155760405162461bcd60e51b81526004016106eb90611e33565b6004600052600b6020527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c78455565b61144b6116f8565b600d5460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af115801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190611ecd565b505050565b6114cf6116f8565b600f8111156114f05760405162461bcd60e51b81526004016106eb90611e33565b6004600052600b6020527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c78555565b6115266116f8565b600780546001600160a01b039485166001600160a01b031991821617909155600d805493909416921682179092556009805462ffffff90931662ffffff196301000000909302929092166001600160b81b031990931692909217179055565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6115b86116f8565b6002600052600b602052600080516020611f7083398151915255565b6115dc6116f8565b600f8111156115fd5760405162461bcd60e51b81526004016106eb90611e33565b6003600052600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33f55565b6116336116f8565b600f8111156116545760405162461bcd60e51b81526004016106eb90611e33565b6003600052600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e55565b61168a6116f8565b6001600160a01b0381166116ef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106eb565b61099581611bc6565b6005546001600160a01b03163314610a015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106eb565b6001600160a01b0383166117b45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106eb565b6001600160a01b0382166118155760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106eb565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006118828484611585565b905060001981146118ea57818110156118dd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106eb565b6118ea8484848403611752565b50505050565b6001600160a01b0383166119545760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106eb565b6001600160a01b0382166119b65760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106eb565b6001600160a01b03831660009081526020819052604090205481811015611a2e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106eb565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36118ea565b6001600160a01b038216611af45760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106eb565b6001600160a01b03821660009081526020819052604090205481811015611b685760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106eb565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000336107c28185856118f0565b600060208284031215611c3857600080fd5b5035919050565b600060208083528351808285015260005b81811015611c6c57858101830151858201604001528201611c50565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114611ca457600080fd5b919050565b60008060408385031215611cbc57600080fd5b611cc583611c8d565b946020939093013593505050565b60008060008060808587031215611ce957600080fd5b5050823594602084013594506040840135936060013592509050565b600080600060608486031215611d1a57600080fd5b611d2384611c8d565b9250611d3160208501611c8d565b9150604084013590509250925092565b801515811461099557600080fd5b600060208284031215611d6157600080fd5b8135611d6c81611d41565b9392505050565b600060208284031215611d8557600080fd5b611d6c82611c8d565b60008060408385031215611da157600080fd5b82359150611db160208401611c8d565b90509250929050565b600080600060608486031215611dcf57600080fd5b611dd884611c8d565b9250611de660208501611c8d565b9150604084013562ffffff81168114611dfe57600080fd5b809150509250925092565b60008060408385031215611e1c57600080fd5b611e2583611c8d565b9150611db160208401611c8d565b6020808252601a908201527f54617820416d6f756e74206d757374206265203020746f203135000000000000604082015260600190565b600181811c90821680611e7e57607f821691505b602082108103611e9e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156107c8576107c8611ea4565b600060208284031215611edf57600080fd5b8151611d6c81611d41565b600060208284031215611efc57600080fd5b5051919050565b80820281158282048414176107c8576107c8611ea4565b600082611f3757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156107c8576107c8611ea456fea50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91637a50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163612d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c78712d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c78664c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d34164c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d340a2646970667358221220150217ebea8d1435229002edec20fb7d374c0490f3640c17467241ef91c347c764736f6c63430008130033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH20 0xE592427A0AECE92DE3EDEE1F18E0157C05861564 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x233937B3B3B4B2B9902A37B5B2B7 PUSH1 0x91 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x119491D4D5 PUSH1 0xDA SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x80 SWAP2 SWAP1 PUSH3 0x2E0 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x8F DUP3 DUP3 PUSH3 0x2E0 JUMP JUMPDEST POP POP POP PUSH3 0xAC PUSH3 0xA6 PUSH3 0x11B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x11F JUMP JUMPDEST PUSH3 0xD7 CALLER PUSH3 0xBF PUSH1 0x12 PUSH1 0xA PUSH3 0x4C1 JUMP JUMPDEST PUSH3 0xD1 SWAP1 PUSH6 0x5AF3107A4000 PUSH3 0x4D9 JUMP JUMPDEST PUSH3 0x171 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xD DUP1 SLOAD PUSH4 0x1000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD ADDRESS SWAP1 DUP4 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0xC DUP1 SLOAD SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH3 0x509 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x1CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x1E0 SWAP2 SWAP1 PUSH3 0x4F3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x267 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x288 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x237 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2B7 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2D8 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2C3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2FC JUMPI PUSH3 0x2FC PUSH3 0x23C JUMP JUMPDEST PUSH3 0x314 DUP2 PUSH3 0x30D DUP5 SLOAD PUSH3 0x252 JUMP JUMPDEST DUP5 PUSH3 0x28E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x34C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x333 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2D8 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x37D JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x35C JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x39C JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x403 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x3E7 JUMPI PUSH3 0x3E7 PUSH3 0x3AC JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x3F5 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x3C7 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x41C JUMPI POP PUSH1 0x1 PUSH3 0x4BB JUMP JUMPDEST DUP2 PUSH3 0x42B JUMPI POP PUSH1 0x0 PUSH3 0x4BB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x444 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x44F JUMPI PUSH3 0x46F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x4BB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x463 JUMPI PUSH3 0x463 PUSH3 0x3AC JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x4BB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x494 JUMPI POP DUP2 DUP2 EXP PUSH3 0x4BB JUMP JUMPDEST PUSH3 0x4A0 DUP4 DUP4 PUSH3 0x3C2 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x4B7 JUMPI PUSH3 0x4B7 PUSH3 0x3AC JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4D2 PUSH1 0xFF DUP5 AND DUP4 PUSH3 0x40B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 0x4BB JUMPI PUSH3 0x4BB PUSH3 0x3AC JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH3 0x4BB JUMPI PUSH3 0x4BB PUSH3 0x3AC JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2045 PUSH3 0x533 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x5B2 ADD MSTORE DUP2 DUP2 PUSH2 0xA1D ADD MSTORE PUSH2 0xB4D ADD MSTORE PUSH2 0x2045 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x28A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x793EA8D1 GT PUSH2 0x15C JUMPI DUP1 PUSH4 0xAFE2DDD7 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x64F JUMPI DUP1 PUSH4 0xE319C2CE EQ PUSH2 0x662 JUMPI DUP1 PUSH4 0xE465D64D EQ PUSH2 0x676 JUMPI DUP1 PUSH4 0xE67D6921 EQ PUSH2 0x689 JUMPI DUP1 PUSH4 0xEA173A39 EQ PUSH2 0x69C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFE2DDD7 EQ PUSH2 0x587 JUMPI DUP1 PUSH4 0xB9E43EEE EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0xC90880C1 EQ PUSH2 0x5D4 JUMPI DUP1 PUSH4 0xCA5FB573 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0xCCBD73E7 EQ PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DD95002 GT PUSH2 0x120 JUMPI DUP1 PUSH4 0x8DD95002 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0x9C42AC13 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x561 JUMPI DUP1 PUSH4 0xAB72498D EQ PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x793EA8D1 EQ PUSH2 0x4BC JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x82FAB2AD EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0x8568B3A5 EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x200 JUMPI DUP1 PUSH4 0x446B5D5F GT PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x446B5D5F EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0x5202EA6D EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x57970E93 EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x6BC20157 EQ PUSH2 0x459 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x3268CC56 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0x36EAB316 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x372C12B1 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x172CC5A7 GT PUSH2 0x252 JUMPI DUP1 PUSH4 0x172CC5A7 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x1901156D EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x196FD4BE EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x24E2A33E EQ PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x445A103 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xE1B39FB EQ PUSH2 0x308 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x6C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AC PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0x1C3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x2D1 SWAP1 PUSH3 0xFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x7CE JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0x825 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x1D05 JUMP JUMPDEST PUSH2 0x8C8 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x1D4F JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x31B PUSH20 0xE592427A0AECE92DE3EDEE1F18E0157C05861564 DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x3DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0x969 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x98B JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x998 JUMP JUMPDEST PUSH2 0x34A PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x34A PUSH2 0x499 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x9EF JUMP JUMPDEST PUSH2 0x34A PUSH2 0x4CA CALLDATASIZE PUSH1 0x4 PUSH2 0x1D8E JUMP JUMPDEST PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0xBDE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x31B JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x31B SWAP1 PUSH4 0x1000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2AC PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0xC5C JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x55C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0xC80 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0xCFB JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x582 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x595 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x13EC JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x5A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0x1443 JUMP JUMPDEST PUSH2 0x31B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x5E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x14C7 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x5F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBA JUMP JUMPDEST PUSH2 0x151E JUMP JUMPDEST PUSH2 0x62F PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x65D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E09 JUMP JUMPDEST PUSH2 0x1585 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x2F8 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x684 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x15B0 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x697 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x15D4 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x6AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x162B JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x1682 JUMP JUMPDEST PUSH2 0x6CA PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91635 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x731 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x75D SWAP1 PUSH2 0x1E6A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7AA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x77F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7AA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x78D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C2 DUP2 DUP6 DUP6 PUSH2 0x1752 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7D6 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91634 SSTORE JUMP JUMPDEST PUSH2 0x82D PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x83D JUMPI POP PUSH1 0x5 DUP2 LT JUMPDEST PUSH2 0x881 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x547970204D7573742042652028312C322C332C3429 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE SWAP5 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP5 DUP6 MSTORE DUP6 DUP3 ADD SWAP4 DUP5 MSTORE PUSH1 0x0 PUSH1 0x60 DUP8 ADD DUP2 DUP2 MSTORE SWAP4 DUP2 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP5 ADD SSTORE MLOAD PUSH1 0x2 DUP4 ADD SSTORE MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x8D6 DUP6 DUP3 DUP6 PUSH2 0x1876 JUMP JUMPDEST PUSH2 0x8E1 DUP6 DUP6 DUP6 PUSH2 0x18F0 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8F4 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x91A PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5D0 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C2 DUP2 DUP6 DUP6 PUSH2 0x97C DUP4 DUP4 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x986 SWAP2 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x1752 JUMP JUMPDEST PUSH2 0x995 CALLER DUP3 PUSH2 0x1A94 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x9A0 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5CF SSTORE JUMP JUMPDEST PUSH2 0x9F7 PUSH2 0x16F8 JUMP JUMPDEST PUSH2 0xA01 PUSH1 0x0 PUSH2 0x1BC6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9B SWAP2 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE ADDRESS DUP2 MSTORE PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH4 0x1000000 DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD SWAP1 DUP2 MSTORE PUSH3 0xFFFFFF SWAP3 DUP4 AND DUP5 DUP7 ADD SWAP1 DUP2 MSTORE DUP8 DUP4 AND PUSH1 0x60 DUP7 ADD SWAP1 DUP2 MSTORE TIMESTAMP PUSH1 0x80 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP8 ADD DUP12 DUP2 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP10 ADD DUP2 DUP2 MSTORE PUSH1 0xE0 DUP11 ADD SWAP2 DUP3 MSTORE SWAP10 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE DUP10 MLOAD DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP6 MLOAD DUP8 AND PUSH1 0x24 DUP8 ADD MSTORE SWAP4 MLOAD SWAP1 SWAP7 AND PUSH1 0x44 DUP6 ADD MSTORE SWAP1 MLOAD DUP5 AND PUSH1 0x64 DUP5 ADD MSTORE MLOAD PUSH1 0x84 DUP4 ADD MSTORE SWAP3 MLOAD PUSH1 0xA4 DUP3 ADD MSTORE SWAP4 MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 MLOAD DUP2 AND PUSH1 0xE4 DUP5 ADD MSTORE SWAP1 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x414BF389 SWAP1 PUSH2 0x104 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBBD SWAP2 SWAP1 PUSH2 0x1EEA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBD0 DUP3 CALLER DUP4 PUSH2 0x1876 JUMP JUMPDEST PUSH2 0xBDA DUP3 DUP3 PUSH2 0x1A94 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C8 SWAP2 SWAP1 PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x731 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0xC64 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xC8E DUP3 DUP7 PUSH2 0x1585 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xCEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x8E1 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x1752 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD24 JUMPI PUSH2 0xD1D DUP4 DUP4 PUSH2 0x1C18 JUMP JUMPDEST SWAP1 POP PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1292 JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5D0 SLOAD PUSH1 0x64 SWAP1 PUSH2 0xD71 SWAP1 DUP6 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xD7B SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91635 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xDBA SWAP1 DUP7 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xDC4 SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33F SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xE03 SWAP1 DUP8 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xE0D SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C785 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xE4C SWAP1 DUP9 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xE56 SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xE8F SWAP1 DUP6 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 0xEB5 JUMPI POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xF8F JUMPI PUSH1 0x7 SLOAD PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xEF5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0xEF0 SWAP2 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xF30 SWAP2 PUSH2 0xF1F SWAP2 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA03 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xF66 SWAP1 DUP6 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0xF70 SWAP2 SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH2 0xFC0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xFBA SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xFF5 SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 0x101B JUMPI POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x10A3 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x1044 SWAP1 ADDRESS PUSH2 0xA03 JUMP JUMPDEST POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x107A SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x1084 SWAP2 SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x10CE SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x1109 SWAP1 DUP4 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 0x1120 JUMPI POP PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND JUMPDEST DUP1 ISZERO PUSH2 0x1144 JUMPI POP PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x11CC JUMPI PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x116D SWAP1 ADDRESS PUSH2 0xA03 JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x11A3 SWAP1 DUP4 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x11AD SWAP2 SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH2 0x11FD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x11F7 SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1213 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x122A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1258 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH2 0x1287 DUP8 DUP3 DUP5 PUSH2 0x1269 DUP8 DUP10 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x1273 SWAP2 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x127D SWAP2 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0xEF0 SWAP1 DUP10 PUSH2 0x1F3C JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0x13BE JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5CF SLOAD PUSH1 0x64 SWAP1 PUSH2 0x12E3 SWAP1 DUP6 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0x12ED SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91634 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x132C SWAP1 DUP7 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0x1336 SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33E SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x1375 SWAP1 DUP8 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0x137F SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C784 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xE4C SWAP1 DUP9 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xD1D DUP4 DUP4 PUSH2 0x1C18 JUMP JUMPDEST PUSH2 0x13D0 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0x13F4 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C784 SSTORE JUMP JUMPDEST PUSH2 0x144B PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x149E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x14CF PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x14F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C785 SSTORE JUMP JUMPDEST PUSH2 0x1526 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0xD DUP1 SLOAD SWAP4 SWAP1 SWAP5 AND SWAP3 AND DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH3 0xFFFFFF SWAP1 SWAP4 AND PUSH3 0xFFFFFF NOT PUSH4 0x1000000 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x15B8 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0x15DC PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x15FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33F SSTORE JUMP JUMPDEST PUSH2 0x1633 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x1654 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33E SSTORE JUMP JUMPDEST PUSH2 0x168A PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x16EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x995 DUP2 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x17B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1815 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1882 DUP5 DUP5 PUSH2 0x1585 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x18EA JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x18EA DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x1752 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1954 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x19B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1A2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x18EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C2 DUP2 DUP6 DUP6 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C6C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1C50 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CC5 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1CE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D23 DUP5 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP PUSH2 0x1D31 PUSH1 0x20 DUP6 ADD PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D6C DUP2 PUSH2 0x1D41 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D6C DUP3 PUSH2 0x1C8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1DB1 PUSH1 0x20 DUP5 ADD PUSH2 0x1C8D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD8 DUP5 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP PUSH2 0x1DE6 PUSH1 0x20 DUP6 ADD PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1DFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E25 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x1DB1 PUSH1 0x20 DUP5 ADD PUSH2 0x1C8D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x54617820416D6F756E74206D757374206265203020746F203135000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E7E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7C8 JUMPI PUSH2 0x7C8 PUSH2 0x1EA4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1D6C DUP2 PUSH2 0x1D41 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7C8 JUMPI PUSH2 0x7C8 PUSH2 0x1EA4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1F37 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7C8 JUMPI PUSH2 0x7C8 PUSH2 0x1EA4 JUMP INVALID 0xA5 0xE 0xEC 0xE0 PUSH29 0x7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91637A50E 0xEC 0xE0 PUSH29 0x7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA9163612D0 0xC1 ISZERO PUSH24 0xE2F0950F57C455C117796550B79F444811DB8BA2F69C57B6 CHAINID 0xC7 DUP8 SLT 0xD0 0xC1 ISZERO PUSH24 0xE2F0950F57C455C117796550B79F444811DB8BA2F69C57B6 CHAINID 0xC7 DUP7 PUSH5 0xC15CC42BE7 DUP10 SWAP12 STOP 0x1F DUP2 DUP13 DELEGATECALL NUMBER ADDRESS JUMPI STOP 0x21 SLT 0xC4 XOR 0xD1 0xD3 0xA6 PUSH29 0xD5CB453051D34164C15CC42BE7899B001F818CF4433057002112C418D1 0xD3 0xA6 PUSH29 0xD5CB453051D340A2646970667358221220150217EBEA8D1435229002ED 0xEC KECCAK256 0xFB PUSH30 0x374C0490F3640C17467241EF91C347C764736F6C63430008130033000000 ",
							"sourceMap": "369:11924:8:-:0;;;765:42;813:68;;1170:226;;;;;;;;;;1976:113:1;;;;;;;;;;;;;-1:-1:-1;;;1976:113:1;;;;;;;;;;;;;;;;-1:-1:-1;;;1976:113:1;;;2050:5;2042;:13;;;;;;:::i;:::-;-1:-1:-1;2065:7:1;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;1227:53:8::1;1233:10;1263:16;3173:2:1::0;1263::8::1;:16;:::i;:::-;1245:34;::::0;:15:::1;:34;:::i;:::-;1227:5;:53::i;:::-;1309:4;::::0;1290:9:::1;:24:::0;;1309:4;;;::::1;-1:-1:-1::0;;;;;1309:4:8::1;-1:-1:-1::0;;;;;;1290:24:8;;::::1;;::::0;;1324:6:::1;:22:::0;;1341:4:::1;1324:22:::0;;::::1;::::0;::::1;::::0;;;1356:9:::1;:33:::0;;;;::::1;;::::0;;369:11924;;640:96:5;719:10;;640:96::o;2433:187:0:-;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;8567:535:1:-;-1:-1:-1;;;;;8650:21:1;;8642:65;;;;-1:-1:-1;;;8642:65:1;;4625:2:9;8642:65:1;;;4607:21:9;4664:2;4644:18;;;4637:30;4703:33;4683:18;;;4676:61;4754:18;;8642:65:1;;;;;;;;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:1;;:9;:18;;;;;;;;;;;:28;;;;;;8999:37;5059:25:9;;;8999:37:1;;5032:18:9;8999:37:1;;;;;;;8567:535;;:::o;12180:121::-;;;;:::o;14:127:9:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:9;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:9;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:9;;;2580:26;2531:89;-1:-1:-1;;1335:1:9;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:9;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:9;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:9;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:9:o;2735:127::-;2796:10;2791:3;2787:20;2784:1;2777:31;2827:4;2824:1;2817:15;2851:4;2848:1;2841:15;2867:422;2956:1;2999:5;2956:1;3013:270;3034:7;3024:8;3021:21;3013:270;;;3093:4;3089:1;3085:6;3081:17;3075:4;3072:27;3069:53;;;3102:18;;:::i;:::-;3152:7;3142:8;3138:22;3135:55;;;3172:16;;;;3135:55;3251:22;;;;3211:15;;;;3013:270;;;3017:3;2867:422;;;;;:::o;3294:806::-;3343:5;3373:8;3363:80;;-1:-1:-1;3414:1:9;3428:5;;3363:80;3462:4;3452:76;;-1:-1:-1;3499:1:9;3513:5;;3452:76;3544:4;3562:1;3557:59;;;;3630:1;3625:130;;;;3537:218;;3557:59;3587:1;3578:10;;3601:5;;;3625:130;3662:3;3652:8;3649:17;3646:43;;;3669:18;;:::i;:::-;-1:-1:-1;;3725:1:9;3711:16;;3740:5;;3537:218;;3839:2;3829:8;3826:16;3820:3;3814:4;3811:13;3807:36;3801:2;3791:8;3788:16;3783:2;3777:4;3774:12;3770:35;3767:77;3764:159;;;-1:-1:-1;3876:19:9;;;3908:5;;3764:159;3955:34;3980:8;3974:4;3955:34;:::i;:::-;4025:6;4021:1;4017:6;4013:19;4004:7;4001:32;3998:58;;;4036:18;;:::i;:::-;4074:20;;-1:-1:-1;3294:806:9;;;;;:::o;4105:140::-;4163:5;4192:47;4233:4;4223:8;4219:19;4213:4;4192:47;:::i;:::-;4183:56;4105:140;-1:-1:-1;;;4105:140:9:o;4250:168::-;4323:9;;;4354;;4371:15;;;4365:22;;4351:37;4341:71;;4392:18;;:::i;4783:125::-;4848:9;;;4869:10;;;4866:36;;;4882:18;;:::i;4913:177::-;369:11924:8;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@LPTransferAmount_1003": {
									"entryPoint": null,
									"id": 1003,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@PancakeSwap_1001": {
									"entryPoint": null,
									"id": 1001,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Taxs_1034": {
									"entryPoint": null,
									"id": 1034,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WBNBToken_1040": {
									"entryPoint": null,
									"id": 1040,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WBNB_1007": {
									"entryPoint": null,
									"id": 1007,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Wallet_997": {
									"entryPoint": null,
									"id": 997,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@WhiteList_1093": {
									"entryPoint": null,
									"id": 1093,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@WithdrawWBNB_2060": {
									"entryPoint": 5187,
									"id": 2060,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_698": {
									"entryPoint": null,
									"id": 698,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_633": {
									"entryPoint": 5970,
									"id": 633,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_687": {
									"entryPoint": null,
									"id": 687,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_burn_588": {
									"entryPoint": 6804,
									"id": 588,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 5880,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_858": {
									"entryPoint": null,
									"id": 858,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_676": {
									"entryPoint": 6262,
									"id": 676,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 7110,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_459": {
									"entryPoint": 6384,
									"id": 459,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_254": {
									"entryPoint": 5509,
									"id": 254,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_279": {
									"entryPoint": 1972,
									"id": 279,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_211": {
									"entryPoint": null,
									"id": 211,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_820": {
									"entryPoint": 3013,
									"id": 820,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_799": {
									"entryPoint": 2443,
									"id": 799,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@decimals_187": {
									"entryPoint": null,
									"id": 187,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_382": {
									"entryPoint": 3200,
									"id": 382,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@getBalanceWBNB_2043": {
									"entryPoint": 3038,
									"id": 2043,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@increaseAllowance_341": {
									"entryPoint": 2409,
									"id": 341,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@isSwap_999": {
									"entryPoint": null,
									"id": 999,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@linkToken_1037": {
									"entryPoint": null,
									"id": 1037,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@name_167": {
									"entryPoint": 1826,
									"id": 167,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@poolFee_1005": {
									"entryPoint": null,
									"id": 1005,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_68": {
									"entryPoint": 2543,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@routerAddress_1010": {
									"entryPoint": null,
									"id": 1010,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@setAddressFee_2126": {
									"entryPoint": 5406,
									"id": 2126,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@setInvestmentBuyTax_1946": {
									"entryPoint": 5588,
									"id": 1946,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setInvestmentSellTax_1842": {
									"entryPoint": 5675,
									"id": 1842,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setInvestmentXAmount_2002": {
									"entryPoint": 5064,
									"id": 2002,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setLPBuyTax_1920": {
									"entryPoint": 1730,
									"id": 1920,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setLPSellTax_1816": {
									"entryPoint": 1998,
									"id": 1816,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setLPXAmount_1987": {
									"entryPoint": 5552,
									"id": 1987,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setMarkettingBuyTax_1972": {
									"entryPoint": 5319,
									"id": 1972,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setMarkettingSellTax_1868": {
									"entryPoint": 5100,
									"id": 1868,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setMarkettingSwap_2029": {
									"entryPoint": 2284,
									"id": 2029,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setMarkettingXAmount_2017": {
									"entryPoint": 3164,
									"id": 2017,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setReflectionBuyTax_1894": {
									"entryPoint": 2322,
									"id": 1894,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setReflectionSellTax_1790": {
									"entryPoint": 2456,
									"id": 1790,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@setTaxData_2096": {
									"entryPoint": 2085,
									"id": 2096,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@swapExactInputSingle_1141": {
									"entryPoint": 2563,
									"id": 1141,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@swapRouter_1016": {
									"entryPoint": null,
									"id": 1016,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_177": {
									"entryPoint": 3149,
									"id": 177,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_197": {
									"entryPoint": null,
									"id": 197,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_312": {
									"entryPoint": 2248,
									"id": 312,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_91": {
									"entryPoint": 5762,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_1764": {
									"entryPoint": 3323,
									"id": 1764,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@transfer_236": {
									"entryPoint": 7192,
									"id": 236,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@whiteList_1029": {
									"entryPoint": null,
									"id": 1029,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 7309,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7689,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint24": {
									"entryPoint": 7610,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7429,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 7337,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool": {
									"entryPoint": 7503,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 7885,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7206,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 7914,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 7566,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256": {
									"entryPoint": 7379,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$777__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ISwapRouter_$982__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7231,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7731,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e9dceea1b72368ed5edc5ca8b8c9b12961b55983d0a041db176313eda9fa8a9d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_ExactInputSingleParams_$906_memory_ptr__to_t_struct$_ExactInputSingleParams_$906_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 7866,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 7962,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 7939,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 7996,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 7786,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 7844,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bool": {
									"entryPoint": 7489,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:12989:9",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:9",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:9"
															},
															"nodeType": "YulIf",
															"src": "94:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:9",
														"type": ""
													}
												],
												"src": "14:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "320:427:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "330:12:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "340:2:9",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "334:2:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "358:9:9"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "369:2:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "351:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "351:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "351:21:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "381:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "401:6:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "395:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "395:13:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "385:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "428:9:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "439:2:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "424:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "424:18:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "444:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "417:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "417:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "417:34:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "460:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "469:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "464:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "529:90:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "558:9:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "569:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "554:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "554:17:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "573:2:9",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "550:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "550:26:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "592:6:9"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "600:1:9"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "588:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "588:14:9"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "604:2:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "584:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "584:23:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "578:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "578:30:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "543:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "543:66:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "543:66:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "490:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "493:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "487:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "487:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "501:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "503:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "512:1:9"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "515:2:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "508:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "508:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "503:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "483:3:9",
																"statements": []
															},
															"src": "479:140:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "643:9:9"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "654:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "639:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "639:22:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "663:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "635:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "635:31:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "668:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "628:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "628:42:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "628:42:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "679:62:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "695:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "714:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "722:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "710:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "710:15:9"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "731:2:9",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "727:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "727:7:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "706:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "706:29:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "691:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "691:45:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "738:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "687:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "687:54:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "679:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "289:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "300:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "311:4:9",
														"type": ""
													}
												],
												"src": "199:548:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "851:91:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "861:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "873:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "884:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "869:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "869:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "861:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "903:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "918:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "926:8:9",
																				"type": "",
																				"value": "0xffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "914:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "914:21:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "896:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "896:40:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "896:40:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "820:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "831:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "842:4:9",
														"type": ""
													}
												],
												"src": "752:190:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "996:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1006:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1028:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1015:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1015:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1006:5:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1098:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1107:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1110:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1100:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1100:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1100:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1057:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1068:5:9"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1083:3:9",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1088:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1079:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1079:11:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1092:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1075:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1075:19:9"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1064:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1064:31:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1054:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1054:42:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1047:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1047:50:9"
															},
															"nodeType": "YulIf",
															"src": "1044:70:9"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "975:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "986:5:9",
														"type": ""
													}
												],
												"src": "947:173:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1212:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1258:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1267:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1270:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1260:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1260:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1260:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1233:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1242:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1229:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1229:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1254:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1225:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1225:32:9"
															},
															"nodeType": "YulIf",
															"src": "1222:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1283:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1312:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1293:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1283:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1331:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1358:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1369:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1354:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1354:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1341:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1341:32:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1331:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1170:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1181:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1193:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1201:6:9",
														"type": ""
													}
												],
												"src": "1125:254:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1479:92:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1489:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1501:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1512:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1497:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1497:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1489:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1531:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1556:6:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1549:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1549:14:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1542:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1542:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1524:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1524:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1524:41:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1448:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1459:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1470:4:9",
														"type": ""
													}
												],
												"src": "1384:187:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1677:102:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1687:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1699:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1710:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1695:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1695:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1687:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1729:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1744:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1760:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1765:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1756:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1756:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1769:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1752:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1752:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1740:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1740:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1722:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1722:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1722:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1646:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1657:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1668:4:9",
														"type": ""
													}
												],
												"src": "1576:203:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1885:76:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1895:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1907:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1918:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1903:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1903:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1895:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1937:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1948:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1930:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1930:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1930:25:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1854:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1865:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1876:4:9",
														"type": ""
													}
												],
												"src": "1784:177:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2087:264:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2134:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2143:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2146:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2136:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2136:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2136:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2108:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2117:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2104:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2104:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2129:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2100:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:33:9"
															},
															"nodeType": "YulIf",
															"src": "2097:53:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2159:33:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2182:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2169:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2169:23:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2159:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2201:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2228:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2239:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2224:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2224:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2211:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2211:32:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2201:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2252:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2279:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2290:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2275:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2275:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2262:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2262:32:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2252:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2303:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2330:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2341:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2326:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2326:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2313:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2313:32:9"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2303:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2029:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2040:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2052:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2060:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2068:6:9",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2076:6:9",
														"type": ""
													}
												],
												"src": "1966:385:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:224:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2506:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2515:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2518:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2508:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2508:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2508:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2481:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2490:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2477:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2477:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2502:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2473:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2473:32:9"
															},
															"nodeType": "YulIf",
															"src": "2470:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2531:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2560:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2541:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2541:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2531:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2579:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2612:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2623:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2608:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2608:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2589:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2589:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2579:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2636:42:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2663:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2674:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2659:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2659:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2646:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2646:32:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2636:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2410:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2421:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2433:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2441:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2449:6:9",
														"type": ""
													}
												],
												"src": "2356:328:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2731:76:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2785:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2794:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2797:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2787:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2787:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2787:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2754:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2775:5:9"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2768:6:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2768:13:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2761:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2761:21:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2751:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2751:32:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2744:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2744:40:9"
															},
															"nodeType": "YulIf",
															"src": "2741:60:9"
														}
													]
												},
												"name": "validator_revert_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2720:5:9",
														"type": ""
													}
												],
												"src": "2689:118:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2879:174:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2925:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2934:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2937:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2927:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2927:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2927:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2900:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2909:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2896:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2896:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2921:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2892:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2892:32:9"
															},
															"nodeType": "YulIf",
															"src": "2889:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2950:36:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2976:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2963:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2963:23:9"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2954:5:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3017:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "2995:21:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2995:28:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2995:28:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3032:15:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3042:5:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3032:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2845:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2856:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2868:6:9",
														"type": ""
													}
												],
												"src": "2812:241:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3155:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3165:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3177:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3188:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3173:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3173:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3165:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3207:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3222:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3230:4:9",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3218:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3218:17:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3200:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3200:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3200:36:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3124:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3135:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3146:4:9",
														"type": ""
													}
												],
												"src": "3058:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3317:116:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3363:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3372:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3375:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3365:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3365:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3365:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3338:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3347:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3334:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3334:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3359:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3330:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3330:32:9"
															},
															"nodeType": "YulIf",
															"src": "3327:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3417:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3398:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3398:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3388:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3283:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3294:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3306:6:9",
														"type": ""
													}
												],
												"src": "3247:186:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3553:102:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3563:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3575:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3586:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3571:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3571:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3563:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3605:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3620:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3636:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3641:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3632:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3632:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3645:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3628:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3628:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3616:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3598:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3598:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3598:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$777__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3522:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3533:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3544:4:9",
														"type": ""
													}
												],
												"src": "3438:217:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3747:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3793:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3802:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3805:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3795:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3795:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3795:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3768:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3777:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3764:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3764:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3789:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3760:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3760:32:9"
															},
															"nodeType": "YulIf",
															"src": "3757:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3818:33:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3841:9:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3828:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3828:23:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3818:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3860:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3893:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3904:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3889:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3889:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3870:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3870:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3860:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3705:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3716:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3728:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3736:6:9",
														"type": ""
													}
												],
												"src": "3660:254:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4039:102:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4049:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4061:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4057:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4057:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4049:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4091:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4106:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4122:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4127:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4118:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4118:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4131:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4114:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4114:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4102:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4102:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:51:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ISwapRouter_$982__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4008:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4019:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4030:4:9",
														"type": ""
													}
												],
												"src": "3919:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4249:319:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4295:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4304:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4307:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4297:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4297:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4297:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4270:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4279:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4266:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4266:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4291:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4262:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4262:32:9"
															},
															"nodeType": "YulIf",
															"src": "4259:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4320:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4349:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4330:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4330:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4320:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4368:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4401:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4412:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4397:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4397:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4378:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4378:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4368:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4425:45:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4455:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4466:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4451:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4451:18:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4438:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4438:32:9"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4429:5:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4522:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4531:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4534:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4524:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4524:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4524:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4492:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "4503:5:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4510:8:9",
																						"type": "",
																						"value": "0xffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4499:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4499:20:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4489:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4489:31:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4482:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4482:39:9"
															},
															"nodeType": "YulIf",
															"src": "4479:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4547:15:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4557:5:9"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4547:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint24",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4199:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4210:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4222:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4230:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4238:6:9",
														"type": ""
													}
												],
												"src": "4146:422:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4758:206:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4768:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4780:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4791:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4776:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4768:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4811:9:9"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4822:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4804:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4804:25:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4804:25:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4849:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4860:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4845:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4845:18:9"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4865:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4838:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4838:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4838:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4892:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4903:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4888:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4888:18:9"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4908:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4881:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4881:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4881:34:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4935:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4946:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4931:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4931:18:9"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "4951:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4924:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4924:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4924:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4703:9:9",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4714:6:9",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4722:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4730:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4738:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4749:4:9",
														"type": ""
													}
												],
												"src": "4573:391:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5056:173:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5102:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5111:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5114:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5104:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5104:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5104:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5077:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5086:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5073:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5073:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5098:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5069:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5069:32:9"
															},
															"nodeType": "YulIf",
															"src": "5066:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5127:39:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5156:9:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5137:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5137:29:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5127:6:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5175:48:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5208:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5219:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5204:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5204:18:9"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5185:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5185:38:9"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5175:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5014:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5025:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5037:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5045:6:9",
														"type": ""
													}
												],
												"src": "4969:260:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5408:176:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5425:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5436:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5418:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5418:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5418:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5459:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5470:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5455:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5455:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5475:2:9",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5448:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5448:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5448:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5498:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5509:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5494:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5494:18:9"
																	},
																	{
																		"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5514:28:9",
																		"type": "",
																		"value": "Tax Amount must be 0 to 15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5487:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5487:56:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5487:56:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5552:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5564:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5575:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5560:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5560:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5552:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5385:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5399:4:9",
														"type": ""
													}
												],
												"src": "5234:350:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5644:325:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5654:22:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5668:1:9",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5671:4:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5664:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5664:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5654:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5685:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5715:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5721:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5711:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5711:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5689:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5762:31:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5764:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5778:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5786:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5774:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5774:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5764:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5742:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5735:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5735:26:9"
															},
															"nodeType": "YulIf",
															"src": "5732:61:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5852:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5873:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5880:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5885:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5876:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5876:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5866:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5866:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5866:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5917:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5920:4:9",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5910:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5910:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5910:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5945:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5948:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5938:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5938:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5938:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5808:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5831:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5839:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5828:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5828:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5805:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5805:38:9"
															},
															"nodeType": "YulIf",
															"src": "5802:161:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5624:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5633:6:9",
														"type": ""
													}
												],
												"src": "5589:380:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6148:171:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6165:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6176:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6158:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6158:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6158:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6199:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6210:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6195:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6195:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6215:2:9",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6188:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6188:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6188:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6238:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6249:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6234:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6234:18:9"
																	},
																	{
																		"hexValue": "547970204d7573742042652028312c322c332c3429",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6254:23:9",
																		"type": "",
																		"value": "Typ Must Be (1,2,3,4)"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6227:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6227:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6227:51:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6287:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6299:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6310:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6295:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6295:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6287:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e9dceea1b72368ed5edc5ca8b8c9b12961b55983d0a041db176313eda9fa8a9d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6125:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6139:4:9",
														"type": ""
													}
												],
												"src": "5974:345:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6356:95:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6373:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6380:3:9",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6385:10:9",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6376:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6376:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6366:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6366:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6366:31:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6413:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6416:4:9",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6406:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6406:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6406:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6437:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6440:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6430:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6430:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6430:15:9"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6324:127:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6504:77:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6514:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6525:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6528:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6521:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6521:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6514:3:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6553:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6555:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6555:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6555:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6545:1:9"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "6548:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6542:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6542:10:9"
															},
															"nodeType": "YulIf",
															"src": "6539:36:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6487:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6490:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6496:3:9",
														"type": ""
													}
												],
												"src": "6456:125:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6715:145:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6725:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6737:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6748:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6733:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6733:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6725:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6767:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6782:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6798:3:9",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6803:1:9",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6794:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6794:11:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6807:1:9",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6790:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6790:19:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6778:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6778:32:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6760:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6760:51:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6760:51:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6831:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6842:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6827:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6827:18:9"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6847:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6820:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6820:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6820:34:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6676:9:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6687:6:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6695:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6706:4:9",
														"type": ""
													}
												],
												"src": "6586:274:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6943:167:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6989:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6998:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7001:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6991:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6991:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6991:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6964:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6973:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6960:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6960:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6985:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6956:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6956:32:9"
															},
															"nodeType": "YulIf",
															"src": "6953:52:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7014:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7033:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7027:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7027:16:9"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "7018:5:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7074:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "7052:21:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7052:28:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7052:28:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7089:15:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "7099:5:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7089:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6909:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6920:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6932:6:9",
														"type": ""
													}
												],
												"src": "6865:245:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7294:614:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7304:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7316:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7327:3:9",
																		"type": "",
																		"value": "256"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7312:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7312:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7304:4:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7340:29:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7358:3:9",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7363:1:9",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7354:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7354:11:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7367:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7350:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7350:19:9"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7344:2:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7385:9:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "7406:6:9"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "7400:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7400:13:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7415:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7396:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7396:22:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7378:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7378:41:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7378:41:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7439:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7450:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7435:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7435:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "7471:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7479:4:9",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7467:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7467:17:9"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "7461:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7461:24:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7487:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7457:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7457:33:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7428:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7428:63:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7428:63:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7511:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7522:4:9",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7507:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7507:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "7543:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7551:4:9",
																								"type": "",
																								"value": "0x40"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7539:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7539:17:9"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "7533:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7533:24:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7559:8:9",
																				"type": "",
																				"value": "0xffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7529:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7529:39:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7500:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7500:69:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7500:69:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7589:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7600:4:9",
																				"type": "",
																				"value": "0x60"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7585:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7585:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "7621:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7629:4:9",
																								"type": "",
																								"value": "0x60"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7617:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7617:17:9"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "7611:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7611:24:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7637:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7607:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7607:33:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7578:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7578:63:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7578:63:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7661:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7672:4:9",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7657:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7657:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "7689:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7697:4:9",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7685:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7685:17:9"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7679:5:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7679:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7650:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7650:54:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7650:54:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7724:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7735:4:9",
																				"type": "",
																				"value": "0xa0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7720:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7720:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "7752:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7760:4:9",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7748:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7748:17:9"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7742:5:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7742:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7713:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7713:54:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7713:54:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7787:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7798:4:9",
																				"type": "",
																				"value": "0xc0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7783:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7783:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "7815:6:9"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7823:4:9",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "7811:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7811:17:9"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7805:5:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7805:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7776:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7776:54:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7776:54:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7850:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7861:4:9",
																				"type": "",
																				"value": "0xe0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7846:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7846:20:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value0",
																								"nodeType": "YulIdentifier",
																								"src": "7882:6:9"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7890:4:9",
																								"type": "",
																								"value": "0xe0"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7878:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7878:17:9"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "7872:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7872:24:9"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7898:2:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7868:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7868:33:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7839:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7839:63:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7839:63:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_ExactInputSingleParams_$906_memory_ptr__to_t_struct$_ExactInputSingleParams_$906_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7263:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7274:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7285:4:9",
														"type": ""
													}
												],
												"src": "7115:793:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7994:103:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8040:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8049:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8052:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8042:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8042:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8042:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "8015:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8024:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8011:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8011:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8036:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "8007:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8007:32:9"
															},
															"nodeType": "YulIf",
															"src": "8004:52:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8065:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8081:9:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8075:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8075:16:9"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "8065:6:9"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7960:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7971:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7983:6:9",
														"type": ""
													}
												],
												"src": "7913:184:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8276:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8293:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8304:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8286:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8286:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8286:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8327:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8338:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8323:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8323:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8343:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8316:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8316:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8316:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8366:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8377:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8362:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8362:18:9"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8382:34:9",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8355:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8355:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8355:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8437:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8448:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8433:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8433:18:9"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8453:7:9",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8426:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8426:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8426:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8470:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8482:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8493:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8478:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8478:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8470:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8253:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8267:4:9",
														"type": ""
													}
												],
												"src": "8102:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8560:116:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8570:20:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8585:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8588:1:9"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8581:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8581:9:9"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "8570:7:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8648:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8650:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8650:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8650:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "8619:1:9"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8612:6:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8612:9:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "8626:1:9"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "8633:7:9"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "8642:1:9"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "8629:3:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8629:15:9"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "8623:2:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8623:22:9"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "8609:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8609:37:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8602:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8602:45:9"
															},
															"nodeType": "YulIf",
															"src": "8599:71:9"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8539:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8542:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8548:7:9",
														"type": ""
													}
												],
												"src": "8508:168:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8727:171:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8758:111:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8779:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8786:3:9",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8791:10:9",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "8782:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8782:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8772:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8772:31:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8772:31:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8823:1:9",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8826:4:9",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8816:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8816:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8816:15:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8851:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8854:4:9",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8844:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8844:15:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8844:15:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8747:1:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8740:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8740:9:9"
															},
															"nodeType": "YulIf",
															"src": "8737:132:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8878:14:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8887:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8890:1:9"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "8883:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8883:9:9"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8878:1:9"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8712:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8715:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "8721:1:9",
														"type": ""
													}
												],
												"src": "8681:217:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8952:79:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8962:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8974:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8977:1:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "8970:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8970:9:9"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "8962:4:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9003:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9005:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9005:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9005:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "8994:4:9"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9000:1:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8991:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8991:11:9"
															},
															"nodeType": "YulIf",
															"src": "8988:37:9"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8934:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8937:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "8943:4:9",
														"type": ""
													}
												],
												"src": "8903:128:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9210:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9227:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9238:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9220:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9220:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9220:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9261:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9272:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9257:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9257:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9277:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9250:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9250:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9250:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9300:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9311:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9296:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9296:18:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9316:34:9",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9289:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9289:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9289:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9371:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9382:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9367:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9367:18:9"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9387:8:9",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9360:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9360:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9360:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9405:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9417:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9428:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9413:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9413:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9405:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9187:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9201:4:9",
														"type": ""
													}
												],
												"src": "9036:402:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9617:182:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9634:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9645:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9627:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9627:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9627:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9668:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9679:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9664:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9664:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9684:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9657:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9657:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9657:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9707:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9718:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9703:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9703:18:9"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9723:34:9",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9696:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9696:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9696:62:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9767:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9779:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9790:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9775:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9775:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9767:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9594:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9608:4:9",
														"type": ""
													}
												],
												"src": "9443:356:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9978:226:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9995:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10006:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9988:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "9988:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9988:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10029:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10040:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10025:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10025:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10045:2:9",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10018:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10018:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10018:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10068:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10079:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10064:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10064:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10084:34:9",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10057:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10057:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10057:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10139:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10150:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10135:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10135:18:9"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10155:6:9",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10128:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10128:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10128:34:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10171:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10183:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10194:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10179:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10179:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10171:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9955:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9969:4:9",
														"type": ""
													}
												],
												"src": "9804:400:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10383:224:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10400:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10411:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10393:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10393:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10393:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10434:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10445:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10430:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10430:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10450:2:9",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10423:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10423:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10423:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10473:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10484:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10469:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10469:18:9"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10489:34:9",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10462:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10462:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10462:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10544:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10555:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10540:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10540:18:9"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10560:4:9",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10533:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10533:32:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10533:32:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10574:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10586:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10597:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10582:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10582:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10574:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10360:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10374:4:9",
														"type": ""
													}
												],
												"src": "10209:398:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10786:179:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10803:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10814:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10796:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10796:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10796:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10837:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10848:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10833:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10833:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10853:2:9",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10826:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10826:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10826:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10876:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10887:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10872:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10872:18:9"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10892:31:9",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10865:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10865:59:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10865:59:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10933:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10945:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10956:2:9",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10941:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "10941:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10933:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10763:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10777:4:9",
														"type": ""
													}
												],
												"src": "10612:353:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11144:227:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11161:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11172:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11154:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11154:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11154:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11195:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11206:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11191:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11191:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11211:2:9",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11184:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11184:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11184:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11234:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11245:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11230:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11230:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11250:34:9",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11223:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11223:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11223:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11305:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11316:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11301:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11301:18:9"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11321:7:9",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11294:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11294:35:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11294:35:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11338:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11350:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11361:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11346:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11346:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11338:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11121:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11135:4:9",
														"type": ""
													}
												],
												"src": "10970:401:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11550:225:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11567:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11578:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11560:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11560:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11560:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11601:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11612:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11597:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11597:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11617:2:9",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11590:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11590:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11590:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11640:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11651:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11636:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11636:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11656:34:9",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11629:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11629:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11629:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11711:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11722:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11707:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11707:18:9"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11727:5:9",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11700:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11700:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11700:33:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11742:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11754:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11765:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11750:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11750:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11742:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11527:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11541:4:9",
														"type": ""
													}
												],
												"src": "11376:399:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11954:228:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11971:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11982:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11964:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11964:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11964:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12005:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12016:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12001:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12001:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12021:2:9",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11994:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "11994:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11994:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12044:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12055:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12040:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12040:18:9"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12060:34:9",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12033:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12033:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12033:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12115:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12126:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12111:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12111:18:9"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12131:8:9",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12104:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12104:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12104:36:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12149:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12161:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12172:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12157:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12157:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12149:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11931:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11945:4:9",
														"type": ""
													}
												],
												"src": "11780:402:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12361:223:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12378:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12389:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12371:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12371:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12371:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12412:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12423:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12408:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12408:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12428:2:9",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12401:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12401:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12401:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12451:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12462:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12447:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12447:18:9"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12467:34:9",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12440:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12440:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12440:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12522:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12533:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12518:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12518:18:9"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12538:3:9",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12511:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12511:31:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12511:31:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12551:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12563:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12574:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12559:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12559:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12551:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12338:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12352:4:9",
														"type": ""
													}
												],
												"src": "12187:397:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12763:224:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12780:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12791:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12773:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12773:21:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12773:21:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12814:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12825:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12810:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12810:18:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12830:2:9",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12803:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12803:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12803:30:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12853:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12864:2:9",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12849:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12849:18:9"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12869:34:9",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12842:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12842:62:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12842:62:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12924:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12935:2:9",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12920:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12920:18:9"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12940:4:9",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12913:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12913:32:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12913:32:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12954:27:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12966:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12977:3:9",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12962:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "12962:19:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12954:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12740:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12754:4:9",
														"type": ""
													}
												],
												"src": "12589:398:9"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_uint24__to_t_uint24__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$777__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_ISwapRouter_$982__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint24(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xffffff))) { revert(0, 0) }\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Tax Amount must be 0 to 15\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_e9dceea1b72368ed5edc5ca8b8c9b12961b55983d0a041db176313eda9fa8a9d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Typ Must Be (1,2,3,4)\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_struct$_ExactInputSingleParams_$906_memory_ptr__to_t_struct$_ExactInputSingleParams_$906_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 256)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(mload(value0), _1))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n        mstore(add(headStart, 0x40), and(mload(add(value0, 0x40)), 0xffffff))\n        mstore(add(headStart, 0x60), and(mload(add(value0, 0x60)), _1))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 0xa0)))\n        mstore(add(headStart, 0xc0), mload(add(value0, 0xc0)))\n        mstore(add(headStart, 0xe0), and(mload(add(value0, 0xe0)), _1))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1016": [
									{
										"length": 32,
										"start": 1458
									},
									{
										"length": 32,
										"start": 2589
									},
									{
										"length": 32,
										"start": 2893
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x28A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x793EA8D1 GT PUSH2 0x15C JUMPI DUP1 PUSH4 0xAFE2DDD7 GT PUSH2 0xCE JUMPI DUP1 PUSH4 0xDD62ED3E GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x64F JUMPI DUP1 PUSH4 0xE319C2CE EQ PUSH2 0x662 JUMPI DUP1 PUSH4 0xE465D64D EQ PUSH2 0x676 JUMPI DUP1 PUSH4 0xE67D6921 EQ PUSH2 0x689 JUMPI DUP1 PUSH4 0xEA173A39 EQ PUSH2 0x69C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAFE2DDD7 EQ PUSH2 0x587 JUMPI DUP1 PUSH4 0xB9E43EEE EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x5AD JUMPI DUP1 PUSH4 0xC90880C1 EQ PUSH2 0x5D4 JUMPI DUP1 PUSH4 0xCA5FB573 EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0xCCBD73E7 EQ PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DD95002 GT PUSH2 0x120 JUMPI DUP1 PUSH4 0x8DD95002 EQ PUSH2 0x519 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x533 JUMPI DUP1 PUSH4 0x9C42AC13 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x561 JUMPI DUP1 PUSH4 0xAB72498D EQ PUSH2 0x574 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x793EA8D1 EQ PUSH2 0x4BC JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x82FAB2AD EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0x8568B3A5 EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x200 JUMPI DUP1 PUSH4 0x446B5D5F GT PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x446B5D5F EQ PUSH2 0x42A JUMPI DUP1 PUSH4 0x5202EA6D EQ PUSH2 0x43D JUMPI DUP1 PUSH4 0x57970E93 EQ PUSH2 0x446 JUMPI DUP1 PUSH4 0x6BC20157 EQ PUSH2 0x459 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x3268CC56 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0x36EAB316 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x372C12B1 EQ PUSH2 0x3E1 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x404 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x172CC5A7 GT PUSH2 0x252 JUMPI DUP1 PUSH4 0x172CC5A7 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x346 JUMPI DUP1 PUSH4 0x1901156D EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x196FD4BE EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x24E2A33E EQ PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x445A103 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0xE1B39FB EQ PUSH2 0x308 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A2 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x6C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AC PUSH2 0x722 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0x1C3F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x2D1 SWAP1 PUSH3 0xFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x2F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x7CE JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CD3 JUMP JUMPDEST PUSH2 0x825 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x1D05 JUMP JUMPDEST PUSH2 0x8C8 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x1D4F JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x31B PUSH20 0xE592427A0AECE92DE3EDEE1F18E0157C05861564 DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x3DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x912 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x412 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0x969 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x425 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x98B JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x438 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x998 JUMP JUMPDEST PUSH2 0x34A PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x34A PUSH2 0x499 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x9EF JUMP JUMPDEST PUSH2 0x34A PUSH2 0x4CA CALLDATASIZE PUSH1 0x4 PUSH2 0x1D8E JUMP JUMPDEST PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x31B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0xBDE JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x31B JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH2 0x31B SWAP1 PUSH4 0x1000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x2AC PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0xC5C JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x55C CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0xC80 JUMP JUMPDEST PUSH2 0x2F8 PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0xCFB JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x582 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x13C8 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x595 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x13EC JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x5A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CA9 JUMP JUMPDEST PUSH2 0x1443 JUMP JUMPDEST PUSH2 0x31B PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x5E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x14C7 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x5F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DBA JUMP JUMPDEST PUSH2 0x151E JUMP JUMPDEST PUSH2 0x62F PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x2B9 JUMP JUMPDEST PUSH2 0x34A PUSH2 0x65D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E09 JUMP JUMPDEST PUSH2 0x1585 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x2F8 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x684 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x15B0 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x697 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x15D4 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x6AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1C26 JUMP JUMPDEST PUSH2 0x162B JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0x6BD CALLDATASIZE PUSH1 0x4 PUSH2 0x1D73 JUMP JUMPDEST PUSH2 0x1682 JUMP JUMPDEST PUSH2 0x6CA PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x6F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91635 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x731 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x75D SWAP1 PUSH2 0x1E6A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7AA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x77F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7AA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x78D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C2 DUP2 DUP6 DUP6 PUSH2 0x1752 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7D6 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91634 SSTORE JUMP JUMPDEST PUSH2 0x82D PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x83D JUMPI POP PUSH1 0x5 DUP2 LT JUMPDEST PUSH2 0x881 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x547970204D7573742042652028312C322C332C3429 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE SWAP5 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP5 DUP6 MSTORE DUP6 DUP3 ADD SWAP4 DUP5 MSTORE PUSH1 0x0 PUSH1 0x60 DUP8 ADD DUP2 DUP2 MSTORE SWAP4 DUP2 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD PUSH1 0x1 DUP5 ADD SSTORE MLOAD PUSH1 0x2 DUP4 ADD SSTORE MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x8D6 DUP6 DUP3 DUP6 PUSH2 0x1876 JUMP JUMPDEST PUSH2 0x8E1 DUP6 DUP6 DUP6 PUSH2 0x18F0 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8F4 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x91A PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x93B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5D0 SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C2 DUP2 DUP6 DUP6 PUSH2 0x97C DUP4 DUP4 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x986 SWAP2 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x1752 JUMP JUMPDEST PUSH2 0x995 CALLER DUP3 PUSH2 0x1A94 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x9A0 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x9C1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5CF SSTORE JUMP JUMPDEST PUSH2 0x9F7 PUSH2 0x16F8 JUMP JUMPDEST PUSH2 0xA01 PUSH1 0x0 PUSH2 0x1BC6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x95EA7B3 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9B SWAP2 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE ADDRESS DUP2 MSTORE PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH4 0x1000000 DUP3 DIV DUP2 AND PUSH1 0x20 DUP5 ADD SWAP1 DUP2 MSTORE PUSH3 0xFFFFFF SWAP3 DUP4 AND DUP5 DUP7 ADD SWAP1 DUP2 MSTORE DUP8 DUP4 AND PUSH1 0x60 DUP7 ADD SWAP1 DUP2 MSTORE TIMESTAMP PUSH1 0x80 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP8 ADD DUP12 DUP2 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP10 ADD DUP2 DUP2 MSTORE PUSH1 0xE0 DUP11 ADD SWAP2 DUP3 MSTORE SWAP10 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE DUP10 MLOAD DUP9 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP6 MLOAD DUP8 AND PUSH1 0x24 DUP8 ADD MSTORE SWAP4 MLOAD SWAP1 SWAP7 AND PUSH1 0x44 DUP6 ADD MSTORE SWAP1 MLOAD DUP5 AND PUSH1 0x64 DUP5 ADD MSTORE MLOAD PUSH1 0x84 DUP4 ADD MSTORE SWAP3 MLOAD PUSH1 0xA4 DUP3 ADD MSTORE SWAP4 MLOAD PUSH1 0xC4 DUP6 ADD MSTORE SWAP1 MLOAD DUP2 AND PUSH1 0xE4 DUP5 ADD MSTORE SWAP1 SWAP2 PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x414BF389 SWAP1 PUSH2 0x104 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBBD SWAP2 SWAP1 PUSH2 0x1EEA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0xBD0 DUP3 CALLER DUP4 PUSH2 0x1876 JUMP JUMPDEST PUSH2 0xBDA DUP3 DUP3 PUSH2 0x1A94 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x0 SWAP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7C8 SWAP2 SWAP1 PUSH2 0x1EEA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x731 SWAP1 PUSH2 0x1E6A JUMP JUMPDEST PUSH2 0xC64 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0xC8E DUP3 DUP7 PUSH2 0x1585 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xCEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x8E1 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x1752 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD24 JUMPI PUSH2 0xD1D DUP4 DUP4 PUSH2 0x1C18 JUMP JUMPDEST SWAP1 POP PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1292 JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5D0 SLOAD PUSH1 0x64 SWAP1 PUSH2 0xD71 SWAP1 DUP6 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xD7B SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91635 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xDBA SWAP1 DUP7 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xDC4 SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33F SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xE03 SWAP1 DUP8 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xE0D SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C785 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xE4C SWAP1 DUP9 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xE56 SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0xE8F SWAP1 DUP6 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 0xEB5 JUMPI POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xF8F JUMPI PUSH1 0x7 SLOAD PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xEF5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH2 0xEF0 SWAP2 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xF30 SWAP2 PUSH2 0xF1F SWAP2 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA03 JUMP JUMPDEST POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xF66 SWAP1 DUP6 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0xF70 SWAP2 SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH2 0xFC0 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F50 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 0xFBA SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0xFF5 SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 0x101B JUMPI POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x10A3 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x1044 SWAP1 ADDRESS PUSH2 0xA03 JUMP JUMPDEST POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x107A SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x1084 SWAP2 SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FD0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x10CE SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x1109 SWAP1 DUP4 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 0x1120 JUMPI POP PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND JUMPDEST DUP1 ISZERO PUSH2 0x1144 JUMPI POP PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x11CC JUMPI PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x116D SWAP1 ADDRESS PUSH2 0xA03 JUMP JUMPDEST POP PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FB0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH2 0x11A3 SWAP1 DUP4 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x11AD SWAP2 SWAP1 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE PUSH2 0x11FD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F90 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x11F7 SWAP1 DUP5 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0x1213 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x122A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1258 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH2 0x1C18 JUMP JUMPDEST POP PUSH2 0x1287 DUP8 DUP3 DUP5 PUSH2 0x1269 DUP8 DUP10 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x1273 SWAP2 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0x127D SWAP2 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH2 0xEF0 SWAP1 DUP10 PUSH2 0x1F3C JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 0x13BE JUMPI PUSH1 0x1 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5CF SLOAD PUSH1 0x64 SWAP1 PUSH2 0x12E3 SWAP1 DUP6 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0x12ED SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0xA50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91634 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x132C SWAP1 DUP7 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0x1336 SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33E SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0x1375 SWAP1 DUP8 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0x137F SWAP2 SWAP1 PUSH2 0x1F1A JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C784 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x64 SWAP1 PUSH2 0xE4C SWAP1 DUP9 PUSH2 0x1F03 JUMP JUMPDEST PUSH2 0xD1D DUP4 DUP4 PUSH2 0x1C18 JUMP JUMPDEST PUSH2 0x13D0 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1FF0 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0x13F4 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x1415 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C784 SSTORE JUMP JUMPDEST PUSH2 0x144B PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x149E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14C2 SWAP2 SWAP1 PUSH2 0x1ECD JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x14CF PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x14F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C785 SSTORE JUMP JUMPDEST PUSH2 0x1526 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0xD DUP1 SLOAD SWAP4 SWAP1 SWAP5 AND SWAP3 AND DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH3 0xFFFFFF SWAP1 SWAP4 AND PUSH3 0xFFFFFF NOT PUSH4 0x1000000 SWAP1 SWAP4 MUL SWAP3 SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x15B8 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1F70 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SSTORE JUMP JUMPDEST PUSH2 0x15DC PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x15FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33F SSTORE JUMP JUMPDEST PUSH2 0x1633 PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0xF DUP2 GT ISZERO PUSH2 0x1654 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6EB SWAP1 PUSH2 0x1E33 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH32 0x64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33E SSTORE JUMP JUMPDEST PUSH2 0x168A PUSH2 0x16F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x16EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x995 DUP2 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA01 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x17B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1815 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1882 DUP5 DUP5 PUSH2 0x1585 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x18EA JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x18EA DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x1752 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1954 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x19B6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1A2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x18EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1AF4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1B68 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x7C2 DUP2 DUP6 DUP6 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1C6C JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1C50 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CC5 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1CE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1D1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D23 DUP5 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP PUSH2 0x1D31 PUSH1 0x20 DUP6 ADD PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D6C DUP2 PUSH2 0x1D41 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D6C DUP3 PUSH2 0x1C8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1DB1 PUSH1 0x20 DUP5 ADD PUSH2 0x1C8D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1DCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD8 DUP5 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP PUSH2 0x1DE6 PUSH1 0x20 DUP6 ADD PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1DFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E25 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x1DB1 PUSH1 0x20 DUP5 ADD PUSH2 0x1C8D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x54617820416D6F756E74206D757374206265203020746F203135000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1E7E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x7C8 JUMPI PUSH2 0x7C8 PUSH2 0x1EA4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1D6C DUP2 PUSH2 0x1D41 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x7C8 JUMPI PUSH2 0x7C8 PUSH2 0x1EA4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1F37 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x7C8 JUMPI PUSH2 0x7C8 PUSH2 0x1EA4 JUMP INVALID 0xA5 0xE 0xEC 0xE0 PUSH29 0x7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91637A50E 0xEC 0xE0 PUSH29 0x7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA9163612D0 0xC1 ISZERO PUSH24 0xE2F0950F57C455C117796550B79F444811DB8BA2F69C57B6 CHAINID 0xC7 DUP8 SLT 0xD0 0xC1 ISZERO PUSH24 0xE2F0950F57C455C117796550B79F444811DB8BA2F69C57B6 CHAINID 0xC7 DUP7 PUSH5 0xC15CC42BE7 DUP10 SWAP12 STOP 0x1F DUP2 DUP13 DELEGATECALL NUMBER ADDRESS JUMPI STOP 0x21 SLT 0xC4 XOR 0xD1 0xD3 0xA6 PUSH29 0xD5CB453051D34164C15CC42BE7899B001F818CF4433057002112C418D1 0xD3 0xA6 PUSH29 0xD5CB453051D340A2646970667358221220150217EBEA8D1435229002ED 0xEC KECCAK256 0xFB PUSH30 0x374C0490F3640C17467241EF91C347C764736F6C63430008130033000000 ",
							"sourceMap": "369:11924:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8848:152;;;;;;:::i;:::-;;:::i;:::-;;2154:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;673:21:8;;;;;;;;;;;;926:8:9;914:21;;;896:40;;884:2;869:18;673:21:8;752:190:9;4431:197:1;;;;;;:::i;:::-;;:::i;:::-;;;1549:14:9;;1542:22;1524:41;;1512:2;1497:18;4431:197:1;1384:187:9;424:21:8;;;;;-1:-1:-1;;;;;424:21:8;;;;;;-1:-1:-1;;;;;1740:32:9;;;1722:51;;1710:2;1695:18;424:21:8;1576:203:9;7396:154:8;;;;;;:::i;:::-;;:::i;3242:106:1:-;3329:12;;3242:106;;;1930:25:9;;;1918:2;1903:18;3242:106:1;1784:177:9;11584:193:8;;;;;;:::i;:::-;;:::i;475:26::-;;;;;-1:-1:-1;;;;;475:26:8;;;5190:286:1;;;;;;:::i;:::-;;:::i;10795:86:8:-;;;;;;:::i;:::-;;:::i;3091:91:1:-;;;3173:2;3200:36:9;;3188:2;3173:18;3091:91:1;3058:184:9;725:82:8;;765:42;725:82;;8504:160;;;;;;:::i;:::-;;:::i;1025:41::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5871:234:1;;;;;;:::i;:::-;;:::i;578:89:3:-;;;;;;:::i;:::-;;:::i;7047:162:8:-;;;;;;:::i;:::-;;:::i;507:31::-;;;;;;1111:23;;;;;-1:-1:-1;;;;;1111:23:8;;;1567:87;;;;;;:::i;:::-;-1:-1:-1;;;;;1621:19:8;;;;;:9;:19;;;;;:26;;-1:-1:-1;;1621:26:8;1643:4;1621:26;;;1567:87;3406:125:1;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:1;3480:7;3506:18;;;;;;;;;;;;3406:125;1831:101:0;;;:::i;1833:712:8:-;;;;;;:::i;:::-;;:::i;973:161:3:-;;;;;;:::i;:::-;;:::i;1140:23:8:-;;;;;-1:-1:-1;;;;;1140:23:8;;;11050:146;;;;;;:::i;:::-;;:::i;1201:85:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;1201:85;;700:19:8;;;;;;;;-1:-1:-1;;;;;700:19:8;;;2365:102:1;;;:::i;10546:100:8:-;;;;;;:::i;:::-;;:::i;6592:427:1:-;;;;;;:::i;:::-;;:::i;2715:4121:8:-;;;;;;:::i;:::-;;:::i;10232:100::-;;;;;;:::i;:::-;;:::i;8134:162::-;;;;;;:::i;:::-;;:::i;11471:108::-;;;;;;:::i;:::-;;:::i;813:68::-;;;;;9576:160;;;;;;:::i;:::-;;:::i;12036:255::-;;;;;;:::i;:::-;;:::i;1072:32::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4804:25:9;;;4860:2;4845:18;;4838:34;;;;4888:18;;;4881:34;4946:2;4931:18;;4924:34;4791:3;4776:19;1072:32:8;4573:391:9;3974:149:1;;;;;;:::i;:::-;;:::i;451:18:8:-;;;;;-1:-1:-1;;;451:18:8;;;;;;9926:92;;;;;;:::i;:::-;;:::i;9208:160::-;;;;;;:::i;:::-;;:::i;7761:162::-;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;8848:152:8:-;1094:13:0;:11;:13::i;:::-;8931:2:8::1;8925:3;:8;;8905:58;;;;-1:-1:-1::0;;;8905:58:8::1;;;;;;;:::i;:::-;;;;;;;;;8978:1;8973:7;::::0;:4:::1;:7;::::0;:14;:20;8848:152::o;2154:98:1:-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:5;4568:32:1;719:10:5;4584:7:1;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;7396:154:8:-;1094:13:0;:11;:13::i;:::-;7480:2:8::1;7474:3;:8;;7454:58;;;;-1:-1:-1::0;;;7454:58:8::1;;;;;;;:::i;:::-;7527:1;7522:7;::::0;:4:::1;:7;::::0;;:21;7396:154::o;11584:193::-;1094:13:0;:11;:13::i;:::-;11687:1:8::1;11682:3;:6;:17;;;;;11698:1;11692:3;:7;11682:17;11674:50;;;::::0;-1:-1:-1;;;11674:50:8;;6176:2:9;11674:50:8::1;::::0;::::1;6158:21:9::0;6215:2;6195:18;;;6188:30;-1:-1:-1;;;6234:18:9;;;6227:51;6295:18;;11674:50:8::1;5974:345:9::0;11674:50:8::1;11746:24;::::0;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;;;;;-1:-1:-1;11746:24:8;;;;;;11734:9;;;:4:::1;:9:::0;;;;:36;;;;;;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;::::1;::::0;11584:193::o;5190:286:1:-;5317:4;719:10:5;5373:38:1;5389:4;719:10:5;5404:6:1;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:1;;5190:286;-1:-1:-1;;;;5190:286:1:o;10795:86:8:-;1094:13:0;:11;:13::i;:::-;10860:6:8::1;:14:::0;;;::::1;;-1:-1:-1::0;;;10860:14:8::1;-1:-1:-1::0;;;;10860:14:8;;::::1;::::0;;;::::1;::::0;;10795:86::o;8504:160::-;1094:13:0;:11;:13::i;:::-;8595:2:8::1;8589:3;:8;;8569:58;;;;-1:-1:-1::0;;;8569:58:8::1;;;;;;;:::i;:::-;8642:1;8637:7;::::0;:4:::1;:7;::::0;:14;:20;8504:160::o;5871:234:1:-;5959:4;719:10:5;6013:64:1;719:10:5;6029:7:1;6066:10;6038:25;719:10:5;6029:7:1;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;578:89:3:-;633:27;719:10:5;653:6:3;633:5;:27::i;:::-;578:89;:::o;7047:162:8:-;1094:13:0;:11;:13::i;:::-;7139:2:8::1;7133:3;:8;;7113:58;;;;-1:-1:-1::0;;;7113:58:8::1;;;;;;;:::i;:::-;7186:1;7181:7;::::0;:4:::1;:7;::::0;;:21;7047:162::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1833:712:8:-;1956:9;;:48;;-1:-1:-1;;;1956:48:8;;-1:-1:-1;;;;;1982:10:8;6778:32:9;;1956:48:8;;;6760:51:9;6827:18;;;6820:34;;;-1:-1:-1;;1956:9:8;;:17;;6733:18:9;;1956:48:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2116:365:8;;;;;;;;2199:4;2116:365;;2232:4;;-1:-1:-1;;;;;2232:4:8;;;;;2116:365;;;;;;2259:7;;;;2116:365;;;;;;;;;;;;;;;2340:15;2116:365;;;;;;;;;;;;-1:-1:-1;2116:365:8;;;;;;;;;;;;2503:35;;-1:-1:-1;;;2503:35:8;;7400:13:9;;7396:22;;2503:35:8;;;7378:41:9;7461:24;;7457:33;;7435:20;;;7428:63;7533:24;;7529:39;;;7507:20;;;7500:69;7611:24;;7607:33;;7585:20;;;7578:63;7679:24;7657:20;;;7650:54;7742:24;;7720:20;;;7713:54;7805:24;;7783:20;;;7776:54;7872:24;;7868:33;;7846:20;;;7839:63;2116:365:8;;2503:10;:27;;;;;;7312:19:9;;2503:35:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2491:47;1833:712;-1:-1:-1;;;;1833:712:8:o;973:161:3:-;1049:46;1065:7;719:10:5;1088:6:3;1049:15;:46::i;:::-;1105:22;1111:7;1120:6;1105:5;:22::i;:::-;973:161;;:::o;11050:146:8:-;11152:9;;:36;;-1:-1:-1;;;11152:36:8;;-1:-1:-1;;;;;1740:32:9;;;11152:36:8;;;1722:51:9;11119:15:8;;11152:9;;:19;;1695:18:9;;11152:36:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2365:102:1:-;2421:13;2453:7;2446:14;;;;;:::i;10546:100:8:-;1094:13:0;:11;:13::i;:::-;10620:1:8::1;10615:7;::::0;:4:::1;:7;::::0;-1:-1:-1;;;;;;;;;;;10615:24:8;10546:100::o;6592:427:1:-;6685:4;719:10:5;6685:4:1;6766:25;719:10:5;6783:7:1;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:1;;8304:2:9;6801:85:1;;;8286:21:9;8343:2;8323:18;;;8316:30;8382:34;8362:18;;;8355:62;-1:-1:-1;;;8433:18:9;;;8426:35;8478:19;;6801:85:1;8102:401:9;6801:85:1;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;2715:4121:8:-;2823:10;2794:4;2813:21;;;:9;:21;;;;;;;;2810:4018;;;2856:26;2871:2;2875:6;2856:14;:26::i;:::-;2849:33;;;;2810:4018;2936:11;;-1:-1:-1;;;;;2936:11:8;2922:10;:25;2919:3899;;3004:1;2966:21;2999:7;;;:4;:7;;:14;;3015:3;;2992:21;;:6;:21;:::i;:::-;2991:27;;;;:::i;:::-;3067:1;3037:13;3062:7;;;:4;:7;;:14;;2966:53;;-1:-1:-1;3037:13:8;3078:3;;3055:21;;:6;:21;:::i;:::-;3054:27;;;;:::i;:::-;3138:1;3100:21;3133:7;;;:4;:7;;:14;;3037:45;;-1:-1:-1;3100:21:8;3149:3;;3126:21;;:6;:21;:::i;:::-;3125:27;;;;:::i;:::-;3209:1;3171:21;3204:7;;;:4;:7;;:14;;3100:53;;-1:-1:-1;3171:21:8;3220:3;;3197:21;;:6;:21;:::i;:::-;3196:27;;;;:::i;:::-;3289:1;3284:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3284:15:8;-1:-1:-1;;;;;;;;;;;3247:21:8;3171:53;;-1:-1:-1;3284:15:8;3247:32;;3271:8;;3247:32;:::i;:::-;3246:53;;3245:81;;;;-1:-1:-1;3310:1:8;3305:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3305:15:8;:20;;3245:81;3242:426;;;3365:11;;3394:1;3365:11;3378:7;;;:4;:7;;-1:-1:-1;;;;;;;;;;;3378:15:8;3350:47;;-1:-1:-1;;;;;3365:11:8;;3378:17;;;:::i;:::-;3350:14;:47::i;:::-;-1:-1:-1;3457:1:8;3441:7;;;;:4;:7;;-1:-1:-1;;;;;;;;;;;3441:15:8;3419:53;;3441:17;;;:::i;:::-;3460:11;;-1:-1:-1;;;;;3460:11:8;3419:20;:53::i;:::-;-1:-1:-1;3561:1:8;3556:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3556:15:8;-1:-1:-1;;;;;;;;;;;3519:21:8;:32;;3543:8;;3519:32;:::i;:::-;3518:53;;;;:::i;:::-;3499:1;3494:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3494:77:8;3242:426;;;3621:1;3616:7;;;;:4;:7;;-1:-1:-1;;;;;;;;;;;3616:33:8;;3641:8;;3616:7;:33;;3641:8;;3616:33;:::i;:::-;;;;-1:-1:-1;;3242:426:8;3740:1;3735:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3735:15:8;-1:-1:-1;;;;;;;;;;;3690:21:8;:40;;3714:16;;3690:40;:::i;:::-;3689:61;;3688:89;;;;-1:-1:-1;3761:1:8;3756:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3756:15:8;:20;;3688:89;3685:379;;;3827:1;3822:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3822:15:8;3801:51;;3846:4;3801:20;:51::i;:::-;-1:-1:-1;3949:1:8;3944:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3944:15:8;-1:-1:-1;;;;;;;;;;;3899:21:8;:40;;3923:16;;3899:40;:::i;:::-;3898:61;;;;:::i;:::-;3879:1;3874:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;3874:85:8;3685:379;;;4009:1;4004:7;;;;:4;:7;;-1:-1:-1;;;;;;;;;;;4004:41:8;;4029:16;;4004:7;:41;;4029:16;;4004:41;:::i;:::-;;;;-1:-1:-1;;3685:379:8;4136:1;4131:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;4131:15:8;-1:-1:-1;;;;;;;;;;;4086:21:8;:40;;4110:16;;4086:40;:::i;:::-;4085:61;;4084:73;;;;-1:-1:-1;4151:6:8;;-1:-1:-1;;;4151:6:8;;;;4084:73;:99;;;;-1:-1:-1;4167:1:8;4162:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;4162:15:8;:20;;4084:99;4081:390;;;4234:1;4229:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;4229:15:8;4208:51;;4253:4;4208:20;:51::i;:::-;-1:-1:-1;4356:1:8;4351:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;4351:15:8;-1:-1:-1;;;;;;;;;;;4306:21:8;:40;;4330:16;;4306:40;:::i;:::-;4305:61;;;;:::i;:::-;4286:1;4281:7;;:4;:7;;-1:-1:-1;;;;;;;;;;;4281:85:8;4081:390;;;4416:1;4411:7;;;;:4;:7;;-1:-1:-1;;;;;;;;;;;4411:41:8;;4436:16;;4411:7;:41;;4436:16;;4411:41;:::i;:::-;;;;-1:-1:-1;;4081:390:8;4505:6;;4490:39;;-1:-1:-1;;;;;4505:6:8;4512:16;4490:14;:39::i;:::-;-1:-1:-1;4562:6:8;;4547:31;;-1:-1:-1;;;;;4562:6:8;4569:8;4547:14;:31::i;:::-;-1:-1:-1;4611:6:8;;4596:39;;-1:-1:-1;;;;;4611:6:8;4618:16;4596:14;:39::i;:::-;-1:-1:-1;4668:6:8;;4653:39;;-1:-1:-1;;;;;4668:6:8;4675:16;4653:14;:39::i;:::-;-1:-1:-1;4717:90:8;4732:2;4788:16;4771;4745:25;4762:8;4745:16;:25;:::i;:::-;:42;;;;:::i;:::-;:59;;;;:::i;:::-;4737:68;;:6;:68;:::i;4717:90::-;4710:97;;;;;;;;2919:3899;4836:11;;-1:-1:-1;;;;;4836:11:8;;;4830:17;;;;4827:1991;;4917:1;4879:21;4912:7;;;:4;:7;;;:15;4929:3;;4905:22;;:6;:22;:::i;:::-;4904:28;;;;:::i;:::-;4981:1;4951:13;4976:7;;;:4;:7;;;:15;4879:54;;-1:-1:-1;4951:13:8;4993:3;;4969:22;;:6;:22;:::i;:::-;4968:28;;;;:::i;:::-;5053:1;5015:21;5048:7;;;:4;:7;;;:15;4951:46;;-1:-1:-1;5015:21:8;5065:3;;5041:22;;:6;:22;:::i;:::-;5040:28;;;;:::i;:::-;5125:1;5087:21;5120:7;;;:4;:7;;;:15;5015:54;;-1:-1:-1;5087:21:8;5137:3;;5113:22;;:6;:22;:::i;4827:1991::-;6777:26;6792:2;6796:6;6777:14;:26::i;10232:100::-;1094:13:0;:11;:13::i;:::-;10306:1:8::1;10301:7;::::0;:4:::1;:7;::::0;-1:-1:-1;;;;;;;;;;;10301:24:8;10232:100::o;8134:162::-;1094:13:0;:11;:13::i;:::-;8226:2:8::1;8220:3;:8;;8200:58;;;;-1:-1:-1::0;;;8200:58:8::1;;;;;;;:::i;:::-;8273:1;8268:7;::::0;:4:::1;:7;::::0;;:21;8134:162::o;11471:108::-;1094:13:0;:11;:13::i;:::-;11543:9:8::1;::::0;:29:::1;::::0;-1:-1:-1;;;11543:29:8;;-1:-1:-1;;;;;6778:32:9;;;11543:29:8::1;::::0;::::1;6760:51:9::0;6827:18;;;6820:34;;;11543:9:8;;::::1;::::0;:18:::1;::::0;6733::9;;11543:29:8::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;11471:108:::0;;:::o;9576:160::-;1094:13:0;:11;:13::i;:::-;9667:2:8::1;9661:3;:8;;9641:58;;;;-1:-1:-1::0;;;9641:58:8::1;;;;;;;:::i;:::-;9714:1;9709:7;::::0;:4:::1;:7;::::0;:14;:20;9576:160::o;12036:255::-;1094:13:0;:11;:13::i;:::-;12152:11:8::1;:33:::0;;-1:-1:-1;;;;;12152:33:8;;::::1;-1:-1:-1::0;;;;;;12152:33:8;;::::1;;::::0;;;12195:9:::1;:32:::0;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;;12237:4:::1;:19:::0;;12266:18:::1;::::0;;::::1;-1:-1:-1::0;;12237:19:8;;;::::1;12266:18:::0;;;;-1:-1:-1;;;;;;12266:18:8;;;;;;;::::1;::::0;;12036:255::o;3974:149:1:-;-1:-1:-1;;;;;4089:18:1;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;9926:92:8:-;1094:13:0;:11;:13::i;:::-;9992:1:8::1;9987:7;::::0;:4:::1;:7;::::0;-1:-1:-1;;;;;;;;;;;9987:24:8;9926:92::o;9208:160::-;1094:13:0;:11;:13::i;:::-;9299:2:8::1;9293:3;:8;;9273:58;;;;-1:-1:-1::0;;;9273:58:8::1;;;;;;;:::i;:::-;9346:1;9341:7;::::0;:4:::1;:7;::::0;:14;:20;9208:160::o;7761:162::-;1094:13:0;:11;:13::i;:::-;7853:2:8::1;7847:3;:8;;7827:58;;;;-1:-1:-1::0;;;7827:58:8::1;;;;;;;:::i;:::-;7900:1;7895:7;::::0;:4:::1;:7;::::0;;:21;7761:162::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;9238:2:9;2161:73:0::1;::::0;::::1;9220:21:9::0;9277:2;9257:18;;;9250:30;9316:34;9296:18;;;9289:62;-1:-1:-1;;;9367:18:9;;;9360:36;9413:19;;2161:73:0::1;9036:402:9::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;1359:130::-:0;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:5;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;9645:2:9;1414:68:0;;;9627:21:9;;;9664:18;;;9657:30;9723:34;9703:18;;;9696:62;9775:18;;1414:68:0;9443:356:9;10504:370:1;-1:-1:-1;;;;;10635:19:1;;10627:68;;;;-1:-1:-1;;;10627:68:1;;10006:2:9;10627:68:1;;;9988:21:9;10045:2;10025:18;;;10018:30;10084:34;10064:18;;;10057:62;-1:-1:-1;;;10135:18:9;;;10128:34;10179:19;;10627:68:1;9804:400:9;10627:68:1;-1:-1:-1;;;;;10713:21:1;;10705:68;;;;-1:-1:-1;;;10705:68:1;;10411:2:9;10705:68:1;;;10393:21:9;10450:2;10430:18;;;10423:30;10489:34;10469:18;;;10462:62;-1:-1:-1;;;10540:18:9;;;10533:32;10582:19;;10705:68:1;10209:398:9;10705:68:1;-1:-1:-1;;;;;10784:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1930:25:9;;;10835:32:1;;1903:18:9;10835:32:1;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:1;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:1;;10814:2:9;11404:68:1;;;10796:21:9;10853:2;10833:18;;;10826:30;10892:31;10872:18;;;10865:59;10941:18;;11404:68:1;10612:353:9;11404:68:1;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:1;;7591:68;;;;-1:-1:-1;;;7591:68:1;;11172:2:9;7591:68:1;;;11154:21:9;11211:2;11191:18;;;11184:30;11250:34;11230:18;;;11223:62;-1:-1:-1;;;11301:18:9;;;11294:35;11346:19;;7591:68:1;10970:401:9;7591:68:1;-1:-1:-1;;;;;7677:16:1;;7669:64;;;;-1:-1:-1;;;7669:64:1;;11578:2:9;7669:64:1;;;11560:21:9;11617:2;11597:18;;;11590:30;11656:34;11636:18;;;11629:62;-1:-1:-1;;;11707:18:9;;;11700:33;11750:19;;7669:64:1;11376:399:9;7669:64:1;-1:-1:-1;;;;;7815:15:1;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:1;;11982:2:9;7840:72:1;;;11964:21:9;12021:2;12001:18;;;11994:30;12060:34;12040:18;;;12033:62;-1:-1:-1;;;12111:18:9;;;12104:36;12157:19;;7840:72:1;11780:402:9;7840:72:1;-1:-1:-1;;;;;7946:15:1;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1930:25:9;;;8161:13:1;;8210:26;;1903:18:9;8210:26:1;;;;;;;8247:37;11471:108:8;9422:659:1;-1:-1:-1;;;;;9505:21:1;;9497:67;;;;-1:-1:-1;;;9497:67:1;;12389:2:9;9497:67:1;;;12371:21:9;12428:2;12408:18;;;12401:30;12467:34;12447:18;;;12440:62;-1:-1:-1;;;12518:18:9;;;12511:31;12559:19;;9497:67:1;12187:397:9;9497:67:1;-1:-1:-1;;;;;9660:18:1;;9635:22;9660:18;;;;;;;;;;;9696:24;;;;9688:71;;;;-1:-1:-1;;;9688:71:1;;12791:2:9;9688:71:1;;;12773:21:9;12830:2;12810:18;;;12803:30;12869:34;12849:18;;;12842:62;-1:-1:-1;;;12920:18:9;;;12913:32;12962:19;;9688:71:1;12589:398:9;9688:71:1;-1:-1:-1;;;;;9793:18:1;;:9;:18;;;;;;;;;;;9814:23;;;9793:44;;9930:12;:22;;;;;;;9978:37;1930:25:9;;;9793:9:1;;:18;9978:37;;1903:18:9;9978:37:1;;;;;;;11543:29:8::1;11471:108:::0;;:::o;2433:187:0:-;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;3727:189:1:-;3806:4;719:10:5;3860:28:1;719:10:5;3877:2:1;3881:6;3860:9;:28::i;14:180:9:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:9;;14:180;-1:-1:-1;14:180:9:o;199:548::-;311:4;340:2;369;358:9;351:21;401:6;395:13;444:6;439:2;428:9;424:18;417:34;469:1;479:140;493:6;490:1;487:13;479:140;;;588:14;;;584:23;;578:30;554:17;;;573:2;550:26;543:66;508:10;;479:140;;;483:3;668:1;663:2;654:6;643:9;639:22;635:31;628:42;738:2;731;727:7;722:2;714:6;710:15;706:29;695:9;691:45;687:54;679:62;;;;199:548;;;;:::o;947:173::-;1015:20;;-1:-1:-1;;;;;1064:31:9;;1054:42;;1044:70;;1110:1;1107;1100:12;1044:70;947:173;;;:::o;1125:254::-;1193:6;1201;1254:2;1242:9;1233:7;1229:23;1225:32;1222:52;;;1270:1;1267;1260:12;1222:52;1293:29;1312:9;1293:29;:::i;:::-;1283:39;1369:2;1354:18;;;;1341:32;;-1:-1:-1;;;1125:254:9:o;1966:385::-;2052:6;2060;2068;2076;2129:3;2117:9;2108:7;2104:23;2100:33;2097:53;;;2146:1;2143;2136:12;2097:53;-1:-1:-1;;2169:23:9;;;2239:2;2224:18;;2211:32;;-1:-1:-1;2290:2:9;2275:18;;2262:32;;2341:2;2326:18;2313:32;;-1:-1:-1;1966:385:9;-1:-1:-1;1966:385:9:o;2356:328::-;2433:6;2441;2449;2502:2;2490:9;2481:7;2477:23;2473:32;2470:52;;;2518:1;2515;2508:12;2470:52;2541:29;2560:9;2541:29;:::i;:::-;2531:39;;2589:38;2623:2;2612:9;2608:18;2589:38;:::i;:::-;2579:48;;2674:2;2663:9;2659:18;2646:32;2636:42;;2356:328;;;;;:::o;2689:118::-;2775:5;2768:13;2761:21;2754:5;2751:32;2741:60;;2797:1;2794;2787:12;2812:241;2868:6;2921:2;2909:9;2900:7;2896:23;2892:32;2889:52;;;2937:1;2934;2927:12;2889:52;2976:9;2963:23;2995:28;3017:5;2995:28;:::i;:::-;3042:5;2812:241;-1:-1:-1;;;2812:241:9:o;3247:186::-;3306:6;3359:2;3347:9;3338:7;3334:23;3330:32;3327:52;;;3375:1;3372;3365:12;3327:52;3398:29;3417:9;3398:29;:::i;3660:254::-;3728:6;3736;3789:2;3777:9;3768:7;3764:23;3760:32;3757:52;;;3805:1;3802;3795:12;3757:52;3841:9;3828:23;3818:33;;3870:38;3904:2;3893:9;3889:18;3870:38;:::i;:::-;3860:48;;3660:254;;;;;:::o;4146:422::-;4222:6;4230;4238;4291:2;4279:9;4270:7;4266:23;4262:32;4259:52;;;4307:1;4304;4297:12;4259:52;4330:29;4349:9;4330:29;:::i;:::-;4320:39;;4378:38;4412:2;4401:9;4397:18;4378:38;:::i;:::-;4368:48;;4466:2;4455:9;4451:18;4438:32;4510:8;4503:5;4499:20;4492:5;4489:31;4479:59;;4534:1;4531;4524:12;4479:59;4557:5;4547:15;;;4146:422;;;;;:::o;4969:260::-;5037:6;5045;5098:2;5086:9;5077:7;5073:23;5069:32;5066:52;;;5114:1;5111;5104:12;5066:52;5137:29;5156:9;5137:29;:::i;:::-;5127:39;;5185:38;5219:2;5208:9;5204:18;5185:38;:::i;5234:350::-;5436:2;5418:21;;;5475:2;5455:18;;;5448:30;5514:28;5509:2;5494:18;;5487:56;5575:2;5560:18;;5234:350::o;5589:380::-;5668:1;5664:12;;;;5711;;;5732:61;;5786:4;5778:6;5774:17;5764:27;;5732:61;5839:2;5831:6;5828:14;5808:18;5805:38;5802:161;;5885:10;5880:3;5876:20;5873:1;5866:31;5920:4;5917:1;5910:15;5948:4;5945:1;5938:15;5802:161;;5589:380;;;:::o;6324:127::-;6385:10;6380:3;6376:20;6373:1;6366:31;6416:4;6413:1;6406:15;6440:4;6437:1;6430:15;6456:125;6521:9;;;6542:10;;;6539:36;;;6555:18;;:::i;6865:245::-;6932:6;6985:2;6973:9;6964:7;6960:23;6956:32;6953:52;;;7001:1;6998;6991:12;6953:52;7033:9;7027:16;7052:28;7074:5;7052:28;:::i;7913:184::-;7983:6;8036:2;8024:9;8015:7;8011:23;8007:32;8004:52;;;8052:1;8049;8042:12;8004:52;-1:-1:-1;8075:16:9;;7913:184;-1:-1:-1;7913:184:9:o;8508:168::-;8581:9;;;8612;;8629:15;;;8623:22;;8609:37;8599:71;;8650:18;;:::i;8681:217::-;8721:1;8747;8737:132;;8791:10;8786:3;8782:20;8779:1;8772:31;8826:4;8823:1;8816:15;8854:4;8851:1;8844:15;8737:132;-1:-1:-1;8883:9:9;;8681:217::o;8903:128::-;8970:9;;;8991:11;;;8988:37;;;9005:18;;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1652200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"LPTransferAmount()": "2362",
								"PancakeSwap()": "2449",
								"Taxs(uint256)": "8995",
								"WBNB()": "2393",
								"WBNBToken()": "2427",
								"Wallet()": "2472",
								"WhiteList(address)": "24709",
								"WithdrawWBNB(address,uint256)": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24718",
								"balanceOf(address)": "2673",
								"burn(uint256)": "50904",
								"burnFrom(address,uint256)": "77526",
								"decimals()": "223",
								"decreaseAllowance(address,uint256)": "27061",
								"getBalanceWBNB(address)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"isSwap()": "2393",
								"linkToken()": "2426",
								"name()": "infinite",
								"owner()": "2465",
								"poolFee()": "2404",
								"renounceOwnership()": "infinite",
								"routerAddress()": "284",
								"setAddressFee(address,address,uint24)": "infinite",
								"setInvestmentBuyTax(uint256)": "24642",
								"setInvestmentSellTax(uint256)": "24664",
								"setInvestmentXAmount(uint256)": "24694",
								"setLPBuyTax(uint256)": "24579",
								"setLPSellTax(uint256)": "24578",
								"setLPXAmount(uint256)": "24627",
								"setMarkettingBuyTax(uint256)": "24643",
								"setMarkettingSellTax(uint256)": "24577",
								"setMarkettingSwap(bool)": "26869",
								"setMarkettingXAmount(uint256)": "24628",
								"setReflectionBuyTax(uint256)": "24622",
								"setReflectionSellTax(uint256)": "24577",
								"setTaxData(uint256,uint256,uint256,uint256)": "74111",
								"swapExactInputSingle(uint256,address)": "infinite",
								"swapRouter()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2349",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28490",
								"whiteList(address)": "2643"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH",
									"source": 8,
									"value": "A0"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 765,
									"end": 807,
									"name": "PUSH",
									"source": 8,
									"value": "E592427A0AECE92DE3EDEE1F18E0157C05861564"
								},
								{
									"begin": 813,
									"end": 881,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 813,
									"end": 881,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1170,
									"end": 1396,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "E"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "233937B3B3B4B2B9902A37B5B2B7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "91"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "5"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "119491D4D5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "DA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2050,
									"end": 2055,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2047,
									"name": "PUSH",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 2042,
									"end": 2055,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2065,
									"end": 2072,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2075,
									"end": 2082,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2072,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 2065,
									"end": 2082,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 936,
									"end": 968,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1227,
									"end": 1280,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 1233,
									"end": 1243,
									"modifierDepth": 1,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 1263,
									"end": 1279,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 3173,
									"end": 3175,
									"name": "PUSH",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 1263,
									"end": 1265,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "A"
								},
								{
									"begin": 1263,
									"end": 1279,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 1263,
									"end": 1279,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1263,
									"end": 1279,
									"modifierDepth": 1,
									"name": "tag",
									"source": 8,
									"value": "18"
								},
								{
									"begin": 1263,
									"end": 1279,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1245,
									"end": 1279,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1245,
									"end": 1279,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1245,
									"end": 1260,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "5AF3107A4000"
								},
								{
									"begin": 1245,
									"end": 1279,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 1245,
									"end": 1279,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1245,
									"end": 1279,
									"modifierDepth": 1,
									"name": "tag",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1245,
									"end": 1279,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1227,
									"end": 1232,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1227,
									"end": 1280,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1227,
									"end": 1280,
									"modifierDepth": 1,
									"name": "tag",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 1227,
									"end": 1280,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1309,
									"end": 1313,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 1309,
									"end": 1313,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1299,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "D"
								},
								{
									"begin": 1290,
									"end": 1314,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1314,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 1309,
									"end": 1313,
									"name": "PUSH",
									"source": 8,
									"value": "1000000"
								},
								{
									"begin": 1309,
									"end": 1313,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1309,
									"end": 1313,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1309,
									"end": 1313,
									"modifierDepth": 1,
									"name": "DIV",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1309,
									"end": 1313,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1290,
									"end": 1314,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1314,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1314,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1314,
									"modifierDepth": 1,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1314,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1290,
									"end": 1314,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1330,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "6"
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 1341,
									"end": 1345,
									"modifierDepth": 1,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"modifierDepth": 1,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1324,
									"end": 1346,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1365,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "C"
								},
								{
									"begin": 1356,
									"end": 1389,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"modifierDepth": 1,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1356,
									"end": 1389,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "49"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 719,
									"end": 729,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 8567,
									"end": 9102,
									"name": "tag",
									"source": 1,
									"value": "22"
								},
								{
									"begin": 8567,
									"end": 9102,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8650,
									"end": 8671,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8650,
									"end": 8671,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "28"
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 4625,
									"end": 4627,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 4607,
									"end": 4628,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4664,
									"end": 4666,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 4644,
									"end": 4662,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 4644,
									"end": 4662,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4644,
									"end": 4662,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4637,
									"end": 4667,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4703,
									"end": 4736,
									"name": "PUSH",
									"source": 9,
									"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
								},
								{
									"begin": 4683,
									"end": 4701,
									"name": "PUSH",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 4683,
									"end": 4701,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4683,
									"end": 4701,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4676,
									"end": 4737,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 4754,
									"end": 4772,
									"name": "PUSH",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 4754,
									"end": 4772,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "tag",
									"source": 1,
									"value": "28"
								},
								{
									"begin": 8642,
									"end": 8707,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8794,
									"end": 8800,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8790,
									"name": "PUSH",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 8778,
									"end": 8790,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "33"
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "34"
								},
								{
									"begin": 8778,
									"end": 8800,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "tag",
									"source": 1,
									"value": "33"
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8778,
									"end": 8800,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8955,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8964,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8974,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8974,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8974,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8974,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8974,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8946,
									"end": 8974,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 5059,
									"end": 5084,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 5059,
									"end": 5084,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5059,
									"end": 5084,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "PUSH",
									"source": 1,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 5032,
									"end": 5050,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8999,
									"end": 9036,
									"name": "LOG3",
									"source": 1
								},
								{
									"begin": 8567,
									"end": 9102,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8567,
									"end": 9102,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8567,
									"end": 9102,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12180,
									"end": 12301,
									"name": "tag",
									"source": 1,
									"value": "32"
								},
								{
									"begin": 12180,
									"end": 12301,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12180,
									"end": 12301,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12180,
									"end": 12301,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12180,
									"end": 12301,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12180,
									"end": 12301,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 146,
									"end": 526,
									"name": "tag",
									"source": 9,
									"value": "42"
								},
								{
									"begin": 146,
									"end": 526,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 225,
									"end": 226,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 221,
									"end": 233,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 221,
									"end": 233,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 268,
									"end": 280,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 268,
									"end": 280,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 289,
									"end": 350,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "52"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 343,
									"end": 347,
									"name": "PUSH",
									"source": 9,
									"value": "7F"
								},
								{
									"begin": 335,
									"end": 341,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 331,
									"end": 348,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 321,
									"end": 348,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 321,
									"end": 348,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 289,
									"end": 350,
									"name": "tag",
									"source": 9,
									"value": "52"
								},
								{
									"begin": 289,
									"end": 350,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 396,
									"end": 398,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 388,
									"end": 394,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 385,
									"end": 399,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 365,
									"end": 383,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 362,
									"end": 400,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 359,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "53"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 442,
									"end": 452,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 437,
									"end": 440,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 433,
									"end": 453,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 430,
									"end": 431,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 423,
									"end": 454,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 477,
									"end": 481,
									"name": "PUSH",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 474,
									"end": 475,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 482,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 505,
									"end": 509,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 502,
									"end": 503,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 495,
									"end": 510,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 359,
									"end": 520,
									"name": "tag",
									"source": 9,
									"value": "53"
								},
								{
									"begin": 359,
									"end": 520,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 359,
									"end": 520,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 146,
									"end": 526,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 146,
									"end": 526,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 146,
									"end": 526,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "tag",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 759,
									"end": 761,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 754,
									"end": 757,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 751,
									"end": 762,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 748,
									"end": 1196,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 795,
									"end": 796,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 820,
									"end": 825,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 816,
									"end": 818,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 809,
									"end": 826,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 865,
									"end": 869,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 861,
									"end": 863,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 851,
									"end": 870,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 935,
									"end": 937,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 923,
									"end": 933,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 919,
									"end": 938,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 916,
									"end": 917,
									"name": "PUSH",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 912,
									"end": 939,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 906,
									"end": 910,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 902,
									"end": 940,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 971,
									"end": 975,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 959,
									"end": 969,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 956,
									"end": 976,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "57"
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 994,
									"end": 998,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "tag",
									"source": 9,
									"value": "57"
								},
								{
									"begin": 953,
									"end": 1000,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1049,
									"end": 1051,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 1044,
									"end": 1047,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1040,
									"end": 1052,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1037,
									"end": 1038,
									"name": "PUSH",
									"source": 9,
									"value": "5"
								},
								{
									"begin": 1033,
									"end": 1053,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 1027,
									"end": 1031,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1023,
									"end": 1054,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1013,
									"end": 1054,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1013,
									"end": 1054,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "tag",
									"source": 9,
									"value": "58"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1122,
									"end": 1124,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1115,
									"end": 1120,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1112,
									"end": 1125,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "60"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1167,
									"end": 1184,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1167,
									"end": 1184,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1167,
									"end": 1184,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1148,
									"end": 1149,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1137,
									"end": 1150,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "58"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "tag",
									"source": 9,
									"value": "60"
								},
								{
									"begin": 1104,
									"end": 1186,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1108,
									"end": 1111,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1108,
									"end": 1111,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1108,
									"end": 1111,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 657,
									"end": 1202,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 657,
									"end": 1202,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1378,
									"end": 2730,
									"name": "tag",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 1378,
									"end": 2730,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1498,
									"end": 1508,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1498,
									"end": 1508,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1520,
									"end": 1550,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1520,
									"end": 1550,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1517,
									"end": 1573,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1517,
									"end": 1573,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 1517,
									"end": 1573,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 1553,
									"end": 1571,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "tag",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 1553,
									"end": 1571,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "65"
								},
								{
									"begin": 1672,
									"end": 1678,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "66"
								},
								{
									"begin": 1664,
									"end": 1668,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1658,
									"end": 1669,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "42"
								},
								{
									"begin": 1632,
									"end": 1670,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "tag",
									"source": 9,
									"value": "66"
								},
								{
									"begin": 1632,
									"end": 1670,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1626,
									"end": 1630,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "44"
								},
								{
									"begin": 1582,
									"end": 1679,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "tag",
									"source": 9,
									"value": "65"
								},
								{
									"begin": 1582,
									"end": 1679,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1734,
									"end": 1738,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1734,
									"end": 1738,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1798,
									"end": 1800,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 1787,
									"end": 1801,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1787,
									"end": 1801,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 1815,
									"end": 1816,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "68"
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2517,
									"end": 2518,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2534,
									"end": 2540,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "69"
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2586,
									"end": 2605,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2586,
									"end": 2605,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 2586,
									"end": 2605,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2580,
									"end": 2606,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "tag",
									"source": 9,
									"value": "69"
								},
								{
									"begin": 2531,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1335,
									"end": 1336,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1331,
									"end": 1342,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1331,
									"end": 1342,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1331,
									"end": 1342,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1327,
									"end": 1351,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 1323,
									"end": 1352,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 1313,
									"end": 1353,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1359,
									"end": 1360,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1355,
									"end": 1366,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1355,
									"end": 1366,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1355,
									"end": 1366,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1310,
									"end": 1367,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 2633,
									"end": 2714,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2633,
									"end": 2714,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1780,
									"end": 2724,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "60"
								},
								{
									"begin": 1780,
									"end": 2724,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "tag",
									"source": 9,
									"value": "68"
								},
								{
									"begin": 1810,
									"end": 2473,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 604,
									"end": 605,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 597,
									"end": 611,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 597,
									"end": 611,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 641,
									"end": 645,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 628,
									"end": 646,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 628,
									"end": 646,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1846,
									"end": 1866,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1846,
									"end": 1866,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1846,
									"end": 1866,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "tag",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1978,
									"end": 1985,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1975,
									"end": 1976,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1972,
									"end": 1986,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "74"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2067,
									"end": 2086,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 2067,
									"end": 2086,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 2067,
									"end": 2086,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2061,
									"end": 2087,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2046,
									"end": 2088,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2046,
									"end": 2088,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2159,
									"end": 2186,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 2127,
									"end": 2128,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2115,
									"end": 2129,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1994,
									"end": 2013,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "tag",
									"source": 9,
									"value": "74"
								},
								{
									"begin": 1964,
									"end": 2200,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1968,
									"end": 1971,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2228,
									"end": 2234,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2219,
									"end": 2226,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2216,
									"end": 2235,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "75"
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2283,
									"end": 2309,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2372,
									"end": 2373,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 2368,
									"end": 2382,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 2368,
									"end": 2382,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2368,
									"end": 2382,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2384,
									"end": 2387,
									"name": "PUSH",
									"source": 9,
									"value": "F8"
								},
								{
									"begin": 2364,
									"end": 2388,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 2360,
									"end": 2397,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 2356,
									"end": 2398,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 2341,
									"end": 2399,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 2326,
									"end": 2400,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2326,
									"end": 2400,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "tag",
									"source": 9,
									"value": "75"
								},
								{
									"begin": 2213,
									"end": 2414,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2460,
									"end": 2461,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2444,
									"end": 2458,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2444,
									"end": 2458,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2444,
									"end": 2458,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2440,
									"end": 2462,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2427,
									"end": 2463,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2427,
									"end": 2463,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1378,
									"end": 2730,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2735,
									"end": 2862,
									"name": "tag",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 2735,
									"end": 2862,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2796,
									"end": 2806,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B71"
								},
								{
									"begin": 2791,
									"end": 2794,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 2787,
									"end": 2807,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 2784,
									"end": 2785,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2777,
									"end": 2808,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2827,
									"end": 2831,
									"name": "PUSH",
									"source": 9,
									"value": "11"
								},
								{
									"begin": 2824,
									"end": 2825,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 2817,
									"end": 2832,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2851,
									"end": 2855,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 2848,
									"end": 2849,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2841,
									"end": 2856,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "tag",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2956,
									"end": 2957,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2999,
									"end": 3004,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2956,
									"end": 2957,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "tag",
									"source": 9,
									"value": "78"
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3034,
									"end": 3041,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3024,
									"end": 3032,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3021,
									"end": 3042,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3093,
									"end": 3097,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3089,
									"end": 3090,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3085,
									"end": 3091,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 3081,
									"end": 3098,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 3075,
									"end": 3079,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3072,
									"end": 3099,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3069,
									"end": 3122,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3069,
									"end": 3122,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "82"
								},
								{
									"begin": 3069,
									"end": 3122,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3102,
									"end": 3120,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "82"
								},
								{
									"begin": 3102,
									"end": 3120,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 3102,
									"end": 3120,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3102,
									"end": 3120,
									"name": "tag",
									"source": 9,
									"value": "82"
								},
								{
									"begin": 3102,
									"end": 3120,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3152,
									"end": 3159,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3142,
									"end": 3150,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3138,
									"end": 3160,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3135,
									"end": 3190,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3135,
									"end": 3190,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "83"
								},
								{
									"begin": 3135,
									"end": 3190,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3172,
									"end": 3188,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3172,
									"end": 3188,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3172,
									"end": 3188,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 3172,
									"end": 3188,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3135,
									"end": 3190,
									"name": "tag",
									"source": 9,
									"value": "83"
								},
								{
									"begin": 3135,
									"end": 3190,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3251,
									"end": 3273,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 3251,
									"end": 3273,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3251,
									"end": 3273,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 3251,
									"end": 3273,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 3211,
									"end": 3226,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3211,
									"end": 3226,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3211,
									"end": 3226,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 3211,
									"end": 3226,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "78"
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "tag",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 3013,
									"end": 3283,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3017,
									"end": 3020,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2867,
									"end": 3289,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "tag",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3343,
									"end": 3348,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3373,
									"end": 3381,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3363,
									"end": 3443,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "85"
								},
								{
									"begin": 3363,
									"end": 3443,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3414,
									"end": 3415,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3428,
									"end": 3433,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 3428,
									"end": 3433,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3363,
									"end": 3443,
									"name": "tag",
									"source": 9,
									"value": "85"
								},
								{
									"begin": 3363,
									"end": 3443,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3462,
									"end": 3466,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3452,
									"end": 3528,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "86"
								},
								{
									"begin": 3452,
									"end": 3528,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3499,
									"end": 3500,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3513,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 3513,
									"end": 3518,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3452,
									"end": 3528,
									"name": "tag",
									"source": 9,
									"value": "86"
								},
								{
									"begin": 3452,
									"end": 3528,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3544,
									"end": 3548,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3562,
									"end": 3563,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3557,
									"end": 3616,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3557,
									"end": 3616,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 3557,
									"end": 3616,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "88"
								},
								{
									"begin": 3557,
									"end": 3616,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3630,
									"end": 3631,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 3625,
									"end": 3755,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3625,
									"end": 3755,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 3625,
									"end": 3755,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 3625,
									"end": 3755,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3537,
									"end": 3755,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 3537,
									"end": 3755,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3557,
									"end": 3616,
									"name": "tag",
									"source": 9,
									"value": "88"
								},
								{
									"begin": 3557,
									"end": 3616,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3587,
									"end": 3588,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3578,
									"end": 3588,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3578,
									"end": 3588,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3601,
									"end": 3606,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3601,
									"end": 3606,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 3601,
									"end": 3606,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3625,
									"end": 3755,
									"name": "tag",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 3625,
									"end": 3755,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3662,
									"end": 3665,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 3652,
									"end": 3660,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3649,
									"end": 3666,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3646,
									"end": 3689,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3646,
									"end": 3689,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 3646,
									"end": 3689,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3669,
									"end": 3687,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 3669,
									"end": 3687,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 3669,
									"end": 3687,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3669,
									"end": 3687,
									"name": "tag",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 3669,
									"end": 3687,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3725,
									"end": 3726,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 3711,
									"end": 3727,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3711,
									"end": 3727,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 3740,
									"end": 3745,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 3740,
									"end": 3745,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3537,
									"end": 3755,
									"name": "tag",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 3537,
									"end": 3755,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3537,
									"end": 3755,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3839,
									"end": 3841,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3829,
									"end": 3837,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3826,
									"end": 3842,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3820,
									"end": 3823,
									"name": "PUSH",
									"source": 9,
									"value": "133"
								},
								{
									"begin": 3814,
									"end": 3818,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3811,
									"end": 3824,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3807,
									"end": 3843,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3801,
									"end": 3803,
									"name": "PUSH",
									"source": 9,
									"value": "4E"
								},
								{
									"begin": 3791,
									"end": 3799,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3788,
									"end": 3804,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3783,
									"end": 3785,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 3777,
									"end": 3781,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3774,
									"end": 3786,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3770,
									"end": 3805,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3767,
									"end": 3844,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 3764,
									"end": 3923,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3764,
									"end": 3923,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "92"
								},
								{
									"begin": 3764,
									"end": 3923,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3876,
									"end": 3895,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3876,
									"end": 3895,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3876,
									"end": 3895,
									"name": "EXP",
									"source": 9
								},
								{
									"begin": 3908,
									"end": 3913,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 3908,
									"end": 3913,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3764,
									"end": 3923,
									"name": "tag",
									"source": 9,
									"value": "92"
								},
								{
									"begin": 3764,
									"end": 3923,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3955,
									"end": 3989,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "93"
								},
								{
									"begin": 3980,
									"end": 3988,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3974,
									"end": 3978,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3955,
									"end": 3989,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 3955,
									"end": 3989,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3955,
									"end": 3989,
									"name": "tag",
									"source": 9,
									"value": "93"
								},
								{
									"begin": 3955,
									"end": 3989,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4025,
									"end": 4031,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 4021,
									"end": 4022,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4017,
									"end": 4023,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 4013,
									"end": 4032,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 4004,
									"end": 4011,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4001,
									"end": 4033,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 3998,
									"end": 4056,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3998,
									"end": 4056,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "95"
								},
								{
									"begin": 3998,
									"end": 4056,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4036,
									"end": 4054,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "95"
								},
								{
									"begin": 4036,
									"end": 4054,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 4036,
									"end": 4054,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4036,
									"end": 4054,
									"name": "tag",
									"source": 9,
									"value": "95"
								},
								{
									"begin": 4036,
									"end": 4054,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4074,
									"end": 4094,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 4074,
									"end": 4094,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "tag",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3294,
									"end": 4100,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3294,
									"end": 4100,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4105,
									"end": 4245,
									"name": "tag",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 4105,
									"end": 4245,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4163,
									"end": 4168,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4192,
									"end": 4239,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "97"
								},
								{
									"begin": 4233,
									"end": 4237,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 4223,
									"end": 4231,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4219,
									"end": 4238,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 4213,
									"end": 4217,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 4192,
									"end": 4239,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 4192,
									"end": 4239,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4192,
									"end": 4239,
									"name": "tag",
									"source": 9,
									"value": "97"
								},
								{
									"begin": 4192,
									"end": 4239,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4183,
									"end": 4239,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 4105,
									"end": 4245,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4105,
									"end": 4245,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4250,
									"end": 4418,
									"name": "tag",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 4250,
									"end": 4418,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4323,
									"end": 4332,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 4323,
									"end": 4332,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4323,
									"end": 4332,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 4354,
									"end": 4363,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4354,
									"end": 4363,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4371,
									"end": 4386,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4371,
									"end": 4386,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4371,
									"end": 4386,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 4365,
									"end": 4387,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4365,
									"end": 4387,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 4351,
									"end": 4388,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 4341,
									"end": 4412,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 4341,
									"end": 4412,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4392,
									"end": 4410,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 4392,
									"end": 4410,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 4392,
									"end": 4410,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4783,
									"end": 4908,
									"name": "tag",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 4783,
									"end": 4908,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4848,
									"end": 4857,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 4848,
									"end": 4857,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4848,
									"end": 4857,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4869,
									"end": 4879,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 4869,
									"end": 4879,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4869,
									"end": 4879,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 4866,
									"end": 4902,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4866,
									"end": 4902,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 4866,
									"end": 4902,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4882,
									"end": 4900,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "84"
								},
								{
									"begin": 4882,
									"end": 4900,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "46"
								},
								{
									"begin": 4882,
									"end": 4900,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4913,
									"end": 5090,
									"name": "tag",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 4913,
									"end": 5090,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "1016"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 369,
									"end": 12293,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220150217ebea8d1435229002edec20fb7d374c0490f3640c17467241ef91c347c764736f6c63430008130033",
									".code": [
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "793EA8D1"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "AFE2DDD7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "DD62ED3E"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "DD62ED3E"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "E319C2CE"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "E465D64D"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "E67D6921"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "EA173A39"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "48"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "AFE2DDD7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "B9E43EEE"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "C31C9C07"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "C90880C1"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "CA5FB573"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "CCBD73E7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "8DD95002"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "8DD95002"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "95D89B41"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "9C42AC13"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "A457C2D7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "AB72498D"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "793EA8D1"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "79CC6790"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "82FAB2AD"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "8568B3A5"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "313CE567"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "446B5D5F"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "446B5D5F"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "5202EA6D"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "57970E93"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "6BC20157"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "313CE567"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "3268CC56"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "36EAB316"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "372C12B1"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "39509351"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "42966C68"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "172CC5A7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "172CC5A7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "18160DDD"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "1901156D"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "196FD4BE"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "23B872DD"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "24E2A33E"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "445A103"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "6FDDE03"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "89FE6AA"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B3"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "E1B39FB"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 369,
											"end": 12293,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 8848,
											"end": 9000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 8848,
											"end": 9000,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 2154,
											"end": 2252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 2154,
											"end": 2252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 673,
											"end": 694,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 673,
											"end": 694,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 673,
											"end": 694,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 673,
											"end": 694,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFF"
										},
										{
											"begin": 673,
											"end": 694,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "tag",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 673,
											"end": 694,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 673,
											"end": 694,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 673,
											"end": 694,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 926,
											"end": 934,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFF"
										},
										{
											"begin": 914,
											"end": 935,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 914,
											"end": 935,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 914,
											"end": 935,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 896,
											"end": 936,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 896,
											"end": 936,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 884,
											"end": 886,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 869,
											"end": 887,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 673,
											"end": 694,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 752,
											"end": 942,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 4431,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4431,
											"end": 4628,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1549,
											"end": 1563,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1549,
											"end": 1563,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1564,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1524,
											"end": 1565,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1524,
											"end": 1565,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1512,
											"end": 1514,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1497,
											"end": 1515,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1384,
											"end": 1571,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 424,
											"end": 445,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 424,
											"end": 445,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 424,
											"end": 445,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 424,
											"end": 445,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 424,
											"end": 445,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 424,
											"end": 445,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 424,
											"end": 445,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 424,
											"end": 445,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 424,
											"end": 445,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 424,
											"end": 445,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 424,
											"end": 445,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 424,
											"end": 445,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 445,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1740,
											"end": 1772,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1740,
											"end": 1772,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1740,
											"end": 1772,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1722,
											"end": 1773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1722,
											"end": 1773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1710,
											"end": 1712,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1695,
											"end": 1713,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 424,
											"end": 445,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 1576,
											"end": 1779,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "tag",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 7396,
											"end": 7550,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7396,
											"end": 7550,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1784,
											"end": 1961,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 11584,
											"end": 11777,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "tag",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 11584,
											"end": 11777,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 475,
											"end": 501,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 475,
											"end": 501,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 475,
											"end": 501,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 475,
											"end": 501,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 475,
											"end": 501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 475,
											"end": 501,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 475,
											"end": 501,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 475,
											"end": 501,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 475,
											"end": 501,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 5190,
											"end": 5476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 5190,
											"end": 5476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "tag",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 10795,
											"end": 10881,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 10795,
											"end": 10881,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3173,
											"end": 3175,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 3200,
											"end": 3236,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3200,
											"end": 3236,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3188,
											"end": 3190,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3173,
											"end": 3191,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 3058,
											"end": 3242,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 725,
											"end": 807,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 725,
											"end": 807,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 725,
											"end": 807,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 765,
											"end": 807,
											"name": "PUSH",
											"source": 8,
											"value": "E592427A0AECE92DE3EDEE1F18E0157C05861564"
										},
										{
											"begin": 725,
											"end": 807,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 725,
											"end": 807,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 8504,
											"end": 8664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 8504,
											"end": 8664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "112"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 1025,
											"end": 1066,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "tag",
											"source": 8,
											"value": "112"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1025,
											"end": 1066,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 5871,
											"end": 6105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 5871,
											"end": 6105,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 578,
											"end": 667,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 578,
											"end": 667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 578,
											"end": 667,
											"name": "tag",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 578,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 578,
											"end": 667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 7047,
											"end": 7209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "tag",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 7047,
											"end": 7209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 507,
											"end": 538,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 507,
											"end": 538,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 507,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 507,
											"end": 538,
											"name": "PUSH",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 507,
											"end": 538,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 507,
											"end": 538,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 507,
											"end": 538,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1111,
											"end": 1134,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "tag",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 1567,
											"end": 1654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1630,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1640,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1647,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1647,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1621,
											"end": 1647,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1643,
											"end": 1647,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1621,
											"end": 1647,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1647,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1621,
											"end": 1647,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1567,
											"end": 1654,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3406,
											"end": 3531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3480,
											"end": 3487,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 1833,
											"end": 2545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 1833,
											"end": 2545,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 973,
											"end": 1134,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "tag",
											"source": 3,
											"value": "148"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 973,
											"end": 1134,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "PUSH",
											"source": 8,
											"value": "D"
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1140,
											"end": 1163,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 11050,
											"end": 11196,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 11050,
											"end": 11196,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 700,
											"end": 719,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 700,
											"end": 719,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 700,
											"end": 719,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 700,
											"end": 719,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 700,
											"end": 719,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 700,
											"end": 719,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 700,
											"end": 719,
											"name": "PUSH",
											"source": 8,
											"value": "1000000"
										},
										{
											"begin": 700,
											"end": 719,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 700,
											"end": 719,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 700,
											"end": 719,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 700,
											"end": 719,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 700,
											"end": 719,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 2365,
											"end": 2467,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 10546,
											"end": 10646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "tag",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 10546,
											"end": 10646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 6592,
											"end": 7019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 6592,
											"end": 7019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "tag",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 2715,
											"end": 6836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "tag",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 2715,
											"end": 6836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 10232,
											"end": 10332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 10232,
											"end": 10332,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 8134,
											"end": 8296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 8134,
											"end": 8296,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 11471,
											"end": 11579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 11471,
											"end": 11579,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 813,
											"end": 881,
											"name": "tag",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 813,
											"end": 881,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 813,
											"end": 881,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 813,
											"end": 881,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1016"
										},
										{
											"begin": 813,
											"end": 881,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 813,
											"end": 881,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 9576,
											"end": 9736,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "tag",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 9576,
											"end": 9736,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "tag",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 12036,
											"end": 12291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "tag",
											"source": 8,
											"value": "194"
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 12036,
											"end": 12291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 1072,
											"end": 1104,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "tag",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4804,
											"end": 4829,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 4804,
											"end": 4829,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4804,
											"end": 4829,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4860,
											"end": 4862,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4845,
											"end": 4863,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4845,
											"end": 4863,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4838,
											"end": 4872,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4838,
											"end": 4872,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4838,
											"end": 4872,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4838,
											"end": 4872,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4888,
											"end": 4906,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4888,
											"end": 4906,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4888,
											"end": 4906,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4881,
											"end": 4915,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4946,
											"end": 4948,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 4931,
											"end": 4949,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4931,
											"end": 4949,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4924,
											"end": 4958,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4791,
											"end": 4794,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 4776,
											"end": 4795,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1072,
											"end": 1104,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 4573,
											"end": 4964,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "203"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "204"
										},
										{
											"begin": 3974,
											"end": 4123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 1,
											"value": "203"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 3974,
											"end": 4123,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 451,
											"end": 469,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 451,
											"end": 469,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 451,
											"end": 469,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 451,
											"end": 469,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 451,
											"end": 469,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 451,
											"end": 469,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 451,
											"end": 469,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 451,
											"end": 469,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 451,
											"end": 469,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 451,
											"end": 469,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 451,
											"end": 469,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 451,
											"end": 469,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 9926,
											"end": 10018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 9926,
											"end": 10018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "tag",
											"source": 8,
											"value": "46"
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 9208,
											"end": 9368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "tag",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 9208,
											"end": 9368,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "tag",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 7761,
											"end": 7923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 7761,
											"end": 7923,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 2081,
											"end": 2279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 8848,
											"end": 9000,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8931,
											"end": 8933,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 8925,
											"end": 8928,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8925,
											"end": 8933,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8925,
											"end": 8933,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 8905,
											"end": 8963,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 8905,
											"end": 8963,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8978,
											"end": 8979,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 8973,
											"end": 8980,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8973,
											"end": 8980,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8973,
											"end": 8977,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 8973,
											"end": 8980,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8973,
											"end": 8980,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8973,
											"end": 8987,
											"name": "PUSH",
											"source": 8,
											"value": "A50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91635"
										},
										{
											"begin": 8973,
											"end": 8993,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8848,
											"end": 9000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2208,
											"end": 2221,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2240,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "231"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "232"
										},
										{
											"begin": 2233,
											"end": 2245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "231"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "232"
										},
										{
											"begin": 2233,
											"end": 2245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "234"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "234"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "236"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "236"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 1,
											"value": "234"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2252,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4514,
											"end": 4518,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "240"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4584,
											"end": 4591,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4593,
											"end": 4599,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4568,
											"end": 4576,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "241"
										},
										{
											"begin": 4568,
											"end": 4600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "tag",
											"source": 1,
											"value": "240"
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4617,
											"end": 4621,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4610,
											"end": 4621,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4610,
											"end": 4621,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4610,
											"end": 4621,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 1,
											"value": "237"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4431,
											"end": 4628,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "tag",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7396,
											"end": 7550,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7480,
											"end": 7482,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 7474,
											"end": 7477,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7474,
											"end": 7482,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7474,
											"end": 7482,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 7454,
											"end": 7512,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 7454,
											"end": 7512,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7527,
											"end": 7528,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 7522,
											"end": 7529,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7522,
											"end": 7529,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7522,
											"end": 7526,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 7522,
											"end": 7529,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7522,
											"end": 7529,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7522,
											"end": 7529,
											"name": "PUSH",
											"source": 8,
											"value": "A50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91634"
										},
										{
											"begin": 7522,
											"end": 7543,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7396,
											"end": 7550,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 11584,
											"end": 11777,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11687,
											"end": 11688,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11682,
											"end": 11685,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11682,
											"end": 11688,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11698,
											"end": 11699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 11692,
											"end": 11695,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11692,
											"end": 11699,
											"modifierDepth": 1,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "252"
										},
										{
											"begin": 11682,
											"end": 11699,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11674,
											"end": 11724,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11674,
											"end": 11724,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11674,
											"end": 11724,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6176,
											"end": 6178,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11674,
											"end": 11724,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6158,
											"end": 6179,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6215,
											"end": 6217,
											"name": "PUSH",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 6195,
											"end": 6213,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6195,
											"end": 6213,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6195,
											"end": 6213,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6188,
											"end": 6218,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "547970204D7573742042652028312C322C332C3429"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6234,
											"end": 6252,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 6234,
											"end": 6252,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6234,
											"end": 6252,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6227,
											"end": 6278,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6295,
											"end": 6313,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 6295,
											"end": 6313,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 5974,
											"end": 6319,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 11674,
											"end": 11724,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11746,
											"end": 11770,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11738,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11743,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11734,
											"end": 11770,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 11584,
											"end": 11777,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5317,
											"end": 5321,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "258"
										},
										{
											"begin": 5389,
											"end": 5393,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5404,
											"end": 5410,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5373,
											"end": 5388,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "259"
										},
										{
											"begin": 5373,
											"end": 5411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "tag",
											"source": 1,
											"value": "258"
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 5431,
											"end": 5435,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5437,
											"end": 5439,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5441,
											"end": 5447,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5421,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "261"
										},
										{
											"begin": 5421,
											"end": 5448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "tag",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5465,
											"end": 5469,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5465,
											"end": 5469,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5190,
											"end": 5476,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "tag",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 10795,
											"end": 10881,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10860,
											"end": 10866,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10860,
											"end": 10874,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10860,
											"end": 10874,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10795,
											"end": 10881,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "tag",
											"source": 8,
											"value": "110"
										},
										{
											"begin": 8504,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8595,
											"end": 8597,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 8589,
											"end": 8592,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8589,
											"end": 8597,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8589,
											"end": 8597,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 8569,
											"end": 8627,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 8569,
											"end": 8627,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8642,
											"end": 8643,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8637,
											"end": 8644,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8637,
											"end": 8644,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8637,
											"end": 8641,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 8637,
											"end": 8644,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8637,
											"end": 8644,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8637,
											"end": 8651,
											"name": "PUSH",
											"source": 8,
											"value": "72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5D0"
										},
										{
											"begin": 8637,
											"end": 8657,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8504,
											"end": 8664,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 1,
											"value": "118"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5959,
											"end": 5963,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6013,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "240"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6066,
											"end": 6076,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "275"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 6038,
											"end": 6063,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "tag",
											"source": 1,
											"value": "275"
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "276"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "277"
										},
										{
											"begin": 6038,
											"end": 6076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "tag",
											"source": 1,
											"value": "276"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6013,
											"end": 6021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "241"
										},
										{
											"begin": 6013,
											"end": 6077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 578,
											"end": 667,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 578,
											"end": 667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 633,
											"end": 660,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 653,
											"end": 659,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 633,
											"end": 638,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 633,
											"end": 660,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 633,
											"end": 660,
											"name": "tag",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 633,
											"end": 660,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 578,
											"end": 667,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 578,
											"end": 667,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "tag",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 7047,
											"end": 7209,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "283"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "283"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7139,
											"end": 7141,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 7133,
											"end": 7136,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7133,
											"end": 7141,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7133,
											"end": 7141,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 7113,
											"end": 7171,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 7113,
											"end": 7171,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7186,
											"end": 7187,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7181,
											"end": 7188,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7181,
											"end": 7188,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7181,
											"end": 7185,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 7181,
											"end": 7188,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7181,
											"end": 7188,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7181,
											"end": 7188,
											"name": "PUSH",
											"source": 8,
											"value": "72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5CF"
										},
										{
											"begin": 7181,
											"end": 7202,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7047,
											"end": 7209,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "291"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "291"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 1922,
											"end": 1923,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 1895,
											"end": 1925,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 1895,
											"end": 1925,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "PUSH",
											"source": 8,
											"value": "C"
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1982,
											"end": 1992,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1016"
										},
										{
											"begin": 6778,
											"end": 6810,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6778,
											"end": 6810,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6760,
											"end": 6811,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6827,
											"end": 6845,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6827,
											"end": 6845,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6827,
											"end": 6845,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6820,
											"end": 6854,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 6820,
											"end": 6854,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6820,
											"end": 6854,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 1965,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 1973,
											"name": "PUSH",
											"source": 8,
											"value": "95EA7B3"
										},
										{
											"begin": 1956,
											"end": 1973,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6733,
											"end": 6751,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 6733,
											"end": 6751,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 1956,
											"end": 2004,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 1956,
											"end": 2004,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2199,
											"end": 2203,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "PUSH",
											"source": 8,
											"value": "1000000"
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2232,
											"end": 2236,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2259,
											"end": 2266,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFF"
										},
										{
											"begin": 2259,
											"end": 2266,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2259,
											"end": 2266,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2259,
											"end": 2266,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2340,
											"end": 2355,
											"name": "TIMESTAMP",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "414BF389"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7400,
											"end": 7413,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 7400,
											"end": 7413,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7396,
											"end": 7418,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 7396,
											"end": 7418,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7378,
											"end": 7419,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7461,
											"end": 7485,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 7461,
											"end": 7485,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7457,
											"end": 7490,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7457,
											"end": 7490,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7435,
											"end": 7455,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 7435,
											"end": 7455,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 7435,
											"end": 7455,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7428,
											"end": 7491,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7533,
											"end": 7557,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7533,
											"end": 7557,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7529,
											"end": 7568,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7529,
											"end": 7568,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": 7529,
											"end": 7568,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7507,
											"end": 7527,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 7507,
											"end": 7527,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 7507,
											"end": 7527,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7500,
											"end": 7569,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7611,
											"end": 7635,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7611,
											"end": 7635,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7607,
											"end": 7640,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7607,
											"end": 7640,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7585,
											"end": 7605,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 7585,
											"end": 7605,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7585,
											"end": 7605,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7578,
											"end": 7641,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7679,
											"end": 7703,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7657,
											"end": 7677,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 7657,
											"end": 7677,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7657,
											"end": 7677,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7650,
											"end": 7704,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7742,
											"end": 7766,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 7742,
											"end": 7766,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7720,
											"end": 7740,
											"name": "PUSH",
											"source": 9,
											"value": "A4"
										},
										{
											"begin": 7720,
											"end": 7740,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7720,
											"end": 7740,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7713,
											"end": 7767,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7805,
											"end": 7829,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 7805,
											"end": 7829,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7783,
											"end": 7803,
											"name": "PUSH",
											"source": 9,
											"value": "C4"
										},
										{
											"begin": 7783,
											"end": 7803,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 7783,
											"end": 7803,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7776,
											"end": 7830,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7872,
											"end": 7896,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7872,
											"end": 7896,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7868,
											"end": 7901,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7868,
											"end": 7901,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7846,
											"end": 7866,
											"name": "PUSH",
											"source": 9,
											"value": "E4"
										},
										{
											"begin": 7846,
											"end": 7866,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 7846,
											"end": 7866,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7839,
											"end": 7902,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2116,
											"end": 2481,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2513,
											"name": "PUSHIMMUTABLE",
											"source": 8,
											"value": "1016"
										},
										{
											"begin": 2503,
											"end": 2530,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2530,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2530,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2530,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2530,
											"name": "PUSH",
											"source": 8,
											"value": "414BF389"
										},
										{
											"begin": 2503,
											"end": 2530,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7312,
											"end": 7331,
											"name": "PUSH",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 7312,
											"end": 7331,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "tag",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 2503,
											"end": 2538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "tag",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 2503,
											"end": 2538,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2491,
											"end": 2538,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 2545,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1833,
											"end": 2545,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "tag",
											"source": 3,
											"value": "149"
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "309"
										},
										{
											"begin": 1065,
											"end": 1072,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1088,
											"end": 1094,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1049,
											"end": 1064,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "259"
										},
										{
											"begin": 1049,
											"end": 1095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "tag",
											"source": 3,
											"value": "309"
										},
										{
											"begin": 1049,
											"end": 1095,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "311"
										},
										{
											"begin": 1111,
											"end": 1118,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 1105,
											"end": 1127,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1105,
											"end": 1127,
											"name": "tag",
											"source": 3,
											"value": "311"
										},
										{
											"begin": 1105,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 973,
											"end": 1134,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "tag",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 11050,
											"end": 11196,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11161,
											"name": "PUSH",
											"source": 8,
											"value": "D"
										},
										{
											"begin": 11152,
											"end": 11161,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1740,
											"end": 1772,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1740,
											"end": 1772,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1740,
											"end": 1772,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1722,
											"end": 1773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11119,
											"end": 11134,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11119,
											"end": 11134,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11161,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11161,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11171,
											"name": "PUSH",
											"source": 8,
											"value": "70A08231"
										},
										{
											"begin": 11152,
											"end": 11171,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1695,
											"end": 1713,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1695,
											"end": 1713,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "tag",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11152,
											"end": 11188,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 11152,
											"end": 11188,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "tag",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2421,
											"end": 2434,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 2453,
											"end": 2460,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "231"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "232"
										},
										{
											"begin": 2446,
											"end": 2460,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 10546,
											"end": 10646,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "325"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10620,
											"end": 10621,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10615,
											"end": 10622,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10615,
											"end": 10622,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10615,
											"end": 10619,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 10615,
											"end": 10622,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10615,
											"end": 10622,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "7D5AFDC40F419CD4C454E66A5A6871164BAA29E2E52BD3EC4F887D908A6EA2FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 10615,
											"end": 10639,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10646,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6685,
											"end": 6689,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6685,
											"end": 6689,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "329"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6783,
											"end": 6790,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6766,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 6766,
											"end": 6791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "tag",
											"source": 1,
											"value": "329"
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6739,
											"end": 6791,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6739,
											"end": 6791,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6829,
											"end": 6844,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6809,
											"end": 6825,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6809,
											"end": 6844,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 6809,
											"end": 6844,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "330"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8304,
											"end": 8306,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8286,
											"end": 8307,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8343,
											"end": 8345,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 8323,
											"end": 8341,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 8323,
											"end": 8341,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8323,
											"end": 8341,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8316,
											"end": 8346,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8382,
											"end": 8416,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 8362,
											"end": 8380,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 8362,
											"end": 8380,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8362,
											"end": 8380,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8355,
											"end": 8417,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8433,
											"end": 8451,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 8433,
											"end": 8451,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8433,
											"end": 8451,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8426,
											"end": 8461,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8478,
											"end": 8497,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 8478,
											"end": 8497,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 8102,
											"end": 8503,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "tag",
											"source": 1,
											"value": "330"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 6980,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 6929,
											"end": 6934,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6936,
											"end": 6943,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6964,
											"end": 6979,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6945,
											"end": 6961,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6945,
											"end": 6979,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 6928,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "241"
										},
										{
											"begin": 6920,
											"end": 6980,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "tag",
											"source": 8,
											"value": "175"
										},
										{
											"begin": 2715,
											"end": 6836,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2823,
											"end": 2833,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2794,
											"end": 2798,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2822,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 2813,
											"end": 2834,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2810,
											"end": 6828,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2810,
											"end": 6828,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 2810,
											"end": 6828,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2856,
											"end": 2882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 2871,
											"end": 2873,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2875,
											"end": 2881,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2856,
											"end": 2870,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 2856,
											"end": 2882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2856,
											"end": 2882,
											"name": "tag",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 2856,
											"end": 2882,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2849,
											"end": 2882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2849,
											"end": 2882,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2849,
											"end": 2882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 2849,
											"end": 2882,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2810,
											"end": 6828,
											"name": "tag",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 2810,
											"end": 6828,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2936,
											"end": 2947,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 2936,
											"end": 2947,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2936,
											"end": 2947,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2922,
											"end": 2932,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2922,
											"end": 2947,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2919,
											"end": 6818,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 2919,
											"end": 6818,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3004,
											"end": 3005,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2966,
											"end": 2987,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2999,
											"end": 3006,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2999,
											"end": 3006,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2999,
											"end": 3006,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2999,
											"end": 3003,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 2999,
											"end": 3006,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2999,
											"end": 3006,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2999,
											"end": 3013,
											"name": "PUSH",
											"source": 8,
											"value": "72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5D0"
										},
										{
											"begin": 2999,
											"end": 3013,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3015,
											"end": 3018,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3015,
											"end": 3018,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2992,
											"end": 3013,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "340"
										},
										{
											"begin": 2992,
											"end": 3013,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2992,
											"end": 2998,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2992,
											"end": 3013,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 2992,
											"end": 3013,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2992,
											"end": 3013,
											"name": "tag",
											"source": 8,
											"value": "340"
										},
										{
											"begin": 2992,
											"end": 3013,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2991,
											"end": 3018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 2991,
											"end": 3018,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2991,
											"end": 3018,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2991,
											"end": 3018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 2991,
											"end": 3018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2991,
											"end": 3018,
											"name": "tag",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 2991,
											"end": 3018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3067,
											"end": 3068,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3037,
											"end": 3050,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3062,
											"end": 3069,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3062,
											"end": 3069,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3062,
											"end": 3069,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3062,
											"end": 3066,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3062,
											"end": 3069,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3062,
											"end": 3069,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3062,
											"end": 3076,
											"name": "PUSH",
											"source": 8,
											"value": "A50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91635"
										},
										{
											"begin": 3062,
											"end": 3076,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2966,
											"end": 3019,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2966,
											"end": 3019,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3037,
											"end": 3050,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3078,
											"end": 3081,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3078,
											"end": 3081,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3055,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 3055,
											"end": 3076,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3055,
											"end": 3061,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3055,
											"end": 3076,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 3055,
											"end": 3076,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3055,
											"end": 3076,
											"name": "tag",
											"source": 8,
											"value": "344"
										},
										{
											"begin": 3055,
											"end": 3076,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3054,
											"end": 3081,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 3054,
											"end": 3081,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3054,
											"end": 3081,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3054,
											"end": 3081,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 3054,
											"end": 3081,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3054,
											"end": 3081,
											"name": "tag",
											"source": 8,
											"value": "345"
										},
										{
											"begin": 3054,
											"end": 3081,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3139,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3100,
											"end": 3121,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3133,
											"end": 3140,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3133,
											"end": 3140,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3133,
											"end": 3140,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3133,
											"end": 3137,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3133,
											"end": 3140,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3133,
											"end": 3140,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3133,
											"end": 3147,
											"name": "PUSH",
											"source": 8,
											"value": "64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33F"
										},
										{
											"begin": 3133,
											"end": 3147,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3037,
											"end": 3082,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3037,
											"end": 3082,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3100,
											"end": 3121,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3149,
											"end": 3152,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3149,
											"end": 3152,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3126,
											"end": 3147,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 3126,
											"end": 3147,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3126,
											"end": 3132,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3126,
											"end": 3147,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 3126,
											"end": 3147,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3126,
											"end": 3147,
											"name": "tag",
											"source": 8,
											"value": "346"
										},
										{
											"begin": 3126,
											"end": 3147,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3125,
											"end": 3152,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 3125,
											"end": 3152,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3125,
											"end": 3152,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3125,
											"end": 3152,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 3125,
											"end": 3152,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3125,
											"end": 3152,
											"name": "tag",
											"source": 8,
											"value": "347"
										},
										{
											"begin": 3125,
											"end": 3152,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3209,
											"end": 3210,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 3171,
											"end": 3192,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3204,
											"end": 3211,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3204,
											"end": 3211,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3204,
											"end": 3211,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3204,
											"end": 3208,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3204,
											"end": 3211,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3204,
											"end": 3211,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3204,
											"end": 3218,
											"name": "PUSH",
											"source": 8,
											"value": "12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C785"
										},
										{
											"begin": 3204,
											"end": 3218,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3100,
											"end": 3153,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3100,
											"end": 3153,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3171,
											"end": 3192,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3220,
											"end": 3223,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3220,
											"end": 3223,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3197,
											"end": 3218,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 3197,
											"end": 3218,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3197,
											"end": 3203,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 3197,
											"end": 3218,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 3197,
											"end": 3218,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3197,
											"end": 3218,
											"name": "tag",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 3197,
											"end": 3218,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3196,
											"end": 3223,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 3196,
											"end": 3223,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3196,
											"end": 3223,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3196,
											"end": 3223,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 3196,
											"end": 3223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3196,
											"end": 3223,
											"name": "tag",
											"source": 8,
											"value": "349"
										},
										{
											"begin": 3196,
											"end": 3223,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3289,
											"end": 3290,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3284,
											"end": 3291,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3284,
											"end": 3291,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3284,
											"end": 3288,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3284,
											"end": 3291,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3284,
											"end": 3291,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3284,
											"end": 3299,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "1AE0451E5A3376FCAE57E2B9E1DA8E102C4453020935ABB5805CA3E0E709D81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3247,
											"end": 3268,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3171,
											"end": 3224,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3171,
											"end": 3224,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3284,
											"end": 3299,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3247,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 3247,
											"end": 3279,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3271,
											"end": 3279,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3271,
											"end": 3279,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3247,
											"end": 3279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3247,
											"end": 3279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3247,
											"end": 3279,
											"name": "tag",
											"source": 8,
											"value": "350"
										},
										{
											"begin": 3247,
											"end": 3279,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3246,
											"end": 3299,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3246,
											"end": 3299,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3245,
											"end": 3326,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3245,
											"end": 3326,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3245,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 3245,
											"end": 3326,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3310,
											"end": 3311,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3305,
											"end": 3312,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3305,
											"end": 3312,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3305,
											"end": 3309,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3305,
											"end": 3312,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3305,
											"end": 3312,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3305,
											"end": 3320,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3305,
											"end": 3325,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3305,
											"end": 3325,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3245,
											"end": 3326,
											"name": "tag",
											"source": 8,
											"value": "351"
										},
										{
											"begin": 3245,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3365,
											"end": 3376,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 3365,
											"end": 3376,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3394,
											"end": 3395,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3365,
											"end": 3376,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3382,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3378,
											"end": 3385,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3378,
											"end": 3393,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3350,
											"end": 3397,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 3350,
											"end": 3397,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3365,
											"end": 3376,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3365,
											"end": 3376,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3395,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 3378,
											"end": 3395,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3395,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 3378,
											"end": 3395,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3378,
											"end": 3395,
											"name": "tag",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 3378,
											"end": 3395,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3350,
											"end": 3364,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 3350,
											"end": 3397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3350,
											"end": 3397,
											"name": "tag",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 3350,
											"end": 3397,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3457,
											"end": 3458,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3441,
											"end": 3448,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3441,
											"end": 3448,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3448,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3448,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3445,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3441,
											"end": 3448,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3441,
											"end": 3448,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3441,
											"end": 3456,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3472,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "355"
										},
										{
											"begin": 3419,
											"end": 3472,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 3441,
											"end": 3458,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3458,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 3441,
											"end": 3458,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3441,
											"end": 3458,
											"name": "tag",
											"source": 8,
											"value": "356"
										},
										{
											"begin": 3441,
											"end": 3458,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3460,
											"end": 3471,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 3460,
											"end": 3471,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3460,
											"end": 3471,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3439,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 3419,
											"end": 3472,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3472,
											"name": "tag",
											"source": 8,
											"value": "355"
										},
										{
											"begin": 3419,
											"end": 3472,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3561,
											"end": 3562,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3556,
											"end": 3560,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3556,
											"end": 3563,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3556,
											"end": 3571,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "1AE0451E5A3376FCAE57E2B9E1DA8E102C4453020935ABB5805CA3E0E709D81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3519,
											"end": 3540,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3551,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 3519,
											"end": 3551,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3543,
											"end": 3551,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3543,
											"end": 3551,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3551,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3519,
											"end": 3551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3551,
											"name": "tag",
											"source": 8,
											"value": "357"
										},
										{
											"begin": 3519,
											"end": 3551,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3518,
											"end": 3571,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 3518,
											"end": 3571,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3518,
											"end": 3571,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3518,
											"end": 3571,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 3518,
											"end": 3571,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3518,
											"end": 3571,
											"name": "tag",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 3518,
											"end": 3571,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3499,
											"end": 3500,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3494,
											"end": 3498,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3494,
											"end": 3501,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "1AE0451E5A3376FCAE57E2B9E1DA8E102C4453020935ABB5805CA3E0E709D81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3494,
											"end": 3571,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "360"
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "tag",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3621,
											"end": 3622,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3620,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "1AE0451E5A3376FCAE57E2B9E1DA8E102C4453020935ABB5805CA3E0E709D81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3641,
											"end": 3649,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3641,
											"end": 3649,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3623,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "361"
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3641,
											"end": 3649,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3641,
											"end": 3649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3616,
											"end": 3649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "tag",
											"source": 8,
											"value": "361"
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3649,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "tag",
											"source": 8,
											"value": "360"
										},
										{
											"begin": 3242,
											"end": 3668,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3740,
											"end": 3741,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3735,
											"end": 3739,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3735,
											"end": 3742,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F574DF558A4EF90B0F9140707B04D8BD5A2B90F8B0E4DD892B3084D5906C37FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3735,
											"end": 3750,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "CD257BD0BF1AC8F5DBCD7CB80F6302024596A08F94617259C19EB1EC41CF4CB2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3690,
											"end": 3711,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3690,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 3690,
											"end": 3730,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3730,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3714,
											"end": 3730,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3690,
											"end": 3730,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3690,
											"end": 3730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3690,
											"end": 3730,
											"name": "tag",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 3690,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3689,
											"end": 3750,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 3689,
											"end": 3750,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3688,
											"end": 3777,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3688,
											"end": 3777,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3688,
											"end": 3777,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 3688,
											"end": 3777,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3761,
											"end": 3762,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3756,
											"end": 3763,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3756,
											"end": 3763,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3756,
											"end": 3760,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3756,
											"end": 3763,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3756,
											"end": 3763,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F574DF558A4EF90B0F9140707B04D8BD5A2B90F8B0E4DD892B3084D5906C37FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3756,
											"end": 3771,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3756,
											"end": 3776,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3688,
											"end": 3777,
											"name": "tag",
											"source": 8,
											"value": "363"
										},
										{
											"begin": 3688,
											"end": 3777,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "364"
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3827,
											"end": 3828,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3822,
											"end": 3829,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3822,
											"end": 3829,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3822,
											"end": 3826,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3822,
											"end": 3829,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3822,
											"end": 3829,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F574DF558A4EF90B0F9140707B04D8BD5A2B90F8B0E4DD892B3084D5906C37FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3822,
											"end": 3837,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "365"
										},
										{
											"begin": 3801,
											"end": 3852,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3846,
											"end": 3850,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3821,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 3801,
											"end": 3852,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3852,
											"name": "tag",
											"source": 8,
											"value": "365"
										},
										{
											"begin": 3801,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3949,
											"end": 3950,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3944,
											"end": 3951,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3944,
											"end": 3951,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3944,
											"end": 3948,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3944,
											"end": 3951,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3944,
											"end": 3951,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F574DF558A4EF90B0F9140707B04D8BD5A2B90F8B0E4DD892B3084D5906C37FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3944,
											"end": 3959,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "CD257BD0BF1AC8F5DBCD7CB80F6302024596A08F94617259C19EB1EC41CF4CB2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3899,
											"end": 3920,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 3899,
											"end": 3939,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 3899,
											"end": 3939,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3923,
											"end": 3939,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3923,
											"end": 3939,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3899,
											"end": 3939,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3899,
											"end": 3939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3899,
											"end": 3939,
											"name": "tag",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 3899,
											"end": 3939,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3898,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 3898,
											"end": 3959,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3898,
											"end": 3959,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3898,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 3898,
											"end": 3959,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3898,
											"end": 3959,
											"name": "tag",
											"source": 8,
											"value": "367"
										},
										{
											"begin": 3898,
											"end": 3959,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3879,
											"end": 3880,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 3874,
											"end": 3881,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3874,
											"end": 3881,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3874,
											"end": 3878,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 3874,
											"end": 3881,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3874,
											"end": 3881,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "CD257BD0BF1AC8F5DBCD7CB80F6302024596A08F94617259C19EB1EC41CF4CB2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 3874,
											"end": 3959,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "tag",
											"source": 8,
											"value": "364"
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4009,
											"end": 4010,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4008,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "CD257BD0BF1AC8F5DBCD7CB80F6302024596A08F94617259C19EB1EC41CF4CB2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4029,
											"end": 4045,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4029,
											"end": 4045,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4011,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4029,
											"end": 4045,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4029,
											"end": 4045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4004,
											"end": 4045,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "tag",
											"source": 8,
											"value": "369"
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4045,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "tag",
											"source": 8,
											"value": "368"
										},
										{
											"begin": 3685,
											"end": 4064,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4136,
											"end": 4137,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4131,
											"end": 4138,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4131,
											"end": 4138,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4131,
											"end": 4135,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4131,
											"end": 4138,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4131,
											"end": 4138,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "7D5AFDC40F419CD4C454E66A5A6871164BAA29E2E52BD3EC4F887D908A6EA2FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4131,
											"end": 4146,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "74583CCECD8AD1B0ED6CEEB51C0F8C852AE662E302540FF65C0210E7EED14BFC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4086,
											"end": 4107,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4086,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "370"
										},
										{
											"begin": 4086,
											"end": 4126,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4110,
											"end": 4126,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4110,
											"end": 4126,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4086,
											"end": 4126,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4086,
											"end": 4126,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4086,
											"end": 4126,
											"name": "tag",
											"source": 8,
											"value": "370"
										},
										{
											"begin": 4086,
											"end": 4126,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4085,
											"end": 4146,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4085,
											"end": 4146,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4157,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4157,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 4084,
											"end": 4157,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4151,
											"end": 4157,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 4151,
											"end": 4157,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4151,
											"end": 4157,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4151,
											"end": 4157,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 4151,
											"end": 4157,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 4151,
											"end": 4157,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4157,
											"name": "tag",
											"source": 8,
											"value": "371"
										},
										{
											"begin": 4084,
											"end": 4157,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4183,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4183,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4183,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 4084,
											"end": 4183,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4167,
											"end": 4168,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4162,
											"end": 4169,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4162,
											"end": 4169,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4162,
											"end": 4166,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4162,
											"end": 4169,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4162,
											"end": 4169,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "7D5AFDC40F419CD4C454E66A5A6871164BAA29E2E52BD3EC4F887D908A6EA2FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4177,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4162,
											"end": 4182,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4162,
											"end": 4182,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4183,
											"name": "tag",
											"source": 8,
											"value": "372"
										},
										{
											"begin": 4084,
											"end": 4183,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "373"
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4234,
											"end": 4235,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4229,
											"end": 4236,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4229,
											"end": 4236,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4229,
											"end": 4233,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4229,
											"end": 4236,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4229,
											"end": 4236,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "7D5AFDC40F419CD4C454E66A5A6871164BAA29E2E52BD3EC4F887D908A6EA2FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4229,
											"end": 4244,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4208,
											"end": 4259,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 4208,
											"end": 4259,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4253,
											"end": 4257,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 4208,
											"end": 4228,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 4208,
											"end": 4259,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4208,
											"end": 4259,
											"name": "tag",
											"source": 8,
											"value": "374"
										},
										{
											"begin": 4208,
											"end": 4259,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4356,
											"end": 4357,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4351,
											"end": 4355,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "7D5AFDC40F419CD4C454E66A5A6871164BAA29E2E52BD3EC4F887D908A6EA2FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4366,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "74583CCECD8AD1B0ED6CEEB51C0F8C852AE662E302540FF65C0210E7EED14BFC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4306,
											"end": 4327,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4306,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 4306,
											"end": 4346,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4330,
											"end": 4346,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4330,
											"end": 4346,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4306,
											"end": 4346,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4306,
											"end": 4346,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4306,
											"end": 4346,
											"name": "tag",
											"source": 8,
											"value": "375"
										},
										{
											"begin": 4306,
											"end": 4346,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4366,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 4305,
											"end": 4366,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4366,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4366,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 4305,
											"end": 4366,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4305,
											"end": 4366,
											"name": "tag",
											"source": 8,
											"value": "376"
										},
										{
											"begin": 4305,
											"end": 4366,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4286,
											"end": 4287,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4281,
											"end": 4288,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4281,
											"end": 4288,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4281,
											"end": 4285,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4281,
											"end": 4288,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4281,
											"end": 4288,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "74583CCECD8AD1B0ED6CEEB51C0F8C852AE662E302540FF65C0210E7EED14BFC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4281,
											"end": 4366,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "tag",
											"source": 8,
											"value": "373"
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4417,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4415,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "74583CCECD8AD1B0ED6CEEB51C0F8C852AE662E302540FF65C0210E7EED14BFC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4436,
											"end": 4452,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4436,
											"end": 4452,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4418,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4436,
											"end": 4452,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4436,
											"end": 4452,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4411,
											"end": 4452,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "tag",
											"source": 8,
											"value": "378"
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4411,
											"end": 4452,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "tag",
											"source": 8,
											"value": "377"
										},
										{
											"begin": 4081,
											"end": 4471,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4505,
											"end": 4511,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 4505,
											"end": 4511,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4490,
											"end": 4529,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 4490,
											"end": 4529,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4505,
											"end": 4511,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4512,
											"end": 4528,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4490,
											"end": 4504,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 4490,
											"end": 4529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4490,
											"end": 4529,
											"name": "tag",
											"source": 8,
											"value": "379"
										},
										{
											"begin": 4490,
											"end": 4529,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4562,
											"end": 4568,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 4562,
											"end": 4568,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 4547,
											"end": 4578,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4562,
											"end": 4568,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4569,
											"end": 4577,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4561,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 4547,
											"end": 4578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4578,
											"name": "tag",
											"source": 8,
											"value": "380"
										},
										{
											"begin": 4547,
											"end": 4578,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4611,
											"end": 4617,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 4611,
											"end": 4617,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4611,
											"end": 4617,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4618,
											"end": 4634,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4596,
											"end": 4610,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 4596,
											"end": 4635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "tag",
											"source": 8,
											"value": "381"
										},
										{
											"begin": 4596,
											"end": 4635,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4668,
											"end": 4674,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 4668,
											"end": 4674,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4653,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 4653,
											"end": 4692,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4668,
											"end": 4674,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4675,
											"end": 4691,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4653,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 4653,
											"end": 4692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4653,
											"end": 4692,
											"name": "tag",
											"source": 8,
											"value": "382"
										},
										{
											"begin": 4653,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4717,
											"end": 4807,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 4732,
											"end": 4734,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4771,
											"end": 4787,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4770,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 4762,
											"end": 4770,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4761,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4770,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4745,
											"end": 4770,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4770,
											"name": "tag",
											"source": 8,
											"value": "384"
										},
										{
											"begin": 4745,
											"end": 4770,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "385"
										},
										{
											"begin": 4745,
											"end": 4787,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4787,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4787,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4745,
											"end": 4787,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4787,
											"name": "tag",
											"source": 8,
											"value": "385"
										},
										{
											"begin": 4745,
											"end": 4787,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4804,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 4745,
											"end": 4804,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4804,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4804,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 4745,
											"end": 4804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4745,
											"end": 4804,
											"name": "tag",
											"source": 8,
											"value": "386"
										},
										{
											"begin": 4745,
											"end": 4804,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4737,
											"end": 4805,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "354"
										},
										{
											"begin": 4737,
											"end": 4805,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4737,
											"end": 4743,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 4737,
											"end": 4805,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "359"
										},
										{
											"begin": 4737,
											"end": 4805,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4717,
											"end": 4807,
											"name": "tag",
											"source": 8,
											"value": "383"
										},
										{
											"begin": 4717,
											"end": 4807,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 4710,
											"end": 4807,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2919,
											"end": 6818,
											"name": "tag",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 2919,
											"end": 6818,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4836,
											"end": 4847,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 4836,
											"end": 4847,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4836,
											"end": 4847,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4836,
											"end": 4847,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4836,
											"end": 4847,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4830,
											"end": 4847,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4830,
											"end": 4847,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4830,
											"end": 4847,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4830,
											"end": 4847,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4827,
											"end": 6818,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 4827,
											"end": 6818,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4917,
											"end": 4918,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4879,
											"end": 4900,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4912,
											"end": 4919,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4912,
											"end": 4919,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4912,
											"end": 4919,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4912,
											"end": 4916,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4912,
											"end": 4919,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4912,
											"end": 4919,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4912,
											"end": 4919,
											"name": "PUSH",
											"source": 8,
											"value": "72C6BFB7988AF3A1EFA6568F02A999BC52252641C659D85961CA3D372B57D5CF"
										},
										{
											"begin": 4912,
											"end": 4927,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4929,
											"end": 4932,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4929,
											"end": 4932,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4905,
											"end": 4927,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 4905,
											"end": 4927,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4905,
											"end": 4911,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4905,
											"end": 4927,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 4905,
											"end": 4927,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4905,
											"end": 4927,
											"name": "tag",
											"source": 8,
											"value": "390"
										},
										{
											"begin": 4905,
											"end": 4927,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4904,
											"end": 4932,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 4904,
											"end": 4932,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4904,
											"end": 4932,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4904,
											"end": 4932,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 4904,
											"end": 4932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4904,
											"end": 4932,
											"name": "tag",
											"source": 8,
											"value": "391"
										},
										{
											"begin": 4904,
											"end": 4932,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4981,
											"end": 4982,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4951,
											"end": 4964,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4976,
											"end": 4983,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4976,
											"end": 4983,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4976,
											"end": 4983,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4976,
											"end": 4980,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4976,
											"end": 4983,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4976,
											"end": 4983,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4976,
											"end": 4983,
											"name": "PUSH",
											"source": 8,
											"value": "A50EECE07C7DB1631545C0069BD8F5F54D5935E215D59097EDF258A44BA91634"
										},
										{
											"begin": 4976,
											"end": 4991,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4879,
											"end": 4933,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4879,
											"end": 4933,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4951,
											"end": 4964,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4993,
											"end": 4996,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4993,
											"end": 4996,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 4969,
											"end": 4991,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4975,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 4969,
											"end": 4991,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4969,
											"end": 4991,
											"name": "tag",
											"source": 8,
											"value": "392"
										},
										{
											"begin": 4969,
											"end": 4991,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4968,
											"end": 4996,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 4968,
											"end": 4996,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4968,
											"end": 4996,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4968,
											"end": 4996,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 4968,
											"end": 4996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4968,
											"end": 4996,
											"name": "tag",
											"source": 8,
											"value": "393"
										},
										{
											"begin": 4968,
											"end": 4996,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5054,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 5015,
											"end": 5036,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5048,
											"end": 5052,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5048,
											"end": 5055,
											"name": "PUSH",
											"source": 8,
											"value": "64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33E"
										},
										{
											"begin": 5048,
											"end": 5063,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 4951,
											"end": 4997,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4951,
											"end": 4997,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5015,
											"end": 5036,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5065,
											"end": 5068,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5065,
											"end": 5068,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5063,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 5041,
											"end": 5063,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5063,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 5041,
											"end": 5063,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5041,
											"end": 5063,
											"name": "tag",
											"source": 8,
											"value": "394"
										},
										{
											"begin": 5041,
											"end": 5063,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5040,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "395"
										},
										{
											"begin": 5040,
											"end": 5068,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5040,
											"end": 5068,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5040,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "343"
										},
										{
											"begin": 5040,
											"end": 5068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5040,
											"end": 5068,
											"name": "tag",
											"source": 8,
											"value": "395"
										},
										{
											"begin": 5040,
											"end": 5068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5125,
											"end": 5126,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5087,
											"end": 5108,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5120,
											"end": 5127,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5120,
											"end": 5127,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5120,
											"end": 5127,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5120,
											"end": 5124,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 5120,
											"end": 5127,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5120,
											"end": 5127,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5120,
											"end": 5127,
											"name": "PUSH",
											"source": 8,
											"value": "12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C784"
										},
										{
											"begin": 5120,
											"end": 5135,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 5015,
											"end": 5069,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5015,
											"end": 5069,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5087,
											"end": 5108,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5137,
											"end": 5140,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5137,
											"end": 5140,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5135,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "348"
										},
										{
											"begin": 5113,
											"end": 5135,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5119,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5135,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 5113,
											"end": 5135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4827,
											"end": 6818,
											"name": "tag",
											"source": 8,
											"value": "389"
										},
										{
											"begin": 4827,
											"end": 6818,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6777,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 6792,
											"end": 6794,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6796,
											"end": 6802,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6777,
											"end": 6791,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "337"
										},
										{
											"begin": 6777,
											"end": 6803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "tag",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 10232,
											"end": 10332,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "438"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "438"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 10306,
											"end": 10307,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 10301,
											"end": 10308,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10301,
											"end": 10308,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10301,
											"end": 10305,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 10301,
											"end": 10308,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10301,
											"end": 10308,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "F574DF558A4EF90B0F9140707B04D8BD5A2B90F8B0E4DD892B3084D5906C37FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 10301,
											"end": 10325,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10232,
											"end": 10332,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "tag",
											"source": 8,
											"value": "182"
										},
										{
											"begin": 8134,
											"end": 8296,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "441"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "441"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8226,
											"end": 8228,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 8220,
											"end": 8223,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8220,
											"end": 8228,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8220,
											"end": 8228,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "444"
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 8200,
											"end": 8258,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "444"
										},
										{
											"begin": 8200,
											"end": 8258,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8273,
											"end": 8274,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8268,
											"end": 8275,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8268,
											"end": 8275,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8268,
											"end": 8272,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 8268,
											"end": 8275,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8268,
											"end": 8275,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8268,
											"end": 8275,
											"name": "PUSH",
											"source": 8,
											"value": "12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C784"
										},
										{
											"begin": 8268,
											"end": 8289,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8134,
											"end": 8296,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "tag",
											"source": 8,
											"value": "185"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "447"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "447"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11543,
											"end": 11552,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "D"
										},
										{
											"begin": 11543,
											"end": 11552,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11543,
											"end": 11572,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11543,
											"end": 11572,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6778,
											"end": 6810,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6778,
											"end": 6810,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6778,
											"end": 6810,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11543,
											"end": 11572,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6760,
											"end": 6811,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6827,
											"end": 6845,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6827,
											"end": 6845,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6827,
											"end": 6845,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6820,
											"end": 6854,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6820,
											"end": 6854,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6820,
											"end": 6854,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11543,
											"end": 11552,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11552,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11552,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11552,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11561,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "A9059CBB"
										},
										{
											"begin": 11543,
											"end": 11561,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6733,
											"end": 6751,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 6733,
											"end": 6751,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "451"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11543,
											"end": 11572,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "451"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "452"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 11543,
											"end": 11572,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "452"
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 9576,
											"end": 9736,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "454"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "454"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9667,
											"end": 9669,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 9661,
											"end": 9664,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9661,
											"end": 9669,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9661,
											"end": 9669,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "457"
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 9641,
											"end": 9699,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "457"
										},
										{
											"begin": 9641,
											"end": 9699,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9714,
											"end": 9715,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9709,
											"end": 9716,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9709,
											"end": 9716,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9709,
											"end": 9713,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 9709,
											"end": 9716,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9709,
											"end": 9716,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9709,
											"end": 9723,
											"name": "PUSH",
											"source": 8,
											"value": "12D0C11577E2F0950F57C455C117796550B79F444811DB8BA2F69C57B646C785"
										},
										{
											"begin": 9709,
											"end": 9729,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9576,
											"end": 9736,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 12036,
											"end": 12291,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "460"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "460"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12152,
											"end": 12163,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12152,
											"end": 12185,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12204,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "D"
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 12195,
											"end": 12227,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 12237,
											"end": 12241,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 12237,
											"end": 12256,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 12237,
											"end": 12256,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFF"
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12237,
											"end": 12256,
											"name": "PUSH",
											"source": 8,
											"value": "1000000"
										},
										{
											"begin": 12237,
											"end": 12256,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12237,
											"end": 12256,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 12237,
											"end": 12256,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "AND",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"modifierDepth": 1,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12266,
											"end": 12284,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 12036,
											"end": 12291,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4063,
											"end": 4070,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4100,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 4123,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 9926,
											"end": 10018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "464"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "464"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9992,
											"end": 9993,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 9987,
											"end": 9994,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9987,
											"end": 9994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9987,
											"end": 9991,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 9987,
											"end": 9994,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9987,
											"end": 9994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 9987,
											"end": 10011,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9926,
											"end": 10018,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "tag",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 9208,
											"end": 9368,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "467"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "467"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9299,
											"end": 9301,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 9293,
											"end": 9296,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9293,
											"end": 9301,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9293,
											"end": 9301,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "470"
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 9273,
											"end": 9331,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "470"
										},
										{
											"begin": 9273,
											"end": 9331,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9346,
											"end": 9347,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 9341,
											"end": 9348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9341,
											"end": 9348,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9341,
											"end": 9345,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 9341,
											"end": 9348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9341,
											"end": 9348,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9341,
											"end": 9355,
											"name": "PUSH",
											"source": 8,
											"value": "64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33F"
										},
										{
											"begin": 9341,
											"end": 9361,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9368,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "tag",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 7761,
											"end": 7923,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "473"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "473"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7853,
											"end": 7855,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 7847,
											"end": 7850,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7847,
											"end": 7855,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7847,
											"end": 7855,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "476"
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 7827,
											"end": 7885,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "476"
										},
										{
											"begin": 7827,
											"end": 7885,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7900,
											"end": 7901,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 7895,
											"end": 7902,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7895,
											"end": 7902,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7895,
											"end": 7899,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 7895,
											"end": 7902,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7895,
											"end": 7902,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7895,
											"end": 7902,
											"name": "PUSH",
											"source": 8,
											"value": "64C15CC42BE7899B001F818CF4433057002112C418D1D3A67CD5CB453051D33E"
										},
										{
											"begin": 7895,
											"end": 7916,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7761,
											"end": 7923,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "479"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1094,
											"end": 1107,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "479"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "481"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9238,
											"end": 9240,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9220,
											"end": 9241,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9277,
											"end": 9279,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9257,
											"end": 9275,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9250,
											"end": 9280,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9316,
											"end": 9350,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 9296,
											"end": 9314,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 9296,
											"end": 9314,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9296,
											"end": 9314,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9289,
											"end": 9351,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9367,
											"end": 9385,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 9367,
											"end": 9385,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9367,
											"end": 9385,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9360,
											"end": 9396,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9413,
											"end": 9432,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 9413,
											"end": 9432,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 9036,
											"end": 9438,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "481"
										},
										{
											"begin": 2161,
											"end": 2234,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "279"
										},
										{
											"begin": 2263,
											"end": 2271,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 2244,
											"end": 2272,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 9645,
											"end": 9647,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 9627,
											"end": 9648,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 9627,
											"end": 9648,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9627,
											"end": 9648,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9664,
											"end": 9682,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 9664,
											"end": 9682,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9664,
											"end": 9682,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9657,
											"end": 9687,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9723,
											"end": 9757,
											"name": "PUSH",
											"source": 9,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 9703,
											"end": 9721,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 9703,
											"end": 9721,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 9703,
											"end": 9721,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9696,
											"end": 9758,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9775,
											"end": 9793,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 9775,
											"end": 9793,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 9443,
											"end": 9799,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "tag",
											"source": 1,
											"value": "241"
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10635,
											"end": 10654,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10635,
											"end": 10654,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10006,
											"end": 10008,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9988,
											"end": 10009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10045,
											"end": 10047,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 10025,
											"end": 10043,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 10025,
											"end": 10043,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10025,
											"end": 10043,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10018,
											"end": 10048,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10084,
											"end": 10118,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 10064,
											"end": 10082,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 10064,
											"end": 10082,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10064,
											"end": 10082,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10057,
											"end": 10119,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10135,
											"end": 10153,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10135,
											"end": 10153,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10135,
											"end": 10153,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10128,
											"end": 10162,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10179,
											"end": 10198,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 10179,
											"end": 10198,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 9804,
											"end": 10204,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "tag",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "496"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10411,
											"end": 10413,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10393,
											"end": 10414,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10450,
											"end": 10452,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 10430,
											"end": 10448,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 10430,
											"end": 10448,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10430,
											"end": 10448,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10423,
											"end": 10453,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10489,
											"end": 10523,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 10469,
											"end": 10487,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 10469,
											"end": 10487,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10469,
											"end": 10487,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10462,
											"end": 10524,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10540,
											"end": 10558,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10540,
											"end": 10558,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10540,
											"end": 10558,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10533,
											"end": 10565,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10582,
											"end": 10601,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 10582,
											"end": 10601,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 10209,
											"end": 10607,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "tag",
											"source": 1,
											"value": "496"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10795,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10504,
											"end": 10874,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "tag",
											"source": 1,
											"value": "259"
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11285,
											"end": 11309,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "501"
										},
										{
											"begin": 11322,
											"end": 11327,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11329,
											"end": 11336,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11312,
											"end": 11321,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 11312,
											"end": 11337,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "tag",
											"source": 1,
											"value": "501"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11285,
											"end": 11337,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11285,
											"end": 11337,
											"name": "POP",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11351,
											"end": 11367,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11351,
											"end": 11388,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 11347,
											"end": 11590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 11347,
											"end": 11590,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11432,
											"end": 11438,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11412,
											"end": 11428,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11412,
											"end": 11438,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 11412,
											"end": 11438,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "503"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10814,
											"end": 10816,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10796,
											"end": 10817,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10853,
											"end": 10855,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 10833,
											"end": 10851,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 10833,
											"end": 10851,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10833,
											"end": 10851,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10826,
											"end": 10856,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10892,
											"end": 10923,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 10872,
											"end": 10890,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 10872,
											"end": 10890,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 10872,
											"end": 10890,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 10865,
											"end": 10924,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 10941,
											"end": 10959,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 10941,
											"end": 10959,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 10612,
											"end": 10965,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "tag",
											"source": 1,
											"value": "503"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 11523,
											"end": 11528,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11530,
											"end": 11537,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11558,
											"end": 11564,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11539,
											"end": 11555,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11539,
											"end": 11564,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11514,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "241"
										},
										{
											"begin": 11514,
											"end": 11565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "tag",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11275,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11155,
											"end": 11596,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7473,
											"end": 8291,
											"name": "tag",
											"source": 1,
											"value": "261"
										},
										{
											"begin": 7473,
											"end": 8291,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7599,
											"end": 7617,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7599,
											"end": 7617,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "508"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11172,
											"end": 11174,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11154,
											"end": 11175,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11211,
											"end": 11213,
											"name": "PUSH",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 11191,
											"end": 11209,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 11191,
											"end": 11209,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11191,
											"end": 11209,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11184,
											"end": 11214,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11250,
											"end": 11284,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 11230,
											"end": 11248,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 11230,
											"end": 11248,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11230,
											"end": 11248,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11223,
											"end": 11285,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11301,
											"end": 11319,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 11301,
											"end": 11319,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11301,
											"end": 11319,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11294,
											"end": 11329,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11346,
											"end": 11365,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 11346,
											"end": 11365,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 10970,
											"end": 11371,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "tag",
											"source": 1,
											"value": "508"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7677,
											"end": 7693,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7677,
											"end": 7693,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "511"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11578,
											"end": 11580,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11560,
											"end": 11581,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11617,
											"end": 11619,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 11597,
											"end": 11615,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 11597,
											"end": 11615,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11597,
											"end": 11615,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11590,
											"end": 11620,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11656,
											"end": 11690,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 11636,
											"end": 11654,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 11636,
											"end": 11654,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11636,
											"end": 11654,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11629,
											"end": 11691,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11707,
											"end": 11725,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 11707,
											"end": 11725,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 11707,
											"end": 11725,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11700,
											"end": 11733,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 11750,
											"end": 11769,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 11750,
											"end": 11769,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 11376,
											"end": 11775,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "tag",
											"source": 1,
											"value": "511"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7793,
											"end": 7812,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "516"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11982,
											"end": 11984,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11964,
											"end": 11985,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12021,
											"end": 12023,
											"name": "PUSH",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 12001,
											"end": 12019,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 12001,
											"end": 12019,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12001,
											"end": 12019,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 11994,
											"end": 12024,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12060,
											"end": 12094,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 12040,
											"end": 12058,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 12040,
											"end": 12058,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12040,
											"end": 12058,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12033,
											"end": 12095,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12111,
											"end": 12129,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 12111,
											"end": 12129,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12111,
											"end": 12129,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12104,
											"end": 12140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12157,
											"end": 12176,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 12157,
											"end": 12176,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 11780,
											"end": 12182,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "tag",
											"source": 1,
											"value": "516"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7955,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7984,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7946,
											"end": 7984,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 8247,
											"end": 8284,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9422,
											"end": 10081,
											"name": "tag",
											"source": 1,
											"value": "281"
										},
										{
											"begin": 9422,
											"end": 10081,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9505,
											"end": 9526,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9505,
											"end": 9526,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "523"
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12389,
											"end": 12391,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12371,
											"end": 12392,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12428,
											"end": 12430,
											"name": "PUSH",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 12408,
											"end": 12426,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 12408,
											"end": 12426,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12408,
											"end": 12426,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12401,
											"end": 12431,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12467,
											"end": 12501,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 12447,
											"end": 12465,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 12447,
											"end": 12465,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12447,
											"end": 12465,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12440,
											"end": 12502,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12518,
											"end": 12536,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 12518,
											"end": 12536,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12518,
											"end": 12536,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12511,
											"end": 12542,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12559,
											"end": 12578,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 12559,
											"end": 12578,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 12187,
											"end": 12584,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "tag",
											"source": 1,
											"value": "523"
										},
										{
											"begin": 9497,
											"end": 9564,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9635,
											"end": 9657,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 9660,
											"end": 9678,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9696,
											"end": 9720,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9696,
											"end": 9720,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9696,
											"end": 9720,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 9696,
											"end": 9720,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "527"
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12791,
											"end": 12793,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12773,
											"end": 12794,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12830,
											"end": 12832,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 12810,
											"end": 12828,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 12810,
											"end": 12828,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12810,
											"end": 12828,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12803,
											"end": 12833,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12869,
											"end": 12903,
											"name": "PUSH",
											"source": 9,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 12849,
											"end": 12867,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 12849,
											"end": 12867,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12849,
											"end": 12867,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12842,
											"end": 12904,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12920,
											"end": 12938,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 12920,
											"end": 12938,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 12920,
											"end": 12938,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12913,
											"end": 12945,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12962,
											"end": 12981,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 12962,
											"end": 12981,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "228"
										},
										{
											"begin": 12589,
											"end": 12987,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "tag",
											"source": 1,
											"value": "527"
										},
										{
											"begin": 9688,
											"end": 9759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9802,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 9814,
											"end": 9837,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 9814,
											"end": 9837,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 9814,
											"end": 9837,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9837,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9837,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9942,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9930,
											"end": 9952,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1930,
											"end": 1955,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 9793,
											"end": 9802,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9802,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1903,
											"end": 1921,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9978,
											"end": 10015,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 11543,
											"end": 11572,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 11471,
											"end": 11579,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 1,
											"value": "337"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3806,
											"end": 3810,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3860,
											"end": 3888,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "240"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3877,
											"end": 3879,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3881,
											"end": 3887,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 3860,
											"end": 3869,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "261"
										},
										{
											"begin": 3860,
											"end": 3888,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "543"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 9,
											"value": "543"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 199,
											"end": 747,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 199,
											"end": 747,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 311,
											"end": 315,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 340,
											"end": 342,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 369,
											"end": 371,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 358,
											"end": 367,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 351,
											"end": 372,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 401,
											"end": 407,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 395,
											"end": 408,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 444,
											"end": 450,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 439,
											"end": 441,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 428,
											"end": 437,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 424,
											"end": 442,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 417,
											"end": 451,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 469,
											"end": 470,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 479,
											"end": 619,
											"name": "tag",
											"source": 9,
											"value": "545"
										},
										{
											"begin": 479,
											"end": 619,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 493,
											"end": 499,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 490,
											"end": 491,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 487,
											"end": 500,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 479,
											"end": 619,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 479,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "547"
										},
										{
											"begin": 479,
											"end": 619,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 588,
											"end": 602,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 588,
											"end": 602,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 588,
											"end": 602,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 584,
											"end": 607,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 584,
											"end": 607,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 578,
											"end": 608,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 554,
											"end": 571,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 554,
											"end": 571,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 554,
											"end": 571,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 573,
											"end": 575,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 550,
											"end": 576,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 543,
											"end": 609,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 508,
											"end": 518,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 508,
											"end": 518,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 479,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "545"
										},
										{
											"begin": 479,
											"end": 619,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 479,
											"end": 619,
											"name": "tag",
											"source": 9,
											"value": "547"
										},
										{
											"begin": 479,
											"end": 619,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 483,
											"end": 486,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 668,
											"end": 669,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 663,
											"end": 665,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 654,
											"end": 660,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 643,
											"end": 652,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 639,
											"end": 661,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 635,
											"end": 666,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 628,
											"end": 670,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 738,
											"end": 740,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 731,
											"end": 733,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 727,
											"end": 734,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 722,
											"end": 724,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 714,
											"end": 720,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 710,
											"end": 725,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 706,
											"end": 735,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 695,
											"end": 704,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 691,
											"end": 736,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 687,
											"end": 741,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 679,
											"end": 741,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 679,
											"end": 741,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 679,
											"end": 741,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 679,
											"end": 741,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 199,
											"end": 747,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 199,
											"end": 747,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 199,
											"end": 747,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 199,
											"end": 747,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 199,
											"end": 747,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 947,
											"end": 1120,
											"name": "tag",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 947,
											"end": 1120,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1015,
											"end": 1035,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1015,
											"end": 1035,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1064,
											"end": 1095,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1064,
											"end": 1095,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1054,
											"end": 1096,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1054,
											"end": 1096,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1044,
											"end": 1114,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "550"
										},
										{
											"begin": 1044,
											"end": 1114,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1110,
											"end": 1111,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1107,
											"end": 1108,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1100,
											"end": 1112,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1044,
											"end": 1114,
											"name": "tag",
											"source": 9,
											"value": "550"
										},
										{
											"begin": 1044,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 947,
											"end": 1120,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 947,
											"end": 1120,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 947,
											"end": 1120,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 947,
											"end": 1120,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1125,
											"end": 1379,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 1125,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1193,
											"end": 1199,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1201,
											"end": 1207,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1254,
											"end": 1256,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1242,
											"end": 1251,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1233,
											"end": 1240,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1229,
											"end": 1252,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1225,
											"end": 1257,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1222,
											"end": 1274,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1222,
											"end": 1274,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "552"
										},
										{
											"begin": 1222,
											"end": 1274,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1270,
											"end": 1271,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1267,
											"end": 1268,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1260,
											"end": 1272,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1222,
											"end": 1274,
											"name": "tag",
											"source": 9,
											"value": "552"
										},
										{
											"begin": 1222,
											"end": 1274,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1322,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "553"
										},
										{
											"begin": 1312,
											"end": 1321,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1322,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 1293,
											"end": 1322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1322,
											"name": "tag",
											"source": 9,
											"value": "553"
										},
										{
											"begin": 1293,
											"end": 1322,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1283,
											"end": 1322,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1369,
											"end": 1371,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1354,
											"end": 1372,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1354,
											"end": 1372,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1354,
											"end": 1372,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 1354,
											"end": 1372,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1341,
											"end": 1373,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1341,
											"end": 1373,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1125,
											"end": 1379,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1966,
											"end": 2351,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 1966,
											"end": 2351,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2052,
											"end": 2058,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2060,
											"end": 2066,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2068,
											"end": 2074,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2076,
											"end": 2082,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2129,
											"end": 2132,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2117,
											"end": 2126,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2108,
											"end": 2115,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2104,
											"end": 2127,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2100,
											"end": 2133,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2097,
											"end": 2150,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2097,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "558"
										},
										{
											"begin": 2097,
											"end": 2150,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2146,
											"end": 2147,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2143,
											"end": 2144,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2136,
											"end": 2148,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2097,
											"end": 2150,
											"name": "tag",
											"source": 9,
											"value": "558"
										},
										{
											"begin": 2097,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2192,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2169,
											"end": 2192,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2169,
											"end": 2192,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2239,
											"end": 2241,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2224,
											"end": 2242,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2224,
											"end": 2242,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2211,
											"end": 2243,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2211,
											"end": 2243,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2290,
											"end": 2292,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2275,
											"end": 2293,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2275,
											"end": 2293,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2262,
											"end": 2294,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2326,
											"end": 2344,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2313,
											"end": 2345,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2313,
											"end": 2345,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1966,
											"end": 2351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1966,
											"end": 2351,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2439,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2441,
											"end": 2447,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2449,
											"end": 2455,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2502,
											"end": 2504,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2490,
											"end": 2499,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2481,
											"end": 2488,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2477,
											"end": 2500,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2473,
											"end": 2505,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "560"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2518,
											"end": 2519,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2515,
											"end": 2516,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2508,
											"end": 2520,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "tag",
											"source": 9,
											"value": "560"
										},
										{
											"begin": 2470,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2541,
											"end": 2570,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "561"
										},
										{
											"begin": 2560,
											"end": 2569,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2541,
											"end": 2570,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 2541,
											"end": 2570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2541,
											"end": 2570,
											"name": "tag",
											"source": 9,
											"value": "561"
										},
										{
											"begin": 2541,
											"end": 2570,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2531,
											"end": 2570,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2531,
											"end": 2570,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2627,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "562"
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2612,
											"end": 2621,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2627,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 2589,
											"end": 2627,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2589,
											"end": 2627,
											"name": "tag",
											"source": 9,
											"value": "562"
										},
										{
											"begin": 2589,
											"end": 2627,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2579,
											"end": 2627,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2579,
											"end": 2627,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2674,
											"end": 2676,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2663,
											"end": 2672,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2659,
											"end": 2677,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2646,
											"end": 2678,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2636,
											"end": 2678,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2636,
											"end": 2678,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2356,
											"end": 2684,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "tag",
											"source": 9,
											"value": "539"
										},
										{
											"begin": 2689,
											"end": 2807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2775,
											"end": 2780,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2768,
											"end": 2781,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2761,
											"end": 2782,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2754,
											"end": 2759,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2751,
											"end": 2783,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2741,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 2741,
											"end": 2801,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2797,
											"end": 2798,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2794,
											"end": 2795,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2787,
											"end": 2799,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 3053,
											"name": "tag",
											"source": 9,
											"value": "99"
										},
										{
											"begin": 2812,
											"end": 3053,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2868,
											"end": 2874,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2921,
											"end": 2923,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2909,
											"end": 2918,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2900,
											"end": 2907,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 2919,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2889,
											"end": 2941,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2889,
											"end": 2941,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "566"
										},
										{
											"begin": 2889,
											"end": 2941,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2937,
											"end": 2938,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2934,
											"end": 2935,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2927,
											"end": 2939,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2889,
											"end": 2941,
											"name": "tag",
											"source": 9,
											"value": "566"
										},
										{
											"begin": 2889,
											"end": 2941,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2976,
											"end": 2985,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2963,
											"end": 2986,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "567"
										},
										{
											"begin": 3017,
											"end": 3022,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "539"
										},
										{
											"begin": 2995,
											"end": 3023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2995,
											"end": 3023,
											"name": "tag",
											"source": 9,
											"value": "567"
										},
										{
											"begin": 2995,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3042,
											"end": 3047,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 3053,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2812,
											"end": 3053,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3247,
											"end": 3433,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 3247,
											"end": 3433,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3306,
											"end": 3312,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3359,
											"end": 3361,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3347,
											"end": 3356,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3338,
											"end": 3345,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3334,
											"end": 3357,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3330,
											"end": 3362,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 3327,
											"end": 3379,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3327,
											"end": 3379,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "570"
										},
										{
											"begin": 3327,
											"end": 3379,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3375,
											"end": 3376,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3372,
											"end": 3373,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3365,
											"end": 3377,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3327,
											"end": 3379,
											"name": "tag",
											"source": 9,
											"value": "570"
										},
										{
											"begin": 3327,
											"end": 3379,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3398,
											"end": 3427,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "567"
										},
										{
											"begin": 3417,
											"end": 3426,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3398,
											"end": 3427,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 3398,
											"end": 3427,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3728,
											"end": 3734,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3736,
											"end": 3742,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3789,
											"end": 3791,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3777,
											"end": 3786,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3768,
											"end": 3775,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3764,
											"end": 3787,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3760,
											"end": 3792,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 3757,
											"end": 3809,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3757,
											"end": 3809,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "574"
										},
										{
											"begin": 3757,
											"end": 3809,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3805,
											"end": 3806,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3802,
											"end": 3803,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3795,
											"end": 3807,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3757,
											"end": 3809,
											"name": "tag",
											"source": 9,
											"value": "574"
										},
										{
											"begin": 3757,
											"end": 3809,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3841,
											"end": 3850,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3828,
											"end": 3851,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 3818,
											"end": 3851,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3818,
											"end": 3851,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3870,
											"end": 3908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "575"
										},
										{
											"begin": 3904,
											"end": 3906,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3893,
											"end": 3902,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3889,
											"end": 3907,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3870,
											"end": 3908,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 3870,
											"end": 3908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3870,
											"end": 3908,
											"name": "tag",
											"source": 9,
											"value": "575"
										},
										{
											"begin": 3870,
											"end": 3908,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3860,
											"end": 3908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3860,
											"end": 3908,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3660,
											"end": 3914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "tag",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4222,
											"end": 4228,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4230,
											"end": 4236,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4238,
											"end": 4244,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4291,
											"end": 4293,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 4279,
											"end": 4288,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4270,
											"end": 4277,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4266,
											"end": 4289,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4262,
											"end": 4294,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 4259,
											"end": 4311,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4259,
											"end": 4311,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "578"
										},
										{
											"begin": 4259,
											"end": 4311,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4307,
											"end": 4308,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4304,
											"end": 4305,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4297,
											"end": 4309,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4259,
											"end": 4311,
											"name": "tag",
											"source": 9,
											"value": "578"
										},
										{
											"begin": 4259,
											"end": 4311,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4330,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "579"
										},
										{
											"begin": 4349,
											"end": 4358,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4330,
											"end": 4359,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 4330,
											"end": 4359,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4330,
											"end": 4359,
											"name": "tag",
											"source": 9,
											"value": "579"
										},
										{
											"begin": 4330,
											"end": 4359,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4320,
											"end": 4359,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4320,
											"end": 4359,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4416,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "580"
										},
										{
											"begin": 4412,
											"end": 4414,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4401,
											"end": 4410,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4397,
											"end": 4415,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4416,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 4378,
											"end": 4416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4378,
											"end": 4416,
											"name": "tag",
											"source": 9,
											"value": "580"
										},
										{
											"begin": 4378,
											"end": 4416,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4368,
											"end": 4416,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4368,
											"end": 4416,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4466,
											"end": 4468,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4455,
											"end": 4464,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4451,
											"end": 4469,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4438,
											"end": 4470,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 4510,
											"end": 4518,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFF"
										},
										{
											"begin": 4503,
											"end": 4508,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4499,
											"end": 4519,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4492,
											"end": 4497,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4489,
											"end": 4520,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "581"
										},
										{
											"begin": 4479,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4535,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4531,
											"end": 4532,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4524,
											"end": 4536,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4479,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "581"
										},
										{
											"begin": 4479,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4557,
											"end": 4562,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4547,
											"end": 4562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4547,
											"end": 4562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4547,
											"end": 4562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4146,
											"end": 4568,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4969,
											"end": 5229,
											"name": "tag",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 4969,
											"end": 5229,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5037,
											"end": 5043,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5045,
											"end": 5051,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5098,
											"end": 5100,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5086,
											"end": 5095,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5077,
											"end": 5084,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5073,
											"end": 5096,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5069,
											"end": 5101,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 5066,
											"end": 5118,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5066,
											"end": 5118,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "584"
										},
										{
											"begin": 5066,
											"end": 5118,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5114,
											"end": 5115,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5111,
											"end": 5112,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5104,
											"end": 5116,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5066,
											"end": 5118,
											"name": "tag",
											"source": 9,
											"value": "584"
										},
										{
											"begin": 5066,
											"end": 5118,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5137,
											"end": 5166,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "585"
										},
										{
											"begin": 5156,
											"end": 5165,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5137,
											"end": 5166,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 5137,
											"end": 5166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5137,
											"end": 5166,
											"name": "tag",
											"source": 9,
											"value": "585"
										},
										{
											"begin": 5137,
											"end": 5166,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5127,
											"end": 5166,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5127,
											"end": 5166,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5185,
											"end": 5223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "575"
										},
										{
											"begin": 5219,
											"end": 5221,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5208,
											"end": 5217,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5204,
											"end": 5222,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5185,
											"end": 5223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "538"
										},
										{
											"begin": 5185,
											"end": 5223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5234,
											"end": 5584,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 5234,
											"end": 5584,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5436,
											"end": 5438,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5418,
											"end": 5439,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5418,
											"end": 5439,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5418,
											"end": 5439,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5475,
											"end": 5477,
											"name": "PUSH",
											"source": 9,
											"value": "1A"
										},
										{
											"begin": 5455,
											"end": 5473,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5455,
											"end": 5473,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5455,
											"end": 5473,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5448,
											"end": 5478,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5514,
											"end": 5542,
											"name": "PUSH",
											"source": 9,
											"value": "54617820416D6F756E74206D757374206265203020746F203135000000000000"
										},
										{
											"begin": 5509,
											"end": 5511,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5494,
											"end": 5512,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5494,
											"end": 5512,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5487,
											"end": 5543,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5575,
											"end": 5577,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 5560,
											"end": 5578,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5560,
											"end": 5578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5234,
											"end": 5584,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5589,
											"end": 5969,
											"name": "tag",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 5589,
											"end": 5969,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5668,
											"end": 5669,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5664,
											"end": 5676,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5664,
											"end": 5676,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5664,
											"end": 5676,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 5664,
											"end": 5676,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5711,
											"end": 5723,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5711,
											"end": 5723,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5711,
											"end": 5723,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5793,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "589"
										},
										{
											"begin": 5732,
											"end": 5793,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5786,
											"end": 5790,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 5778,
											"end": 5784,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5774,
											"end": 5791,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5764,
											"end": 5791,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5764,
											"end": 5791,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5732,
											"end": 5793,
											"name": "tag",
											"source": 9,
											"value": "589"
										},
										{
											"begin": 5732,
											"end": 5793,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5839,
											"end": 5841,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5831,
											"end": 5837,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5828,
											"end": 5842,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 5808,
											"end": 5826,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5805,
											"end": 5843,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5802,
											"end": 5963,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "590"
										},
										{
											"begin": 5802,
											"end": 5963,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5885,
											"end": 5895,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 5880,
											"end": 5883,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 5876,
											"end": 5896,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 5873,
											"end": 5874,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5866,
											"end": 5897,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5920,
											"end": 5924,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 5917,
											"end": 5918,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5910,
											"end": 5925,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5948,
											"end": 5952,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 5945,
											"end": 5946,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5938,
											"end": 5953,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5802,
											"end": 5963,
											"name": "tag",
											"source": 9,
											"value": "590"
										},
										{
											"begin": 5802,
											"end": 5963,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5802,
											"end": 5963,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5589,
											"end": 5969,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5589,
											"end": 5969,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5589,
											"end": 5969,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5589,
											"end": 5969,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6324,
											"end": 6451,
											"name": "tag",
											"source": 9,
											"value": "540"
										},
										{
											"begin": 6324,
											"end": 6451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6385,
											"end": 6395,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 6380,
											"end": 6383,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 6376,
											"end": 6396,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 6373,
											"end": 6374,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6366,
											"end": 6397,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6416,
											"end": 6420,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 6413,
											"end": 6414,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6406,
											"end": 6421,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6440,
											"end": 6444,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6437,
											"end": 6438,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6430,
											"end": 6445,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6456,
											"end": 6581,
											"name": "tag",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 6456,
											"end": 6581,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6521,
											"end": 6530,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6521,
											"end": 6530,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6521,
											"end": 6530,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6542,
											"end": 6552,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6542,
											"end": 6552,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6542,
											"end": 6552,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6539,
											"end": 6575,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6539,
											"end": 6575,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 6539,
											"end": 6575,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6555,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 6555,
											"end": 6573,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "540"
										},
										{
											"begin": 6555,
											"end": 6573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6865,
											"end": 7110,
											"name": "tag",
											"source": 9,
											"value": "301"
										},
										{
											"begin": 6865,
											"end": 7110,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6932,
											"end": 6938,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6985,
											"end": 6987,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6973,
											"end": 6982,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6964,
											"end": 6971,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6960,
											"end": 6983,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6956,
											"end": 6988,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 6953,
											"end": 7005,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6953,
											"end": 7005,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "598"
										},
										{
											"begin": 6953,
											"end": 7005,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7001,
											"end": 7002,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6998,
											"end": 6999,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6991,
											"end": 7003,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6953,
											"end": 7005,
											"name": "tag",
											"source": 9,
											"value": "598"
										},
										{
											"begin": 6953,
											"end": 7005,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7033,
											"end": 7042,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 7052,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "567"
										},
										{
											"begin": 7074,
											"end": 7079,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7052,
											"end": 7080,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "539"
										},
										{
											"begin": 7052,
											"end": 7080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7913,
											"end": 8097,
											"name": "tag",
											"source": 9,
											"value": "307"
										},
										{
											"begin": 7913,
											"end": 8097,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7983,
											"end": 7989,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8036,
											"end": 8038,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8024,
											"end": 8033,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8015,
											"end": 8022,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 8011,
											"end": 8034,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8007,
											"end": 8039,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 8004,
											"end": 8056,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8004,
											"end": 8056,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "602"
										},
										{
											"begin": 8004,
											"end": 8056,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8052,
											"end": 8053,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8049,
											"end": 8050,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8042,
											"end": 8054,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8004,
											"end": 8056,
											"name": "tag",
											"source": 9,
											"value": "602"
										},
										{
											"begin": 8004,
											"end": 8056,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8075,
											"end": 8091,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 8075,
											"end": 8091,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7913,
											"end": 8097,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7913,
											"end": 8097,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8508,
											"end": 8676,
											"name": "tag",
											"source": 9,
											"value": "341"
										},
										{
											"begin": 8508,
											"end": 8676,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8581,
											"end": 8590,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 8581,
											"end": 8590,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8581,
											"end": 8590,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 8612,
											"end": 8621,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8612,
											"end": 8621,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8629,
											"end": 8644,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8629,
											"end": 8644,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8629,
											"end": 8644,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 8623,
											"end": 8645,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 8623,
											"end": 8645,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 8609,
											"end": 8646,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 8599,
											"end": 8670,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 8599,
											"end": 8670,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8650,
											"end": 8668,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 8650,
											"end": 8668,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "540"
										},
										{
											"begin": 8650,
											"end": 8668,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8681,
											"end": 8898,
											"name": "tag",
											"source": 9,
											"value": "343"
										},
										{
											"begin": 8681,
											"end": 8898,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8721,
											"end": 8722,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8747,
											"end": 8748,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8737,
											"end": 8869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "608"
										},
										{
											"begin": 8737,
											"end": 8869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 8791,
											"end": 8801,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 8786,
											"end": 8789,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 8782,
											"end": 8802,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 8779,
											"end": 8780,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8772,
											"end": 8803,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8826,
											"end": 8830,
											"name": "PUSH",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 8823,
											"end": 8824,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 8816,
											"end": 8831,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8854,
											"end": 8858,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 8851,
											"end": 8852,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8844,
											"end": 8859,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 8737,
											"end": 8869,
											"name": "tag",
											"source": 9,
											"value": "608"
										},
										{
											"begin": 8737,
											"end": 8869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8883,
											"end": 8892,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 8883,
											"end": 8892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8681,
											"end": 8898,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8903,
											"end": 9031,
											"name": "tag",
											"source": 9,
											"value": "359"
										},
										{
											"begin": 8903,
											"end": 9031,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8970,
											"end": 8979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8970,
											"end": 8979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8970,
											"end": 8979,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8991,
											"end": 9002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8991,
											"end": 9002,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8991,
											"end": 9002,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 8988,
											"end": 9025,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 8988,
											"end": 9025,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 8988,
											"end": 9025,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 9005,
											"end": 9023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 9005,
											"end": 9023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "540"
										},
										{
											"begin": 9005,
											"end": 9023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										}
									],
									".data": {
										"01AE0451E5A3376FCAE57E2B9E1DA8E102C4453020935ABB5805CA3E0E709D81": "a50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91637",
										"207F108ADF1D6C644B6AD33067FD4794AEF88983B5068A410F42A411DAA17B80": "a50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91636",
										"74583CCECD8AD1B0ED6CEEB51C0F8C852AE662E302540FF65C0210E7EED14BFC": "12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c787",
										"7D5AFDC40F419CD4C454E66A5A6871164BAA29E2E52BD3EC4F887D908A6EA2FA": "12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c786",
										"CD257BD0BF1AC8F5DBCD7CB80F6302024596A08F94617259C19EB1EC41CF4CB2": "64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d341",
										"F574DF558A4EF90B0F9140707B04D8BD5A2B90F8B0E4DD892B3084D5906C37FA": "64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d340"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
								"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
								"contracts/SwapToken/FRGST.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"LPTransferAmount()": "5202ea6d",
							"PancakeSwap()": "196fd4be",
							"Taxs(uint256)": "ccbd73e7",
							"WBNB()": "8dd95002",
							"WBNBToken()": "82fab2ad",
							"Wallet()": "0e1b39fb",
							"WhiteList(address)": "6bc20157",
							"WithdrawWBNB(address,uint256)": "b9e43eee",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"getBalanceWBNB(address)": "8568b3a5",
							"increaseAllowance(address,uint256)": "39509351",
							"isSwap()": "e319c2ce",
							"linkToken()": "57970e93",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"poolFee()": "089fe6aa",
							"renounceOwnership()": "715018a6",
							"routerAddress()": "3268cc56",
							"setAddressFee(address,address,uint24)": "ca5fb573",
							"setInvestmentBuyTax(uint256)": "e67d6921",
							"setInvestmentSellTax(uint256)": "ea173a39",
							"setInvestmentXAmount(uint256)": "ab72498d",
							"setLPBuyTax(uint256)": "0445a103",
							"setLPSellTax(uint256)": "172cc5a7",
							"setLPXAmount(uint256)": "e465d64d",
							"setMarkettingBuyTax(uint256)": "c90880c1",
							"setMarkettingSellTax(uint256)": "afe2ddd7",
							"setMarkettingSwap(bool)": "24e2a33e",
							"setMarkettingXAmount(uint256)": "9c42ac13",
							"setReflectionBuyTax(uint256)": "36eab316",
							"setReflectionSellTax(uint256)": "446b5d5f",
							"setTaxData(uint256,uint256,uint256,uint256)": "1901156d",
							"swapExactInputSingle(uint256,address)": "793ea8d1",
							"swapRouter()": "c31c9c07",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"whiteList(address)": "372c12b1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PancakeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Taxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"SellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNBToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"WhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawWBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getBalanceWBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PancakeSwapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNBAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"setAddressFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setInvestmentBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setInvestmentSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"setInvestmentXAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setLPBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setLPSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"setLPXAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setMarkettingBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setMarkettingSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"name\":\"setMarkettingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"setMarkettingXAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setReflectionBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Tax\",\"type\":\"uint256\"}],\"name\":\"setReflectionSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SaleT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BuyT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Typ\",\"type\":\"uint256\"}],\"name\":\"setTaxData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientAddresss\",\"type\":\"address\"}],\"name\":\"swapExactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapToken/FRGST.sol\":\"Token\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c0f62d3d5bef22b5ca00cc3903e7de6152cb68d2d22401a463f373cda54c00f\",\"dweb:/ipfs/QmSfzjZux7LC7NW2f7rjCXTHeFMUCWERqDkhpCTBy7kxTe\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652\",\"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS\"]},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53\",\"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM\"]},\"contracts/SwapToken/FRGST.sol\":{\"keccak256\":\"0xdf90f724d02e6fafc5e97f1e4e3919755b645cfdebc19172ff975000a06b5b74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e3a8fbb960351d097ca11c83a3ce4e8b7c97b5f14b4b50f565ec54ba348b309\",\"dweb:/ipfs/QmQVCdrN2a3RZ5GScKmTYeHfi7HDJ4Ex2jFtBcvDcwpUo1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 128,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 134,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 136,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 138,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 140,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 7,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "_owner",
								"offset": 0,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 997,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "Wallet",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 999,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "isSwap",
								"offset": 20,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 1001,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "PancakeSwap",
								"offset": 0,
								"slot": "7",
								"type": "t_address"
							},
							{
								"astId": 1003,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "LPTransferAmount",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 1005,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "poolFee",
								"offset": 0,
								"slot": "9",
								"type": "t_uint24"
							},
							{
								"astId": 1007,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "WBNB",
								"offset": 3,
								"slot": "9",
								"type": "t_address"
							},
							{
								"astId": 1029,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "whiteList",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1034,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "Taxs",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_uint256,t_struct(Cap)1025_storage)"
							},
							{
								"astId": 1037,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "linkToken",
								"offset": 0,
								"slot": "12",
								"type": "t_contract(IERC20)777"
							},
							{
								"astId": 1040,
								"contract": "contracts/SwapToken/FRGST.sol:Token",
								"label": "WBNBToken",
								"offset": 0,
								"slot": "13",
								"type": "t_contract(IERC20)777"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IERC20)777": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_struct(Cap)1025_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct Token.Cap)",
								"numberOfBytes": "32",
								"value": "t_struct(Cap)1025_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Cap)1025_storage": {
								"encoding": "inplace",
								"label": "struct Token.Cap",
								"members": [
									{
										"astId": 1018,
										"contract": "contracts/SwapToken/FRGST.sol:Token",
										"label": "SellTax",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1020,
										"contract": "contracts/SwapToken/FRGST.sol:Token",
										"label": "BuyTax",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1022,
										"contract": "contracts/SwapToken/FRGST.sol:Token",
										"label": "XAmount",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 1024,
										"contract": "contracts/SwapToken/FRGST.sol:Token",
										"label": "currentAmount",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint24": {
								"encoding": "inplace",
								"label": "uint24",
								"numberOfBytes": "3"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							868
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 869,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nameLocations": [
											"683:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 868,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								868
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 858,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 858,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nameLocations": [
													"1875:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nameLocations": [
													"2141:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							868
						],
						"ERC20": [
							699
						],
						"IERC20": [
							777
						],
						"IERC20Metadata": [
							846
						]
					},
					"id": 700,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 115,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 700,
							"sourceUnit": 778,
							"src": "130:22:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 700,
							"sourceUnit": 847,
							"src": "153:41:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 700,
							"sourceUnit": 869,
							"src": "195:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 119,
										"name": "Context",
										"nameLocations": [
											"1419:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 868,
										"src": "1419:7:1"
									},
									"id": 120,
									"nodeType": "InheritanceSpecifier",
									"src": "1419:7:1"
								},
								{
									"baseName": {
										"id": 121,
										"name": "IERC20",
										"nameLocations": [
											"1428:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 777,
										"src": "1428:6:1"
									},
									"id": 122,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:6:1"
								},
								{
									"baseName": {
										"id": 123,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1436:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 846,
										"src": "1436:14:1"
									},
									"id": 124,
									"nodeType": "InheritanceSpecifier",
									"src": "1436:14:1"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "230:1170:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 699,
							"linearizedBaseContracts": [
								699,
								846,
								777,
								868
							],
							"name": "ERC20",
							"nameLocation": "1410:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 128,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1493:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 699,
									"src": "1457:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 127,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 125,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1465:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1457:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 126,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1476:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 134,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1565:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 699,
									"src": "1509:67:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 133,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 129,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1517:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1509:47:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 132,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 130,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1536:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1528:27:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 131,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1547:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 136,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1599:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 699,
									"src": "1583:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 135,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1583:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 138,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1633:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 699,
									"src": "1618:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 137,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1618:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 140,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1659:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 699,
									"src": "1644:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 139,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1644:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "2032:57:1",
										"statements": [
											{
												"expression": {
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 148,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "2042:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 149,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "2050:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2042:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2042:13:1"
											},
											{
												"expression": {
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 140,
														"src": "2065:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 153,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 145,
														"src": "2075:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2065:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "2065:17:1"
											}
										]
									},
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "1673:298:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 157,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2002:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1988:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1988:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2023:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "2009:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 144,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2009:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:44:1"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2032:0:1"
									},
									"scope": 699,
									"src": "1976:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										833
									],
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "2223:29:1",
										"statements": [
											{
												"expression": {
													"id": 164,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 138,
													"src": "2240:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 163,
												"id": 165,
												"nodeType": "Return",
												"src": "2233:12:1"
											}
										]
									},
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "2095:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 167,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2163:4:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 160,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2190:8:1"
									},
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:2:1"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "2208:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 161,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2208:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:15:1"
									},
									"scope": 699,
									"src": "2154:98:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										839
									],
									"body": {
										"id": 176,
										"nodeType": "Block",
										"src": "2436:31:1",
										"statements": [
											{
												"expression": {
													"id": 174,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 140,
													"src": "2453:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 173,
												"id": 175,
												"nodeType": "Return",
												"src": "2446:14:1"
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "2258:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2374:6:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 170,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2403:8:1"
									},
									"parameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2380:2:1"
									},
									"returnParameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2421:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 171,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2421:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:15:1"
									},
									"scope": 699,
									"src": "2365:102:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										845
									],
									"body": {
										"id": 186,
										"nodeType": "Block",
										"src": "3156:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3173:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 183,
												"id": 185,
												"nodeType": "Return",
												"src": "3166:9:1"
											}
										]
									},
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2473:613:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 187,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3100:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 180,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3131:8:1"
									},
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3108:2:1"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "3149:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 181,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3149:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3148:7:1"
									},
									"scope": 699,
									"src": "3091:91:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										726
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "3312:36:1",
										"statements": [
											{
												"expression": {
													"id": 194,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 136,
													"src": "3329:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 193,
												"id": 195,
												"nodeType": "Return",
												"src": "3322:19:1"
											}
										]
									},
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "3188:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3251:11:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 190,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3285:8:1"
									},
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3262:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "3303:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3303:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3302:9:1"
									},
									"scope": 699,
									"src": "3242:106:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										734
									],
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "3489:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 206,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "3506:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 208,
													"indexExpression": {
														"id": 207,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 200,
														"src": "3516:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3506:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 205,
												"id": 209,
												"nodeType": "Return",
												"src": "3499:25:1"
											}
										]
									},
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "3354:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3415:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 202,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3462:8:1"
									},
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3433:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "3425:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3424:17:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "3480:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3480:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3479:9:1"
									},
									"scope": 699,
									"src": "3406:125:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										744
									],
									"body": {
										"id": 235,
										"nodeType": "Block",
										"src": "3812:104:1",
										"statements": [
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3830:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 235,
														"src": "3822:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3822:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 226,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 224,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "3838:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3838:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3822:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 228,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "3870:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 229,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 214,
															"src": "3877:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 230,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "3881:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 227,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "3860:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3860:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 232,
												"nodeType": "ExpressionStatement",
												"src": "3860:28:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 233,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3905:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 221,
												"id": 234,
												"nodeType": "Return",
												"src": "3898:11:1"
											}
										]
									},
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "3537:185:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3736:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 218,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3788:8:1"
									},
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3753:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3745:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3745:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3765:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3757:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3744:28:1"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3806:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 219,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3806:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3805:6:1"
									},
									"scope": 699,
									"src": "3727:189:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										754
									],
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "4072:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 247,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 134,
															"src": "4089:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 249,
														"indexExpression": {
															"id": 248,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 239,
															"src": "4101:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4089:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 251,
													"indexExpression": {
														"id": 250,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 241,
														"src": "4108:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4089:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 246,
												"id": 252,
												"nodeType": "Return",
												"src": "4082:34:1"
											}
										]
									},
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3922:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3983:9:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 243,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4045:8:1"
									},
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4001:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "3993:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3993:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4016:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "4008:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3992:32:1"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "4063:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4063:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4062:9:1"
									},
									"scope": 699,
									"src": "3974:149:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										764
									],
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "4520:108:1",
										"statements": [
											{
												"assignments": [
													266
												],
												"declarations": [
													{
														"constant": false,
														"id": 266,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4538:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 278,
														"src": "4530:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 265,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4530:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 269,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 267,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "4546:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4546:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4530:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 266,
															"src": "4577:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 272,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 257,
															"src": "4584:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 273,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "4593:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 270,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 633,
														"src": "4568:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4568:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 275,
												"nodeType": "ExpressionStatement",
												"src": "4568:32:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4617:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 264,
												"id": 277,
												"nodeType": "Return",
												"src": "4610:11:1"
											}
										]
									},
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "4129:297:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4440:7:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 261,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4496:8:1"
									},
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4456:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4448:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4448:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4473:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4465:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4447:33:1"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "4514:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 262,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4514:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4513:6:1"
									},
									"scope": 699,
									"src": "4431:197:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										776
									],
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "5323:153:1",
										"statements": [
											{
												"assignments": [
													293
												],
												"declarations": [
													{
														"constant": false,
														"id": 293,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5341:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 311,
														"src": "5333:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 292,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5333:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 296,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 294,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "5351:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5351:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5333:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 298,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "5389:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 299,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 293,
															"src": "5395:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 300,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "5404:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 297,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 676,
														"src": "5373:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5373:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 302,
												"nodeType": "ExpressionStatement",
												"src": "5373:38:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 304,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "5431:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 305,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 284,
															"src": "5437:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 306,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "5441:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 303,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "5421:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5421:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 308,
												"nodeType": "ExpressionStatement",
												"src": "5421:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5465:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 291,
												"id": 310,
												"nodeType": "Return",
												"src": "5458:11:1"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "4634:551:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5199:12:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 288,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5299:8:1"
									},
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5229:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5221:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5221:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5251:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5243:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5243:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5271:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5263:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5211:72:1"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "5317:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 289,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5317:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5316:6:1"
									},
									"scope": 699,
									"src": "5190:286:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "5965:140:1",
										"statements": [
											{
												"assignments": [
													323
												],
												"declarations": [
													{
														"constant": false,
														"id": 323,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5983:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 340,
														"src": "5975:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 322,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5975:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 326,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 324,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "5991:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5991:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5975:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 328,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 323,
															"src": "6022:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 329,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "6029:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 331,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 323,
																		"src": "6048:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 332,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 315,
																		"src": "6055:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 330,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "6038:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 333,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6038:25:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 334,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 317,
																"src": "6066:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6038:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 327,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 633,
														"src": "6013:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6013:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "6013:64:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 338,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6094:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 321,
												"id": 339,
												"nodeType": "Return",
												"src": "6087:11:1"
											}
										]
									},
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "5482:384:1",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5880:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5906:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5898:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5923:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5915:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 316,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5915:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:37:1"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5959:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 319,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5959:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5958:6:1"
									},
									"scope": 699,
									"src": "5871:234:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "6691:328:1",
										"statements": [
											{
												"assignments": [
													352
												],
												"declarations": [
													{
														"constant": false,
														"id": 352,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6709:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 381,
														"src": "6701:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 351,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6701:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 355,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 353,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "6717:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6717:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6701:28:1"
											},
											{
												"assignments": [
													357
												],
												"declarations": [
													{
														"constant": false,
														"id": 357,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6747:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 381,
														"src": "6739:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 356,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6739:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 362,
												"initialValue": {
													"arguments": [
														{
															"id": 359,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "6776:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 360,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "6783:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 358,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "6766:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6766:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6739:52:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 364,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 357,
																"src": "6809:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 365,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 346,
																"src": "6829:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6809:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6846:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 363,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6801:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6801:85:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 369,
												"nodeType": "ExpressionStatement",
												"src": "6801:85:1"
											},
											{
												"id": 378,
												"nodeType": "UncheckedBlock",
												"src": "6896:95:1",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 371,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 352,
																	"src": "6929:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 372,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 344,
																	"src": "6936:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 373,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 357,
																		"src": "6945:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 374,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 346,
																		"src": "6964:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6945:34:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 370,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 633,
																"src": "6920:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6920:60:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 377,
														"nodeType": "ExpressionStatement",
														"src": "6920:60:1"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7008:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 350,
												"id": 380,
												"nodeType": "Return",
												"src": "7001:11:1"
											}
										]
									},
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "6111:476:1",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6601:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6627:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6619:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6619:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6644:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6636:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6636:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6618:42:1"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "6685:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 348,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6685:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6684:6:1"
									},
									"scope": 699,
									"src": "6592:427:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 458,
										"nodeType": "Block",
										"src": "7581:710:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 393,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "7599:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7615:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7607:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 394,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7607:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 397,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7607:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7599:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7619:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 392,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7591:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7591:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "7591:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 403,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "7677:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 406,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7691:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 405,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7683:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 404,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7683:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 407,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7683:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7677:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 409,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7695:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 402,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7669:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7669:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 411,
												"nodeType": "ExpressionStatement",
												"src": "7669:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 413,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "7765:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 414,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "7771:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 415,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "7775:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 412,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 687,
														"src": "7744:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7744:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "7744:38:1"
											},
											{
												"assignments": [
													419
												],
												"declarations": [
													{
														"constant": false,
														"id": 419,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7801:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 458,
														"src": "7793:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 418,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7793:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 423,
												"initialValue": {
													"baseExpression": {
														"id": 420,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "7815:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 422,
													"indexExpression": {
														"id": 421,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 385,
														"src": "7825:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7815:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7793:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 427,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 425,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 419,
																"src": "7848:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 426,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 389,
																"src": "7863:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7848:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 428,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7871:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 424,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7840:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7840:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "7840:72:1"
											},
											{
												"id": 445,
												"nodeType": "UncheckedBlock",
												"src": "7922:273:1",
												"statements": [
													{
														"expression": {
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 431,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "7946:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 433,
																"indexExpression": {
																	"id": 432,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 385,
																	"src": "7956:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7946:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 436,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 434,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 419,
																	"src": "7964:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 435,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 389,
																	"src": "7978:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7964:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7946:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 438,
														"nodeType": "ExpressionStatement",
														"src": "7946:38:1"
													},
													{
														"expression": {
															"id": 443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 439,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "8161:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 441,
																"indexExpression": {
																	"id": 440,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 387,
																	"src": "8171:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8161:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 442,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 389,
																"src": "8178:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8161:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 444,
														"nodeType": "ExpressionStatement",
														"src": "8161:23:1"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 447,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "8219:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 448,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "8225:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 449,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "8229:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 446,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 711,
														"src": "8210:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8210:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 451,
												"nodeType": "EmitStatement",
												"src": "8205:31:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 453,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "8267:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 454,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "8273:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 455,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "8277:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 452,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "8247:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8247:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "8247:37:1"
											}
										]
									},
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "7025:443:1",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7482:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7509:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "7501:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 384,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7531:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "7523:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7523:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7551:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "7543:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7543:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7491:72:1"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7581:0:1"
									},
									"scope": 699,
									"src": "7473:818:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "8632:470:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 468,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 462,
																"src": "8650:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8669:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8661:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 469,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8661:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 472,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8661:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8650:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8673:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 467,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8642:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8642:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 476,
												"nodeType": "ExpressionStatement",
												"src": "8642:65:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8747:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8739:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 478,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8739:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 481,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8739:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 482,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "8751:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 483,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "8760:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 477,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 687,
														"src": "8718:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8718:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 485,
												"nodeType": "ExpressionStatement",
												"src": "8718:49:1"
											},
											{
												"expression": {
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 486,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 136,
														"src": "8778:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 487,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 464,
														"src": "8794:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8778:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "8778:22:1"
											},
											{
												"id": 496,
												"nodeType": "UncheckedBlock",
												"src": "8810:175:1",
												"statements": [
													{
														"expression": {
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 490,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "8946:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 492,
																"indexExpression": {
																	"id": 491,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 462,
																	"src": "8956:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8946:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 493,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "8968:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8946:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 495,
														"nodeType": "ExpressionStatement",
														"src": "8946:28:1"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 500,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9016:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 499,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9008:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 498,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9008:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9008:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 502,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "9020:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 503,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "9029:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 497,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 711,
														"src": "8999:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8999:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 505,
												"nodeType": "EmitStatement",
												"src": "8994:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 509,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9075:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 508,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9067:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 507,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9067:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9067:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 511,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "9079:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 512,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "9088:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 506,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "9047:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9047:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 514,
												"nodeType": "ExpressionStatement",
												"src": "9047:48:1"
											}
										]
									},
									"documentation": {
										"id": 460,
										"nodeType": "StructuredDocumentation",
										"src": "8297:265:1",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8576:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8590:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "8582:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8582:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8607:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "8599:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8599:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8581:33:1"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8632:0:1"
									},
									"scope": 699,
									"src": "8567:535:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 587,
										"nodeType": "Block",
										"src": "9487:594:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 525,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 519,
																"src": "9505:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9524:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 527,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9516:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 526,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9516:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 529,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9516:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9505:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 531,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9528:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 524,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9497:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9497:67:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 533,
												"nodeType": "ExpressionStatement",
												"src": "9497:67:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 535,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "9596:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9613:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 537,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9605:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 536,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9605:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9605:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 540,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "9617:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 534,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 687,
														"src": "9575:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9575:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 542,
												"nodeType": "ExpressionStatement",
												"src": "9575:49:1"
											},
											{
												"assignments": [
													544
												],
												"declarations": [
													{
														"constant": false,
														"id": 544,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9643:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 587,
														"src": "9635:22:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 543,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9635:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 548,
												"initialValue": {
													"baseExpression": {
														"id": 545,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 128,
														"src": "9660:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 547,
													"indexExpression": {
														"id": 546,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "9670:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9660:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9635:43:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 550,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "9696:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 551,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 521,
																"src": "9714:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9696:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 553,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9722:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 549,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9688:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9688:71:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 555,
												"nodeType": "ExpressionStatement",
												"src": "9688:71:1"
											},
											{
												"id": 568,
												"nodeType": "UncheckedBlock",
												"src": "9769:194:1",
												"statements": [
													{
														"expression": {
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 556,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "9793:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 558,
																"indexExpression": {
																	"id": 557,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 519,
																	"src": "9803:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9793:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 559,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "9814:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 560,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 521,
																	"src": "9831:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9814:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9793:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 563,
														"nodeType": "ExpressionStatement",
														"src": "9793:44:1"
													},
													{
														"expression": {
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 564,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 136,
																"src": "9930:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 565,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 521,
																"src": "9946:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9930:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 567,
														"nodeType": "ExpressionStatement",
														"src": "9930:22:1"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 570,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "9987:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10004:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9996:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 571,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9996:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 574,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9996:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 575,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "10008:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 569,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 711,
														"src": "9978:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 577,
												"nodeType": "EmitStatement",
												"src": "9973:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 579,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "10046:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 582,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10063:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10055:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 580,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10055:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10055:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 584,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "10067:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 578,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "10026:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10026:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "10026:48:1"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "9108:309:1",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 588,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9431:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9445:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "9437:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9437:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9462:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "9454:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 520,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9454:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9436:33:1"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9487:0:1"
									},
									"scope": 699,
									"src": "9422:659:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 632,
										"nodeType": "Block",
										"src": "10617:257:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 599,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "10635:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 602,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10652:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10644:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 600,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10644:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 603,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10644:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10635:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10656:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 598,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10627:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10627:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 607,
												"nodeType": "ExpressionStatement",
												"src": "10627:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 609,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 593,
																"src": "10713:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 612,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10732:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 611,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10724:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 610,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10724:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 613,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10724:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10713:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 615,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10736:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 608,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10705:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10705:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 617,
												"nodeType": "ExpressionStatement",
												"src": "10705:68:1"
											},
											{
												"expression": {
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 618,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 134,
																"src": "10784:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 621,
															"indexExpression": {
																"id": 619,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "10796:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10784:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 622,
														"indexExpression": {
															"id": 620,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "10803:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10784:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 623,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 595,
														"src": "10814:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10784:36:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 625,
												"nodeType": "ExpressionStatement",
												"src": "10784:36:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 627,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 591,
															"src": "10844:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 628,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 593,
															"src": "10851:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 629,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "10860:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 626,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "10835:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10835:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 631,
												"nodeType": "EmitStatement",
												"src": "10830:37:1"
											}
										]
									},
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "10087:412:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10513:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10539:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "10531:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10531:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10562:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "10554:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10554:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10587:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "10579:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 594,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10579:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10521:78:1"
									},
									"returnParameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10617:0:1"
									},
									"scope": 699,
									"src": "10504:370:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 675,
										"nodeType": "Block",
										"src": "11275:321:1",
										"statements": [
											{
												"assignments": [
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11293:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 675,
														"src": "11285:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 643,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11285:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 646,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "11322:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 647,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "11329:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 645,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "11312:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11312:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11285:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 650,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 644,
														"src": "11351:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 653,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11376:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 652,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11376:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 651,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11371:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 654,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11371:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 655,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11385:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11371:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11351:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 674,
												"nodeType": "IfStatement",
												"src": "11347:243:1",
												"trueBody": {
													"id": 673,
													"nodeType": "Block",
													"src": "11390:200:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 658,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 644,
																			"src": "11412:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 659,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 640,
																			"src": "11432:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11412:26:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 661,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11440:31:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 657,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11404:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11404:68:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 663,
															"nodeType": "ExpressionStatement",
															"src": "11404:68:1"
														},
														{
															"id": 672,
															"nodeType": "UncheckedBlock",
															"src": "11486:94:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 665,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 636,
																				"src": "11523:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 666,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 638,
																				"src": "11530:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 669,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 667,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 644,
																					"src": "11539:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 668,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 640,
																					"src": "11558:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11539:25:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 664,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 633,
																			"src": "11514:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11514:51:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 671,
																	"nodeType": "ExpressionStatement",
																	"src": "11514:51:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 634,
										"nodeType": "StructuredDocumentation",
										"src": "10880:270:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 676,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11164:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11197:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "11189:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 635,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11189:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11220:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "11212:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11212:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11245:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "11237:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11237:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11179:78:1"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11275:0:1"
									},
									"scope": 699,
									"src": "11155:441:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 686,
										"nodeType": "Block",
										"src": "12299:2:1",
										"statements": []
									},
									"documentation": {
										"id": 677,
										"nodeType": "StructuredDocumentation",
										"src": "11602:573:1",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12189:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12227:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "12219:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12219:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12249:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "12241:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12241:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12269:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "12261:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12261:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12209:72:1"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12299:0:1"
									},
									"scope": 699,
									"src": "12180:121:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 697,
										"nodeType": "Block",
										"src": "13007:2:1",
										"statements": []
									},
									"documentation": {
										"id": 688,
										"nodeType": "StructuredDocumentation",
										"src": "12307:577:1",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 698,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12898:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12935:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "12927:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 689,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12927:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12957:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "12949:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12949:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12977:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "12969:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12969:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12917:72:1"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13007:0:1"
									},
									"scope": 699,
									"src": "12889:120:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 700,
							"src": "1401:11610:1",
							"usedErrors": []
						}
					],
					"src": "105:12907:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							777
						]
					},
					"id": 778,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 701,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 702,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 777,
							"linearizedBaseContracts": [
								777
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 703,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 711,
									"name": "Transfer",
									"nameLocation": "394:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "403:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 707,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "425:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 706,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 709,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 711,
												"src": "445:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 708,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:2"
									},
									"src": "388:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 712,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 720,
									"name": "Approval",
									"nameLocation": "625:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "634:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 713,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "657:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 718,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 720,
												"src": "682:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:2"
									},
									"src": "619:78:2"
								},
								{
									"documentation": {
										"id": 721,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 726,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 777,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 727,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 734,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 734,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 728,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 734,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 731,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 777,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 735,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 744,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "1211:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 736,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 739,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "1223:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:2"
									},
									"returnParameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "1257:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 741,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:2"
									},
									"scope": 777,
									"src": "1193:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "1557:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "1572:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:2"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "1612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 751,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:2"
									},
									"scope": 777,
									"src": "1538:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 755,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 764,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "2291:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "2308:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:2"
									},
									"returnParameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "2342:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 761,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:2"
									},
									"scope": 777,
									"src": "2274:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 776,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "2677:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "2699:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 768,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "2719:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:2"
									},
									"returnParameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "2758:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 773,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:2"
									},
									"scope": 777,
									"src": "2646:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 778,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							868
						],
						"ERC20": [
							699
						],
						"ERC20Burnable": [
							821
						],
						"IERC20": [
							777
						],
						"IERC20Metadata": [
							846
						]
					},
					"id": 822,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 779,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "124:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 780,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 822,
							"sourceUnit": 700,
							"src": "149:22:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 781,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 822,
							"sourceUnit": 869,
							"src": "172:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 783,
										"name": "Context",
										"nameLocations": [
											"454:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 868,
										"src": "454:7:3"
									},
									"id": 784,
									"nodeType": "InheritanceSpecifier",
									"src": "454:7:3"
								},
								{
									"baseName": {
										"id": 785,
										"name": "ERC20",
										"nameLocations": [
											"463:5:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 699,
										"src": "463:5:3"
									},
									"id": 786,
									"nodeType": "InheritanceSpecifier",
									"src": "463:5:3"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 782,
								"nodeType": "StructuredDocumentation",
								"src": "210:208:3",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 821,
							"linearizedBaseContracts": [
								821,
								699,
								846,
								777,
								868
							],
							"name": "ERC20Burnable",
							"nameLocation": "437:13:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 798,
										"nodeType": "Block",
										"src": "623:44:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 793,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 858,
																"src": "639:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "639:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 795,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "653:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 792,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "633:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "633:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 797,
												"nodeType": "ExpressionStatement",
												"src": "633:27:3"
											}
										]
									},
									"documentation": {
										"id": 787,
										"nodeType": "StructuredDocumentation",
										"src": "475:98:3",
										"text": " @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 799,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "587:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "600:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 799,
												"src": "592:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "592:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:16:3"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "623:0:3"
									},
									"scope": 821,
									"src": "578:89:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 819,
										"nodeType": "Block",
										"src": "1039:95:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 808,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 802,
															"src": "1065:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 809,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 858,
																"src": "1074:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1074:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 811,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 804,
															"src": "1088:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 807,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 676,
														"src": "1049:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 812,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1049:46:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 813,
												"nodeType": "ExpressionStatement",
												"src": "1049:46:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 815,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 802,
															"src": "1111:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 816,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 804,
															"src": "1120:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 814,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 588,
														"src": "1105:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1105:22:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 818,
												"nodeType": "ExpressionStatement",
												"src": "1105:22:3"
											}
										]
									},
									"documentation": {
										"id": 800,
										"nodeType": "StructuredDocumentation",
										"src": "673:295:3",
										"text": " @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."
									},
									"functionSelector": "79cc6790",
									"id": 820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "982:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "999:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "991:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 801,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1016:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "1008:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 803,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1008:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "990:33:3"
									},
									"returnParameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1039:0:3"
									},
									"scope": 821,
									"src": "973:161:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 822,
							"src": "419:717:3",
							"usedErrors": []
						}
					],
					"src": "124:1013:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							777
						],
						"IERC20Metadata": [
							846
						]
					},
					"id": 847,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 823,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 824,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 847,
							"sourceUnit": 778,
							"src": "135:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 826,
										"name": "IERC20",
										"nameLocations": [
											"305:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 777,
										"src": "305:6:4"
									},
									"id": 827,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:4"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 825,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:4",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 846,
							"linearizedBaseContracts": [
								846,
								777
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 828,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 833,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:4"
									},
									"returnParameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "416:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 830,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:4"
									},
									"scope": 846,
									"src": "377:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 834,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 839,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:4"
									},
									"returnParameters": {
										"id": 838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 839,
												"src": "539:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 836,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:4"
									},
									"scope": 846,
									"src": "498:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 840,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 845,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:4"
									},
									"returnParameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "673:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 842,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:4"
									},
									"scope": 846,
									"src": "630:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 847,
							"src": "277:405:4",
							"usedErrors": []
						}
					],
					"src": "110:573:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							868
						]
					},
					"id": 869,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 848,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 849,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 868,
							"linearizedBaseContracts": [
								868
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 857,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 854,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "723:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 853,
												"id": 856,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 858,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 868,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 866,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 863,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "830:4:5",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 862,
												"id": 865,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 867,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 860,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 868,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 869,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
					"exportedSymbols": {
						"IUniswapV3SwapCallback": [
							882
						]
					},
					"id": 883,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 870,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IUniswapV3SwapCallback",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 871,
								"nodeType": "StructuredDocumentation",
								"src": "71:144:6",
								"text": "@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"
							},
							"fullyImplemented": false,
							"id": 882,
							"linearizedBaseContracts": [
								882
							],
							"name": "IUniswapV3SwapCallback",
							"nameLocation": "225:22:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 872,
										"nodeType": "StructuredDocumentation",
										"src": "254:898:6",
										"text": "@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"
									},
									"functionSelector": "fa461e33",
									"id": 881,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniswapV3SwapCallback",
									"nameLocation": "1166:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "amount0Delta",
												"nameLocation": "1204:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "1197:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 873,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "amount1Delta",
												"nameLocation": "1233:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "1226:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 875,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1226:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1270:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 881,
												"src": "1255:19:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 877,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1255:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1187:93:6"
									},
									"returnParameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1289:0:6"
									},
									"scope": 882,
									"src": "1157:133:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 883,
							"src": "215:1077:6",
							"usedErrors": []
						}
					],
					"src": "45:1248:6"
				},
				"id": 6
			},
			"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
				"ast": {
					"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
					"exportedSymbols": {
						"ISwapRouter": [
							982
						],
						"IUniswapV3SwapCallback": [
							882
						]
					},
					"id": 983,
					"license": "GPL-2.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 884,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".5"
							],
							"nodeType": "PragmaDirective",
							"src": "45:24:7"
						},
						{
							"id": 885,
							"literals": [
								"abicoder",
								"v2"
							],
							"nodeType": "PragmaDirective",
							"src": "70:19:7"
						},
						{
							"absolutePath": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"file": "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol",
							"id": 886,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 983,
							"sourceUnit": 883,
							"src": "91:83:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 888,
										"name": "IUniswapV3SwapCallback",
										"nameLocations": [
											"305:22:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 882,
										"src": "305:22:7"
									},
									"id": 889,
									"nodeType": "InheritanceSpecifier",
									"src": "305:22:7"
								}
							],
							"canonicalName": "ISwapRouter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 887,
								"nodeType": "StructuredDocumentation",
								"src": "176:104:7",
								"text": "@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"
							},
							"fullyImplemented": false,
							"id": 982,
							"linearizedBaseContracts": [
								982,
								882
							],
							"name": "ISwapRouter",
							"nameLocation": "290:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ISwapRouter.ExactInputSingleParams",
									"id": 906,
									"members": [
										{
											"constant": false,
											"id": 891,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "382:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "374:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 890,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "374:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 893,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "407:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "399:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 892,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "399:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 895,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "432:3:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "425:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 894,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "425:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 897,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "453:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "445:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 896,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "445:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 899,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "480:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "472:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 898,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "472:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 901,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "506:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "498:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 900,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "498:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 903,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "532:16:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "524:24:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 902,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "524:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 905,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "566:17:7",
											"nodeType": "VariableDeclaration",
											"scope": 906,
											"src": "558:25:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 904,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "558:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputSingleParams",
									"nameLocation": "341:22:7",
									"nodeType": "StructDefinition",
									"scope": 982,
									"src": "334:256:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "596:250:7",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "414bf389",
									"id": 915,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInputSingle",
									"nameLocation": "860:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "909:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "877:38:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputSingleParams"
												},
												"typeName": {
													"id": 909,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 908,
														"name": "ExactInputSingleParams",
														"nameLocations": [
															"877:22:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 906,
														"src": "877:22:7"
													},
													"referencedDeclaration": 906,
													"src": "877:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "876:40:7"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "951:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "943:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "943:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "942:19:7"
									},
									"scope": 982,
									"src": "851:111:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactInputParams",
									"id": 926,
									"members": [
										{
											"constant": false,
											"id": 917,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "1008:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 926,
											"src": "1002:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 916,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1002:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 919,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1030:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 926,
											"src": "1022:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 918,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1022:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 921,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1057:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 926,
											"src": "1049:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 920,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1049:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 923,
											"mutability": "mutable",
											"name": "amountIn",
											"nameLocation": "1083:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 926,
											"src": "1075:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 922,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1075:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 925,
											"mutability": "mutable",
											"name": "amountOutMinimum",
											"nameLocation": "1109:16:7",
											"nodeType": "VariableDeclaration",
											"scope": 926,
											"src": "1101:24:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 924,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1101:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactInputParams",
									"nameLocation": "975:16:7",
									"nodeType": "StructDefinition",
									"scope": 982,
									"src": "968:164:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 927,
										"nodeType": "StructuredDocumentation",
										"src": "1138:273:7",
										"text": "@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"
									},
									"functionSelector": "c04b8d59",
									"id": 935,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactInput",
									"nameLocation": "1425:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "1462:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "1436:32:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactInputParams_$926_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactInputParams"
												},
												"typeName": {
													"id": 929,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 928,
														"name": "ExactInputParams",
														"nameLocations": [
															"1436:16:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 926,
														"src": "1436:16:7"
													},
													"referencedDeclaration": 926,
													"src": "1436:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputParams_$926_storage_ptr",
														"typeString": "struct ISwapRouter.ExactInputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:34:7"
									},
									"returnParameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1504:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "1496:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1496:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:19:7"
									},
									"scope": 982,
									"src": "1416:99:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputSingleParams",
									"id": 952,
									"members": [
										{
											"constant": false,
											"id": 937,
											"mutability": "mutable",
											"name": "tokenIn",
											"nameLocation": "1570:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1562:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 936,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1562:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 939,
											"mutability": "mutable",
											"name": "tokenOut",
											"nameLocation": "1595:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1587:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 938,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1587:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 941,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1620:3:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1613:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint24",
												"typeString": "uint24"
											},
											"typeName": {
												"id": 940,
												"name": "uint24",
												"nodeType": "ElementaryTypeName",
												"src": "1613:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 943,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "1641:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1633:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 942,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1633:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 945,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1668:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1660:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 944,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1660:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 947,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "1694:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1686:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 946,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 949,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "1721:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1713:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 948,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1713:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 951,
											"mutability": "mutable",
											"name": "sqrtPriceLimitX96",
											"nameLocation": "1754:17:7",
											"nodeType": "VariableDeclaration",
											"scope": 952,
											"src": "1746:25:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 950,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "1746:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputSingleParams",
									"nameLocation": "1528:23:7",
									"nodeType": "StructDefinition",
									"scope": 982,
									"src": "1521:257:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "1784:250:7",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "db3e2198",
									"id": 961,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutputSingle",
									"nameLocation": "2048:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2099:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "2066:39:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputSingleParams_$952_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputSingleParams"
												},
												"typeName": {
													"id": 955,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 954,
														"name": "ExactOutputSingleParams",
														"nameLocations": [
															"2066:23:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 952,
														"src": "2066:23:7"
													},
													"referencedDeclaration": 952,
													"src": "2066:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputSingleParams_$952_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputSingleParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2065:41:7"
									},
									"returnParameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2141:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "2133:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:18:7"
									},
									"scope": 982,
									"src": "2039:112:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "ISwapRouter.ExactOutputParams",
									"id": 972,
									"members": [
										{
											"constant": false,
											"id": 963,
											"mutability": "mutable",
											"name": "path",
											"nameLocation": "2198:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 972,
											"src": "2192:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 962,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2192:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 965,
											"mutability": "mutable",
											"name": "recipient",
											"nameLocation": "2220:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 972,
											"src": "2212:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 964,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2212:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 967,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2247:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 972,
											"src": "2239:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 966,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2239:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 969,
											"mutability": "mutable",
											"name": "amountOut",
											"nameLocation": "2273:9:7",
											"nodeType": "VariableDeclaration",
											"scope": 972,
											"src": "2265:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 968,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2265:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 971,
											"mutability": "mutable",
											"name": "amountInMaximum",
											"nameLocation": "2300:15:7",
											"nodeType": "VariableDeclaration",
											"scope": 972,
											"src": "2292:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 970,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2292:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExactOutputParams",
									"nameLocation": "2164:17:7",
									"nodeType": "StructDefinition",
									"scope": 982,
									"src": "2157:165:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 973,
										"nodeType": "StructuredDocumentation",
										"src": "2328:284:7",
										"text": "@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"
									},
									"functionSelector": "f28c0498",
									"id": 981,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exactOutput",
									"nameLocation": "2626:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "params",
												"nameLocation": "2665:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "2638:33:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExactOutputParams_$972_calldata_ptr",
													"typeString": "struct ISwapRouter.ExactOutputParams"
												},
												"typeName": {
													"id": 975,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 974,
														"name": "ExactOutputParams",
														"nameLocations": [
															"2638:17:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 972,
														"src": "2638:17:7"
													},
													"referencedDeclaration": 972,
													"src": "2638:17:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactOutputParams_$972_storage_ptr",
														"typeString": "struct ISwapRouter.ExactOutputParams"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2637:35:7"
									},
									"returnParameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 979,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "2707:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "2699:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 978,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2698:18:7"
									},
									"scope": 982,
									"src": "2617:100:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 983,
							"src": "280:2439:7",
							"usedErrors": []
						}
					],
					"src": "45:2675:7"
				},
				"id": 7
			},
			"contracts/SwapToken/FRGST.sol": {
				"ast": {
					"absolutePath": "contracts/SwapToken/FRGST.sol",
					"exportedSymbols": {
						"Context": [
							868
						],
						"ERC20": [
							699
						],
						"ERC20Burnable": [
							821
						],
						"IERC20": [
							777
						],
						"IERC20Metadata": [
							846
						],
						"ISwapRouter": [
							982
						],
						"IUniswapV3SwapCallback": [
							882
						],
						"Ownable": [
							112
						],
						"Token": [
							2127
						]
					},
					"id": 2128,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 984,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 985,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2128,
							"sourceUnit": 700,
							"src": "58:55:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 986,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2128,
							"sourceUnit": 113,
							"src": "114:52:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 987,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2128,
							"sourceUnit": 822,
							"src": "167:74:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 988,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2128,
							"sourceUnit": 778,
							"src": "242:56:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"file": "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol",
							"id": 989,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2128,
							"sourceUnit": 983,
							"src": "299:68:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 990,
										"name": "ERC20",
										"nameLocations": [
											"387:5:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 699,
										"src": "387:5:8"
									},
									"id": 991,
									"nodeType": "InheritanceSpecifier",
									"src": "387:5:8"
								},
								{
									"baseName": {
										"id": 992,
										"name": "Ownable",
										"nameLocations": [
											"394:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "394:7:8"
									},
									"id": 993,
									"nodeType": "InheritanceSpecifier",
									"src": "394:7:8"
								},
								{
									"baseName": {
										"id": 994,
										"name": "ERC20Burnable",
										"nameLocations": [
											"402:13:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 821,
										"src": "402:13:8"
									},
									"id": 995,
									"nodeType": "InheritanceSpecifier",
									"src": "402:13:8"
								}
							],
							"canonicalName": "Token",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2127,
							"linearizedBaseContracts": [
								2127,
								821,
								112,
								699,
								846,
								777,
								868
							],
							"name": "Token",
							"nameLocation": "378:5:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "0e1b39fb",
									"id": 997,
									"mutability": "mutable",
									"name": "Wallet",
									"nameLocation": "439:6:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "424:21:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 996,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "424:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e319c2ce",
									"id": 999,
									"mutability": "mutable",
									"name": "isSwap",
									"nameLocation": "463:6:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "451:18:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 998,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "451:4:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "196fd4be",
									"id": 1001,
									"mutability": "mutable",
									"name": "PancakeSwap",
									"nameLocation": "490:11:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "475:26:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1000,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "475:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5202ea6d",
									"id": 1003,
									"mutability": "mutable",
									"name": "LPTransferAmount",
									"nameLocation": "522:16:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "507:31:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1002,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "507:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "089fe6aa",
									"id": 1005,
									"mutability": "mutable",
									"name": "poolFee",
									"nameLocation": "687:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "673:21:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint24",
										"typeString": "uint24"
									},
									"typeName": {
										"id": 1004,
										"name": "uint24",
										"nodeType": "ElementaryTypeName",
										"src": "673:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint24",
											"typeString": "uint24"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8dd95002",
									"id": 1007,
									"mutability": "mutable",
									"name": "WBNB",
									"nameLocation": "715:4:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "700:19:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1006,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "700:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "3268cc56",
									"id": 1010,
									"mutability": "constant",
									"name": "routerAddress",
									"nameLocation": "749:13:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "725:82:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1008,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "725:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307845353932343237413041456365393244653345646565314631384530313537433035383631353634",
										"id": 1009,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "765:42:8",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										},
										"value": "0xE592427A0AEce92De3Edee1F18E0157C05861564"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c31c9c07",
									"id": 1016,
									"mutability": "immutable",
									"name": "swapRouter",
									"nameLocation": "842:10:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "813:68:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISwapRouter_$982",
										"typeString": "contract ISwapRouter"
									},
									"typeName": {
										"id": 1012,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1011,
											"name": "ISwapRouter",
											"nameLocations": [
												"813:11:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 982,
											"src": "813:11:8"
										},
										"referencedDeclaration": 982,
										"src": "813:11:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$982",
											"typeString": "contract ISwapRouter"
										}
									},
									"value": {
										"arguments": [
											{
												"id": 1014,
												"name": "routerAddress",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 1010,
												"src": "867:13:8",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											],
											"id": 1013,
											"name": "ISwapRouter",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 982,
											"src": "855:11:8",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$982_$",
												"typeString": "type(contract ISwapRouter)"
											}
										},
										"id": 1015,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "855:26:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISwapRouter_$982",
											"typeString": "contract ISwapRouter"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "Token.Cap",
									"id": 1025,
									"members": [
										{
											"constant": false,
											"id": 1018,
											"mutability": "mutable",
											"name": "SellTax",
											"nameLocation": "919:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 1025,
											"src": "914:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1017,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "914:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1020,
											"mutability": "mutable",
											"name": "BuyTax",
											"nameLocation": "941:6:8",
											"nodeType": "VariableDeclaration",
											"scope": 1025,
											"src": "936:11:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1019,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "936:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1022,
											"mutability": "mutable",
											"name": "XAmount",
											"nameLocation": "962:7:8",
											"nodeType": "VariableDeclaration",
											"scope": 1025,
											"src": "957:12:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1021,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "957:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1024,
											"mutability": "mutable",
											"name": "currentAmount",
											"nameLocation": "984:13:8",
											"nodeType": "VariableDeclaration",
											"scope": 1025,
											"src": "979:18:8",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1023,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "979:4:8",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Cap",
									"nameLocation": "901:3:8",
									"nodeType": "StructDefinition",
									"scope": 2127,
									"src": "894:110:8",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "372c12b1",
									"id": 1029,
									"mutability": "mutable",
									"name": "whiteList",
									"nameLocation": "1057:9:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "1025:41:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1028,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1026,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1033:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1025:24:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1027,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1044:4:8",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ccbd73e7",
									"id": 1034,
									"mutability": "mutable",
									"name": "Taxs",
									"nameLocation": "1100:4:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "1072:32:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
										"typeString": "mapping(uint256 => struct Token.Cap)"
									},
									"typeName": {
										"id": 1033,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1030,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "1080:4:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1072:20:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
											"typeString": "mapping(uint256 => struct Token.Cap)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1032,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1031,
												"name": "Cap",
												"nameLocations": [
													"1088:3:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1025,
												"src": "1088:3:8"
											},
											"referencedDeclaration": 1025,
											"src": "1088:3:8",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Cap_$1025_storage_ptr",
												"typeString": "struct Token.Cap"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "57970e93",
									"id": 1037,
									"mutability": "mutable",
									"name": "linkToken",
									"nameLocation": "1125:9:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "1111:23:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$777",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1036,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1035,
											"name": "IERC20",
											"nameLocations": [
												"1111:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 777,
											"src": "1111:6:8"
										},
										"referencedDeclaration": 777,
										"src": "1111:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$777",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "82fab2ad",
									"id": 1040,
									"mutability": "mutable",
									"name": "WBNBToken",
									"nameLocation": "1154:9:8",
									"nodeType": "VariableDeclaration",
									"scope": 2127,
									"src": "1140:23:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$777",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1039,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1038,
											"name": "IERC20",
											"nameLocations": [
												"1140:6:8"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 777,
											"src": "1140:6:8"
										},
										"referencedDeclaration": 777,
										"src": "1140:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$777",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1080,
										"nodeType": "Block",
										"src": "1217:179:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1048,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1233:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1237:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1233:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "313030303030303030303030303030",
																"id": 1050,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1245:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000_by_1",
																	"typeString": "int_const 100000000000000"
																},
																"value": "100000000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1054,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1051,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1263:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1052,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 187,
																		"src": "1269:8:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1269:10:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "1263:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1245:34:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1047,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 516,
														"src": "1227:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1227:53:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1057,
												"nodeType": "ExpressionStatement",
												"src": "1227:53:8"
											},
											{
												"expression": {
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1058,
														"name": "WBNBToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "1290:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$777",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1060,
																"name": "WBNB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1007,
																"src": "1309:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1059,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "1302:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$777_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1302:12:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$777",
															"typeString": "contract IERC20"
														}
													},
													"src": "1290:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$777",
														"typeString": "contract IERC20"
													}
												},
												"id": 1063,
												"nodeType": "ExpressionStatement",
												"src": "1290:24:8"
											},
											{
												"expression": {
													"id": 1069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1064,
														"name": "Wallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 997,
														"src": "1324:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1067,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "1341:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Token_$2127",
																	"typeString": "contract Token"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Token_$2127",
																	"typeString": "contract Token"
																}
															],
															"id": 1066,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1333:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1065,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1333:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1068,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1333:13:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1324:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1070,
												"nodeType": "ExpressionStatement",
												"src": "1324:22:8"
											},
											{
												"expression": {
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1071,
														"name": "linkToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1037,
														"src": "1356:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$777",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1075,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1383:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Token_$2127",
																			"typeString": "contract Token"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Token_$2127",
																			"typeString": "contract Token"
																		}
																	],
																	"id": 1074,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1375:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1073,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1375:7:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1375:13:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1072,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "1368:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$777_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1077,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1368:21:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$777",
															"typeString": "contract IERC20"
														}
													},
													"src": "1356:33:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$777",
														"typeString": "contract IERC20"
													}
												},
												"id": 1079,
												"nodeType": "ExpressionStatement",
												"src": "1356:33:8"
											}
										]
									},
									"id": 1081,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "46726f676769657320546f6b656e",
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1190:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_491b38f96b364b1c3fb601bcd4a274513e15f92ebd6b5e127983386f26166007",
														"typeString": "literal_string \"Froggies Token\""
													},
													"value": "Froggies Token"
												},
												{
													"hexValue": "4652475354",
													"id": 1044,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1208:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_72e955e581cd61371efe6410f360adecbfe1f0c5b971fd9c9e1fa2b4d9feb64d",
														"typeString": "literal_string \"FRGST\""
													},
													"value": "FRGST"
												}
											],
											"id": 1045,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1042,
												"name": "ERC20",
												"nameLocations": [
													"1184:5:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 699,
												"src": "1184:5:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1184:32:8"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1181:2:8"
									},
									"returnParameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1217:0:8"
									},
									"scope": 2127,
									"src": "1170:226:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "1611:43:8",
										"statements": [
											{
												"expression": {
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1086,
															"name": "whiteList",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1029,
															"src": "1621:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1088,
														"indexExpression": {
															"id": 1087,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "1631:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1621:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1089,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1643:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1621:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1091,
												"nodeType": "ExpressionStatement",
												"src": "1621:26:8"
											}
										]
									},
									"functionSelector": "6bc20157",
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "WhiteList",
									"nameLocation": "1576:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "1594:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "1586:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1082,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1586:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:18:8"
									},
									"returnParameters": {
										"id": 1085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1611:0:8"
									},
									"scope": 2127,
									"src": "1567:87:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1140,
										"nodeType": "Block",
										"src": "1946:599:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1107,
																	"name": "swapRouter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1016,
																	"src": "1982:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ISwapRouter_$982",
																		"typeString": "contract ISwapRouter"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ISwapRouter_$982",
																		"typeString": "contract ISwapRouter"
																	}
																],
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1974:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1105,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1974:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1974:19:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1109,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1095,
															"src": "1995:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1102,
															"name": "linkToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1037,
															"src": "1956:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$777",
																"typeString": "contract IERC20"
															}
														},
														"id": 1104,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1966:7:8",
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 764,
														"src": "1956:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1956:48:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1111,
												"nodeType": "ExpressionStatement",
												"src": "1956:48:8"
											},
											{
												"assignments": [
													1116
												],
												"declarations": [
													{
														"constant": false,
														"id": 1116,
														"mutability": "mutable",
														"name": "params",
														"nameLocation": "2107:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1140,
														"src": "2065:48:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_memory_ptr",
															"typeString": "struct ISwapRouter.ExactInputSingleParams"
														},
														"typeName": {
															"id": 1115,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1114,
																"name": "ISwapRouter.ExactInputSingleParams",
																"nameLocations": [
																	"2065:11:8",
																	"2077:22:8"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 906,
																"src": "2065:34:8"
															},
															"referencedDeclaration": 906,
															"src": "2065:34:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_storage_ptr",
																"typeString": "struct ISwapRouter.ExactInputSingleParams"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1132,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1121,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2199:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Token_$2127",
																		"typeString": "contract Token"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Token_$2127",
																		"typeString": "contract Token"
																	}
																],
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2191:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1119,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2191:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2191:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1123,
															"name": "WBNB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "2232:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1124,
															"name": "poolFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "2259:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															}
														},
														{
															"id": 1125,
															"name": "recipientAddresss",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1097,
															"src": "2295:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1126,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "2340:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2346:9:8",
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "2340:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1128,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1095,
															"src": "2383:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "30",
															"id": 1129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2427:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2465:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"expression": {
															"id": 1117,
															"name": "ISwapRouter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 982,
															"src": "2116:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ISwapRouter_$982_$",
																"typeString": "type(contract ISwapRouter)"
															}
														},
														"id": 1118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2141:22:8",
														"memberName": "ExactInputSingleParams",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 906,
														"src": "2116:47:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_ExactInputSingleParams_$906_storage_ptr_$",
															"typeString": "type(struct ISwapRouter.ExactInputSingleParams storage pointer)"
														}
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [
														"2182:7:8",
														"2222:8:8",
														"2254:3:8",
														"2284:9:8",
														"2330:8:8",
														"2373:8:8",
														"2409:16:8",
														"2446:17:8"
													],
													"names": [
														"tokenIn",
														"tokenOut",
														"fee",
														"recipient",
														"deadline",
														"amountIn",
														"amountOutMinimum",
														"sqrtPriceLimitX96"
													],
													"nodeType": "FunctionCall",
													"src": "2116:365:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_memory_ptr",
														"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2065:416:8"
											},
											{
												"expression": {
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1133,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "2491:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1136,
																"name": "params",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1116,
																"src": "2531:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_memory_ptr",
																	"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_ExactInputSingleParams_$906_memory_ptr",
																	"typeString": "struct ISwapRouter.ExactInputSingleParams memory"
																}
															],
															"expression": {
																"id": 1134,
																"name": "swapRouter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1016,
																"src": "2503:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ISwapRouter_$982",
																	"typeString": "contract ISwapRouter"
																}
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2514:16:8",
															"memberName": "exactInputSingle",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 915,
															"src": "2503:27:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_payable$_t_struct$_ExactInputSingleParams_$906_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"
															}
														},
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2503:35:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2491:47:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1139,
												"nodeType": "ExpressionStatement",
												"src": "2491:47:8"
											}
										]
									},
									"functionSelector": "793ea8d1",
									"id": 1141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "swapExactInputSingle",
									"nameLocation": "1842:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "1871:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "1863:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1863:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "recipientAddresss",
												"nameLocation": "1888:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "1880:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1880:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1862:44:8"
									},
									"returnParameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "1931:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "1923:17:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1099,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1923:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1922:19:8"
									},
									"scope": 2127,
									"src": "1833:712:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										236
									],
									"body": {
										"id": 1763,
										"nodeType": "Block",
										"src": "2800:4036:8",
										"statements": [
											{
												"condition": {
													"baseExpression": {
														"id": 1151,
														"name": "whiteList",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "2813:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 1154,
													"indexExpression": {
														"expression": {
															"id": 1152,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2823:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2827:6:8",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2823:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2813:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1761,
													"nodeType": "Block",
													"src": "2905:3923:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1162,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2922:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2926:6:8",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2922:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1164,
																	"name": "PancakeSwap",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1001,
																	"src": "2936:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2922:25:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 1460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1458,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1143,
																		"src": "4830:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 1459,
																		"name": "PancakeSwap",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1001,
																		"src": "4836:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "4830:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"id": 1758,
																	"nodeType": "Block",
																	"src": "6752:66:8",
																	"statements": [
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1754,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1143,
																						"src": "6792:2:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"id": 1755,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1145,
																						"src": "6796:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 1752,
																						"name": "super",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967271,
																						"src": "6777:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																							"typeString": "type(contract super Token)"
																						}
																					},
																					"id": 1753,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6783:8:8",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 236,
																					"src": "6777:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) returns (bool)"
																					}
																				},
																				"id": 1756,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6777:26:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"functionReturnParameters": 1150,
																			"id": 1757,
																			"nodeType": "Return",
																			"src": "6770:33:8"
																		}
																	]
																},
																"id": 1759,
																"nodeType": "IfStatement",
																"src": "4827:1991:8",
																"trueBody": {
																	"id": 1751,
																	"nodeType": "Block",
																	"src": "4861:1874:8",
																	"statements": [
																		{
																			"assignments": [
																				1462
																			],
																			"declarations": [
																				{
																					"constant": false,
																					"id": 1462,
																					"mutability": "mutable",
																					"name": "ReflectionAmount",
																					"nameLocation": "4884:16:8",
																					"nodeType": "VariableDeclaration",
																					"scope": 1751,
																					"src": "4879:21:8",
																					"stateVariable": false,
																					"storageLocation": "default",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"typeName": {
																						"id": 1461,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "4879:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"visibility": "internal"
																				}
																			],
																			"id": 1473,
																			"initialValue": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1471,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1468,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1463,
																										"name": "amount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1145,
																										"src": "4905:6:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 1464,
																												"name": "Taxs",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1034,
																												"src": "4912:4:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																													"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																												}
																											},
																											"id": 1466,
																											"indexExpression": {
																												"hexValue": "31",
																												"id": 1465,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "4917:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_1_by_1",
																													"typeString": "int_const 1"
																												},
																												"value": "1"
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "4912:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Cap_$1025_storage",
																												"typeString": "struct Token.Cap storage ref"
																											}
																										},
																										"id": 1467,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "4920:7:8",
																										"memberName": "SellTax",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1018,
																										"src": "4912:15:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "4905:22:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1469,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4904:24:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1470,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4929:3:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "4904:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1472,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4903:30:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "VariableDeclarationStatement",
																			"src": "4879:54:8"
																		},
																		{
																			"assignments": [
																				1475
																			],
																			"declarations": [
																				{
																					"constant": false,
																					"id": 1475,
																					"mutability": "mutable",
																					"name": "LPAmount",
																					"nameLocation": "4956:8:8",
																					"nodeType": "VariableDeclaration",
																					"scope": 1751,
																					"src": "4951:13:8",
																					"stateVariable": false,
																					"storageLocation": "default",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"typeName": {
																						"id": 1474,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "4951:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"visibility": "internal"
																				}
																			],
																			"id": 1486,
																			"initialValue": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1484,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1481,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1476,
																										"name": "amount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1145,
																										"src": "4969:6:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 1477,
																												"name": "Taxs",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1034,
																												"src": "4976:4:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																													"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																												}
																											},
																											"id": 1479,
																											"indexExpression": {
																												"hexValue": "32",
																												"id": 1478,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "4981:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_2_by_1",
																													"typeString": "int_const 2"
																												},
																												"value": "2"
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "4976:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Cap_$1025_storage",
																												"typeString": "struct Token.Cap storage ref"
																											}
																										},
																										"id": 1480,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "4984:7:8",
																										"memberName": "SellTax",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1018,
																										"src": "4976:15:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "4969:22:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1482,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "4968:24:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1483,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4993:3:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "4968:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1485,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4967:30:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "VariableDeclarationStatement",
																			"src": "4951:46:8"
																		},
																		{
																			"assignments": [
																				1488
																			],
																			"declarations": [
																				{
																					"constant": false,
																					"id": 1488,
																					"mutability": "mutable",
																					"name": "InvestmentAmount",
																					"nameLocation": "5020:16:8",
																					"nodeType": "VariableDeclaration",
																					"scope": 1751,
																					"src": "5015:21:8",
																					"stateVariable": false,
																					"storageLocation": "default",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"typeName": {
																						"id": 1487,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "5015:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"visibility": "internal"
																				}
																			],
																			"id": 1499,
																			"initialValue": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1494,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1489,
																										"name": "amount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1145,
																										"src": "5041:6:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 1490,
																												"name": "Taxs",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1034,
																												"src": "5048:4:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																													"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																												}
																											},
																											"id": 1492,
																											"indexExpression": {
																												"hexValue": "33",
																												"id": 1491,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "5053:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_3_by_1",
																													"typeString": "int_const 3"
																												},
																												"value": "3"
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "5048:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Cap_$1025_storage",
																												"typeString": "struct Token.Cap storage ref"
																											}
																										},
																										"id": 1493,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "5056:7:8",
																										"memberName": "SellTax",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1018,
																										"src": "5048:15:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "5041:22:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1495,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "5040:24:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1496,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "5065:3:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "5040:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5039:30:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "VariableDeclarationStatement",
																			"src": "5015:54:8"
																		},
																		{
																			"assignments": [
																				1501
																			],
																			"declarations": [
																				{
																					"constant": false,
																					"id": 1501,
																					"mutability": "mutable",
																					"name": "MarkettingAmount",
																					"nameLocation": "5092:16:8",
																					"nodeType": "VariableDeclaration",
																					"scope": 1751,
																					"src": "5087:21:8",
																					"stateVariable": false,
																					"storageLocation": "default",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"typeName": {
																						"id": 1500,
																						"name": "uint",
																						"nodeType": "ElementaryTypeName",
																						"src": "5087:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"visibility": "internal"
																				}
																			],
																			"id": 1512,
																			"initialValue": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1510,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1507,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1502,
																										"name": "amount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1145,
																										"src": "5113:6:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "*",
																									"rightExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 1503,
																												"name": "Taxs",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1034,
																												"src": "5120:4:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																													"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																												}
																											},
																											"id": 1505,
																											"indexExpression": {
																												"hexValue": "34",
																												"id": 1504,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "5125:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_4_by_1",
																													"typeString": "int_const 4"
																												},
																												"value": "4"
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "5120:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Cap_$1025_storage",
																												"typeString": "struct Token.Cap storage ref"
																											}
																										},
																										"id": 1506,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "5128:7:8",
																										"memberName": "SellTax",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1018,
																										"src": "5120:15:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "5113:22:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1508,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "5112:24:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "/",
																						"rightExpression": {
																							"hexValue": "313030",
																							"id": 1509,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "5137:3:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_100_by_1",
																								"typeString": "int_const 100"
																							},
																							"value": "100"
																						},
																						"src": "5112:28:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1511,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5111:30:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "VariableDeclarationStatement",
																			"src": "5087:54:8"
																		},
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"id": 1533,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1524,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1518,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1513,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "5164:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1515,
																												"indexExpression": {
																													"hexValue": "32",
																													"id": 1514,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "5169:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_2_by_1",
																														"typeString": "int_const 2"
																													},
																													"value": "2"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5164:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1516,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "5172:13:8",
																											"memberName": "currentAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1024,
																											"src": "5164:21:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1517,
																											"name": "LPAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1475,
																											"src": "5188:8:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "5164:32:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1519,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "5163:34:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": ">=",
																							"rightExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1520,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5201:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1522,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1521,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5206:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5201:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1523,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "5209:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "5201:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5163:53:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						}
																					],
																					"id": 1525,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "5162:55:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "&&",
																				"rightExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1531,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1526,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5222:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1528,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1527,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5227:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5222:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1529,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "5230:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "5222:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "!=",
																							"rightExpression": {
																								"hexValue": "30",
																								"id": 1530,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "5241:1:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								},
																								"value": "0"
																							},
																							"src": "5222:20:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						}
																					],
																					"id": 1532,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "5221:22:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"src": "5162:81:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseBody": {
																				"id": 1584,
																				"nodeType": "Block",
																				"src": "5511:74:8",
																				"statements": [
																					{
																						"expression": {
																							"id": 1582,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"expression": {
																									"baseExpression": {
																										"id": 1577,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5533:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1579,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1578,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5538:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5533:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1580,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": true,
																								"memberLocation": "5541:13:8",
																								"memberName": "currentAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1024,
																								"src": "5533:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "+=",
																							"rightHandSide": {
																								"id": 1581,
																								"name": "LPAmount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1475,
																								"src": "5558:8:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5533:33:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1583,
																						"nodeType": "ExpressionStatement",
																						"src": "5533:33:8"
																					}
																				]
																			},
																			"id": 1585,
																			"nodeType": "IfStatement",
																			"src": "5159:426:8",
																			"trueBody": {
																				"id": 1576,
																				"nodeType": "Block",
																				"src": "5245:262:8",
																				"statements": [
																					{
																						"expression": {
																							"arguments": [
																								{
																									"id": 1537,
																									"name": "PancakeSwap",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1001,
																									"src": "5282:11:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								{
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1543,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1538,
																														"name": "Taxs",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1034,
																														"src": "5295:4:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																															"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																														}
																													},
																													"id": 1540,
																													"indexExpression": {
																														"hexValue": "32",
																														"id": 1539,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": true,
																														"kind": "number",
																														"lValueRequested": false,
																														"nodeType": "Literal",
																														"src": "5300:1:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_rational_2_by_1",
																															"typeString": "int_const 2"
																														},
																														"value": "2"
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "5295:7:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Cap_$1025_storage",
																														"typeString": "struct Token.Cap storage ref"
																													}
																												},
																												"id": 1541,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "5303:7:8",
																												"memberName": "XAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1022,
																												"src": "5295:15:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "/",
																											"rightExpression": {
																												"hexValue": "32",
																												"id": 1542,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "5311:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_2_by_1",
																													"typeString": "int_const 2"
																												},
																												"value": "2"
																											},
																											"src": "5295:17:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1544,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5294:19:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									},
																									{
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								],
																								"expression": {
																									"id": 1534,
																									"name": "super",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 4294967271,
																									"src": "5267:5:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																										"typeString": "type(contract super Token)"
																									}
																								},
																								"id": 1536,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "5273:8:8",
																								"memberName": "transfer",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 236,
																								"src": "5267:14:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																									"typeString": "function (address,uint256) returns (bool)"
																								}
																							},
																							"id": 1545,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "5267:47:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						},
																						"id": 1546,
																						"nodeType": "ExpressionStatement",
																						"src": "5267:47:8"
																					},
																					{
																						"expression": {
																							"arguments": [
																								{
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1553,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1548,
																														"name": "Taxs",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1034,
																														"src": "5358:4:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																															"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																														}
																													},
																													"id": 1550,
																													"indexExpression": {
																														"hexValue": "32",
																														"id": 1549,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": true,
																														"kind": "number",
																														"lValueRequested": false,
																														"nodeType": "Literal",
																														"src": "5363:1:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_rational_2_by_1",
																															"typeString": "int_const 2"
																														},
																														"value": "2"
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "5358:7:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Cap_$1025_storage",
																														"typeString": "struct Token.Cap storage ref"
																													}
																												},
																												"id": 1551,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "5366:7:8",
																												"memberName": "XAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1022,
																												"src": "5358:15:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "/",
																											"rightExpression": {
																												"hexValue": "32",
																												"id": 1552,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "5374:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_2_by_1",
																													"typeString": "int_const 2"
																												},
																												"value": "2"
																											},
																											"src": "5358:17:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1554,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5357:19:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								{
																									"id": 1555,
																									"name": "PancakeSwap",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1001,
																									"src": "5377:11:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1547,
																								"name": "swapExactInputSingle",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1141,
																								"src": "5336:20:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																									"typeString": "function (uint256,address) returns (uint256)"
																								}
																							},
																							"id": 1556,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "5336:53:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1557,
																						"nodeType": "ExpressionStatement",
																						"src": "5336:53:8"
																					},
																					{
																						"expression": {
																							"id": 1574,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"expression": {
																									"baseExpression": {
																										"id": 1558,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5411:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1560,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1559,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5416:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5411:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1561,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": true,
																								"memberLocation": "5419:13:8",
																								"memberName": "currentAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1024,
																								"src": "5411:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "=",
																							"rightHandSide": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1573,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1567,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1562,
																														"name": "Taxs",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1034,
																														"src": "5436:4:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																															"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																														}
																													},
																													"id": 1564,
																													"indexExpression": {
																														"hexValue": "32",
																														"id": 1563,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": true,
																														"kind": "number",
																														"lValueRequested": false,
																														"nodeType": "Literal",
																														"src": "5441:1:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_rational_2_by_1",
																															"typeString": "int_const 2"
																														},
																														"value": "2"
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "5436:7:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Cap_$1025_storage",
																														"typeString": "struct Token.Cap storage ref"
																													}
																												},
																												"id": 1565,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "5444:13:8",
																												"memberName": "currentAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1024,
																												"src": "5436:21:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "+",
																											"rightExpression": {
																												"id": 1566,
																												"name": "LPAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1475,
																												"src": "5460:8:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "5436:32:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1568,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5435:34:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1569,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "5473:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1571,
																										"indexExpression": {
																											"hexValue": "32",
																											"id": 1570,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "5478:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_2_by_1",
																												"typeString": "int_const 2"
																											},
																											"value": "2"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "5473:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1572,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "5481:7:8",
																									"memberName": "XAmount",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1022,
																									"src": "5473:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "5435:53:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5411:77:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1575,
																						"nodeType": "ExpressionStatement",
																						"src": "5411:77:8"
																					}
																				]
																			}
																		},
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"id": 1606,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1597,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1591,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1586,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "5607:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1588,
																												"indexExpression": {
																													"hexValue": "33",
																													"id": 1587,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "5612:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_3_by_1",
																														"typeString": "int_const 3"
																													},
																													"value": "3"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "5607:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1589,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "5615:13:8",
																											"memberName": "currentAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1024,
																											"src": "5607:21:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1590,
																											"name": "InvestmentAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1488,
																											"src": "5631:16:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "5607:40:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1592,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "5606:42:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": ">=",
																							"rightExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1593,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5652:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1595,
																									"indexExpression": {
																										"hexValue": "33",
																										"id": 1594,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5657:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_3_by_1",
																											"typeString": "int_const 3"
																										},
																										"value": "3"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5652:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1596,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "5660:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "5652:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5606:61:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						}
																					],
																					"id": 1598,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "5605:63:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "&&",
																				"rightExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1604,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1599,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5673:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1601,
																									"indexExpression": {
																										"hexValue": "33",
																										"id": 1600,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5678:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_3_by_1",
																											"typeString": "int_const 3"
																										},
																										"value": "3"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5673:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1602,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "5681:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "5673:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "!=",
																							"rightExpression": {
																								"hexValue": "30",
																								"id": 1603,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "5692:1:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								},
																								"value": "0"
																							},
																							"src": "5673:20:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						}
																					],
																					"id": 1605,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "5672:22:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"src": "5605:89:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseBody": {
																				"id": 1644,
																				"nodeType": "Block",
																				"src": "5899:82:8",
																				"statements": [
																					{
																						"expression": {
																							"id": 1642,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"expression": {
																									"baseExpression": {
																										"id": 1637,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5921:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1639,
																									"indexExpression": {
																										"hexValue": "33",
																										"id": 1638,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5926:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_3_by_1",
																											"typeString": "int_const 3"
																										},
																										"value": "3"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5921:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1640,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": true,
																								"memberLocation": "5929:13:8",
																								"memberName": "currentAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1024,
																								"src": "5921:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "+=",
																							"rightHandSide": {
																								"id": 1641,
																								"name": "InvestmentAmount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1488,
																								"src": "5946:16:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5921:41:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1643,
																						"nodeType": "ExpressionStatement",
																						"src": "5921:41:8"
																					}
																				]
																			},
																			"id": 1645,
																			"nodeType": "IfStatement",
																			"src": "5602:379:8",
																			"trueBody": {
																				"id": 1636,
																				"nodeType": "Block",
																				"src": "5696:199:8",
																				"statements": [
																					{
																						"expression": {
																							"arguments": [
																								{
																									"expression": {
																										"baseExpression": {
																											"id": 1608,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "5739:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1610,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1609,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "5744:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "5739:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1611,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "5747:7:8",
																									"memberName": "XAmount",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1022,
																									"src": "5739:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								{
																									"arguments": [
																										{
																											"id": 1614,
																											"name": "this",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4294967268,
																											"src": "5763:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_contract$_Token_$2127",
																												"typeString": "contract Token"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_contract$_Token_$2127",
																												"typeString": "contract Token"
																											}
																										],
																										"id": 1613,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "5755:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_address_$",
																											"typeString": "type(address)"
																										},
																										"typeName": {
																											"id": 1612,
																											"name": "address",
																											"nodeType": "ElementaryTypeName",
																											"src": "5755:7:8",
																											"typeDescriptions": {}
																										}
																									},
																									"id": 1615,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "typeConversion",
																									"lValueRequested": false,
																									"nameLocations": [],
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "5755:13:8",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1607,
																								"name": "swapExactInputSingle",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1141,
																								"src": "5718:20:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																									"typeString": "function (uint256,address) returns (uint256)"
																								}
																							},
																							"id": 1616,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "5718:51:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1617,
																						"nodeType": "ExpressionStatement",
																						"src": "5718:51:8"
																					},
																					{
																						"expression": {
																							"id": 1634,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"expression": {
																									"baseExpression": {
																										"id": 1618,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "5791:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1620,
																									"indexExpression": {
																										"hexValue": "33",
																										"id": 1619,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "5796:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_3_by_1",
																											"typeString": "int_const 3"
																										},
																										"value": "3"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "5791:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1621,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": true,
																								"memberLocation": "5799:13:8",
																								"memberName": "currentAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1024,
																								"src": "5791:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "=",
																							"rightHandSide": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1633,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1627,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1622,
																														"name": "Taxs",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1034,
																														"src": "5816:4:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																															"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																														}
																													},
																													"id": 1624,
																													"indexExpression": {
																														"hexValue": "33",
																														"id": 1623,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": true,
																														"kind": "number",
																														"lValueRequested": false,
																														"nodeType": "Literal",
																														"src": "5821:1:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_rational_3_by_1",
																															"typeString": "int_const 3"
																														},
																														"value": "3"
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "5816:7:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Cap_$1025_storage",
																														"typeString": "struct Token.Cap storage ref"
																													}
																												},
																												"id": 1625,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "5824:13:8",
																												"memberName": "currentAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1024,
																												"src": "5816:21:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "+",
																											"rightExpression": {
																												"id": 1626,
																												"name": "InvestmentAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1488,
																												"src": "5840:16:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "5816:40:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1628,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "5815:42:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1629,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "5861:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1631,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1630,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "5866:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "5861:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1632,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "5869:7:8",
																									"memberName": "XAmount",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1022,
																									"src": "5861:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "5815:61:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "5791:85:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1635,
																						"nodeType": "ExpressionStatement",
																						"src": "5791:85:8"
																					}
																				]
																			}
																		},
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"id": 1668,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"id": 1660,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1657,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1651,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1646,
																														"name": "Taxs",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1034,
																														"src": "6003:4:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																															"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																														}
																													},
																													"id": 1648,
																													"indexExpression": {
																														"hexValue": "34",
																														"id": 1647,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": true,
																														"kind": "number",
																														"lValueRequested": false,
																														"nodeType": "Literal",
																														"src": "6008:1:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_rational_4_by_1",
																															"typeString": "int_const 4"
																														},
																														"value": "4"
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6003:7:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Cap_$1025_storage",
																														"typeString": "struct Token.Cap storage ref"
																													}
																												},
																												"id": 1649,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "6011:13:8",
																												"memberName": "currentAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1024,
																												"src": "6003:21:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "+",
																											"rightExpression": {
																												"id": 1650,
																												"name": "MarkettingAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1501,
																												"src": "6027:16:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "6003:40:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1652,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "6002:42:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": ">=",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1653,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "6048:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1655,
																										"indexExpression": {
																											"hexValue": "34",
																											"id": 1654,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "6053:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_4_by_1",
																												"typeString": "int_const 4"
																											},
																											"value": "4"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "6048:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1656,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "6056:7:8",
																									"memberName": "XAmount",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1022,
																									"src": "6048:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "6002:61:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_bool",
																									"typeString": "bool"
																								}
																							}
																						],
																						"id": 1658,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "6001:63:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "&&",
																					"rightExpression": {
																						"id": 1659,
																						"name": "isSwap",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 999,
																						"src": "6068:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"src": "6001:73:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "&&",
																				"rightExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1666,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1661,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "6079:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1663,
																									"indexExpression": {
																										"hexValue": "34",
																										"id": 1662,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6084:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_4_by_1",
																											"typeString": "int_const 4"
																										},
																										"value": "4"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "6079:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1664,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "6087:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "6079:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "!=",
																							"rightExpression": {
																								"hexValue": "30",
																								"id": 1665,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "6098:1:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_0_by_1",
																									"typeString": "int_const 0"
																								},
																								"value": "0"
																							},
																							"src": "6079:20:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						}
																					],
																					"id": 1667,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "6078:22:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"src": "6001:99:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseBody": {
																				"id": 1706,
																				"nodeType": "Block",
																				"src": "6305:82:8",
																				"statements": [
																					{
																						"expression": {
																							"id": 1704,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"expression": {
																									"baseExpression": {
																										"id": 1699,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "6327:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1701,
																									"indexExpression": {
																										"hexValue": "34",
																										"id": 1700,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6332:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_4_by_1",
																											"typeString": "int_const 4"
																										},
																										"value": "4"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "6327:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1702,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": true,
																								"memberLocation": "6335:13:8",
																								"memberName": "currentAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1024,
																								"src": "6327:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "+=",
																							"rightHandSide": {
																								"id": 1703,
																								"name": "MarkettingAmount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1501,
																								"src": "6352:16:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "6327:41:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1705,
																						"nodeType": "ExpressionStatement",
																						"src": "6327:41:8"
																					}
																				]
																			},
																			"id": 1707,
																			"nodeType": "IfStatement",
																			"src": "5998:389:8",
																			"trueBody": {
																				"id": 1698,
																				"nodeType": "Block",
																				"src": "6102:199:8",
																				"statements": [
																					{
																						"expression": {
																							"arguments": [
																								{
																									"expression": {
																										"baseExpression": {
																											"id": 1670,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "6145:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1672,
																										"indexExpression": {
																											"hexValue": "34",
																											"id": 1671,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "6150:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_4_by_1",
																												"typeString": "int_const 4"
																											},
																											"value": "4"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "6145:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1673,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "6153:7:8",
																									"memberName": "XAmount",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1022,
																									"src": "6145:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								{
																									"arguments": [
																										{
																											"id": 1676,
																											"name": "this",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 4294967268,
																											"src": "6169:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_contract$_Token_$2127",
																												"typeString": "contract Token"
																											}
																										}
																									],
																									"expression": {
																										"argumentTypes": [
																											{
																												"typeIdentifier": "t_contract$_Token_$2127",
																												"typeString": "contract Token"
																											}
																										],
																										"id": 1675,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"lValueRequested": false,
																										"nodeType": "ElementaryTypeNameExpression",
																										"src": "6161:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_type$_t_address_$",
																											"typeString": "type(address)"
																										},
																										"typeName": {
																											"id": 1674,
																											"name": "address",
																											"nodeType": "ElementaryTypeName",
																											"src": "6161:7:8",
																											"typeDescriptions": {}
																										}
																									},
																									"id": 1677,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"kind": "typeConversion",
																									"lValueRequested": false,
																									"nameLocations": [],
																									"names": [],
																									"nodeType": "FunctionCall",
																									"src": "6161:13:8",
																									"tryCall": false,
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								}
																							],
																							"expression": {
																								"argumentTypes": [
																									{
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									{
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								],
																								"id": 1669,
																								"name": "swapExactInputSingle",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1141,
																								"src": "6124:20:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																									"typeString": "function (uint256,address) returns (uint256)"
																								}
																							},
																							"id": 1678,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"kind": "functionCall",
																							"lValueRequested": false,
																							"nameLocations": [],
																							"names": [],
																							"nodeType": "FunctionCall",
																							"src": "6124:51:8",
																							"tryCall": false,
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1679,
																						"nodeType": "ExpressionStatement",
																						"src": "6124:51:8"
																					},
																					{
																						"expression": {
																							"id": 1696,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"expression": {
																									"baseExpression": {
																										"id": 1680,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "6197:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1682,
																									"indexExpression": {
																										"hexValue": "34",
																										"id": 1681,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "6202:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_4_by_1",
																											"typeString": "int_const 4"
																										},
																										"value": "4"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "6197:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1683,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": true,
																								"memberLocation": "6205:13:8",
																								"memberName": "currentAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1024,
																								"src": "6197:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "=",
																							"rightHandSide": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1695,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"components": [
																										{
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1689,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"expression": {
																													"baseExpression": {
																														"id": 1684,
																														"name": "Taxs",
																														"nodeType": "Identifier",
																														"overloadedDeclarations": [],
																														"referencedDeclaration": 1034,
																														"src": "6222:4:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																															"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																														}
																													},
																													"id": 1686,
																													"indexExpression": {
																														"hexValue": "34",
																														"id": 1685,
																														"isConstant": false,
																														"isLValue": false,
																														"isPure": true,
																														"kind": "number",
																														"lValueRequested": false,
																														"nodeType": "Literal",
																														"src": "6227:1:8",
																														"typeDescriptions": {
																															"typeIdentifier": "t_rational_4_by_1",
																															"typeString": "int_const 4"
																														},
																														"value": "4"
																													},
																													"isConstant": false,
																													"isLValue": true,
																													"isPure": false,
																													"lValueRequested": false,
																													"nodeType": "IndexAccess",
																													"src": "6222:7:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_struct$_Cap_$1025_storage",
																														"typeString": "struct Token.Cap storage ref"
																													}
																												},
																												"id": 1687,
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"memberLocation": "6230:13:8",
																												"memberName": "currentAmount",
																												"nodeType": "MemberAccess",
																												"referencedDeclaration": 1024,
																												"src": "6222:21:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "+",
																											"rightExpression": {
																												"id": 1688,
																												"name": "MarkettingAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1501,
																												"src": "6246:16:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "6222:40:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										}
																									],
																									"id": 1690,
																									"isConstant": false,
																									"isInlineArray": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "TupleExpression",
																									"src": "6221:42:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "-",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1691,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "6267:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1693,
																										"indexExpression": {
																											"hexValue": "34",
																											"id": 1692,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "6272:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_4_by_1",
																												"typeString": "int_const 4"
																											},
																											"value": "4"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "6267:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1694,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "6275:7:8",
																									"memberName": "XAmount",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1022,
																									"src": "6267:15:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "6221:61:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "6197:85:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 1697,
																						"nodeType": "ExpressionStatement",
																						"src": "6197:85:8"
																					}
																				]
																			}
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1711,
																						"name": "Wallet",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 997,
																						"src": "6421:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"id": 1712,
																						"name": "ReflectionAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1462,
																						"src": "6428:16:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 1708,
																						"name": "super",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967271,
																						"src": "6406:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																							"typeString": "type(contract super Token)"
																						}
																					},
																					"id": 1710,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6412:8:8",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 236,
																					"src": "6406:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) returns (bool)"
																					}
																				},
																				"id": 1713,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6406:39:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1714,
																			"nodeType": "ExpressionStatement",
																			"src": "6406:39:8"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1718,
																						"name": "Wallet",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 997,
																						"src": "6478:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"id": 1719,
																						"name": "LPAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1475,
																						"src": "6485:8:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 1715,
																						"name": "super",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967271,
																						"src": "6463:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																							"typeString": "type(contract super Token)"
																						}
																					},
																					"id": 1717,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6469:8:8",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 236,
																					"src": "6463:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) returns (bool)"
																					}
																				},
																				"id": 1720,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6463:31:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1721,
																			"nodeType": "ExpressionStatement",
																			"src": "6463:31:8"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1725,
																						"name": "Wallet",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 997,
																						"src": "6527:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"id": 1726,
																						"name": "InvestmentAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1488,
																						"src": "6534:16:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 1722,
																						"name": "super",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967271,
																						"src": "6512:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																							"typeString": "type(contract super Token)"
																						}
																					},
																					"id": 1724,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6518:8:8",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 236,
																					"src": "6512:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) returns (bool)"
																					}
																				},
																				"id": 1727,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6512:39:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1728,
																			"nodeType": "ExpressionStatement",
																			"src": "6512:39:8"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1732,
																						"name": "Wallet",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 997,
																						"src": "6584:6:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"id": 1733,
																						"name": "MarkettingAmount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1501,
																						"src": "6591:16:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 1729,
																						"name": "super",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967271,
																						"src": "6569:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																							"typeString": "type(contract super Token)"
																						}
																					},
																					"id": 1731,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6575:8:8",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 236,
																					"src": "6569:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) returns (bool)"
																					}
																				},
																				"id": 1734,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6569:39:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"id": 1735,
																			"nodeType": "ExpressionStatement",
																			"src": "6569:39:8"
																		},
																		{
																			"expression": {
																				"arguments": [
																					{
																						"id": 1738,
																						"name": "to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1143,
																						"src": "6648:2:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1748,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 1739,
																							"name": "amount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1145,
																							"src": "6651:6:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1746,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1744,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1742,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"id": 1740,
																												"name": "ReflectionAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1462,
																												"src": "6659:16:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "+",
																											"rightExpression": {
																												"id": 1741,
																												"name": "LPAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1475,
																												"src": "6676:8:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "6659:25:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1743,
																											"name": "InvestmentAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1488,
																											"src": "6685:16:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "6659:42:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "+",
																									"rightExpression": {
																										"id": 1745,
																										"name": "MarkettingAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1501,
																										"src": "6702:16:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "6659:59:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1747,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "6658:61:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "6651:68:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						},
																						{
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					],
																					"expression": {
																						"id": 1736,
																						"name": "super",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967271,
																						"src": "6633:5:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																							"typeString": "type(contract super Token)"
																						}
																					},
																					"id": 1737,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "6639:8:8",
																					"memberName": "transfer",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 236,
																					"src": "6633:14:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) returns (bool)"
																					}
																				},
																				"id": 1749,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "6633:87:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"functionReturnParameters": 1150,
																			"id": 1750,
																			"nodeType": "Return",
																			"src": "6626:94:8"
																		}
																	]
																}
															},
															"id": 1760,
															"nodeType": "IfStatement",
															"src": "2919:3899:8",
															"trueBody": {
																"id": 1457,
																"nodeType": "Block",
																"src": "2948:1874:8",
																"statements": [
																	{
																		"assignments": [
																			1167
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1167,
																				"mutability": "mutable",
																				"name": "ReflectionAmount",
																				"nameLocation": "2971:16:8",
																				"nodeType": "VariableDeclaration",
																				"scope": 1457,
																				"src": "2966:21:8",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 1166,
																					"name": "uint",
																					"nodeType": "ElementaryTypeName",
																					"src": "2966:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1178,
																		"initialValue": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1176,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1173,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1168,
																									"name": "amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1145,
																									"src": "2992:6:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1169,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "2999:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1171,
																										"indexExpression": {
																											"hexValue": "31",
																											"id": 1170,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3004:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_1_by_1",
																												"typeString": "int_const 1"
																											},
																											"value": "1"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "2999:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1172,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "3007:6:8",
																									"memberName": "BuyTax",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1020,
																									"src": "2999:14:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "2992:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1174,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2991:23:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1175,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3015:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "2991:27:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1177,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2990:29:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "2966:53:8"
																	},
																	{
																		"assignments": [
																			1180
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1180,
																				"mutability": "mutable",
																				"name": "LPAmount",
																				"nameLocation": "3042:8:8",
																				"nodeType": "VariableDeclaration",
																				"scope": 1457,
																				"src": "3037:13:8",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 1179,
																					"name": "uint",
																					"nodeType": "ElementaryTypeName",
																					"src": "3037:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1191,
																		"initialValue": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1189,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1186,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1181,
																									"name": "amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1145,
																									"src": "3055:6:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1182,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "3062:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1184,
																										"indexExpression": {
																											"hexValue": "32",
																											"id": 1183,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3067:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_2_by_1",
																												"typeString": "int_const 2"
																											},
																											"value": "2"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "3062:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1185,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "3070:6:8",
																									"memberName": "BuyTax",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1020,
																									"src": "3062:14:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "3055:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1187,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3054:23:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1188,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3078:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "3054:27:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1190,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3053:29:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3037:45:8"
																	},
																	{
																		"assignments": [
																			1193
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1193,
																				"mutability": "mutable",
																				"name": "InvestmentAmount",
																				"nameLocation": "3105:16:8",
																				"nodeType": "VariableDeclaration",
																				"scope": 1457,
																				"src": "3100:21:8",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 1192,
																					"name": "uint",
																					"nodeType": "ElementaryTypeName",
																					"src": "3100:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1204,
																		"initialValue": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1202,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1199,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1194,
																									"name": "amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1145,
																									"src": "3126:6:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1195,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "3133:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1197,
																										"indexExpression": {
																											"hexValue": "33",
																											"id": 1196,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3138:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_3_by_1",
																												"typeString": "int_const 3"
																											},
																											"value": "3"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "3133:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1198,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "3141:6:8",
																									"memberName": "BuyTax",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1020,
																									"src": "3133:14:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "3126:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1200,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3125:23:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1201,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3149:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "3125:27:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1203,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3124:29:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3100:53:8"
																	},
																	{
																		"assignments": [
																			1206
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 1206,
																				"mutability": "mutable",
																				"name": "MarkettingAmount",
																				"nameLocation": "3176:16:8",
																				"nodeType": "VariableDeclaration",
																				"scope": 1457,
																				"src": "3171:21:8",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 1205,
																					"name": "uint",
																					"nodeType": "ElementaryTypeName",
																					"src": "3171:4:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 1217,
																		"initialValue": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1215,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1212,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1207,
																									"name": "amount",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1145,
																									"src": "3197:6:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "*",
																								"rightExpression": {
																									"expression": {
																										"baseExpression": {
																											"id": 1208,
																											"name": "Taxs",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1034,
																											"src": "3204:4:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																												"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																											}
																										},
																										"id": 1210,
																										"indexExpression": {
																											"hexValue": "34",
																											"id": 1209,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3209:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_4_by_1",
																												"typeString": "int_const 4"
																											},
																											"value": "4"
																										},
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"nodeType": "IndexAccess",
																										"src": "3204:7:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_struct$_Cap_$1025_storage",
																											"typeString": "struct Token.Cap storage ref"
																										}
																									},
																									"id": 1211,
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"memberLocation": "3212:6:8",
																									"memberName": "BuyTax",
																									"nodeType": "MemberAccess",
																									"referencedDeclaration": 1020,
																									"src": "3204:14:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "3197:21:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 1213,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "3196:23:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "/",
																					"rightExpression": {
																						"hexValue": "313030",
																						"id": 1214,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3220:3:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_100_by_1",
																							"typeString": "int_const 100"
																						},
																						"value": "100"
																					},
																					"src": "3196:27:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1216,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "3195:29:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "3171:53:8"
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1238,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1229,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1223,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 1218,
																												"name": "Taxs",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1034,
																												"src": "3247:4:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																													"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																												}
																											},
																											"id": 1220,
																											"indexExpression": {
																												"hexValue": "32",
																												"id": 1219,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "3252:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_2_by_1",
																													"typeString": "int_const 2"
																												},
																												"value": "2"
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "3247:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Cap_$1025_storage",
																												"typeString": "struct Token.Cap storage ref"
																											}
																										},
																										"id": 1221,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "3255:13:8",
																										"memberName": "currentAmount",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1024,
																										"src": "3247:21:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "+",
																									"rightExpression": {
																										"id": 1222,
																										"name": "LPAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1180,
																										"src": "3271:8:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "3247:32:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1224,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "3246:34:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": ">=",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1225,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3284:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1227,
																								"indexExpression": {
																									"hexValue": "32",
																									"id": 1226,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3289:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_2_by_1",
																										"typeString": "int_const 2"
																									},
																									"value": "2"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3284:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1228,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "3292:7:8",
																							"memberName": "XAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1022,
																							"src": "3284:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "3246:53:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					}
																				],
																				"id": 1230,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3245:55:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1236,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1231,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3305:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1233,
																								"indexExpression": {
																									"hexValue": "32",
																									"id": 1232,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3310:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_2_by_1",
																										"typeString": "int_const 2"
																									},
																									"value": "2"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3305:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1234,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "3313:7:8",
																							"memberName": "XAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1022,
																							"src": "3305:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "!=",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 1235,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3324:1:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "3305:20:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					}
																				],
																				"id": 1237,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3304:22:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "3245:81:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseBody": {
																			"id": 1289,
																			"nodeType": "Block",
																			"src": "3594:74:8",
																			"statements": [
																				{
																					"expression": {
																						"id": 1287,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"expression": {
																								"baseExpression": {
																									"id": 1282,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3616:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1284,
																								"indexExpression": {
																									"hexValue": "32",
																									"id": 1283,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3621:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_2_by_1",
																										"typeString": "int_const 2"
																									},
																									"value": "2"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3616:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1285,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"memberLocation": "3624:13:8",
																							"memberName": "currentAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1024,
																							"src": "3616:21:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "+=",
																						"rightHandSide": {
																							"id": 1286,
																							"name": "LPAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1180,
																							"src": "3641:8:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "3616:33:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1288,
																					"nodeType": "ExpressionStatement",
																					"src": "3616:33:8"
																				}
																			]
																		},
																		"id": 1290,
																		"nodeType": "IfStatement",
																		"src": "3242:426:8",
																		"trueBody": {
																			"id": 1281,
																			"nodeType": "Block",
																			"src": "3328:262:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"id": 1242,
																								"name": "PancakeSwap",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1001,
																								"src": "3365:11:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							{
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1248,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1243,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "3378:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1245,
																												"indexExpression": {
																													"hexValue": "32",
																													"id": 1244,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "3383:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_2_by_1",
																														"typeString": "int_const 2"
																													},
																													"value": "2"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "3378:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1246,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "3386:7:8",
																											"memberName": "XAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1022,
																											"src": "3378:15:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "/",
																										"rightExpression": {
																											"hexValue": "32",
																											"id": 1247,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3394:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_2_by_1",
																												"typeString": "int_const 2"
																											},
																											"value": "2"
																										},
																										"src": "3378:17:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1249,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "3377:19:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								},
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"expression": {
																								"id": 1239,
																								"name": "super",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967271,
																								"src": "3350:5:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																									"typeString": "type(contract super Token)"
																								}
																							},
																							"id": 1241,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "3356:8:8",
																							"memberName": "transfer",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 236,
																							"src": "3350:14:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																								"typeString": "function (address,uint256) returns (bool)"
																							}
																						},
																						"id": 1250,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3350:47:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"id": 1251,
																					"nodeType": "ExpressionStatement",
																					"src": "3350:47:8"
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1258,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1253,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "3441:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1255,
																												"indexExpression": {
																													"hexValue": "32",
																													"id": 1254,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "3446:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_2_by_1",
																														"typeString": "int_const 2"
																													},
																													"value": "2"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "3441:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1256,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "3449:7:8",
																											"memberName": "XAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1022,
																											"src": "3441:15:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "/",
																										"rightExpression": {
																											"hexValue": "32",
																											"id": 1257,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": true,
																											"kind": "number",
																											"lValueRequested": false,
																											"nodeType": "Literal",
																											"src": "3457:1:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_rational_2_by_1",
																												"typeString": "int_const 2"
																											},
																											"value": "2"
																										},
																										"src": "3441:17:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1259,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "3440:19:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"id": 1260,
																								"name": "PancakeSwap",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1001,
																								"src": "3460:11:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1252,
																							"name": "swapExactInputSingle",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1141,
																							"src": "3419:20:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																								"typeString": "function (uint256,address) returns (uint256)"
																							}
																						},
																						"id": 1261,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3419:53:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1262,
																					"nodeType": "ExpressionStatement",
																					"src": "3419:53:8"
																				},
																				{
																					"expression": {
																						"id": 1279,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"expression": {
																								"baseExpression": {
																									"id": 1263,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3494:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1265,
																								"indexExpression": {
																									"hexValue": "32",
																									"id": 1264,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3499:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_2_by_1",
																										"typeString": "int_const 2"
																									},
																									"value": "2"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3494:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1266,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"memberLocation": "3502:13:8",
																							"memberName": "currentAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1024,
																							"src": "3494:21:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "=",
																						"rightHandSide": {
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1278,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1272,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1267,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "3519:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1269,
																												"indexExpression": {
																													"hexValue": "32",
																													"id": 1268,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "3524:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_2_by_1",
																														"typeString": "int_const 2"
																													},
																													"value": "2"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "3519:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1270,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "3527:13:8",
																											"memberName": "currentAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1024,
																											"src": "3519:21:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1271,
																											"name": "LPAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1180,
																											"src": "3543:8:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "3519:32:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1273,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "3518:34:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1274,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "3556:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1276,
																									"indexExpression": {
																										"hexValue": "32",
																										"id": 1275,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3561:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_2_by_1",
																											"typeString": "int_const 2"
																										},
																										"value": "2"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "3556:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1277,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "3564:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "3556:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "3518:53:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "3494:77:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1280,
																					"nodeType": "ExpressionStatement",
																					"src": "3494:77:8"
																				}
																			]
																		}
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1311,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1302,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1296,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"expression": {
																											"baseExpression": {
																												"id": 1291,
																												"name": "Taxs",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1034,
																												"src": "3690:4:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																													"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																												}
																											},
																											"id": 1293,
																											"indexExpression": {
																												"hexValue": "33",
																												"id": 1292,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": true,
																												"kind": "number",
																												"lValueRequested": false,
																												"nodeType": "Literal",
																												"src": "3695:1:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_rational_3_by_1",
																													"typeString": "int_const 3"
																												},
																												"value": "3"
																											},
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"nodeType": "IndexAccess",
																											"src": "3690:7:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_struct$_Cap_$1025_storage",
																												"typeString": "struct Token.Cap storage ref"
																											}
																										},
																										"id": 1294,
																										"isConstant": false,
																										"isLValue": true,
																										"isPure": false,
																										"lValueRequested": false,
																										"memberLocation": "3698:13:8",
																										"memberName": "currentAmount",
																										"nodeType": "MemberAccess",
																										"referencedDeclaration": 1024,
																										"src": "3690:21:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "+",
																									"rightExpression": {
																										"id": 1295,
																										"name": "InvestmentAmount",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1193,
																										"src": "3714:16:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"src": "3690:40:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1297,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "3689:42:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": ">=",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1298,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3735:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1300,
																								"indexExpression": {
																									"hexValue": "33",
																									"id": 1299,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3740:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3735:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1301,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "3743:7:8",
																							"memberName": "XAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1022,
																							"src": "3735:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "3689:61:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					}
																				],
																				"id": 1303,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3688:63:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1309,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1304,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3756:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1306,
																								"indexExpression": {
																									"hexValue": "33",
																									"id": 1305,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3761:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3756:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1307,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "3764:7:8",
																							"memberName": "XAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1022,
																							"src": "3756:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "!=",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 1308,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3775:1:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "3756:20:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					}
																				],
																				"id": 1310,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3755:22:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "3688:89:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseBody": {
																			"id": 1349,
																			"nodeType": "Block",
																			"src": "3982:82:8",
																			"statements": [
																				{
																					"expression": {
																						"id": 1347,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"expression": {
																								"baseExpression": {
																									"id": 1342,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "4004:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1344,
																								"indexExpression": {
																									"hexValue": "33",
																									"id": 1343,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "4009:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4004:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1345,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"memberLocation": "4012:13:8",
																							"memberName": "currentAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1024,
																							"src": "4004:21:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "+=",
																						"rightHandSide": {
																							"id": 1346,
																							"name": "InvestmentAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1193,
																							"src": "4029:16:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "4004:41:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1348,
																					"nodeType": "ExpressionStatement",
																					"src": "4004:41:8"
																				}
																			]
																		},
																		"id": 1350,
																		"nodeType": "IfStatement",
																		"src": "3685:379:8",
																		"trueBody": {
																			"id": 1341,
																			"nodeType": "Block",
																			"src": "3779:199:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"expression": {
																									"baseExpression": {
																										"id": 1313,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "3822:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1315,
																									"indexExpression": {
																										"hexValue": "33",
																										"id": 1314,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3827:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_3_by_1",
																											"typeString": "int_const 3"
																										},
																										"value": "3"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "3822:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1316,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "3830:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "3822:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"arguments": [
																									{
																										"id": 1319,
																										"name": "this",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967268,
																										"src": "3846:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_contract$_Token_$2127",
																											"typeString": "contract Token"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_contract$_Token_$2127",
																											"typeString": "contract Token"
																										}
																									],
																									"id": 1318,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "3838:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 1317,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "3838:7:8",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1320,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "3838:13:8",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1312,
																							"name": "swapExactInputSingle",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1141,
																							"src": "3801:20:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																								"typeString": "function (uint256,address) returns (uint256)"
																							}
																						},
																						"id": 1321,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3801:51:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1322,
																					"nodeType": "ExpressionStatement",
																					"src": "3801:51:8"
																				},
																				{
																					"expression": {
																						"id": 1339,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"expression": {
																								"baseExpression": {
																									"id": 1323,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "3874:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1325,
																								"indexExpression": {
																									"hexValue": "33",
																									"id": 1324,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "3879:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "3874:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1326,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"memberLocation": "3882:13:8",
																							"memberName": "currentAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1024,
																							"src": "3874:21:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "=",
																						"rightHandSide": {
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1338,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1332,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1327,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "3899:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1329,
																												"indexExpression": {
																													"hexValue": "33",
																													"id": 1328,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "3904:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_3_by_1",
																														"typeString": "int_const 3"
																													},
																													"value": "3"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "3899:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1330,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "3907:13:8",
																											"memberName": "currentAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1024,
																											"src": "3899:21:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1331,
																											"name": "InvestmentAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1193,
																											"src": "3923:16:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "3899:40:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1333,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "3898:42:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1334,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "3944:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1336,
																									"indexExpression": {
																										"hexValue": "33",
																										"id": 1335,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3949:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_3_by_1",
																											"typeString": "int_const 3"
																										},
																										"value": "3"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "3944:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1337,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "3952:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "3944:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "3898:61:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "3874:85:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1340,
																					"nodeType": "ExpressionStatement",
																					"src": "3874:85:8"
																				}
																			]
																		}
																	},
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 1373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"commonType": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"id": 1365,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1362,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1356,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1351,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "4086:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1353,
																												"indexExpression": {
																													"hexValue": "34",
																													"id": 1352,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "4091:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_4_by_1",
																														"typeString": "int_const 4"
																													},
																													"value": "4"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "4086:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1354,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "4094:13:8",
																											"memberName": "currentAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1024,
																											"src": "4086:21:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1355,
																											"name": "MarkettingAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1206,
																											"src": "4110:16:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "4086:40:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1357,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "4085:42:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": ">=",
																							"rightExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1358,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "4131:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1360,
																									"indexExpression": {
																										"hexValue": "34",
																										"id": 1359,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "4136:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_4_by_1",
																											"typeString": "int_const 4"
																										},
																										"value": "4"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "4131:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1361,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "4139:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "4131:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "4085:61:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						}
																					],
																					"id": 1363,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "4084:63:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "&&",
																				"rightExpression": {
																					"id": 1364,
																					"name": "isSwap",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 999,
																					"src": "4151:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"src": "4084:73:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1371,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1366,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "4162:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1368,
																								"indexExpression": {
																									"hexValue": "34",
																									"id": 1367,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "4167:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_4_by_1",
																										"typeString": "int_const 4"
																									},
																									"value": "4"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4162:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1369,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "4170:7:8",
																							"memberName": "XAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1022,
																							"src": "4162:15:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "!=",
																						"rightExpression": {
																							"hexValue": "30",
																							"id": 1370,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4181:1:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_0_by_1",
																								"typeString": "int_const 0"
																							},
																							"value": "0"
																						},
																						"src": "4162:20:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					}
																				],
																				"id": 1372,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4161:22:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "4084:99:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseBody": {
																			"id": 1411,
																			"nodeType": "Block",
																			"src": "4389:82:8",
																			"statements": [
																				{
																					"expression": {
																						"id": 1409,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"expression": {
																								"baseExpression": {
																									"id": 1404,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "4411:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1406,
																								"indexExpression": {
																									"hexValue": "34",
																									"id": 1405,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "4416:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_4_by_1",
																										"typeString": "int_const 4"
																									},
																									"value": "4"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4411:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1407,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"memberLocation": "4419:13:8",
																							"memberName": "currentAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1024,
																							"src": "4411:21:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "+=",
																						"rightHandSide": {
																							"id": 1408,
																							"name": "MarkettingAmount",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1206,
																							"src": "4436:16:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "4411:41:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1410,
																					"nodeType": "ExpressionStatement",
																					"src": "4411:41:8"
																				}
																			]
																		},
																		"id": 1412,
																		"nodeType": "IfStatement",
																		"src": "4081:390:8",
																		"trueBody": {
																			"id": 1403,
																			"nodeType": "Block",
																			"src": "4186:199:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"expression": {
																									"baseExpression": {
																										"id": 1375,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "4229:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1377,
																									"indexExpression": {
																										"hexValue": "34",
																										"id": 1376,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "4234:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_4_by_1",
																											"typeString": "int_const 4"
																										},
																										"value": "4"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "4229:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1378,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "4237:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "4229:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"arguments": [
																									{
																										"id": 1381,
																										"name": "this",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 4294967268,
																										"src": "4253:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_contract$_Token_$2127",
																											"typeString": "contract Token"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_contract$_Token_$2127",
																											"typeString": "contract Token"
																										}
																									],
																									"id": 1380,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4245:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_address_$",
																										"typeString": "type(address)"
																									},
																									"typeName": {
																										"id": 1379,
																										"name": "address",
																										"nodeType": "ElementaryTypeName",
																										"src": "4245:7:8",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 1382,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4245:13:8",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							],
																							"id": 1374,
																							"name": "swapExactInputSingle",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1141,
																							"src": "4208:20:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																								"typeString": "function (uint256,address) returns (uint256)"
																							}
																						},
																						"id": 1383,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4208:51:8",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1384,
																					"nodeType": "ExpressionStatement",
																					"src": "4208:51:8"
																				},
																				{
																					"expression": {
																						"id": 1401,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"expression": {
																								"baseExpression": {
																									"id": 1385,
																									"name": "Taxs",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1034,
																									"src": "4281:4:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																										"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																									}
																								},
																								"id": 1387,
																								"indexExpression": {
																									"hexValue": "34",
																									"id": 1386,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "4286:1:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_4_by_1",
																										"typeString": "int_const 4"
																									},
																									"value": "4"
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4281:7:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Cap_$1025_storage",
																									"typeString": "struct Token.Cap storage ref"
																								}
																							},
																							"id": 1388,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"memberLocation": "4289:13:8",
																							"memberName": "currentAmount",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1024,
																							"src": "4281:21:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "=",
																						"rightHandSide": {
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1400,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1394,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"expression": {
																												"baseExpression": {
																													"id": 1389,
																													"name": "Taxs",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1034,
																													"src": "4306:4:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																														"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																													}
																												},
																												"id": 1391,
																												"indexExpression": {
																													"hexValue": "34",
																													"id": 1390,
																													"isConstant": false,
																													"isLValue": false,
																													"isPure": true,
																													"kind": "number",
																													"lValueRequested": false,
																													"nodeType": "Literal",
																													"src": "4311:1:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_rational_4_by_1",
																														"typeString": "int_const 4"
																													},
																													"value": "4"
																												},
																												"isConstant": false,
																												"isLValue": true,
																												"isPure": false,
																												"lValueRequested": false,
																												"nodeType": "IndexAccess",
																												"src": "4306:7:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_struct$_Cap_$1025_storage",
																													"typeString": "struct Token.Cap storage ref"
																												}
																											},
																											"id": 1392,
																											"isConstant": false,
																											"isLValue": true,
																											"isPure": false,
																											"lValueRequested": false,
																											"memberLocation": "4314:13:8",
																											"memberName": "currentAmount",
																											"nodeType": "MemberAccess",
																											"referencedDeclaration": 1024,
																											"src": "4306:21:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1393,
																											"name": "MarkettingAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1206,
																											"src": "4330:16:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "4306:40:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1395,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "4305:42:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"expression": {
																									"baseExpression": {
																										"id": 1396,
																										"name": "Taxs",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1034,
																										"src": "4351:4:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																											"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																										}
																									},
																									"id": 1398,
																									"indexExpression": {
																										"hexValue": "34",
																										"id": 1397,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "4356:1:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_4_by_1",
																											"typeString": "int_const 4"
																										},
																										"value": "4"
																									},
																									"isConstant": false,
																									"isLValue": true,
																									"isPure": false,
																									"lValueRequested": false,
																									"nodeType": "IndexAccess",
																									"src": "4351:7:8",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Cap_$1025_storage",
																										"typeString": "struct Token.Cap storage ref"
																									}
																								},
																								"id": 1399,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberLocation": "4359:7:8",
																								"memberName": "XAmount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1022,
																								"src": "4351:15:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "4305:61:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "4281:85:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 1402,
																					"nodeType": "ExpressionStatement",
																					"src": "4281:85:8"
																				}
																			]
																		}
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1416,
																					"name": "Wallet",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 997,
																					"src": "4505:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1417,
																					"name": "ReflectionAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1167,
																					"src": "4512:16:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1413,
																					"name": "super",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967271,
																					"src": "4490:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																						"typeString": "type(contract super Token)"
																					}
																				},
																				"id": 1415,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4496:8:8",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 236,
																				"src": "4490:14:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) returns (bool)"
																				}
																			},
																			"id": 1418,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4490:39:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1419,
																		"nodeType": "ExpressionStatement",
																		"src": "4490:39:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1423,
																					"name": "Wallet",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 997,
																					"src": "4562:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1424,
																					"name": "LPAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1180,
																					"src": "4569:8:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1420,
																					"name": "super",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967271,
																					"src": "4547:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																						"typeString": "type(contract super Token)"
																					}
																				},
																				"id": 1422,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4553:8:8",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 236,
																				"src": "4547:14:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) returns (bool)"
																				}
																			},
																			"id": 1425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4547:31:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1426,
																		"nodeType": "ExpressionStatement",
																		"src": "4547:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1430,
																					"name": "Wallet",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 997,
																					"src": "4611:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1431,
																					"name": "InvestmentAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1193,
																					"src": "4618:16:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1427,
																					"name": "super",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967271,
																					"src": "4596:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																						"typeString": "type(contract super Token)"
																					}
																				},
																				"id": 1429,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4602:8:8",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 236,
																				"src": "4596:14:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) returns (bool)"
																				}
																			},
																			"id": 1432,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4596:39:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1433,
																		"nodeType": "ExpressionStatement",
																		"src": "4596:39:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1437,
																					"name": "Wallet",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 997,
																					"src": "4668:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1438,
																					"name": "MarkettingAmount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1206,
																					"src": "4675:16:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1434,
																					"name": "super",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967271,
																					"src": "4653:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																						"typeString": "type(contract super Token)"
																					}
																				},
																				"id": 1436,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4659:8:8",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 236,
																				"src": "4653:14:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) returns (bool)"
																				}
																			},
																			"id": 1439,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4653:39:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 1440,
																		"nodeType": "ExpressionStatement",
																		"src": "4653:39:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1443,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1143,
																					"src": "4732:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1453,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1444,
																								"name": "amount",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1145,
																								"src": "4737:6:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "-",
																							"rightExpression": {
																								"components": [
																									{
																										"commonType": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										},
																										"id": 1451,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": false,
																										"lValueRequested": false,
																										"leftExpression": {
																											"commonType": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											},
																											"id": 1449,
																											"isConstant": false,
																											"isLValue": false,
																											"isPure": false,
																											"lValueRequested": false,
																											"leftExpression": {
																												"commonType": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												},
																												"id": 1447,
																												"isConstant": false,
																												"isLValue": false,
																												"isPure": false,
																												"lValueRequested": false,
																												"leftExpression": {
																													"id": 1445,
																													"name": "ReflectionAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1167,
																													"src": "4745:16:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"nodeType": "BinaryOperation",
																												"operator": "+",
																												"rightExpression": {
																													"id": 1446,
																													"name": "LPAmount",
																													"nodeType": "Identifier",
																													"overloadedDeclarations": [],
																													"referencedDeclaration": 1180,
																													"src": "4762:8:8",
																													"typeDescriptions": {
																														"typeIdentifier": "t_uint256",
																														"typeString": "uint256"
																													}
																												},
																												"src": "4745:25:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"nodeType": "BinaryOperation",
																											"operator": "+",
																											"rightExpression": {
																												"id": 1448,
																												"name": "InvestmentAmount",
																												"nodeType": "Identifier",
																												"overloadedDeclarations": [],
																												"referencedDeclaration": 1193,
																												"src": "4771:16:8",
																												"typeDescriptions": {
																													"typeIdentifier": "t_uint256",
																													"typeString": "uint256"
																												}
																											},
																											"src": "4745:42:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"nodeType": "BinaryOperation",
																										"operator": "+",
																										"rightExpression": {
																											"id": 1450,
																											"name": "MarkettingAmount",
																											"nodeType": "Identifier",
																											"overloadedDeclarations": [],
																											"referencedDeclaration": 1206,
																											"src": "4788:16:8",
																											"typeDescriptions": {
																												"typeIdentifier": "t_uint256",
																												"typeString": "uint256"
																											}
																										},
																										"src": "4745:59:8",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									}
																								],
																								"id": 1452,
																								"isConstant": false,
																								"isInlineArray": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "TupleExpression",
																								"src": "4744:61:8",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "4737:68:8",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1454,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "4736:70:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 1441,
																					"name": "super",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967271,
																					"src": "4717:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																						"typeString": "type(contract super Token)"
																					}
																				},
																				"id": 1442,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4723:8:8",
																				"memberName": "transfer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 236,
																				"src": "4717:14:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) returns (bool)"
																				}
																			},
																			"id": 1455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4717:90:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"functionReturnParameters": 1150,
																		"id": 1456,
																		"nodeType": "Return",
																		"src": "4710:97:8"
																	}
																]
															}
														}
													]
												},
												"id": 1762,
												"nodeType": "IfStatement",
												"src": "2810:4018:8",
												"trueBody": {
													"id": 1161,
													"nodeType": "Block",
													"src": "2835:66:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1157,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1143,
																		"src": "2871:2:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1158,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "2875:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1155,
																		"name": "super",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967271,
																		"src": "2856:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_super$_Token_$2127_$",
																			"typeString": "type(contract super Token)"
																		}
																	},
																	"id": 1156,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2862:8:8",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 236,
																	"src": "2856:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) returns (bool)"
																	}
																},
																"id": 1159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2856:26:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"functionReturnParameters": 1150,
															"id": 1160,
															"nodeType": "Return",
															"src": "2849:33:8"
														}
													]
												}
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 1764,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "2724:8:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1147,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2776:8:8"
									},
									"parameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2741:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "2733:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2733:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2753:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "2745:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2745:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2732:28:8"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1764,
												"src": "2794:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2794:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2793:6:8"
									},
									"scope": 2127,
									"src": "2715:4121:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1789,
										"nodeType": "Block",
										"src": "7103:106:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1778,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1772,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1766,
																	"src": "7121:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7128:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7121:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1775,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1766,
																	"src": "7133:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7139:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "7133:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7121:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7142:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1771,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7113:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7113:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1781,
												"nodeType": "ExpressionStatement",
												"src": "7113:58:8"
											},
											{
												"expression": {
													"id": 1787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1782,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "7181:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1784,
															"indexExpression": {
																"hexValue": "31",
																"id": 1783,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7186:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7181:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1785,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7189:7:8",
														"memberName": "SellTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1018,
														"src": "7181:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1786,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1766,
														"src": "7199:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7181:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1788,
												"nodeType": "ExpressionStatement",
												"src": "7181:21:8"
											}
										]
									},
									"functionSelector": "446b5d5f",
									"id": 1790,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1769,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1768,
												"name": "onlyOwner",
												"nameLocations": [
													"7094:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7094:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "7094:9:8"
										}
									],
									"name": "setReflectionSellTax",
									"nameLocation": "7056:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "7082:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1790,
												"src": "7077:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1765,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7077:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7076:10:8"
									},
									"returnParameters": {
										"id": 1770,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7103:0:8"
									},
									"scope": 2127,
									"src": "7047:162:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1815,
										"nodeType": "Block",
										"src": "7444:106:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1800,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1798,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1792,
																	"src": "7462:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1799,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7469:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7462:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1803,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1801,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1792,
																	"src": "7474:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1802,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7480:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "7474:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7462:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7483:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1797,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7454:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7454:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1807,
												"nodeType": "ExpressionStatement",
												"src": "7454:58:8"
											},
											{
												"expression": {
													"id": 1813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1808,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "7522:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1810,
															"indexExpression": {
																"hexValue": "32",
																"id": 1809,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7527:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7522:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1811,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7530:7:8",
														"memberName": "SellTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1018,
														"src": "7522:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1812,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1792,
														"src": "7540:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7522:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1814,
												"nodeType": "ExpressionStatement",
												"src": "7522:21:8"
											}
										]
									},
									"functionSelector": "172cc5a7",
									"id": 1816,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1795,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1794,
												"name": "onlyOwner",
												"nameLocations": [
													"7435:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7435:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "7435:9:8"
										}
									],
									"name": "setLPSellTax",
									"nameLocation": "7405:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "7423:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1816,
												"src": "7418:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1791,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7418:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7417:10:8"
									},
									"returnParameters": {
										"id": 1796,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7444:0:8"
									},
									"scope": 2127,
									"src": "7396:154:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1841,
										"nodeType": "Block",
										"src": "7817:106:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1830,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1826,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1824,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1818,
																	"src": "7835:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1825,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7842:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7835:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1829,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1827,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1818,
																	"src": "7847:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1828,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7853:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "7847:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7835:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1831,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7856:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1823,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7827:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1832,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7827:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1833,
												"nodeType": "ExpressionStatement",
												"src": "7827:58:8"
											},
											{
												"expression": {
													"id": 1839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1834,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "7895:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1836,
															"indexExpression": {
																"hexValue": "33",
																"id": 1835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7900:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7895:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1837,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7903:7:8",
														"memberName": "SellTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1018,
														"src": "7895:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1838,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1818,
														"src": "7913:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7895:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1840,
												"nodeType": "ExpressionStatement",
												"src": "7895:21:8"
											}
										]
									},
									"functionSelector": "ea173a39",
									"id": 1842,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1821,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1820,
												"name": "onlyOwner",
												"nameLocations": [
													"7808:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7808:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "7808:9:8"
										}
									],
									"name": "setInvestmentSellTax",
									"nameLocation": "7770:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1818,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "7796:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1842,
												"src": "7791:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1817,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7791:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7790:10:8"
									},
									"returnParameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7817:0:8"
									},
									"scope": 2127,
									"src": "7761:162:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1867,
										"nodeType": "Block",
										"src": "8190:106:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1850,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1844,
																	"src": "8208:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8215:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8208:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1853,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1844,
																	"src": "8220:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1854,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8226:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "8220:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8208:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8229:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1849,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8200:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8200:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1859,
												"nodeType": "ExpressionStatement",
												"src": "8200:58:8"
											},
											{
												"expression": {
													"id": 1865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1860,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "8268:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1862,
															"indexExpression": {
																"hexValue": "34",
																"id": 1861,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8273:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8268:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1863,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8276:7:8",
														"memberName": "SellTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1018,
														"src": "8268:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1864,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1844,
														"src": "8286:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8268:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1866,
												"nodeType": "ExpressionStatement",
												"src": "8268:21:8"
											}
										]
									},
									"functionSelector": "afe2ddd7",
									"id": 1868,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1847,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1846,
												"name": "onlyOwner",
												"nameLocations": [
													"8181:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "8181:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "8181:9:8"
										}
									],
									"name": "setMarkettingSellTax",
									"nameLocation": "8143:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1844,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "8169:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1868,
												"src": "8164:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1843,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8164:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8163:10:8"
									},
									"returnParameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8190:0:8"
									},
									"scope": 2127,
									"src": "8134:162:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1893,
										"nodeType": "Block",
										"src": "8559:105:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1878,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1876,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1870,
																	"src": "8577:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1877,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8584:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8577:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1881,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1879,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1870,
																	"src": "8589:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8595:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "8589:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8577:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1883,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8598:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1875,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8569:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8569:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1885,
												"nodeType": "ExpressionStatement",
												"src": "8569:58:8"
											},
											{
												"expression": {
													"id": 1891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1886,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "8637:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1888,
															"indexExpression": {
																"hexValue": "31",
																"id": 1887,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8642:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8637:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1889,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8645:6:8",
														"memberName": "BuyTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1020,
														"src": "8637:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1890,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1870,
														"src": "8654:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8637:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1892,
												"nodeType": "ExpressionStatement",
												"src": "8637:20:8"
											}
										]
									},
									"functionSelector": "36eab316",
									"id": 1894,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1873,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1872,
												"name": "onlyOwner",
												"nameLocations": [
													"8550:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "8550:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "8550:9:8"
										}
									],
									"name": "setReflectionBuyTax",
									"nameLocation": "8513:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "8538:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1894,
												"src": "8533:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1869,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8533:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8532:10:8"
									},
									"returnParameters": {
										"id": 1874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8559:0:8"
									},
									"scope": 2127,
									"src": "8504:160:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1919,
										"nodeType": "Block",
										"src": "8895:105:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1904,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1902,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1896,
																	"src": "8913:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8920:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8913:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1905,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1896,
																	"src": "8925:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8931:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "8925:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8913:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1909,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8934:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1901,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8905:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8905:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1911,
												"nodeType": "ExpressionStatement",
												"src": "8905:58:8"
											},
											{
												"expression": {
													"id": 1917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1912,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "8973:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1914,
															"indexExpression": {
																"hexValue": "32",
																"id": 1913,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8978:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "8973:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1915,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8981:6:8",
														"memberName": "BuyTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1020,
														"src": "8973:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1916,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1896,
														"src": "8990:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8973:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1918,
												"nodeType": "ExpressionStatement",
												"src": "8973:20:8"
											}
										]
									},
									"functionSelector": "0445a103",
									"id": 1920,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1899,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1898,
												"name": "onlyOwner",
												"nameLocations": [
													"8886:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "8886:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "8886:9:8"
										}
									],
									"name": "setLPBuyTax",
									"nameLocation": "8857:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1896,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "8874:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1920,
												"src": "8869:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1895,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8869:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8868:10:8"
									},
									"returnParameters": {
										"id": 1900,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8895:0:8"
									},
									"scope": 2127,
									"src": "8848:152:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1945,
										"nodeType": "Block",
										"src": "9263:105:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1934,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1930,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1928,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1922,
																	"src": "9281:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1929,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9288:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9281:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1931,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1922,
																	"src": "9293:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9299:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "9293:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9281:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1935,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9302:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1927,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9273:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9273:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1937,
												"nodeType": "ExpressionStatement",
												"src": "9273:58:8"
											},
											{
												"expression": {
													"id": 1943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1938,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "9341:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1940,
															"indexExpression": {
																"hexValue": "33",
																"id": 1939,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9346:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9341:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1941,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "9349:6:8",
														"memberName": "BuyTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1020,
														"src": "9341:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1942,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1922,
														"src": "9358:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9341:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1944,
												"nodeType": "ExpressionStatement",
												"src": "9341:20:8"
											}
										]
									},
									"functionSelector": "e67d6921",
									"id": 1946,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1925,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1924,
												"name": "onlyOwner",
												"nameLocations": [
													"9254:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "9254:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "9254:9:8"
										}
									],
									"name": "setInvestmentBuyTax",
									"nameLocation": "9217:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1923,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1922,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "9242:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1946,
												"src": "9237:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1921,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9237:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9236:10:8"
									},
									"returnParameters": {
										"id": 1926,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9263:0:8"
									},
									"scope": 2127,
									"src": "9208:160:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1971,
										"nodeType": "Block",
										"src": "9631:105:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1960,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1956,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1954,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1948,
																	"src": "9649:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9656:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9649:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1959,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1957,
																	"name": "Tax",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1948,
																	"src": "9661:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"hexValue": "3135",
																	"id": 1958,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9667:2:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_15_by_1",
																		"typeString": "int_const 15"
																	},
																	"value": "15"
																},
																"src": "9661:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9649:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54617820416d6f756e74206d757374206265203020746f203135",
															"id": 1961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9670:28:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															},
															"value": "Tax Amount must be 0 to 15"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a13906ee55ea8ea09259598a27ad26e389cb0263bb9d977753f7c892db641e22",
																"typeString": "literal_string \"Tax Amount must be 0 to 15\""
															}
														],
														"id": 1953,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9641:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9641:58:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1963,
												"nodeType": "ExpressionStatement",
												"src": "9641:58:8"
											},
											{
												"expression": {
													"id": 1969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1964,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "9709:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1966,
															"indexExpression": {
																"hexValue": "34",
																"id": 1965,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9714:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9709:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1967,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "9717:6:8",
														"memberName": "BuyTax",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1020,
														"src": "9709:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1968,
														"name": "Tax",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1948,
														"src": "9726:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9709:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1970,
												"nodeType": "ExpressionStatement",
												"src": "9709:20:8"
											}
										]
									},
									"functionSelector": "c90880c1",
									"id": 1972,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1951,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1950,
												"name": "onlyOwner",
												"nameLocations": [
													"9622:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "9622:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "9622:9:8"
										}
									],
									"name": "setMarkettingBuyTax",
									"nameLocation": "9585:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1948,
												"mutability": "mutable",
												"name": "Tax",
												"nameLocation": "9610:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1972,
												"src": "9605:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1947,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9605:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9604:10:8"
									},
									"returnParameters": {
										"id": 1952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9631:0:8"
									},
									"scope": 2127,
									"src": "9576:160:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1986,
										"nodeType": "Block",
										"src": "9977:41:8",
										"statements": [
											{
												"expression": {
													"id": 1984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1979,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "9987:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1981,
															"indexExpression": {
																"hexValue": "32",
																"id": 1980,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9992:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9987:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1982,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "9995:7:8",
														"memberName": "XAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1022,
														"src": "9987:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1983,
														"name": "Amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1974,
														"src": "10005:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9987:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1985,
												"nodeType": "ExpressionStatement",
												"src": "9987:24:8"
											}
										]
									},
									"functionSelector": "e465d64d",
									"id": 1987,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1977,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1976,
												"name": "onlyOwner",
												"nameLocations": [
													"9968:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "9968:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "9968:9:8"
										}
									],
									"name": "setLPXAmount",
									"nameLocation": "9935:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1974,
												"mutability": "mutable",
												"name": "Amount",
												"nameLocation": "9953:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1987,
												"src": "9948:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1973,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9948:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9947:13:8"
									},
									"returnParameters": {
										"id": 1978,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9977:0:8"
									},
									"scope": 2127,
									"src": "9926:92:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2001,
										"nodeType": "Block",
										"src": "10291:41:8",
										"statements": [
											{
												"expression": {
													"id": 1999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1994,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "10301:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 1996,
															"indexExpression": {
																"hexValue": "33",
																"id": 1995,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10306:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10301:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 1997,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "10309:7:8",
														"memberName": "XAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1022,
														"src": "10301:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1998,
														"name": "Amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1989,
														"src": "10319:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10301:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2000,
												"nodeType": "ExpressionStatement",
												"src": "10301:24:8"
											}
										]
									},
									"functionSelector": "ab72498d",
									"id": 2002,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1992,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1991,
												"name": "onlyOwner",
												"nameLocations": [
													"10282:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "10282:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "10282:9:8"
										}
									],
									"name": "setInvestmentXAmount",
									"nameLocation": "10241:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "Amount",
												"nameLocation": "10267:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2002,
												"src": "10262:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1988,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10262:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10261:13:8"
									},
									"returnParameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10291:0:8"
									},
									"scope": 2127,
									"src": "10232:100:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2016,
										"nodeType": "Block",
										"src": "10605:41:8",
										"statements": [
											{
												"expression": {
													"id": 2014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 2009,
																"name": "Taxs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1034,
																"src": "10615:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																	"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
																}
															},
															"id": 2011,
															"indexExpression": {
																"hexValue": "34",
																"id": 2010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10620:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10615:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Cap_$1025_storage",
																"typeString": "struct Token.Cap storage ref"
															}
														},
														"id": 2012,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "10623:7:8",
														"memberName": "XAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1022,
														"src": "10615:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2013,
														"name": "Amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2004,
														"src": "10633:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10615:24:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2015,
												"nodeType": "ExpressionStatement",
												"src": "10615:24:8"
											}
										]
									},
									"functionSelector": "9c42ac13",
									"id": 2017,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2007,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2006,
												"name": "onlyOwner",
												"nameLocations": [
													"10596:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "10596:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "10596:9:8"
										}
									],
									"name": "setMarkettingXAmount",
									"nameLocation": "10555:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2004,
												"mutability": "mutable",
												"name": "Amount",
												"nameLocation": "10581:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2017,
												"src": "10576:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2003,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10576:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10575:13:8"
									},
									"returnParameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10605:0:8"
									},
									"scope": 2127,
									"src": "10546:100:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2028,
										"nodeType": "Block",
										"src": "10850:31:8",
										"statements": [
											{
												"expression": {
													"id": 2026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2024,
														"name": "isSwap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "10860:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2025,
														"name": "check",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2019,
														"src": "10869:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "10860:14:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2027,
												"nodeType": "ExpressionStatement",
												"src": "10860:14:8"
											}
										]
									},
									"functionSelector": "24e2a33e",
									"id": 2029,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2022,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2021,
												"name": "onlyOwner",
												"nameLocations": [
													"10841:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "10841:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "10841:9:8"
										}
									],
									"name": "setMarkettingSwap",
									"nameLocation": "10804:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2019,
												"mutability": "mutable",
												"name": "check",
												"nameLocation": "10827:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2029,
												"src": "10822:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2018,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10822:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10821:12:8"
									},
									"returnParameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10850:0:8"
									},
									"scope": 2127,
									"src": "10795:86:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2042,
										"nodeType": "Block",
										"src": "11135:61:8",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"id": 2038,
																	"name": "contractAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2031,
																	"src": "11172:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2036,
																	"name": "WBNBToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1040,
																	"src": "11152:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$777",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2037,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11162:9:8",
																"memberName": "balanceOf",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 734,
																"src": "11152:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view external returns (uint256)"
																}
															},
															"id": 2039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11152:36:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 2040,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "11151:38:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2035,
												"id": 2041,
												"nodeType": "Return",
												"src": "11145:44:8"
											}
										]
									},
									"functionSelector": "8568b3a5",
									"id": 2043,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBalanceWBNB",
									"nameLocation": "11059:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2031,
												"mutability": "mutable",
												"name": "contractAddress",
												"nameLocation": "11082:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 2043,
												"src": "11074:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2030,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11074:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11073:25:8"
									},
									"returnParameters": {
										"id": 2035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "Balance",
												"nameLocation": "11127:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 2043,
												"src": "11119:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11119:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11118:17:8"
									},
									"scope": 2127,
									"src": "11050:146:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "11533:46:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2055,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2045,
															"src": "11562:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2056,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2047,
															"src": "11565:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 2052,
															"name": "WBNBToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1040,
															"src": "11543:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$777",
																"typeString": "contract IERC20"
															}
														},
														"id": 2054,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11553:8:8",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "11543:18:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 2057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11543:29:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2058,
												"nodeType": "ExpressionStatement",
												"src": "11543:29:8"
											}
										]
									},
									"functionSelector": "b9e43eee",
									"id": 2060,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2050,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2049,
												"name": "onlyOwner",
												"nameLocations": [
													"11524:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "11524:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "11524:9:8"
										}
									],
									"name": "WithdrawWBNB",
									"nameLocation": "11480:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2045,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11501:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "11493:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11493:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11509:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "11504:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2046,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11504:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11492:24:8"
									},
									"returnParameters": {
										"id": 2051,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11533:0:8"
									},
									"scope": 2127,
									"src": "11471:108:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2095,
										"nodeType": "Block",
										"src": "11664:113:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 2080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2076,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2074,
																	"name": "Typ",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2068,
																	"src": "11682:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11687:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11682:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2079,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2077,
																	"name": "Typ",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2068,
																	"src": "11692:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "35",
																	"id": 2078,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11698:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	},
																	"value": "5"
																},
																"src": "11692:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "11682:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "547970204d7573742042652028312c322c332c3429",
															"id": 2081,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11700:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e9dceea1b72368ed5edc5ca8b8c9b12961b55983d0a041db176313eda9fa8a9d",
																"typeString": "literal_string \"Typ Must Be (1,2,3,4)\""
															},
															"value": "Typ Must Be (1,2,3,4)"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e9dceea1b72368ed5edc5ca8b8c9b12961b55983d0a041db176313eda9fa8a9d",
																"typeString": "literal_string \"Typ Must Be (1,2,3,4)\""
															}
														],
														"id": 2073,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11674:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11674:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2083,
												"nodeType": "ExpressionStatement",
												"src": "11674:50:8"
											},
											{
												"expression": {
													"id": 2093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2084,
															"name": "Taxs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "11734:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Cap_$1025_storage_$",
																"typeString": "mapping(uint256 => struct Token.Cap storage ref)"
															}
														},
														"id": 2086,
														"indexExpression": {
															"id": 2085,
															"name": "Typ",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2068,
															"src": "11739:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11734:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Cap_$1025_storage",
															"typeString": "struct Token.Cap storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2088,
																"name": "SaleT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2062,
																"src": "11750:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2089,
																"name": "BuyT",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2064,
																"src": "11756:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2090,
																"name": "Amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2066,
																"src": "11761:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 2091,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11768:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2087,
															"name": "Cap",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1025,
															"src": "11746:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Cap_$1025_storage_ptr_$",
																"typeString": "type(struct Token.Cap storage pointer)"
															}
														},
														"id": 2092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11746:24:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Cap_$1025_memory_ptr",
															"typeString": "struct Token.Cap memory"
														}
													},
													"src": "11734:36:8",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Cap_$1025_storage",
														"typeString": "struct Token.Cap storage ref"
													}
												},
												"id": 2094,
												"nodeType": "ExpressionStatement",
												"src": "11734:36:8"
											}
										]
									},
									"functionSelector": "1901156d",
									"id": 2096,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2071,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2070,
												"name": "onlyOwner",
												"nameLocations": [
													"11654:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "11654:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "11654:9:8"
										}
									],
									"name": "setTaxData",
									"nameLocation": "11593:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2062,
												"mutability": "mutable",
												"name": "SaleT",
												"nameLocation": "11609:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "11604:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2061,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11604:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2064,
												"mutability": "mutable",
												"name": "BuyT",
												"nameLocation": "11620:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "11615:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2063,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11615:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2066,
												"mutability": "mutable",
												"name": "Amount",
												"nameLocation": "11630:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "11625:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2065,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11625:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2068,
												"mutability": "mutable",
												"name": "Typ",
												"nameLocation": "11642:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "11637:8:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2067,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11637:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11603:43:8"
									},
									"returnParameters": {
										"id": 2072,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11664:0:8"
									},
									"scope": 2127,
									"src": "11584:193:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2125,
										"nodeType": "Block",
										"src": "12142:149:8",
										"statements": [
											{
												"expression": {
													"id": 2109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2107,
														"name": "PancakeSwap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1001,
														"src": "12152:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2108,
														"name": "_PancakeSwapAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2098,
														"src": "12166:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12152:33:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2110,
												"nodeType": "ExpressionStatement",
												"src": "12152:33:8"
											},
											{
												"expression": {
													"id": 2115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2111,
														"name": "WBNBToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "12195:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$777",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2113,
																"name": "_WBNBAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2100,
																"src": "12214:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2112,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "12207:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$777_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 2114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12207:20:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$777",
															"typeString": "contract IERC20"
														}
													},
													"src": "12195:32:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$777",
														"typeString": "contract IERC20"
													}
												},
												"id": 2116,
												"nodeType": "ExpressionStatement",
												"src": "12195:32:8"
											},
											{
												"expression": {
													"id": 2119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2117,
														"name": "WBNB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1007,
														"src": "12237:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2118,
														"name": "_WBNBAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2100,
														"src": "12244:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12237:19:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2120,
												"nodeType": "ExpressionStatement",
												"src": "12237:19:8"
											},
											{
												"expression": {
													"id": 2123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2121,
														"name": "poolFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1005,
														"src": "12266:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2122,
														"name": "_poolFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2102,
														"src": "12276:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint24",
															"typeString": "uint24"
														}
													},
													"src": "12266:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"id": 2124,
												"nodeType": "ExpressionStatement",
												"src": "12266:18:8"
											}
										]
									},
									"functionSelector": "ca5fb573",
									"id": 2126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2105,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2104,
												"name": "onlyOwner",
												"nameLocations": [
													"12132:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "12132:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "12132:9:8"
										}
									],
									"name": "setAddressFee",
									"nameLocation": "12045:13:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2098,
												"mutability": "mutable",
												"name": "_PancakeSwapAddress",
												"nameLocation": "12067:19:8",
												"nodeType": "VariableDeclaration",
												"scope": 2126,
												"src": "12059:27:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2097,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12059:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "_WBNBAddress",
												"nameLocation": "12095:12:8",
												"nodeType": "VariableDeclaration",
												"scope": 2126,
												"src": "12087:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2099,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12087:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "_poolFee",
												"nameLocation": "12115:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 2126,
												"src": "12108:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint24",
													"typeString": "uint24"
												},
												"typeName": {
													"id": 2101,
													"name": "uint24",
													"nodeType": "ElementaryTypeName",
													"src": "12108:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint24",
														"typeString": "uint24"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12058:66:8"
									},
									"returnParameters": {
										"id": 2106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12142:0:8"
									},
									"scope": 2127,
									"src": "12036:255:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2128,
							"src": "369:11924:8",
							"usedErrors": []
						}
					],
					"src": "32:12262:8"
				},
				"id": 8
			}
		}
	}
}
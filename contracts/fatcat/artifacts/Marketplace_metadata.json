{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_buyer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_seller",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_buyerFeePerAge",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_sellerFeePerAge",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ClaimTime",
						"type": "uint256"
					}
				],
				"name": "Claim",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "ArtistAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ArtistFee",
						"type": "uint256"
					}
				],
				"name": "Fee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "NFTCancel",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "NFTListed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "SoldTime",
						"type": "uint256"
					}
				],
				"name": "NFTSold",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Bidding",
				"outputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "userName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "biddingTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bidCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "BiddingCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listIndex",
						"type": "uint256"
					}
				],
				"name": "CancelOffer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_mintContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					}
				],
				"name": "ListNft",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "NftAuction",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumBid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "listTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "SelectedUser",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "_idToNFT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "listTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "listed",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_nftCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "auctionListCount",
				"outputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "buyNft",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyerFee",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyerFeePerAge",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "editOffer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllListedNfts",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "tokenId",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "seller",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "owner",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "price",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "count",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "listTime",
										"type": "uint256"
									},
									{
										"internalType": "bool",
										"name": "listed",
										"type": "bool"
									},
									{
										"internalType": "address",
										"name": "artist",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "artistFeePerAge",
										"type": "uint256"
									}
								],
								"internalType": "struct Marketplace.NFT",
								"name": "listedData",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "listCount",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "uriData",
								"type": "string"
							}
						],
						"internalType": "struct Marketplace.ListedNftTokenId[]",
						"name": "",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "owner",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "tokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "minimumBid",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "artist",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "artistFeePerAge",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "listTime",
										"type": "uint256"
									},
									{
										"internalType": "bool",
										"name": "isActive",
										"type": "bool"
									}
								],
								"internalType": "struct Marketplace.nftAuction",
								"name": "listedData",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "listCount",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "uriData",
								"type": "string"
							}
						],
						"internalType": "struct Marketplace.ListTokenId[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "contractAddresses",
						"type": "address[]"
					}
				],
				"name": "getNFTDetail",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "mintTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "mintContract",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "mintArtist",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "artistFeePerAge",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							}
						],
						"internalType": "struct Marketplace.MyNft[][]",
						"name": "",
						"type": "tuple[][]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "listCount",
				"outputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nftAuctionCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sellerFee",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sellerFeePerAge",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_setBuyerFee",
						"type": "uint256"
					}
				],
				"name": "setBuyerFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setBuyerFeeAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_setSellerFee",
						"type": "uint256"
					}
				],
				"name": "setSellerFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setSellerFeeAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userBiddingCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "userListCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "FatCat Team",
			"kind": "dev",
			"methods": {
				"CancelOffer(uint256)": {
					"details": "Allows a seller to cancel their listed NFT offer on the marketplace. This function is designed to cancel an active listing of an NFT on the marketplace, allowing the seller to withdraw their offer. It handles the transfer of the NFT back to the seller and updates the listing status accordingly. ",
					"params": {
						"listIndex": "The index of the listed NFT in the marketplace's tracking data structure. This index                  is used to identify the specific NFT listing to be canceled. Requirements: - The NFT identified by `listIndex` must currently be listed on the marketplace. The function checks   for the `listed` status to ensure that only active listings can be canceled. - The caller of this function should be the owner or have appropriate permissions to cancel the listing.  The function performs the following operations: 1. Validates that the NFT is currently listed. 2. Updates the owner of the NFT to be the original seller, effectively preparing for the transfer back. 3. Transfers the NFT from the marketplace contract back to the original seller (now the owner). 4. Marks the NFT as no longer listed by setting its `listed` status to false. 5. Adjusts the marketplace's internal tracking of listed NFTs to reflect the removal of the listing. 6. Decrements the counter tracking the total number of listed NFTs.  Emits an `NFTCancel` event to log the cancellation of the listing, including details such as the tokenId, seller, the address who performed the cancellation, and the price at which the NFT was listed."
					}
				},
				"ListNft(address,uint256,uint256,address,uint256)": {
					"details": "Lists an NFT on the marketplace for sale.  This function allows a user to list an NFT for sale in the marketplace. The function ensures that the NFT is not already listed for sale or auction. It sets the sale price and records the listing details in the marketplace's storage. ",
					"params": {
						"_mintContract": "The address of the NFT contract where the NFT was minted. This contract must                      comply with the ERC721 standard.",
						"_price": "The price at which the NFT is to be sold. This value must be non-negative.",
						"_tokenId": "The unique identifier for the NFT being listed. This tokenId must have been minted                 by the specified `_mintContract`.",
						"artist": "The address of the artist or creator of the NFT. This is used for tracking and possibly               distributing royalties or fees.",
						"artistFeePerAge": "The fee or royalty amount that the artist is entitled to from the sale. The                        specific usage of this parameter can vary, such as a percentage of the sale price.  Requirements: - The NFT must not already be listed for sale in the marketplace. - The NFT must not be active in any auction within this marketplace. - The sale price `_price` must be at least 0 wei, allowing for free listings. - The caller must own the NFT and approve the marketplace contract to transfer it.  On successful listing, the NFT is transferred from the seller to the marketplace contract, effectively escrowing the NFT until the sale is complete or the listing is cancelled. The function emits an `NFTListed` event detailing the tokenId, seller, marketplace address as the current owner, and the sale price."
					}
				},
				"buyNft(uint256,uint256)": {
					"details": "Facilitates the purchase of an NFT listed on the marketplace.  This function allows a buyer to purchase an NFT that has been listed for sale on the marketplace. It handles the transfer of ownership of the NFT, the distribution of funds including the sale price to the seller, and any applicable fees to the marketplace and artist. ",
					"params": {
						"listIndex": "The index of the NFT in the marketplace's list of listed NFTs. This index is used                  to retrieve the details of the NFT to be purchased.",
						"price": "The price at which the buyer is willing to purchase the NFT. This is validated against              the listing price of the NFT.  Requirements: - The caller (buyer) must not be the seller of the NFT. - The provided `price` must be at least equal to the asking price of the NFT. - The caller must send enough ether to cover the asking price and any applicable fees.  The function performs the following operations: 1. Transfers the NFT from the marketplace contract to the buyer. 2. Updates the ownership and other relevant details of the NFT in the connected NFT contract. 3. Calculates the fees to be distributed to the marketplace, artist, and any other parties. 4. Distributes the sale proceeds and fees accordingly. 5. Marks the NFT as no longer listed in the marketplace. 6. Updates the marketplace's listing to reflect the sale and adjusts the list of available NFTs.  Emits a `Fee` event to log the distribution of fees to the artist and a `NFTSold` event to log the sale of the NFT, including details such as the tokenId, seller, buyer, sale price, and timestamp."
					}
				},
				"getAllListedNfts()": {
					"details": "Retrieves all NFTs currently listed in the marketplace, both for direct sale and auction.",
					"returns": {
						"_0": "ListedNftTokenId[] An array of `ListedNftTokenId` structs containing details of NFTs listed for direct sale.",
						"_1": "ListTokenId[] An array of `ListTokenId` structs containing details of NFTs listed for auction. Operation: 1. Initializes two arrays to hold details of NFTs listed for sale and auction, respectively. 2. Iterates over each listing and auction, adding their details to the respective arrays. 3. Returns the two arrays, one for direct sale listings and the other for auctions."
					}
				},
				"getNFTDetail(address,address[])": {
					"details": "Retrieves details of NFTs owned by a specific address across multiple contracts.",
					"params": {
						"_to": "The owner address whose NFTs are being queried.",
						"contractAddresses": "An array of contract addresses to query for NFT ownership."
					},
					"returns": {
						"_0": "MyNft[][] A two-dimensional array where each element represents an array of `MyNft` structs         containing details of NFTs owned by `_to` in the corresponding contract. Operation: 1. Initializes a two-dimensional array to hold NFT details from each contract. 2. Iterates over each contract address, querying for NFTs owned by `_to`. 3. Constructs an array of `MyNft` structs for each contract and fills it with the NFT details. 4. Returns a two-dimensional array containing NFT details for each contract."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setBuyerFee(uint256)": {
					"details": "Sets the percentage fee charged to buyers in NFT sales. Can only be called by the contract owner.",
					"params": {
						"_setBuyerFee": "The fee percentage to be charged to buyers."
					}
				},
				"setBuyerFeeAddress(address)": {
					"details": "Sets the address to receive buyer fees from NFT sales. Can only be called by the contract owner.",
					"params": {
						"_address": "The address to which buyer fees will be sent."
					}
				},
				"setSellerFee(uint256)": {
					"details": "Sets the percentage fee charged to sellers in NFT sales. Can only be called by the contract owner.",
					"params": {
						"_setSellerFee": "The fee percentage to be charged to sellers."
					}
				},
				"setSellerFeeAddress(address)": {
					"details": "Sets the address to receive seller fees from NFT sales. Can only be called by the contract owner.",
					"params": {
						"_address": "The address to which seller fees will be sent."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Marketplace  for the NFTS",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "Contarct is based on directly purchese or auction ",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/fatcat/marketplaceWithoutAuction.sol": "Marketplace"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts@4.9.0/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts@4.9.0/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts@4.9.0/token/ERC721/ERC721.sol": {
			"keccak256": "0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff",
			"license": "MIT",
			"urls": [
				"bzz-raw://7063b5c98711a98018ba4635ac74cee1c1cfa2ea01099498e062699ed9530005",
				"dweb:/ipfs/QmeJ8rGXkcv7RrqLdAW8PCXPAykxVsddfYY6g5NaTwmRFE"
			]
		},
		"@openzeppelin/contracts@4.9.0/token/ERC721/IERC721.sol": {
			"keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
				"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
			]
		},
		"@openzeppelin/contracts@4.9.0/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"@openzeppelin/contracts@4.9.0/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/introspection/ERC165.sol": {
			"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
				"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"@openzeppelin/contracts@4.9.0/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"contracts/fatcat/marketplaceWithoutAuction.sol": {
			"keccak256": "0xfec412030d169f72d671ba796704cee61cb3919a234e4901a21f086f34bf5878",
			"license": "MIT",
			"urls": [
				"bzz-raw://b0e55815f4fc86acd9af07703c0f211830c63f3291b4e7ab15e6466ebdbc37ea",
				"dweb:/ipfs/QmTzR2M7aEVeHL9SksNQnoHcb4rdFH8J3YrhHEVDzQH9oS"
			]
		}
	},
	"version": 1
}
{
	"id": "533c891238d4c23fafe533b90ab51665",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/TokenStaking/TokenStaking.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: andreitoma8\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ncontract ERC20Stakeable is Ownable{\n    using SafeERC20 for IERC20;\n    address public ERC721address;\n    address public owenerERC20;\n    address public ERC20Address;\n    uint public rewardrate ;\n    uint public unstaketimeval;\n    uint public totalOwnerToken;\n    uint rate;\n    struct Staker {\n        uint256 deposited;\n        uint256 timestake;\n        bool check; \n    }\n    mapping (address => Staker) public Details;\n    mapping (address => uint) public Reward;\n    mapping (address => uint ) public OwnerTokens;\n\n    /*\n    ~~~~~~~~~~~~~~~Constructor function~~~~~~~~~~~~~~~\n   1. This function is called when contract is first deployed.\n   2. It takes three parameters:\n        a. ER721 Token Address (Address of ER721 Token Contract)\n        b. Rate Percentage (Percentage value of rate i.e., Interest percentage)\n        c. ER720 Token Address (Address of ER720 Token Contract)\n    */\n    constructor(address _ERC721address, uint256 _ratePersentage, address _ERC20Address) {\n        ERC721address = _ERC721address;\n        rate = _ratePersentage;\n        ERC20Address = _ERC20Address;\n        owenerERC20 = msg.sender;\n    }\n    /*\n    ~~~~~~~~~~~~~Admin Add Token Function~~~~~~~~~~~~~~~\n    1. Owner add tokens into contract with this function\n    2. These tokens are used as rewards for staking\n    3. Only Owner can call this function\n    */\n    function AdminAddToken(uint _amount) public onlyOwner{\n        require(msg.sender==owenerERC20,\"Only Owner can transfer\");\n        OwnerTokens[msg.sender] +=_amount;\n        totalOwnerToken += _amount;\n        IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Admin WithDraw Token Function~~~~~~~~~~~~~~~\n    1. Admin withdraws his/her desired amount of token from contract.\n    2. Only Owner can call this function\n    */\n    function AdminWithDrawToken(uint amount) public onlyOwner{\n        OwnerTokens[msg.sender] -= amount;\n        totalOwnerToken -= amount;\n        IERC20(ERC20Address).safeTransfer(msg.sender, amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Utilization Function~~~~~~~~~~~~~~~\n    1. Owner call this function to check remaining percentage of tokens left in this contract.\n    2. Only Owner can call this function\n    */\n    function Utilization() public view onlyOwner returns(uint256) {\n        uint Persentage = (OwnerTokens[msg.sender] * 100)/totalOwnerToken;\n        return Persentage;\n    }\n    /*   ~~~~~~~~~~~~~Deposit Function~~~~~~~~~~~~~~~\n    1. This function has one parameter.\n    2. This function is used to deposit desired amount of tokens in this contract by user.\n    3. If user already deposited some tokens then he/she must has to withdraw all tokens first.\n    */\n    function Deposit(uint256 _amount) public {\n        require(!Details[msg.sender].check,\"Please First WithDraw\");\n        Details[msg.sender] = Staker(_amount,block.timestamp,true);\n        IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount);\n    }\n    /*   ~~~~~~~~~~~~~Withdraw Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw tokens.\n    2. User will call this function to withdraw all tokens from this contract.\n    */\n    function Withdraw() public {\n        require(Details[msg.sender].check,\"Please First Stake\");\n        uint amount = Details[msg.sender].deposited;\n        uint newval = calculateIntrest();\n        IERC20(ERC20Address).transfer(msg.sender, amount + newval);\n        OwnerTokens[owenerERC20] -= newval;\n        delete Details[msg.sender];\n    }\n\n    function showReward() public view returns(uint result)\n    {\n        uint RewardEst = (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake);\n        uint TotalReward = RewardEst / 6000;\n        result = TotalReward + Details[msg.sender].deposited;\n        return result;\n    }\n    /*   ~~~~~~~~~~~~~CalculateIntrest Function~~~~~~~~~~~~~~~\n    1. This function is used to calculate total reward generated.\n    2. Function will decide how much reward is generated after every minute by adding PercentageRate of deposited tokens .\n    */\n    function calculateIntrest() public view returns(uint256){\n        uint RewardEst = (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake);\n        uint TotalReward = RewardEst / 6000;\n        return TotalReward;\n    }\n    /*   ~~~~~~~~~~~~~UpdateERC721 Function~~~~~~~~~~~~~~~\n    1. This function is used update address of ERC721 token address.\n    2. Only Owner can call this function.\n    */\n    function UpdateERC721(address _ERC721address) public onlyOwner{\n        ERC721address = _ERC721address;\n    }\n    /*~~~~~~~~~~~~~UpdateERC20 Function~~~~~~~~~~~~~~~\n    1. This function is used update address of ERC20 token address.\n    2. Only Owner can call this function.\n    */\n    function UpdateERC20 ( address _ERC20Address) public onlyOwner{\n        ERC20Address = _ERC20Address;\n    }\n    /*~~~~~~~~~~~~~UpdateRatePersentage Function~~~~~~~~~~~~~~~\n    1. This function is used update Percentage Rate of rewards.\n    2. Only Owner can call this function.\n    */\n    function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{\n        rate = _ratePersentage;\n    }\n    function depositNFT(uint256 tokenIds) public {\n        require(msg.sender != ERC721address, \"Invalid address\");\n        IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\");\n    }\n\n    function withdrawNFT(uint256 tokenIds) public {\n        IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\");\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CREATE2 0x4E MLOAD 0x5C 0xDF 0xBB 0x2B 0xE0 SWAP13 0xE6 CALLCODE 0xBC EXTCODESIZE 0xE2 PUSH21 0x153E14FDC461E9817589C915E4E92C1664736F6C63 NUMBER STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CREATE2 0x4E MLOAD 0x5C 0xDF 0xBB 0x2B 0xE0 SWAP13 0xE6 CALLCODE 0xBC EXTCODESIZE 0xE2 PUSH21 0x153E14FDC461E9817589C915E4E92C1664736F6C63 NUMBER STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122014f54e515cdfbb2be09ce6f2bc3be274153e14fdc461e9817589c915e4e92c1664736f6c634300080d0033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID CALLCODE 0xDE KECCAK256 0x2E DUP6 BASEFEE 0x5C 0x2E PUSH6 0xC3034B138524 RETURNDATASIZE 0xD0 CALLVALUE SUB SWAP11 PUSH12 0xFC27D6C496CC4DB250086473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID CALLCODE 0xDE KECCAK256 0x2E DUP6 BASEFEE 0x5C 0x2E PUSH6 0xC3034B138524 RETURNDATASIZE 0xD0 CALLVALUE SUB SWAP11 PUSH12 0xFC27D6C496CC4DB250086473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122046f2de202e85485c2e65c3034b1385243dd034039a6bfc27d6c496cc4db2500864736f6c634300080d0033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/TokenStaking/TokenStaking.sol": {
				"ERC20Stakeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC721address",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_ratePersentage",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "AdminAddToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AdminWithDrawToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposited",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestake",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC20Address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC721address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "OwnerTokens",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Reward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"name": "UpdateERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC721address",
									"type": "address"
								}
							],
							"name": "UpdateERC721",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_ratePersentage",
									"type": "uint256"
								}
							],
							"name": "UpdateRatePersentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Utilization",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "calculateIntrest",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIds",
									"type": "uint256"
								}
							],
							"name": "depositNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owenerERC20",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardrate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "showReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "result",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalOwnerToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unstaketimeval",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIds",
									"type": "uint256"
								}
							],
							"name": "withdrawNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TokenStaking/TokenStaking.sol\":281:5869  contract ERC20Stakeable is Ownable{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1182:1417  constructor(address _ERC721address, uint256 _ratePersentage, address _ERC20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_7:\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1276:1289  ERC721address */\n  0x01\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1276:1306  ERC721address = _ERC721address */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1316:1320  rate */\n  0x07\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1316:1338  rate = _ratePersentage */\n  swap3\n  swap1\n  swap3\n  sstore\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1348:1360  ERC20Address */\n  0x03\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1348:1376  ERC20Address = _ERC20Address */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap1\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1386:1397  owenerERC20 */\n  0x02\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1386:1410  owenerERC20 = msg.sender */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1400:1410  msg.sender */\n  caller\n    /* \"contracts/TokenStaking/TokenStaking.sol\":1386:1410  owenerERC20 = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/TokenStaking/TokenStaking.sol\":281:5869  contract ERC20Stakeable is Ownable{... */\n  jump(tag_16)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:191   */\ntag_15:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  dup1\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_18:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:550   */\ntag_3:\n    /* \"#utility.yul\":284:290   */\n  0x00\n    /* \"#utility.yul\":292:298   */\n  dup1\n    /* \"#utility.yul\":300:306   */\n  0x00\n    /* \"#utility.yul\":353:355   */\n  0x60\n    /* \"#utility.yul\":341:350   */\n  dup5\n    /* \"#utility.yul\":332:339   */\n  dup7\n    /* \"#utility.yul\":328:351   */\n  sub\n    /* \"#utility.yul\":324:356   */\n  slt\n    /* \"#utility.yul\":321:373   */\n  iszero\n  tag_20\n  jumpi\n    /* \"#utility.yul\":369:370   */\n  0x00\n    /* \"#utility.yul\":366:367   */\n  dup1\n    /* \"#utility.yul\":359:371   */\n  revert\n    /* \"#utility.yul\":321:373   */\ntag_20:\n    /* \"#utility.yul\":392:432   */\n  tag_21\n    /* \"#utility.yul\":422:431   */\n  dup5\n    /* \"#utility.yul\":392:432   */\n  tag_15\n  jump\t// in\ntag_21:\n    /* \"#utility.yul\":382:432   */\n  swap3\n  pop\n    /* \"#utility.yul\":472:474   */\n  0x20\n    /* \"#utility.yul\":461:470   */\n  dup5\n    /* \"#utility.yul\":457:475   */\n  add\n    /* \"#utility.yul\":451:476   */\n  mload\n    /* \"#utility.yul\":441:476   */\n  swap2\n  pop\n    /* \"#utility.yul\":495:544   */\n  tag_22\n    /* \"#utility.yul\":540:542   */\n  0x40\n    /* \"#utility.yul\":529:538   */\n  dup6\n    /* \"#utility.yul\":525:543   */\n  add\n    /* \"#utility.yul\":495:544   */\n  tag_15\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":485:544   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:550   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\ntag_16:\n    /* \"contracts/TokenStaking/TokenStaking.sol\":281:5869  contract ERC20Stakeable is Ownable{... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/TokenStaking/TokenStaking.sol\":281:5869  contract ERC20Stakeable is Ownable{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa6021ace\n      gt\n      tag_27\n      jumpi\n      dup1\n      0xde9d3ddb\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xde9d3ddb\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xe88cc2be\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xe91a7ca6\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xee0106d2\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xf89d832f\n      eq\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0xa6021ace\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xa88e132f\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xab0ee2ac\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xb7171a2e\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xc0cd40ee\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc3c917b0\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x57488064\n      gt\n      tag_29\n      jumpi\n      dup1\n      0x57488064\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x57ea89b6\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x5eb82e94\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x7b2f247f\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0x023245d7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0ccff6e9\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x10fd4fba\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x275bd33f\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x2ffce210\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x4d6ce1e5\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5726:5867  function withdrawNFT(uint256 tokenIds) public {... */\n    tag_3:\n      tag_30\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n    tag_30:\n      stop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":513:540  uint public totalOwnerToken */\n    tag_4:\n      tag_34\n      sload(0x06)\n      dup2\n      jump\n    tag_34:\n      mload(0x40)\n        /* \"#utility.yul\":345:370   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":333:335   */\n      0x20\n        /* \"#utility.yul\":318:336   */\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":513:540  uint public totalOwnerToken */\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/TokenStaking/TokenStaking.sol\":387:413  address public owenerERC20 */\n    tag_5:\n      sload(0x02)\n      tag_38\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_38:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":545:577   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":527:578   */\n      dup2\n      mstore\n        /* \"#utility.yul\":515:517   */\n      0x20\n        /* \"#utility.yul\":500:518   */\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":387:413  address public owenerERC20 */\n      tag_36\n        /* \"#utility.yul\":381:584   */\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5112:5219  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n    tag_6:\n      tag_30\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":755:800  mapping (address => uint ) public OwnerTokens */\n    tag_7:\n      tag_34\n      tag_47\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_47:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3002:3271  function Deposit(uint256 _amount) public {... */\n    tag_8:\n      tag_30\n      tag_51\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":710:749  mapping (address => uint) public Reward */\n    tag_9:\n      tag_34\n      tag_54\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_54:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3466:3808  function Withdraw() public {... */\n    tag_10:\n      tag_30\n      tag_58\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":452:474  uint public rewardrate */\n    tag_11:\n      tag_34\n      sload(0x04)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n      tag_30\n      tag_63\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2538:2709  function Utilization() public view onlyOwner returns(uint256) {... */\n    tag_13:\n      tag_34\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_14:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      jump(tag_38)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":419:446  address public ERC20Address */\n    tag_15:\n      sload(0x03)\n      tag_38\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2125:2330  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n    tag_16:\n      tag_30\n      tag_74\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_74:\n      tag_75\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3814:4127  function showReward() public view returns(uint result)... */\n    tag_17:\n      tag_34\n      tag_77\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":353:381  address public ERC721address */\n    tag_18:\n      sload(0x01)\n      tag_38\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1643:1933  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_19:\n      tag_30\n      tag_83\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_83:\n      tag_84\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4391:4644  function calculateIntrest() public view returns(uint256){... */\n    tag_20:\n      tag_34\n      tag_86\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":481:507  uint public unstaketimeval */\n    tag_21:\n      tag_34\n      sload(0x05)\n      dup2\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":662:704  mapping (address => Staker) public Details */\n    tag_22:\n      tag_91\n      tag_92\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_92:\n      mstore(0x20, 0x08)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup4\n      jump\n    tag_91:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1076:1101   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":1132:1134   */\n      0x20\n        /* \"#utility.yul\":1117:1135   */\n      dup5\n      add\n        /* \"#utility.yul\":1110:1144   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":1187:1201   */\n      iszero\n        /* \"#utility.yul\":1180:1202   */\n      iszero\n        /* \"#utility.yul\":1160:1178   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":1153:1203   */\n      mstore\n        /* \"#utility.yul\":1064:1066   */\n      0x60\n        /* \"#utility.yul\":1049:1067   */\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":662:704  mapping (address => Staker) public Details */\n      tag_36\n        /* \"#utility.yul\":880:1209   */\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5516:5720  function depositNFT(uint256 tokenIds) public {... */\n    tag_23:\n      tag_30\n      tag_97\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_97:\n      tag_98\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4826:4935  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n    tag_24:\n      tag_30\n      tag_100\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_100:\n      tag_101\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_25:\n      tag_30\n      tag_103\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_103:\n      tag_104\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5401:5511  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n    tag_26:\n      tag_30\n      tag_106\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_106:\n      tag_107\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5726:5867  function withdrawNFT(uint256 tokenIds) public {... */\n    tag_33:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5790:5803  ERC721address */\n      sload(0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5782:5860  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      mload(0x40)\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5830:5834  this */\n      address\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5782:5860  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1519:1553   */\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5837:5847  msg.sender */\n      caller\n        /* \"#utility.yul\":1569:1587   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1562:1605   */\n      mstore\n        /* \"#utility.yul\":1621:1639   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":1614:1648   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":1684:1687   */\n      0x80\n        /* \"#utility.yul\":1664:1682   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":1657:1688   */\n      mstore\n      0x00\n        /* \"#utility.yul\":1704:1723   */\n      0x84\n      dup3\n      add\n        /* \"#utility.yul\":1697:1727   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5790:5803  ERC721address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5782:5821  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap1\n        /* \"#utility.yul\":1744:1763   */\n      0xa4\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5782:5860  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n    tag_109:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_113\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_113:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5726:5867  function withdrawNFT(uint256 tokenIds) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5112:5219  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n    tag_45:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_115\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_115:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5184:5196  ERC20Address */\n      0x03\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5184:5212  ERC20Address = _ERC20Address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5112:5219  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3002:3271  function Deposit(uint256 _amount) public {... */\n    tag_52:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3070:3080  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3062:3081  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3062:3069  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3062:3081  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3062:3087  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3061:3087  !Details[msg.sender].check */\n      iszero\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3053:3112  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1976:1978   */\n      0x20\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3053:3112  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1958:1979   */\n      mstore\n        /* \"#utility.yul\":2015:2017   */\n      0x15\n        /* \"#utility.yul\":1995:2013   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1988:2018   */\n      mstore\n      shl(0x58, 0x506c65617365204669727374205769746844726177)\n        /* \"#utility.yul\":2034:2052   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2027:2078   */\n      mstore\n        /* \"#utility.yul\":2095:2113   */\n      0x64\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3053:3112  require(!Details[msg.sender].check,\"Please First WithDraw\") */\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3144:3180  Staker(_amount,block.timestamp,true) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      dup3\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3159:3174  block.timestamp */\n      timestamp\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3144:3180  Staker(_amount,block.timestamp,true) */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3175:3179  true */\n      0x01\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3144:3180  Staker(_amount,block.timestamp,true) */\n      dup4\n      dup6\n      add\n      dup2\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3130:3140  msg.sender */\n      caller\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3122:3141  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3122:3129  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3122:3141  Details[msg.sender] */\n      swap1\n      swap5\n      mstore\n      swap6\n      swap1\n      swap3\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3122:3180  Details[msg.sender] = Staker(_amount,block.timestamp,true) */\n      swap4\n      mload\n      dup5\n      sstore\n      swap2\n      mload\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      mload\n      0x02\n      swap1\n      swap2\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3197:3209  ERC20Address */\n      sload(0x03)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3190:3264  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      tag_122\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3197:3209  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3248:3252  this */\n      address\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3144:3180  Staker(_amount,block.timestamp,true) */\n      dup5\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3190:3227  IERC20(ERC20Address).safeTransferFrom */\n      tag_123\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3190:3264  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3002:3271  function Deposit(uint256 _amount) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3466:3808  function Withdraw() public {... */\n    tag_58:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3519:3529  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3511:3530  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3511:3518  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3511:3530  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3511:3536  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3503:3558  require(Details[msg.sender].check,\"Please First Stake\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2326:2328   */\n      0x20\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3503:3558  require(Details[msg.sender].check,\"Please First Stake\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2308:2329   */\n      mstore\n        /* \"#utility.yul\":2365:2367   */\n      0x12\n        /* \"#utility.yul\":2345:2363   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2338:2368   */\n      mstore\n      shl(0x70, 0x506c65617365204669727374205374616b65)\n        /* \"#utility.yul\":2384:2402   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2377:2425   */\n      mstore\n        /* \"#utility.yul\":2442:2460   */\n      0x64\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3503:3558  require(Details[msg.sender].check,\"Please First Stake\") */\n      tag_120\n        /* \"#utility.yul\":2124:2466   */\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3503:3558  require(Details[msg.sender].check,\"Please First Stake\") */\n    tag_125:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3590:3600  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3568:3579  uint amount */\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3582:3601  Details[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3582:3589  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3582:3601  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3582:3611  Details[msg.sender].deposited */\n      sload\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3635:3653  calculateIntrest() */\n      tag_128\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3635:3651  calculateIntrest */\n      tag_86\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3635:3653  calculateIntrest() */\n      jump\t// in\n    tag_128:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3670:3682  ERC20Address */\n      sload(0x03)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3621:3653  uint newval = calculateIntrest() */\n      swap1\n      swap2\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3670:3682  ERC20Address */\n      and\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3663:3692  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3693:3703  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3705:3720  amount + newval */\n      tag_129\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3621:3653  uint newval = calculateIntrest() */\n      dup5\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3705:3711  amount */\n      dup7\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3705:3720  amount + newval */\n      tag_130\n      jump\t// in\n    tag_129:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3663:3721  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2928:2960   */\n      swap1\n      swap3\n      and\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3663:3721  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":2910:2961   */\n      mstore\n        /* \"#utility.yul\":2977:2995   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2970:3004   */\n      mstore\n        /* \"#utility.yul\":2883:2901   */\n      0x44\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3663:3721  IERC20(ERC20Address).transfer(msg.sender, amount + newval) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_134\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_134:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_135\n      swap2\n      swap1\n      tag_136\n      jump\t// in\n    tag_135:\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3743:3754  owenerERC20 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3755  OwnerTokens[owenerERC20] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3742  OwnerTokens */\n      0x0a\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3755  OwnerTokens[owenerERC20] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3765  OwnerTokens[owenerERC20] -= newval */\n      dup1\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3759:3765  newval */\n      dup4\n      swap3\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3755  OwnerTokens[owenerERC20] */\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3765  OwnerTokens[owenerERC20] -= newval */\n      tag_137\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3759:3765  newval */\n      dup5\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3731:3765  OwnerTokens[owenerERC20] -= newval */\n      tag_138\n      jump\t// in\n    tag_137:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3790:3800  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3782:3801  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3782:3789  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3782:3801  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3775:3801  delete Details[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      0x02\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3466:3808  function Withdraw() public {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_140\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_140:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_142\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_143\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_142:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2538:2709  function Utilization() public view onlyOwner returns(uint256) {... */\n    tag_65:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2591:2598  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_145\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_145:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2660:2675  totalOwnerToken */\n      sload(0x06)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2641:2651  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2610:2625  uint Persentage */\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2629:2652  OwnerTokens[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2629:2640  OwnerTokens */\n      0x0a\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2629:2652  OwnerTokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2610:2625  uint Persentage */\n      swap1\n      swap2\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2660:2675  totalOwnerToken */\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2629:2658  OwnerTokens[msg.sender] * 100 */\n      tag_147\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2655:2658  100 */\n      0x64\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2629:2658  OwnerTokens[msg.sender] * 100 */\n      tag_148\n      jump\t// in\n    tag_147:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2628:2675  (OwnerTokens[msg.sender] * 100)/totalOwnerToken */\n      tag_149\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_149:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2610:2675  uint Persentage = (OwnerTokens[msg.sender] * 100)/totalOwnerToken */\n      swap2\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2538:2709  function Utilization() public view onlyOwner returns(uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2125:2330  function AdminWithDrawToken(uint amount) public onlyOwner{... */\n    tag_75:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_153\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_153:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2204:2214  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2215  OwnerTokens[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2203  OwnerTokens */\n      0x0a\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2215  OwnerTokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2225  OwnerTokens[msg.sender] -= amount */\n      dup1\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2219:2225  amount */\n      dup4\n      swap3\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2215  OwnerTokens[msg.sender] */\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2225  OwnerTokens[msg.sender] -= amount */\n      tag_155\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2219:2225  amount */\n      dup5\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2192:2225  OwnerTokens[msg.sender] -= amount */\n      tag_138\n      jump\t// in\n    tag_155:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2254:2260  amount */\n      dup1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2235:2250  totalOwnerToken */\n      0x06\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2235:2260  totalOwnerToken -= amount */\n      dup3\n      dup3\n      sload\n      tag_156\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_156:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2277:2289  ERC20Address */\n      sload(0x03)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2270:2323  IERC20(ERC20Address).safeTransfer(msg.sender, amount) */\n      tag_122\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2277:2289  ERC20Address */\n      and\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2304:2314  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2316:2322  amount */\n      dup4\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2270:2303  IERC20(ERC20Address).safeTransfer */\n      tag_158\n        /* \"contracts/TokenStaking/TokenStaking.sol\":2270:2323  IERC20(ERC20Address).safeTransfer(msg.sender, amount) */\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3814:4127  function showReward() public view returns(uint result)... */\n    tag_77:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3968:3978  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3856:3867  uint result */\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3960:3979  Details[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3960:3967  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3960:3979  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3960:3989  Details[msg.sender].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3856:3867  uint result */\n      dup2\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3942:3989  block.timestamp - Details[msg.sender].timestake */\n      tag_160\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3942:3957  block.timestamp */\n      timestamp\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3942:3989  block.timestamp - Details[msg.sender].timestake */\n      tag_138\n      jump\t// in\n    tag_160:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3933:3937  rate */\n      sload(0x07)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3909:3919  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3901:3920  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3901:3908  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3901:3920  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3901:3930  Details[msg.sender].deposited */\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3901:3937  Details[msg.sender].deposited * rate */\n      tag_161\n      swap2\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3933:3937  rate */\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3901:3937  Details[msg.sender].deposited * rate */\n      tag_148\n      jump\t// in\n    tag_161:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3900:3990  (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake) */\n      tag_162\n      swap2\n      swap1\n      tag_148\n      jump\t// in\n    tag_162:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3883:3990  uint RewardEst = (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake) */\n      swap1\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4000:4016  uint TotalReward */\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4019:4035  RewardEst / 6000 */\n      tag_163\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4031:4035  6000 */\n      0x1770\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3883:3990  uint RewardEst = (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake) */\n      dup4\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4019:4035  RewardEst / 6000 */\n      tag_150\n      jump\t// in\n    tag_163:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4076:4086  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4068:4087  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4068:4075  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4068:4087  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4068:4097  Details[msg.sender].deposited */\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4000:4035  uint TotalReward = RewardEst / 6000 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4054:4097  TotalReward + Details[msg.sender].deposited */\n      tag_164\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4000:4035  uint TotalReward = RewardEst / 6000 */\n      dup3\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4054:4097  TotalReward + Details[msg.sender].deposited */\n      tag_130\n      jump\t// in\n    tag_164:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4045:4097  result = TotalReward + Details[msg.sender].deposited */\n      swap3\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4107:4120  return result */\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":3814:4127  function showReward() public view returns(uint result)... */\n      swap1\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1643:1933  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_166\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_166:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1726:1737  owenerERC20 */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1714:1724  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1714:1737  msg.sender==owenerERC20 */\n      eq\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1706:1764  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4024:4026   */\n      0x20\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1706:1764  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4006:4027   */\n      mstore\n        /* \"#utility.yul\":4063:4065   */\n      0x17\n        /* \"#utility.yul\":4043:4061   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4036:4066   */\n      mstore\n        /* \"#utility.yul\":4102:4127   */\n      0x4f6e6c79204f776e65722063616e207472616e73666572000000000000000000\n        /* \"#utility.yul\":4082:4100   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4075:4128   */\n      mstore\n        /* \"#utility.yul\":4145:4163   */\n      0x64\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1706:1764  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n      tag_120\n        /* \"#utility.yul\":3822:4169   */\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1706:1764  require(msg.sender==owenerERC20,\"Only Owner can transfer\") */\n    tag_168:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1786:1796  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1797  OwnerTokens[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1785  OwnerTokens */\n      0x0a\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1797  OwnerTokens[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1807  OwnerTokens[msg.sender] +=_amount */\n      dup1\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1800:1807  _amount */\n      dup4\n      swap3\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1797  OwnerTokens[msg.sender] */\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1807  OwnerTokens[msg.sender] +=_amount */\n      tag_171\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1800:1807  _amount */\n      dup5\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1774:1807  OwnerTokens[msg.sender] +=_amount */\n      tag_130\n      jump\t// in\n    tag_171:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1836:1843  _amount */\n      dup1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1817:1832  totalOwnerToken */\n      0x06\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1817:1843  totalOwnerToken += _amount */\n      dup3\n      dup3\n      sload\n      tag_172\n      swap2\n      swap1\n      tag_130\n      jump\t// in\n    tag_172:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1860:1872  ERC20Address */\n      sload(0x03)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1853:1926  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      tag_122\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1860:1872  ERC20Address */\n      and\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1891:1901  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1911:1915  this */\n      address\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1918:1925  _amount */\n      dup5\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1853:1890  IERC20(ERC20Address).safeTransferFrom */\n      tag_123\n        /* \"contracts/TokenStaking/TokenStaking.sol\":1853:1926  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4391:4644  function calculateIntrest() public view returns(uint256){... */\n    tag_86:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4542:4552  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4439:4446  uint256 */\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4534:4553  Details[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4534:4541  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4534:4553  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4534:4563  Details[msg.sender].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4439:4446  uint256 */\n      dup2\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4516:4563  block.timestamp - Details[msg.sender].timestake */\n      tag_175\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4516:4531  block.timestamp */\n      timestamp\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4516:4563  block.timestamp - Details[msg.sender].timestake */\n      tag_138\n      jump\t// in\n    tag_175:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4507:4511  rate */\n      sload(0x07)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4483:4493  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4475:4494  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4475:4482  Details */\n      0x08\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4475:4494  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4475:4504  Details[msg.sender].deposited */\n      sload\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4475:4511  Details[msg.sender].deposited * rate */\n      tag_176\n      swap2\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4507:4511  rate */\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4475:4511  Details[msg.sender].deposited * rate */\n      tag_148\n      jump\t// in\n    tag_176:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4474:4564  (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake) */\n      tag_177\n      swap2\n      swap1\n      tag_148\n      jump\t// in\n    tag_177:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4457:4564  uint RewardEst = (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake) */\n      swap1\n      pop\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4574:4590  uint TotalReward */\n      0x00\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4593:4609  RewardEst / 6000 */\n      tag_178\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4605:4609  6000 */\n      0x1770\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4457:4564  uint RewardEst = (Details[msg.sender].deposited * rate) * (block.timestamp - Details[msg.sender].timestake) */\n      dup4\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4593:4609  RewardEst / 6000 */\n      tag_150\n      jump\t// in\n    tag_178:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4574:4609  uint TotalReward = RewardEst / 6000 */\n      swap4\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4391:4644  function calculateIntrest() public view returns(uint256){... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5516:5720  function depositNFT(uint256 tokenIds) public {... */\n    tag_98:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5593:5606  ERC721address */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5579:5589  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5579:5606  msg.sender != ERC721address */\n      sub\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5571:5626  require(msg.sender != ERC721address, \"Invalid address\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4376:4378   */\n      0x20\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5571:5626  require(msg.sender != ERC721address, \"Invalid address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4358:4379   */\n      mstore\n        /* \"#utility.yul\":4415:4417   */\n      0x0f\n        /* \"#utility.yul\":4395:4413   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4388:4418   */\n      mstore\n      shl(0x88, 0x496e76616c69642061646472657373)\n        /* \"#utility.yul\":4434:4452   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4427:4472   */\n      mstore\n        /* \"#utility.yul\":4489:4507   */\n      0x64\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5571:5626  require(msg.sender != ERC721address, \"Invalid address\") */\n      tag_120\n        /* \"#utility.yul\":4174:4513   */\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5571:5626  require(msg.sender != ERC721address, \"Invalid address\") */\n    tag_180:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5644:5657  ERC721address */\n      sload(0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5636:5713  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      mload(0x40)\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5676:5686  msg.sender */\n      caller\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5636:5713  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1519:1553   */\n      mstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5695:5699  this */\n      address\n        /* \"#utility.yul\":1569:1587   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1562:1605   */\n      mstore\n        /* \"#utility.yul\":1621:1639   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":1614:1648   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":1684:1687   */\n      0x80\n        /* \"#utility.yul\":1664:1682   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":1657:1688   */\n      mstore\n      0x00\n        /* \"#utility.yul\":1704:1723   */\n      0x84\n      dup3\n      add\n        /* \"#utility.yul\":1697:1727   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5644:5657  ERC721address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5636:5675  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap1\n        /* \"#utility.yul\":1744:1763   */\n      0xa4\n      add\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5636:5713  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      tag_109\n        /* \"#utility.yul\":1214:1769   */\n      jump\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4826:4935  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n    tag_101:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_188\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_188:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4898:4911  ERC721address */\n      0x01\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4898:4928  ERC721address = _ERC721address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":4826:4935  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_191\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_191:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_193\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4720:4722   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4702:4723   */\n      mstore\n        /* \"#utility.yul\":4759:4761   */\n      0x26\n        /* \"#utility.yul\":4739:4757   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4732:4762   */\n      mstore\n        /* \"#utility.yul\":4798:4832   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4778:4796   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4771:4833   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":4849:4867   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4842:4878   */\n      mstore\n        /* \"#utility.yul\":4895:4914   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_120\n        /* \"#utility.yul\":4518:4920   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_193:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_122\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_143\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5401:5511  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n    tag_107:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_198\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_198:\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5482:5486  rate */\n      0x07\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5482:5504  rate = _ratePersentage */\n      sstore\n        /* \"contracts/TokenStaking/TokenStaking.sol\":5401:5511  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_116:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_142\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5127:5129   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5109:5130   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5146:5164   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5139:5169   */\n      mstore\n        /* \"#utility.yul\":5205:5239   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":5185:5203   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5178:5240   */\n      mstore\n        /* \"#utility.yul\":5257:5275   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_120\n        /* \"#utility.yul\":4925:5281   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_123:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5544:5559   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":5526:5560   */\n      mstore\n        /* \"#utility.yul\":5596:5611   */\n      dup4\n      and\n        /* \"#utility.yul\":5576:5594   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5569:5612   */\n      mstore\n        /* \"#utility.yul\":5628:5646   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":5621:5655   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_208\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":5461:5479   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n    tag_209:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_211\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_208:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_143:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_158:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2928:2960   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2910:2961   */\n      mstore\n        /* \"#utility.yul\":2977:2995   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":2970:3004   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_214\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":2883:2901   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      tag_209\n        /* \"#utility.yul\":2736:3010   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n    tag_214:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_211:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_218\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_219\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_214\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_221\n      swap2\n      swap1\n      tag_136\n      jump\t// in\n    tag_221:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_214\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5868:5870   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5850:5871   */\n      mstore\n        /* \"#utility.yul\":5907:5909   */\n      0x2a\n        /* \"#utility.yul\":5887:5905   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5880:5910   */\n      mstore\n        /* \"#utility.yul\":5946:5980   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":5926:5944   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5919:5981   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":5997:6015   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5990:6030   */\n      mstore\n        /* \"#utility.yul\":6047:6066   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_120\n        /* \"#utility.yul\":5666:6072   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_219:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_226\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4058  functionCallWithValue */\n      tag_227\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_226:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4030:4089  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n    tag_227:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5125:5137  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5182:5187  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5178  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5157:5187  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6279:6281   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6261:6282   */\n      mstore\n        /* \"#utility.yul\":6318:6320   */\n      0x26\n        /* \"#utility.yul\":6298:6316   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6291:6321   */\n      mstore\n        /* \"#utility.yul\":6357:6391   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":6337:6355   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6330:6392   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":6408:6426   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6401:6437   */\n      mstore\n        /* \"#utility.yul\":6454:6473   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_120\n        /* \"#utility.yul\":6077:6479   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5149:5230  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_229:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_232\n      swap2\n      swap1\n      tag_233\n      jump\t// in\n    tag_232:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_236\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_235)\n    tag_236:\n      0x60\n      swap2\n      pop\n    tag_235:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_237\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_238\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_237:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_238:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_240\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7711  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7722:7723  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7723  returndata.length == 0 */\n      sub\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_244\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_244\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7228:7230   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7210:7231   */\n      mstore\n        /* \"#utility.yul\":7267:7269   */\n      0x1d\n        /* \"#utility.yul\":7247:7265   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7240:7270   */\n      mstore\n        /* \"#utility.yul\":7306:7337   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":7286:7304   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7279:7338   */\n      mstore\n        /* \"#utility.yul\":7355:7373   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_120\n        /* \"#utility.yul\":7026:7379   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n    tag_244:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      jump(tag_226)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_240:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_226\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      tag_252\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_252:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap2\n      swap1\n      tag_255\n      jump\t// in\n        /* \"#utility.yul\":14:194   */\n    tag_32:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_260\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_260:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":589:875   */\n    tag_44:\n        /* \"#utility.yul\":648:654   */\n      0x00\n        /* \"#utility.yul\":701:703   */\n      0x20\n        /* \"#utility.yul\":689:698   */\n      dup3\n        /* \"#utility.yul\":680:687   */\n      dup5\n        /* \"#utility.yul\":676:699   */\n      sub\n        /* \"#utility.yul\":672:704   */\n      slt\n        /* \"#utility.yul\":669:721   */\n      iszero\n      tag_264\n      jumpi\n        /* \"#utility.yul\":717:718   */\n      0x00\n        /* \"#utility.yul\":714:715   */\n      dup1\n        /* \"#utility.yul\":707:719   */\n      revert\n        /* \"#utility.yul\":669:721   */\n    tag_264:\n        /* \"#utility.yul\":743:766   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":795:826   */\n      dup2\n      and\n        /* \"#utility.yul\":785:827   */\n      dup2\n      eq\n        /* \"#utility.yul\":775:845   */\n      tag_178\n      jumpi\n        /* \"#utility.yul\":841:842   */\n      0x00\n        /* \"#utility.yul\":838:839   */\n      dup1\n        /* \"#utility.yul\":831:843   */\n      revert\n        /* \"#utility.yul\":2471:2598   */\n    tag_256:\n        /* \"#utility.yul\":2532:2542   */\n      0x4e487b71\n        /* \"#utility.yul\":2527:2530   */\n      0xe0\n        /* \"#utility.yul\":2523:2543   */\n      shl\n        /* \"#utility.yul\":2520:2521   */\n      0x00\n        /* \"#utility.yul\":2513:2544   */\n      mstore\n        /* \"#utility.yul\":2563:2567   */\n      0x11\n        /* \"#utility.yul\":2560:2561   */\n      0x04\n        /* \"#utility.yul\":2553:2568   */\n      mstore\n        /* \"#utility.yul\":2587:2591   */\n      0x24\n        /* \"#utility.yul\":2584:2585   */\n      0x00\n        /* \"#utility.yul\":2577:2592   */\n      revert\n        /* \"#utility.yul\":2603:2731   */\n    tag_130:\n        /* \"#utility.yul\":2643:2646   */\n      0x00\n        /* \"#utility.yul\":2674:2675   */\n      dup3\n        /* \"#utility.yul\":2670:2676   */\n      not\n        /* \"#utility.yul\":2667:2668   */\n      dup3\n        /* \"#utility.yul\":2664:2677   */\n      gt\n        /* \"#utility.yul\":2661:2700   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":2680:2698   */\n      tag_273\n      tag_256\n      jump\t// in\n    tag_273:\n      pop\n        /* \"#utility.yul\":2716:2725   */\n      add\n      swap1\n        /* \"#utility.yul\":2603:2731   */\n      jump\t// out\n        /* \"#utility.yul\":3015:3292   */\n    tag_136:\n        /* \"#utility.yul\":3082:3088   */\n      0x00\n        /* \"#utility.yul\":3135:3137   */\n      0x20\n        /* \"#utility.yul\":3123:3132   */\n      dup3\n        /* \"#utility.yul\":3114:3121   */\n      dup5\n        /* \"#utility.yul\":3110:3133   */\n      sub\n        /* \"#utility.yul\":3106:3138   */\n      slt\n        /* \"#utility.yul\":3103:3155   */\n      iszero\n      tag_276\n      jumpi\n        /* \"#utility.yul\":3151:3152   */\n      0x00\n        /* \"#utility.yul\":3148:3149   */\n      dup1\n        /* \"#utility.yul\":3141:3153   */\n      revert\n        /* \"#utility.yul\":3103:3155   */\n    tag_276:\n        /* \"#utility.yul\":3183:3192   */\n      dup2\n        /* \"#utility.yul\":3177:3193   */\n      mload\n        /* \"#utility.yul\":3236:3241   */\n      dup1\n        /* \"#utility.yul\":3229:3242   */\n      iszero\n        /* \"#utility.yul\":3222:3243   */\n      iszero\n        /* \"#utility.yul\":3215:3220   */\n      dup2\n        /* \"#utility.yul\":3212:3244   */\n      eq\n        /* \"#utility.yul\":3202:3262   */\n      tag_178\n      jumpi\n        /* \"#utility.yul\":3258:3259   */\n      0x00\n        /* \"#utility.yul\":3255:3256   */\n      dup1\n        /* \"#utility.yul\":3248:3260   */\n      revert\n        /* \"#utility.yul\":3297:3422   */\n    tag_138:\n        /* \"#utility.yul\":3337:3341   */\n      0x00\n        /* \"#utility.yul\":3365:3366   */\n      dup3\n        /* \"#utility.yul\":3362:3363   */\n      dup3\n        /* \"#utility.yul\":3359:3367   */\n      lt\n        /* \"#utility.yul\":3356:3390   */\n      iszero\n      tag_280\n      jumpi\n        /* \"#utility.yul\":3370:3388   */\n      tag_280\n      tag_256\n      jump\t// in\n    tag_280:\n      pop\n        /* \"#utility.yul\":3407:3416   */\n      sub\n      swap1\n        /* \"#utility.yul\":3297:3422   */\n      jump\t// out\n        /* \"#utility.yul\":3427:3595   */\n    tag_148:\n        /* \"#utility.yul\":3467:3474   */\n      0x00\n        /* \"#utility.yul\":3533:3534   */\n      dup2\n        /* \"#utility.yul\":3529:3530   */\n      0x00\n        /* \"#utility.yul\":3525:3531   */\n      not\n        /* \"#utility.yul\":3521:3535   */\n      div\n        /* \"#utility.yul\":3518:3519   */\n      dup4\n        /* \"#utility.yul\":3515:3536   */\n      gt\n        /* \"#utility.yul\":3510:3511   */\n      dup3\n        /* \"#utility.yul\":3503:3512   */\n      iszero\n        /* \"#utility.yul\":3496:3513   */\n      iszero\n        /* \"#utility.yul\":3492:3537   */\n      and\n        /* \"#utility.yul\":3489:3560   */\n      iszero\n      tag_283\n      jumpi\n        /* \"#utility.yul\":3540:3558   */\n      tag_283\n      tag_256\n      jump\t// in\n    tag_283:\n      pop\n        /* \"#utility.yul\":3580:3589   */\n      mul\n      swap1\n        /* \"#utility.yul\":3427:3595   */\n      jump\t// out\n        /* \"#utility.yul\":3600:3817   */\n    tag_150:\n        /* \"#utility.yul\":3640:3641   */\n      0x00\n        /* \"#utility.yul\":3666:3667   */\n      dup3\n        /* \"#utility.yul\":3656:3788   */\n      tag_285\n      jumpi\n        /* \"#utility.yul\":3710:3720   */\n      0x4e487b71\n        /* \"#utility.yul\":3705:3708   */\n      0xe0\n        /* \"#utility.yul\":3701:3721   */\n      shl\n        /* \"#utility.yul\":3698:3699   */\n      0x00\n        /* \"#utility.yul\":3691:3722   */\n      mstore\n        /* \"#utility.yul\":3745:3749   */\n      0x12\n        /* \"#utility.yul\":3742:3743   */\n      0x04\n        /* \"#utility.yul\":3735:3750   */\n      mstore\n        /* \"#utility.yul\":3773:3777   */\n      0x24\n        /* \"#utility.yul\":3770:3771   */\n      0x00\n        /* \"#utility.yul\":3763:3778   */\n      revert\n        /* \"#utility.yul\":3656:3788   */\n    tag_285:\n      pop\n        /* \"#utility.yul\":3802:3811   */\n      div\n      swap1\n        /* \"#utility.yul\":3600:3817   */\n      jump\t// out\n        /* \"#utility.yul\":6484:6742   */\n    tag_257:\n        /* \"#utility.yul\":6556:6557   */\n      0x00\n        /* \"#utility.yul\":6566:6679   */\n    tag_294:\n        /* \"#utility.yul\":6580:6586   */\n      dup4\n        /* \"#utility.yul\":6577:6578   */\n      dup2\n        /* \"#utility.yul\":6574:6587   */\n      lt\n        /* \"#utility.yul\":6566:6679   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":6656:6667   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":6650:6668   */\n      mload\n        /* \"#utility.yul\":6637:6648   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":6630:6669   */\n      mstore\n        /* \"#utility.yul\":6602:6604   */\n      0x20\n        /* \"#utility.yul\":6595:6605   */\n      add\n        /* \"#utility.yul\":6566:6679   */\n      jump(tag_294)\n    tag_296:\n        /* \"#utility.yul\":6697:6703   */\n      dup4\n        /* \"#utility.yul\":6694:6695   */\n      dup2\n        /* \"#utility.yul\":6691:6704   */\n      gt\n        /* \"#utility.yul\":6688:6736   */\n      iszero\n      tag_208\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":6732:6733   */\n      0x00\n        /* \"#utility.yul\":6714:6730   */\n      swap2\n      add\n        /* \"#utility.yul\":6707:6734   */\n      mstore\n        /* \"#utility.yul\":6484:6742   */\n      jump\t// out\n        /* \"#utility.yul\":6747:7021   */\n    tag_233:\n        /* \"#utility.yul\":6876:6879   */\n      0x00\n        /* \"#utility.yul\":6914:6920   */\n      dup3\n        /* \"#utility.yul\":6908:6921   */\n      mload\n        /* \"#utility.yul\":6930:6983   */\n      tag_299\n        /* \"#utility.yul\":6976:6982   */\n      dup2\n        /* \"#utility.yul\":6971:6974   */\n      dup5\n        /* \"#utility.yul\":6964:6968   */\n      0x20\n        /* \"#utility.yul\":6956:6962   */\n      dup8\n        /* \"#utility.yul\":6952:6969   */\n      add\n        /* \"#utility.yul\":6930:6983   */\n      tag_257\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":6999:7015   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":6747:7021   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7384:7767   */\n    tag_255:\n        /* \"#utility.yul\":7533:7535   */\n      0x20\n        /* \"#utility.yul\":7522:7531   */\n      dup2\n        /* \"#utility.yul\":7515:7536   */\n      mstore\n        /* \"#utility.yul\":7496:7500   */\n      0x00\n        /* \"#utility.yul\":7565:7571   */\n      dup3\n        /* \"#utility.yul\":7559:7572   */\n      mload\n        /* \"#utility.yul\":7608:7614   */\n      dup1\n        /* \"#utility.yul\":7603:7605   */\n      0x20\n        /* \"#utility.yul\":7592:7601   */\n      dup5\n        /* \"#utility.yul\":7588:7606   */\n      add\n        /* \"#utility.yul\":7581:7615   */\n      mstore\n        /* \"#utility.yul\":7624:7690   */\n      tag_302\n        /* \"#utility.yul\":7683:7689   */\n      dup2\n        /* \"#utility.yul\":7678:7680   */\n      0x40\n        /* \"#utility.yul\":7667:7676   */\n      dup6\n        /* \"#utility.yul\":7663:7681   */\n      add\n        /* \"#utility.yul\":7658:7660   */\n      0x20\n        /* \"#utility.yul\":7650:7656   */\n      dup8\n        /* \"#utility.yul\":7646:7661   */\n      add\n        /* \"#utility.yul\":7624:7690   */\n      tag_257\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":7751:7753   */\n      0x1f\n        /* \"#utility.yul\":7730:7745   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":7726:7755   */\n      and\n        /* \"#utility.yul\":7711:7756   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":7758:7760   */\n      0x40\n        /* \"#utility.yul\":7707:7761   */\n      add\n      swap3\n        /* \"#utility.yul\":7384:7767   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220408469befa2ee4d4f85eaeb01cf2185c3ffed8cc015cf611651a742ca7af5e5164736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1090": {
									"entryPoint": null,
									"id": 1090,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_996": {
									"entryPoint": null,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 124,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 204,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_address_fromMemory": {
									"entryPoint": 232,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:552:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "74:117:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "84:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "93:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "169:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "178:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "181:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "154:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "159:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "163:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "118:50:10"
															},
															"nodeType": "YulIf",
															"src": "115:70:10"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "53:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:10",
														"type": ""
													}
												],
												"src": "14:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "311:239:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "357:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "366:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "369:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "359:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "359:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "359:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "332:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "341:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "328:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "328:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "353:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "324:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "324:32:10"
															},
															"nodeType": "YulIf",
															"src": "321:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "382:50:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "392:29:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:40:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "382:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "441:35:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "461:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "472:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "457:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "457:18:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "451:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "451:25:10"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "441:6:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "485:59:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "529:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "540:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "525:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "525:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "495:29:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "495:49:10"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "485:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "261:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "272:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "284:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "292:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "300:6:10",
														"type": ""
													}
												],
												"src": "196:354:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1017 CODESIZE SUB DUP1 PUSH2 0x1017 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xE8 JUMP JUMPDEST PUSH2 0x38 CALLER PUSH2 0x7C JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x7 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP1 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP1 SWAP2 AND CALLER OR SWAP1 SSTORE PUSH2 0x124 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x106 DUP5 PUSH2 0xCC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH2 0x11B PUSH1 0x40 DUP6 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0xEE4 DUP1 PUSH2 0x133 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA6021ACE GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xDE9D3DDB GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDE9D3DDB EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0xE91A7CA6 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xEE0106D2 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0xF89D832F EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0xA88E132F EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0xAB0EE2AC EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xB7171A2E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xC3C917B0 EQ PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x57488064 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x57488064 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x5EB82E94 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x7B2F247F EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23245D7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xCCFF6E9 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x10FD4FBA EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x275BD33F EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x2FFCE210 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x4D6CE1E5 EQ PUSH2 0x1EC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x351 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17B PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x17B PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x3F7 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x4C3 JUMP JUMPDEST PUSH2 0x17B PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x61A JUMP JUMPDEST PUSH2 0x17B PUSH2 0x62E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x6C5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x73F JUMP JUMPDEST PUSH2 0x17B PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x17B PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E8 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x853 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x170 PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH2 0x914 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x34C CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x98A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH1 0xA4 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3D5 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x506C65617365204669727374205769746844726177 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH2 0x4C0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0x9F1 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x51A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x506C65617365204669727374205374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0x533 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH2 0x552 DUP5 DUP7 PUSH2 0xDA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x59D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C1 SWAP2 SWAP1 PUSH2 0xDB9 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x5EC SWAP1 DUP5 SWAP1 PUSH2 0xDDB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x622 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x62C PUSH1 0x0 PUSH2 0xA62 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x638 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x6 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x659 SWAP1 PUSH1 0x64 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x663 SWAP2 SWAP1 PUSH2 0xE11 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x671 PUSH2 0x997 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x690 SWAP1 DUP5 SWAP1 PUSH2 0xDDB JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6A9 SWAP2 SWAP1 PUSH2 0xDDB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x4C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0xAB2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH2 0x6E4 SWAP1 TIMESTAMP PUSH2 0xDDB JUMP JUMPDEST PUSH1 0x7 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x701 SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x70B SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x71B PUSH2 0x1770 DUP4 PUSH2 0xE11 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x738 SWAP1 DUP3 PUSH2 0xDA1 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x747 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204F776E65722063616E207472616E73666572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x7C0 SWAP1 DUP5 SWAP1 PUSH2 0xDA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7D9 SWAP2 SWAP1 PUSH2 0xDA1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x4C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0x9F1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH2 0x815 SWAP1 TIMESTAMP PUSH2 0xDDB JUMP JUMPDEST PUSH1 0x7 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x832 SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x83C SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x84C PUSH2 0x1770 DUP4 PUSH2 0xE11 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x89F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x496E76616C69642061646472657373 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH1 0xA4 ADD PUSH2 0x398 JUMP JUMPDEST PUSH2 0x8F2 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x91C PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x981 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44E JUMP JUMPDEST PUSH2 0x4C0 DUP2 PUSH2 0xA62 JUMP JUMPDEST PUSH2 0x992 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x62C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xA5C SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xAE7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xAE2 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xA25 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBB9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xAE2 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xB5A SWAP2 SWAP1 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0xAE2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBC8 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xBD0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xC4D SWAP2 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC8A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xCA0 DUP8 DUP4 DUP4 DUP8 PUSH2 0xCAB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xD1A JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xD13 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST POP DUP2 PUSH2 0xBC8 JUMP JUMPDEST PUSH2 0xBC8 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xD2F JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44E SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xDB4 JUMPI PUSH2 0xDB4 PUSH2 0xD8B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xDED JUMPI PUSH2 0xDED PUSH2 0xD8B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xE0C JUMPI PUSH2 0xE0C PUSH2 0xD8B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE2E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE4E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xE36 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA5C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xE71 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xE33 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xE9A DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xE33 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH DUP5 PUSH10 0xBEFA2EE4D4F85EAEB01C CALLCODE XOR 0x5C EXTCODEHASH INVALID 0xD8 0xCC ADD 0x5C 0xF6 GT PUSH6 0x1A742CA7AF5E MLOAD PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "281:5588:9:-:0;;;1182:235;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:7;936:18:0;:32::i;:::-;1276:13:9;:30;;-1:-1:-1;;;;;1276:30:9;;;-1:-1:-1;;;;;;1276:30:9;;;;;;;1316:4;:22;;;;1348:12;:28;;;;;;;;;;;;;1386:11;:24;;;;;1400:10;1386:24;;;281:5588;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:177:10:-;93:13;;-1:-1:-1;;;;;135:31:10;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:354::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;472:2;461:9;457:18;451:25;441:35;;495:49;540:2;529:9;525:18;495:49;:::i;:::-;485:59;;196:354;;;;;:::o;:::-;281:5588:9;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@AdminAddToken_1130": {
									"entryPoint": 1855,
									"id": 1130,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@AdminWithDrawToken_1158": {
									"entryPoint": 1641,
									"id": 1158,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@Deposit_1221": {
									"entryPoint": 1015,
									"id": 1221,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@Details_1055": {
									"entryPoint": null,
									"id": 1055,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC20Address_1035": {
									"entryPoint": null,
									"id": 1035,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC721address_1031": {
									"entryPoint": null,
									"id": 1031,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@OwnerTokens_1063": {
									"entryPoint": null,
									"id": 1063,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Reward_1059": {
									"entryPoint": null,
									"id": 1059,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@UpdateERC20_1374": {
									"entryPoint": 973,
									"id": 1374,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UpdateERC721_1362": {
									"entryPoint": 2282,
									"id": 1362,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UpdateRatePersentage_1386": {
									"entryPoint": 2442,
									"id": 1386,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@Utilization_1180": {
									"entryPoint": 1582,
									"id": 1180,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@Withdraw_1270": {
									"entryPoint": 1219,
									"id": 1270,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_callOptionalReturn_506": {
									"entryPoint": 2791,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 2455,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_996": {
									"entryPoint": null,
									"id": 996,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_983": {
									"entryPoint": null,
									"id": 983,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 2658,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@calculateIntrest_1350": {
									"entryPoint": 2038,
									"id": 1350,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@depositNFT_1414": {
									"entryPoint": 2131,
									"id": 1414,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_808": {
									"entryPoint": 3024,
									"id": 808,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_744": {
									"entryPoint": 3001,
									"id": 744,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_672": {
									"entryPoint": null,
									"id": 672,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owenerERC20_1033": {
									"entryPoint": null,
									"id": 1033,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 1562,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rewardrate_1037": {
									"entryPoint": null,
									"id": 1037,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_284": {
									"entryPoint": 2545,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_258": {
									"entryPoint": 2738,
									"id": 258,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@showReward_1315": {
									"entryPoint": 1733,
									"id": 1315,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalOwnerToken_1041": {
									"entryPoint": null,
									"id": 1041,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 2324,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unstaketimeval_1039": {
									"entryPoint": null,
									"id": 1039,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_939": {
									"entryPoint": 3243,
									"id": 939,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawNFT_1434": {
									"entryPoint": 849,
									"id": 1434,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3426,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3513,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3401,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 3679,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3707,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3489,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3601,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3570,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 3635,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 3467,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7769:10",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:10",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:10"
															},
															"nodeType": "YulIf",
															"src": "94:52:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:10",
														"type": ""
													}
												],
												"src": "14:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:76:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "310:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "322:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "333:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "318:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "318:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "310:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "352:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "363:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "345:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "345:25:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "269:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "280:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "291:4:10",
														"type": ""
													}
												],
												"src": "199:177:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "482:102:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "492:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "504:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "515:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "500:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "492:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "534:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "549:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "565:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "570:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "561:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "561:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "574:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "557:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "557:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "545:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "545:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "527:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "527:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "527:51:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "451:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "462:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "473:4:10",
														"type": ""
													}
												],
												"src": "381:203:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "659:216:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "705:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "714:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "717:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "707:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "707:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "707:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "680:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "689:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "676:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "676:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "701:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "672:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "672:32:10"
															},
															"nodeType": "YulIf",
															"src": "669:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "730:36:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "756:9:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "743:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "743:23:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "734:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "829:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "838:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "841:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "831:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "831:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "831:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "788:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "799:5:10"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "814:3:10",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "819:1:10",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "810:3:10"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "810:11:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "823:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "806:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "806:19:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "795:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "795:31:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "785:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "785:42:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "778:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:50:10"
															},
															"nodeType": "YulIf",
															"src": "775:70:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "854:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "864:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "854:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "625:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "636:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "648:6:10",
														"type": ""
													}
												],
												"src": "589:286:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1031:178:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1041:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1053:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1064:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1049:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1049:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1041:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1083:9:10"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1094:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1076:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1076:25:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1076:25:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1121:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1132:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1117:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1117:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1137:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1110:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1110:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1110:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1164:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1175:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1160:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1160:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value2",
																						"nodeType": "YulIdentifier",
																						"src": "1194:6:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1187:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1187:14:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1180:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1180:22:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1153:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1153:50:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1153:50:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "984:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "995:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1003:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1011:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1022:4:10",
														"type": ""
													}
												],
												"src": "880:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1471:298:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1481:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1499:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1504:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1495:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1495:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1508:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1491:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1491:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1485:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1526:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1541:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1549:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1537:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1537:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1519:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1519:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1519:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1573:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1584:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1569:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1569:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "1593:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1601:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1589:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1589:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1562:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1562:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1562:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1625:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1636:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1621:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1621:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "1641:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1614:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1614:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1614:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1668:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1679:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1664:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1664:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1684:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1657:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1657:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1657:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1708:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1719:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1704:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1704:19:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1725:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1697:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1697:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1697:30:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1736:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1748:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1759:3:10",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1744:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1744:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1736:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1424:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1435:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1443:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1451:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1462:4:10",
														"type": ""
													}
												],
												"src": "1214:555:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1948:171:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1965:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1976:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1958:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1958:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1958:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1999:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2010:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1995:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1995:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2015:2:10",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1988:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1988:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1988:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2038:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2049:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2034:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2034:18:10"
																	},
																	{
																		"hexValue": "506c65617365204669727374205769746844726177",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2054:23:10",
																		"type": "",
																		"value": "Please First WithDraw"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2027:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2027:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2027:51:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2087:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2099:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2110:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2095:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2095:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2087:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1925:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1939:4:10",
														"type": ""
													}
												],
												"src": "1774:345:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2298:168:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2315:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2326:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2308:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2308:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2349:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2360:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2345:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2345:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2365:2:10",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2338:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2338:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2338:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2388:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2399:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2384:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2384:18:10"
																	},
																	{
																		"hexValue": "506c65617365204669727374205374616b65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2404:20:10",
																		"type": "",
																		"value": "Please First Stake"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2377:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2377:48:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2377:48:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2434:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2446:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2457:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2442:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2442:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2434:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2275:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2289:4:10",
														"type": ""
													}
												],
												"src": "2124:342:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2503:95:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2520:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2527:3:10",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2532:10:10",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2523:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2523:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2513:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2513:31:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2513:31:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2560:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2563:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2553:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2553:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2553:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2584:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2587:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2577:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2577:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2577:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2471:127:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2651:80:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2678:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2680:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2680:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2680:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2667:1:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2674:1:10"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2670:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2670:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2664:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2664:13:10"
															},
															"nodeType": "YulIf",
															"src": "2661:39:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2709:16:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2720:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2723:1:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2716:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2716:9:10"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2709:3:10"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2634:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2637:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2643:3:10",
														"type": ""
													}
												],
												"src": "2603:128:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2865:145:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2875:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2887:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2898:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2883:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2883:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2875:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2917:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2932:6:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2948:3:10",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2953:1:10",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2944:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2944:11:10"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2957:1:10",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2940:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2940:19:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2928:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2928:32:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2910:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2910:51:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2910:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2981:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2992:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2977:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2977:18:10"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2997:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2970:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2970:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2970:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2826:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2837:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2845:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2856:4:10",
														"type": ""
													}
												],
												"src": "2736:274:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3093:199:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3139:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3148:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3151:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3141:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3141:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3141:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3114:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3123:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3110:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3110:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3135:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3106:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3106:32:10"
															},
															"nodeType": "YulIf",
															"src": "3103:52:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3164:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3183:9:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3177:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3177:16:10"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3168:5:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3246:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3255:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3258:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3248:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3248:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3248:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3215:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3236:5:10"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3229:6:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3229:13:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3222:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3222:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3212:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3212:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3205:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3205:40:10"
															},
															"nodeType": "YulIf",
															"src": "3202:60:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3271:15:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3281:5:10"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3271:6:10"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3059:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3070:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3082:6:10",
														"type": ""
													}
												],
												"src": "3015:277:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3346:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3368:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3370:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3370:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3370:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3362:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3365:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3359:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3359:8:10"
															},
															"nodeType": "YulIf",
															"src": "3356:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3399:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3411:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3414:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3407:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3407:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3399:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3328:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3331:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3337:4:10",
														"type": ""
													}
												],
												"src": "3297:125:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3479:116:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3538:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3540:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3540:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3540:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3510:1:10"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3503:6:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3503:9:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3496:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3496:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3518:1:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3529:1:10",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "3525:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3525:6:10"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "3533:1:10"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "3521:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3521:14:10"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "3515:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3515:21:10"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3492:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3492:45:10"
															},
															"nodeType": "YulIf",
															"src": "3489:71:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3569:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3584:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3587:1:10"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "3580:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3580:9:10"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "3569:7:10"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3458:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3461:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "3467:7:10",
														"type": ""
													}
												],
												"src": "3427:168:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3646:171:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3677:111:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3698:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3705:3:10",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3710:10:10",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "3701:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3701:20:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3691:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3691:31:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3691:31:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3742:1:10",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3745:4:10",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3735:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3735:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3735:15:10"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3770:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3773:4:10",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3763:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3763:15:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3763:15:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3666:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3659:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3659:9:10"
															},
															"nodeType": "YulIf",
															"src": "3656:132:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3797:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3806:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3809:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3802:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3802:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3797:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3631:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3634:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "3640:1:10",
														"type": ""
													}
												],
												"src": "3600:217:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3996:173:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4013:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4024:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4006:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4006:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4006:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4047:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4058:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4043:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4043:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4063:2:10",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4036:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4036:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4036:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4086:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4097:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4082:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4082:18:10"
																	},
																	{
																		"hexValue": "4f6e6c79204f776e65722063616e207472616e73666572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4102:25:10",
																		"type": "",
																		"value": "Only Owner can transfer"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4075:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4075:53:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4075:53:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4137:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4149:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4160:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4145:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4145:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4137:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3973:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3987:4:10",
														"type": ""
													}
												],
												"src": "3822:347:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4348:165:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4365:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4376:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4358:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4358:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4358:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4399:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4410:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4395:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4395:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4415:2:10",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4388:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4388:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4388:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4438:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4449:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4434:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4434:18:10"
																	},
																	{
																		"hexValue": "496e76616c69642061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4454:17:10",
																		"type": "",
																		"value": "Invalid address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4427:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4427:45:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4427:45:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4481:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4493:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4504:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4489:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4489:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4481:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4325:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4339:4:10",
														"type": ""
													}
												],
												"src": "4174:339:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4692:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4709:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4720:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4702:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4702:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4702:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4743:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4754:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4739:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4739:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4759:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4732:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4732:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4732:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4782:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4793:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4778:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4778:18:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4798:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4771:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4771:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4771:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4853:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4864:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4849:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4849:18:10"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4869:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4842:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4842:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4842:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4887:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4899:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4910:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4895:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4895:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4887:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4669:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4683:4:10",
														"type": ""
													}
												],
												"src": "4518:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5099:182:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5116:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5127:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5109:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5109:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5109:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5150:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5161:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5146:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5146:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5166:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5139:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5139:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5139:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5189:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5200:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5185:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5185:18:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5205:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5178:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5178:62:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5249:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5261:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5272:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5257:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5257:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5249:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5076:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5090:4:10",
														"type": ""
													}
												],
												"src": "4925:356:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5443:218:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5453:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5465:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5476:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5461:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5453:4:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5488:29:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5506:3:10",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5511:1:10",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5502:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5502:11:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5515:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5498:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5498:19:10"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5492:2:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5533:9:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5548:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5556:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5544:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5544:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5526:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5526:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5526:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5580:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5591:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5576:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5576:18:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5600:6:10"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5608:2:10"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5596:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5596:15:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5569:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5569:43:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5569:43:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5632:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5643:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5628:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5628:18:10"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5648:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5621:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5621:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5621:34:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5396:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5407:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5415:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5423:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5434:4:10",
														"type": ""
													}
												],
												"src": "5286:375:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5840:232:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5857:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5868:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5850:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5850:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5850:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5891:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5902:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5887:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5887:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5907:2:10",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5880:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5880:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5880:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5930:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5941:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5926:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5926:18:10"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5946:34:10",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5919:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5919:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5919:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6001:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6012:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5997:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5997:18:10"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6017:12:10",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5990:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5990:40:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5990:40:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6039:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6051:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6062:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6047:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6047:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6039:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5817:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5831:4:10",
														"type": ""
													}
												],
												"src": "5666:406:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6251:228:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6268:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6279:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6261:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6261:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6261:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6302:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6313:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6298:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6298:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6318:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6291:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6291:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6291:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6341:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6352:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6337:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6337:18:10"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6357:34:10",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6330:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6330:62:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6330:62:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6412:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6423:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6408:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6408:18:10"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6428:8:10",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6401:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6401:36:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6401:36:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6446:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6458:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6469:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6454:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6454:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6446:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6228:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6242:4:10",
														"type": ""
													}
												],
												"src": "6077:402:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6537:205:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6547:10:10",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6556:1:10",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "6551:1:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6616:63:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "6641:3:10"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6646:1:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6637:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6637:11:10"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "6660:3:10"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "6665:1:10"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6656:3:10"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6656:11:10"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "6650:5:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6650:18:10"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6630:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6630:39:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6630:39:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6577:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6580:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6574:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6574:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6588:19:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6590:15:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "6599:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6602:2:10",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6595:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6595:10:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "6590:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6570:3:10",
																"statements": []
															},
															"src": "6566:113:10"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6705:31:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "6718:3:10"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "6723:6:10"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6714:3:10"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6714:16:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6732:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6707:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6707:27:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6707:27:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6694:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6697:6:10"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6691:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6691:13:10"
															},
															"nodeType": "YulIf",
															"src": "6688:48:10"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "6515:3:10",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "6520:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6525:6:10",
														"type": ""
													}
												],
												"src": "6484:258:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6884:137:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6894:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6914:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6908:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6908:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6898:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6956:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6964:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6952:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6952:17:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6971:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6976:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6930:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6930:53:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6930:53:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6992:23:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7003:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7008:6:10"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6999:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6999:16:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6992:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6860:3:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6865:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6876:3:10",
														"type": ""
													}
												],
												"src": "6747:274:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7200:179:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7217:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7228:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7210:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7210:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7210:21:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7251:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7262:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7247:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7247:18:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7267:2:10",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7240:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7240:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7240:30:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7290:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7301:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7286:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7286:18:10"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7306:31:10",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7279:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7279:59:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7279:59:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7347:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7359:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7370:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7355:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7355:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7347:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7177:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7191:4:10",
														"type": ""
													}
												],
												"src": "7026:353:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7505:262:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7522:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7533:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7515:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7515:21:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7515:21:10"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7545:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7565:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7559:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7559:13:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7549:6:10",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7592:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7603:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7588:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7588:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7608:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7581:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7581:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7581:34:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7650:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7658:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7646:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7646:15:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7667:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7678:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7663:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7663:18:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7683:6:10"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7624:21:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7624:66:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7624:66:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7699:62:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7715:9:10"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "7734:6:10"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7742:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7730:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7730:15:10"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7751:2:10",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "7747:3:10"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7747:7:10"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7726:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7726:29:10"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7711:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7711:45:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7758:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7707:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7707:54:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7699:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7474:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7485:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7496:4:10",
														"type": ""
													}
												],
												"src": "7384:383:10"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Please First WithDraw\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Please First Stake\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Only Owner can transfer\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Invalid address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101585760003560e01c8063a6021ace116100c3578063de9d3ddb1161007c578063de9d3ddb146102ad578063e88cc2be146102b6578063e91a7ca614610305578063ee0106d214610318578063f2fde38b1461032b578063f89d832f1461033e57600080fd5b8063a6021ace14610251578063a88e132f14610264578063ab0ee2ac14610277578063b7171a2e1461027f578063c0cd40ee14610292578063c3c917b0146102a557600080fd5b8063574880641161011557806357488064146101ff57806357ea89b61461021f5780635eb82e9414610227578063715018a6146102305780637b2f247f146102385780638da5cb5b1461024057600080fd5b8063023245d71461015d5780630ccff6e91461017257806310fd4fba1461018e578063275bd33f146101b95780632ffce210146101cc5780634d6ce1e5146101ec575b600080fd5b61017061016b366004610d49565b610351565b005b61017b60065481565b6040519081526020015b60405180910390f35b6002546101a1906001600160a01b031681565b6040516001600160a01b039091168152602001610185565b6101706101c7366004610d62565b6103cd565b61017b6101da366004610d62565b600a6020526000908152604090205481565b6101706101fa366004610d49565b6103f7565b61017b61020d366004610d62565b60096020526000908152604090205481565b6101706104c3565b61017b60045481565b61017061061a565b61017b61062e565b6000546001600160a01b03166101a1565b6003546101a1906001600160a01b031681565b610170610272366004610d49565b610669565b61017b6106c5565b6001546101a1906001600160a01b031681565b6101706102a0366004610d49565b61073f565b61017b6107f6565b61017b60055481565b6102e86102c4366004610d62565b60086020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610185565b610170610313366004610d49565b610853565b610170610326366004610d62565b6108ea565b610170610339366004610d62565b610914565b61017061034c366004610d49565b61098a565b600154604051635c46a7ef60e11b81523060048201523360248201526044810183905260806064820152600060848201526001600160a01b039091169063b88d4fde9060a4015b600060405180830381600087803b1580156103b257600080fd5b505af11580156103c6573d6000803e3d6000fd5b5050505050565b6103d5610997565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526008602052604090206002015460ff16156104575760405162461bcd60e51b8152602060048201526015602482015274506c6561736520466972737420576974684472617760581b60448201526064015b60405180910390fd5b60408051606081018252828152426020808301918252600183850181815233600081815260089094529590922093518455915191830191909155516002909101805460ff19169115159190911790556003546104c0916001600160a01b039091169030846109f1565b50565b3360009081526008602052604090206002015460ff1661051a5760405162461bcd60e51b8152602060048201526012602482015271506c65617365204669727374205374616b6560701b604482015260640161044e565b33600090815260086020526040812054906105336107f6565b6003549091506001600160a01b031663a9059cbb336105528486610da1565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610db9565b506002546001600160a01b03166000908152600a6020526040812080548392906105ec908490610ddb565b90915550503360009081526008602052604081208181556001810191909155600201805460ff191690555050565b610622610997565b61062c6000610a62565b565b6000610638610997565b600654336000908152600a6020526040812054909190610659906064610df2565b6106639190610e11565b91505090565b610671610997565b336000908152600a602052604081208054839290610690908490610ddb565b9250508190555080600660008282546106a99190610ddb565b90915550506003546104c0906001600160a01b03163383610ab2565b3360009081526008602052604081206001015481906106e49042610ddb565b600754336000908152600860205260409020546107019190610df2565b61070b9190610df2565b9050600061071b61177083610e11565b336000908152600860205260409020549091506107389082610da1565b9250505090565b610747610997565b6002546001600160a01b031633146107a15760405162461bcd60e51b815260206004820152601760248201527f4f6e6c79204f776e65722063616e207472616e73666572000000000000000000604482015260640161044e565b336000908152600a6020526040812080548392906107c0908490610da1565b9250508190555080600660008282546107d99190610da1565b90915550506003546104c0906001600160a01b03163330846109f1565b3360009081526008602052604081206001015481906108159042610ddb565b600754336000908152600860205260409020546108329190610df2565b61083c9190610df2565b9050600061084c61177083610e11565b9392505050565b6001546001600160a01b0316330361089f5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161044e565b600154604051635c46a7ef60e11b81523360048201523060248201526044810183905260806064820152600060848201526001600160a01b039091169063b88d4fde9060a401610398565b6108f2610997565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61091c610997565b6001600160a01b0381166109815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161044e565b6104c081610a62565b610992610997565b600755565b6000546001600160a01b0316331461062c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044e565b6040516001600160a01b0380851660248301528316604482015260648101829052610a5c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ae7565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038316602482015260448101829052610ae290849063a9059cbb60e01b90606401610a25565b505050565b6000610b3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bb99092919063ffffffff16565b805190915015610ae25780806020019051810190610b5a9190610db9565b610ae25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161044e565b6060610bc88484600085610bd0565b949350505050565b606082471015610c315760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161044e565b600080866001600160a01b03168587604051610c4d9190610e5f565b60006040518083038185875af1925050503d8060008114610c8a576040519150601f19603f3d011682016040523d82523d6000602084013e610c8f565b606091505b5091509150610ca087838387610cab565b979650505050505050565b60608315610d1a578251600003610d13576001600160a01b0385163b610d135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161044e565b5081610bc8565b610bc88383815115610d2f5781518083602001fd5b8060405162461bcd60e51b815260040161044e9190610e7b565b600060208284031215610d5b57600080fd5b5035919050565b600060208284031215610d7457600080fd5b81356001600160a01b038116811461084c57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610db457610db4610d8b565b500190565b600060208284031215610dcb57600080fd5b8151801515811461084c57600080fd5b600082821015610ded57610ded610d8b565b500390565b6000816000190483118215151615610e0c57610e0c610d8b565b500290565b600082610e2e57634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015610e4e578181015183820152602001610e36565b83811115610a5c5750506000910152565b60008251610e71818460208701610e33565b9190910192915050565b6020815260008251806020840152610e9a816040850160208701610e33565b601f01601f1916919091016040019291505056fea2646970667358221220408469befa2ee4d4f85eaeb01cf2185c3ffed8cc015cf611651a742ca7af5e5164736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x158 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA6021ACE GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xDE9D3DDB GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xDE9D3DDB EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0xE91A7CA6 EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0xEE0106D2 EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0xF89D832F EQ PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0xA88E132F EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0xAB0EE2AC EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xB7171A2E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xC3C917B0 EQ PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x57488064 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x57488064 EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x5EB82E94 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x7B2F247F EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23245D7 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0xCCFF6E9 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x10FD4FBA EQ PUSH2 0x18E JUMPI DUP1 PUSH4 0x275BD33F EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x2FFCE210 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x4D6CE1E5 EQ PUSH2 0x1EC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x170 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x351 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17B PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x17B PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x3F7 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x4C3 JUMP JUMPDEST PUSH2 0x17B PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x61A JUMP JUMPDEST PUSH2 0x17B PUSH2 0x62E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x272 CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x669 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x6C5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x1A1 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x73F JUMP JUMPDEST PUSH2 0x17B PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x17B PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E8 PUSH2 0x2C4 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x185 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x853 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH2 0x8EA JUMP JUMPDEST PUSH2 0x170 PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0xD62 JUMP JUMPDEST PUSH2 0x914 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x34C CALLDATASIZE PUSH1 0x4 PUSH2 0xD49 JUMP JUMPDEST PUSH2 0x98A JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH1 0xA4 ADD JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3D5 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x457 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x506C65617365204669727374205769746844726177 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH2 0x4C0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0x9F1 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x51A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x506C65617365204669727374205374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 PUSH2 0x533 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH2 0x552 DUP5 DUP7 PUSH2 0xDA1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x59D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C1 SWAP2 SWAP1 PUSH2 0xDB9 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x5EC SWAP1 DUP5 SWAP1 PUSH2 0xDDB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x622 PUSH2 0x997 JUMP JUMPDEST PUSH2 0x62C PUSH1 0x0 PUSH2 0xA62 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x638 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x6 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x659 SWAP1 PUSH1 0x64 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x663 SWAP2 SWAP1 PUSH2 0xE11 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x671 PUSH2 0x997 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x690 SWAP1 DUP5 SWAP1 PUSH2 0xDDB JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6A9 SWAP2 SWAP1 PUSH2 0xDDB JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x4C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0xAB2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH2 0x6E4 SWAP1 TIMESTAMP PUSH2 0xDDB JUMP JUMPDEST PUSH1 0x7 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x701 SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x70B SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x71B PUSH2 0x1770 DUP4 PUSH2 0xE11 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0x738 SWAP1 DUP3 PUSH2 0xDA1 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x747 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204F776E65722063616E207472616E73666572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x7C0 SWAP1 DUP5 SWAP1 PUSH2 0xDA1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7D9 SWAP2 SWAP1 PUSH2 0xDA1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x3 SLOAD PUSH2 0x4C0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0x9F1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD DUP2 SWAP1 PUSH2 0x815 SWAP1 TIMESTAMP PUSH2 0xDDB JUMP JUMPDEST PUSH1 0x7 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x832 SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x83C SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x84C PUSH2 0x1770 DUP4 PUSH2 0xE11 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x89F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x496E76616C69642061646472657373 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH1 0xA4 ADD PUSH2 0x398 JUMP JUMPDEST PUSH2 0x8F2 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x91C PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x981 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44E JUMP JUMPDEST PUSH2 0x4C0 DUP2 PUSH2 0xA62 JUMP JUMPDEST PUSH2 0x992 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x62C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xA5C SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xAE7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xAE2 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xA25 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB3C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBB9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xAE2 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xB5A SWAP2 SWAP1 PUSH2 0xDB9 JUMP JUMPDEST PUSH2 0xAE2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBC8 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xBD0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44E JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xC4D SWAP2 SWAP1 PUSH2 0xE5F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC8A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC8F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xCA0 DUP8 DUP4 DUP4 DUP8 PUSH2 0xCAB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xD1A JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xD13 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44E JUMP JUMPDEST POP DUP2 PUSH2 0xBC8 JUMP JUMPDEST PUSH2 0xBC8 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xD2F JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44E SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xDB4 JUMPI PUSH2 0xDB4 PUSH2 0xD8B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xDED JUMPI PUSH2 0xDED PUSH2 0xD8B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xE0C JUMPI PUSH2 0xE0C PUSH2 0xD8B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE2E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE4E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xE36 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA5C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xE71 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xE33 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xE9A DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xE33 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH DUP5 PUSH10 0xBEFA2EE4D4F85EAEB01C CALLCODE XOR 0x5C EXTCODEHASH INVALID 0xD8 0xCC ADD 0x5C 0xF6 GT PUSH6 0x1A742CA7AF5E MLOAD PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "281:5588:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5726:141;;;;;;:::i;:::-;;:::i;:::-;;513:27;;;;;;;;;345:25:10;;;333:2;318:18;513:27:9;;;;;;;;387:26;;;;;-1:-1:-1;;;;;387:26:9;;;;;;-1:-1:-1;;;;;545:32:10;;;527:51;;515:2;500:18;387:26:9;381:203:10;5112:107:9;;;;;;:::i;:::-;;:::i;755:45::-;;;;;;:::i;:::-;;;;;;;;;;;;;;3002:269;;;;;;:::i;:::-;;:::i;710:39::-;;;;;;:::i;:::-;;;;;;;;;;;;;;3466:342;;;:::i;452:22::-;;;;;;1831:101:0;;;:::i;2538:171:9:-;;;:::i;1201:85:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;419:27:9;;;;;-1:-1:-1;;;;;419:27:9;;;2125:205;;;;;;:::i;:::-;;:::i;3814:313::-;;;:::i;353:28::-;;;;;-1:-1:-1;;;;;353:28:9;;;1643:290;;;;;;:::i;:::-;;:::i;4391:253::-;;;:::i;481:26::-;;;;;;662:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1076:25:10;;;1132:2;1117:18;;1110:34;;;;1187:14;1180:22;1160:18;;;1153:50;1064:2;1049:18;662:42:9;880:329:10;5516:204:9;;;;;;:::i;:::-;;:::i;4826:109::-;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;5401:110:9:-;;;;;;:::i;:::-;;:::i;5726:141::-;5790:13;;5782:78;;-1:-1:-1;;;5782:78:9;;5830:4;5782:78;;;1519:34:10;5837:10:9;1569:18:10;;;1562:43;1621:18;;;1614:34;;;1684:3;1664:18;;;1657:31;-1:-1:-1;1704:19:10;;;1697:30;-1:-1:-1;;;;;5790:13:9;;;;5782:39;;1744:19:10;;5782:78:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5726:141;:::o;5112:107::-;1094:13:0;:11;:13::i;:::-;5184:12:9::1;:28:::0;;-1:-1:-1;;;;;;5184:28:9::1;-1:-1:-1::0;;;;;5184:28:9;;;::::1;::::0;;;::::1;::::0;;5112:107::o;3002:269::-;3070:10;3062:19;;;;:7;:19;;;;;:25;;;;;3061:26;3053:59;;;;-1:-1:-1;;;3053:59:9;;1976:2:10;3053:59:9;;;1958:21:10;2015:2;1995:18;;;1988:30;-1:-1:-1;;;2034:18:10;;;2027:51;2095:18;;3053:59:9;;;;;;;;;3144:36;;;;;;;;;;;3159:15;3144:36;;;;;;;3175:4;3144:36;;;;;;3130:10;-1:-1:-1;3122:19:9;;;:7;:19;;;;;;;:58;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3122:58:9;;;;;;;;;;3197:12;;3190:74;;-1:-1:-1;;;;;3197:12:9;;;;3248:4;3144:36;3190:37;:74::i;:::-;3002:269;:::o;3466:342::-;3519:10;3511:19;;;;:7;:19;;;;;:25;;;;;3503:55;;;;-1:-1:-1;;;3503:55:9;;2326:2:10;3503:55:9;;;2308:21:10;2365:2;2345:18;;;2338:30;-1:-1:-1;;;2384:18:10;;;2377:48;2442:18;;3503:55:9;2124:342:10;3503:55:9;3590:10;3568:11;3582:19;;;:7;:19;;;;;:29;;3635:18;:16;:18::i;:::-;3670:12;;3621:32;;-1:-1:-1;;;;;;3670:12:9;3663:29;3693:10;3705:15;3621:32;3705:6;:15;:::i;:::-;3663:58;;-1:-1:-1;;;;;;3663:58:9;;;;;;;-1:-1:-1;;;;;2928:32:10;;;3663:58:9;;;2910:51:10;2977:18;;;2970:34;2883:18;;3663:58:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;3743:11:9;;-1:-1:-1;;;;;3743:11:9;3731:24;;;;:11;:24;;;;;:34;;3759:6;;3731:24;:34;;3759:6;;3731:34;:::i;:::-;;;;-1:-1:-1;;3790:10:9;3782:19;;;;:7;:19;;;;;3775:26;;;;;;;;;;;;;;-1:-1:-1;;3775:26:9;;;-1:-1:-1;;3466:342:9:o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2538:171:9:-;2591:7;1094:13:0;:11;:13::i;:::-;2660:15:9::1;::::0;2641:10:::1;2610:15;2629:23:::0;;;:11:::1;:23;::::0;;;;;2610:15;;2660;2629:29:::1;::::0;2655:3:::1;2629:29;:::i;:::-;2628:47;;;;:::i;:::-;2610:65:::0;-1:-1:-1;;2538:171:9;:::o;2125:205::-;1094:13:0;:11;:13::i;:::-;2204:10:9::1;2192:23;::::0;;;:11:::1;:23;::::0;;;;:33;;2219:6;;2192:23;:33:::1;::::0;2219:6;;2192:33:::1;:::i;:::-;;;;;;;;2254:6;2235:15;;:25;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2277:12:9::1;::::0;2270:53:::1;::::0;-1:-1:-1;;;;;2277:12:9::1;2304:10;2316:6:::0;2270:33:::1;:53::i;3814:313::-:0;3968:10;3856:11;3960:19;;;:7;:19;;;;;:29;;;3856:11;;3942:47;;:15;:47;:::i;:::-;3933:4;;3909:10;3901:19;;;;:7;:19;;;;;:29;:36;;3933:4;3901:36;:::i;:::-;3900:90;;;;:::i;:::-;3883:107;-1:-1:-1;4000:16:9;4019;4031:4;3883:107;4019:16;:::i;:::-;4076:10;4068:19;;;;:7;:19;;;;;:29;4000:35;;-1:-1:-1;4054:43:9;;4000:35;4054:43;:::i;:::-;4045:52;;4107:13;;3814:313;:::o;1643:290::-;1094:13:0;:11;:13::i;:::-;1726:11:9::1;::::0;-1:-1:-1;;;;;1726:11:9::1;1714:10;:23;1706:58;;;::::0;-1:-1:-1;;;1706:58:9;;4024:2:10;1706:58:9::1;::::0;::::1;4006:21:10::0;4063:2;4043:18;;;4036:30;4102:25;4082:18;;;4075:53;4145:18;;1706:58:9::1;3822:347:10::0;1706:58:9::1;1786:10;1774:23;::::0;;;:11:::1;:23;::::0;;;;:33;;1800:7;;1774:23;:33:::1;::::0;1800:7;;1774:33:::1;:::i;:::-;;;;;;;;1836:7;1817:15;;:26;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;1860:12:9::1;::::0;1853:73:::1;::::0;-1:-1:-1;;;;;1860:12:9::1;1891:10;1911:4;1918:7:::0;1853:37:::1;:73::i;4391:253::-:0;4542:10;4439:7;4534:19;;;:7;:19;;;;;:29;;;4439:7;;4516:47;;:15;:47;:::i;:::-;4507:4;;4483:10;4475:19;;;;:7;:19;;;;;:29;:36;;4507:4;4475:36;:::i;:::-;4474:90;;;;:::i;:::-;4457:107;-1:-1:-1;4574:16:9;4593;4605:4;4457:107;4593:16;:::i;:::-;4574:35;4391:253;-1:-1:-1;;;4391:253:9:o;5516:204::-;5593:13;;-1:-1:-1;;;;;5593:13:9;5579:10;:27;5571:55;;;;-1:-1:-1;;;5571:55:9;;4376:2:10;5571:55:9;;;4358:21:10;4415:2;4395:18;;;4388:30;-1:-1:-1;;;4434:18:10;;;4427:45;4489:18;;5571:55:9;4174:339:10;5571:55:9;5644:13;;5636:77;;-1:-1:-1;;;5636:77:9;;5676:10;5636:77;;;1519:34:10;5695:4:9;1569:18:10;;;1562:43;1621:18;;;1614:34;;;1684:3;1664:18;;;1657:31;-1:-1:-1;1704:19:10;;;1697:30;-1:-1:-1;;;;;5644:13:9;;;;5636:39;;1744:19:10;;5636:77:9;1214:555:10;4826:109:9;1094:13:0;:11;:13::i;:::-;4898::9::1;:30:::0;;-1:-1:-1;;;;;;4898:30:9::1;-1:-1:-1::0;;;;;4898:30:9;;;::::1;::::0;;;::::1;::::0;;4826:109::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;4720:2:10;2161:73:0::1;::::0;::::1;4702:21:10::0;4759:2;4739:18;;;4732:30;4798:34;4778:18;;;4771:62;-1:-1:-1;;;4849:18:10;;;4842:36;4895:19;;2161:73:0::1;4518:402:10::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;5401:110:9:-:0;1094:13:0;:11;:13::i;:::-;5482:4:9::1;:22:::0;5401:110::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:7;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;5127:2:10;1414:68:0;;;5109:21:10;;;5146:18;;;5139:30;5205:34;5185:18;;;5178:62;5257:18;;1414:68:0;4925:356:10;974:241:3;1139:68;;-1:-1:-1;;;;;5544:15:10;;;1139:68:3;;;5526:34:10;5596:15;;5576:18;;;5569:43;5628:18;;;5621:34;;;1112:96:3;;1132:5;;-1:-1:-1;;;1162:27:3;5461:18:10;;1139:68:3;;;;-1:-1:-1;;1139:68:3;;;;;;;;;;;;;;-1:-1:-1;;;;;1139:68:3;-1:-1:-1;;;;;;1139:68:3;;;;;;;;;;1112:19;:96::i;:::-;974:241;;;;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;763:205:3:-;902:58;;-1:-1:-1;;;;;2928:32:10;;902:58:3;;;2910:51:10;2977:18;;;2970:34;;;875:86:3;;895:5;;-1:-1:-1;;;925:23:3;2883:18:10;;902:58:3;2736:274:10;875:86:3;763:205;;;:::o;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:3;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:3;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:3;;5868:2:10;4351:85:3;;;5850:21:10;5907:2;5887:18;;;5880:30;5946:34;5926:18;;;5919:62;-1:-1:-1;;;5997:18:10;;;5990:40;6047:19;;4351:85:3;5666:406:10;3873:223:6;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:6:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:6;;6279:2:10;5149:81:6;;;6261:21:10;6318:2;6298:18;;;6291:30;6357:34;6337:18;;;6330:62;-1:-1:-1;;;6408:18:10;;;6401:36;6454:19;;5149:81:6;6077:402:10;5149:81:6;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:6;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:6:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:6;;;7908:60;;;;-1:-1:-1;;;7908:60:6;;7228:2:10;7908:60:6;;;7210:21:10;7267:2;7247:18;;;7240:30;7306:31;7286:18;;;7279:59;7355:18;;7908:60:6;7026:353:10;7908:60:6;-1:-1:-1;8003:10:6;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:6;;;;;;;;:::i;14:180:10:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:10;;14:180;-1:-1:-1;14:180:10:o;589:286::-;648:6;701:2;689:9;680:7;676:23;672:32;669:52;;;717:1;714;707:12;669:52;743:23;;-1:-1:-1;;;;;795:31:10;;785:42;;775:70;;841:1;838;831:12;2471:127;2532:10;2527:3;2523:20;2520:1;2513:31;2563:4;2560:1;2553:15;2587:4;2584:1;2577:15;2603:128;2643:3;2674:1;2670:6;2667:1;2664:13;2661:39;;;2680:18;;:::i;:::-;-1:-1:-1;2716:9:10;;2603:128::o;3015:277::-;3082:6;3135:2;3123:9;3114:7;3110:23;3106:32;3103:52;;;3151:1;3148;3141:12;3103:52;3183:9;3177:16;3236:5;3229:13;3222:21;3215:5;3212:32;3202:60;;3258:1;3255;3248:12;3297:125;3337:4;3365:1;3362;3359:8;3356:34;;;3370:18;;:::i;:::-;-1:-1:-1;3407:9:10;;3297:125::o;3427:168::-;3467:7;3533:1;3529;3525:6;3521:14;3518:1;3515:21;3510:1;3503:9;3496:17;3492:45;3489:71;;;3540:18;;:::i;:::-;-1:-1:-1;3580:9:10;;3427:168::o;3600:217::-;3640:1;3666;3656:132;;3710:10;3705:3;3701:20;3698:1;3691:31;3745:4;3742:1;3735:15;3773:4;3770:1;3763:15;3656:132;-1:-1:-1;3802:9:10;;3600:217::o;6484:258::-;6556:1;6566:113;6580:6;6577:1;6574:13;6566:113;;;6656:11;;;6650:18;6637:11;;;6630:39;6602:2;6595:10;6566:113;;;6697:6;6694:1;6691:13;6688:48;;;-1:-1:-1;;6732:1:10;6714:16;;6707:27;6484:258::o;6747:274::-;6876:3;6914:6;6908:13;6930:53;6976:6;6971:3;6964:4;6956:6;6952:17;6930:53;:::i;:::-;6999:16;;;;;6747:274;-1:-1:-1;;6747:274:10:o;7384:383::-;7533:2;7522:9;7515:21;7496:4;7565:6;7559:13;7608:6;7603:2;7592:9;7588:18;7581:34;7624:66;7683:6;7678:2;7667:9;7663:18;7658:2;7650:6;7646:15;7624:66;:::i;:::-;7751:2;7730:15;-1:-1:-1;;7726:29:10;7711:45;;;;7758:2;7707:54;;7384:383;-1:-1:-1;;7384:383:10:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "762400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"AdminAddToken(uint256)": "infinite",
								"AdminWithDrawToken(uint256)": "infinite",
								"Deposit(uint256)": "infinite",
								"Details(address)": "6815",
								"ERC20Address()": "2360",
								"ERC721address()": "2426",
								"OwnerTokens(address)": "2585",
								"Reward(address)": "2496",
								"UpdateERC20(address)": "26790",
								"UpdateERC721(address)": "26788",
								"UpdateRatePersentage(uint256)": "24620",
								"Utilization()": "6913",
								"Withdraw()": "infinite",
								"calculateIntrest()": "infinite",
								"depositNFT(uint256)": "infinite",
								"owenerERC20()": "2405",
								"owner()": "2464",
								"renounceOwnership()": "infinite",
								"rewardrate()": "2351",
								"showReward()": "infinite",
								"totalOwnerToken()": "2330",
								"transferOwnership(address)": "28408",
								"unstaketimeval()": "2306",
								"withdrawNFT(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1182,
									"end": 1417,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 7
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1276,
									"end": 1289,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "AND",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1276,
									"end": 1306,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1316,
									"end": 1320,
									"name": "PUSH",
									"source": 9,
									"value": "7"
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1316,
									"end": 1338,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1360,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1348,
									"end": 1376,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1397,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1400,
									"end": 1410,
									"name": "CALLER",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1386,
									"end": 1410,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "16"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 284,
									"end": 290,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 298,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 300,
									"end": 306,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 353,
									"end": 355,
									"name": "PUSH",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 341,
									"end": 350,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 332,
									"end": 339,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 328,
									"end": 351,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 324,
									"end": 356,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 321,
									"end": 373,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 321,
									"end": 373,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 369,
									"end": 370,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 366,
									"end": 367,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 359,
									"end": 371,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 321,
									"end": 373,
									"name": "tag",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 422,
									"end": 431,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 382,
									"end": 432,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 382,
									"end": 432,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 472,
									"end": 474,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 461,
									"end": 470,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 457,
									"end": 475,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 451,
									"end": 476,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 441,
									"end": 476,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 441,
									"end": 476,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 495,
									"end": 544,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 540,
									"end": 542,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 529,
									"end": 538,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 525,
									"end": 543,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 495,
									"end": 544,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 485,
									"end": 544,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 485,
									"end": 544,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 196,
									"end": 550,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 196,
									"end": 550,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "tag",
									"source": 10,
									"value": "16"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 281,
									"end": 5869,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220408469befa2ee4d4f85eaeb01cf2185c3ffed8cc015cf611651a742ca7af5e5164736f6c634300080d0033",
									".code": [
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "A6021ACE"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "DE9D3DDB"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "DE9D3DDB"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "E88CC2BE"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "E91A7CA6"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "EE0106D2"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "F89D832F"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "A6021ACE"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "A88E132F"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "AB0EE2AC"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "B7171A2E"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "C0CD40EE"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "C3C917B0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "57488064"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "57488064"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "57EA89B6"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "5EB82E94"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "7B2F247F"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "23245D7"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "CCFF6E9"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "10FD4FBA"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "275BD33F"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "2FFCE210"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "4D6CE1E5"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 281,
											"end": 5869,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 345,
											"end": 370,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 345,
											"end": 370,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 345,
											"end": 370,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 333,
											"end": 335,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 513,
											"end": 540,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 513,
											"end": 540,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 513,
											"end": 540,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 387,
											"end": 413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 387,
											"end": 413,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 387,
											"end": 413,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 387,
											"end": 413,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 387,
											"end": 413,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 387,
											"end": 413,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 387,
											"end": 413,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 545,
											"end": 577,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 545,
											"end": 577,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 545,
											"end": 577,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 527,
											"end": 578,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 527,
											"end": 578,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 500,
											"end": 518,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 387,
											"end": 413,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 381,
											"end": 584,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 755,
											"end": 800,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 755,
											"end": 800,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 710,
											"end": 749,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 710,
											"end": 749,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 452,
											"end": 474,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 452,
											"end": 474,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 452,
											"end": 474,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 452,
											"end": 474,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 452,
											"end": 474,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 452,
											"end": 474,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 452,
											"end": 474,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 419,
											"end": 446,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 419,
											"end": 446,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 419,
											"end": 446,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 419,
											"end": 446,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 419,
											"end": 446,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 419,
											"end": 446,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 419,
											"end": 446,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 419,
											"end": 446,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 419,
											"end": 446,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 381,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 353,
											"end": 381,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 353,
											"end": 381,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 353,
											"end": 381,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 353,
											"end": 381,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 353,
											"end": 381,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 353,
											"end": 381,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 353,
											"end": 381,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 353,
											"end": 381,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 481,
											"end": 507,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 481,
											"end": 507,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 481,
											"end": 507,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 481,
											"end": 507,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 481,
											"end": 507,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 481,
											"end": 507,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 481,
											"end": 507,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "tag",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 662,
											"end": 704,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 662,
											"end": 704,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1076,
											"end": 1101,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1076,
											"end": 1101,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1076,
											"end": 1101,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1132,
											"end": 1134,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1117,
											"end": 1135,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1117,
											"end": 1135,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1110,
											"end": 1144,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1110,
											"end": 1144,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1110,
											"end": 1144,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1110,
											"end": 1144,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1187,
											"end": 1201,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1180,
											"end": 1202,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1160,
											"end": 1178,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1160,
											"end": 1178,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1160,
											"end": 1178,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1153,
											"end": 1203,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1064,
											"end": 1066,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1049,
											"end": 1067,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 662,
											"end": 704,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 880,
											"end": 1209,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "tag",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "tag",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5790,
											"end": 5803,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5790,
											"end": 5803,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5830,
											"end": 5834,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1519,
											"end": 1553,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5837,
											"end": 5847,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1569,
											"end": 1587,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1569,
											"end": 1587,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1569,
											"end": 1587,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1605,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1614,
											"end": 1648,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1614,
											"end": 1648,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1614,
											"end": 1648,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1684,
											"end": 1687,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1657,
											"end": 1688,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1723,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 1704,
											"end": 1723,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1704,
											"end": 1723,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1697,
											"end": 1727,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5790,
											"end": 5803,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5790,
											"end": 5803,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5790,
											"end": 5803,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5790,
											"end": 5803,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "PUSH",
											"source": 9,
											"value": "B88D4FDE"
										},
										{
											"begin": 5782,
											"end": 5821,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1744,
											"end": 1763,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 1744,
											"end": 1763,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5782,
											"end": 5860,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5726,
											"end": 5867,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5184,
											"end": 5196,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5184,
											"end": 5212,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 5112,
											"end": 5219,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3070,
											"end": 3080,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3069,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3081,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3087,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3062,
											"end": 3087,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3087,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3062,
											"end": 3087,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3062,
											"end": 3087,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3061,
											"end": 3087,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1976,
											"end": 1978,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1958,
											"end": 1979,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2015,
											"end": 2017,
											"name": "PUSH",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 1995,
											"end": 2013,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1995,
											"end": 2013,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1995,
											"end": 2013,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1988,
											"end": 2018,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365204669727374205769746844726177"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "58"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 2052,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2034,
											"end": 2052,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2034,
											"end": 2052,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2027,
											"end": 2078,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2095,
											"end": 2113,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2095,
											"end": 2113,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 3053,
											"end": 3112,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3159,
											"end": 3174,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3175,
											"end": 3179,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3130,
											"end": 3140,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3129,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3141,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3122,
											"end": 3180,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3190,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 3190,
											"end": 3264,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3197,
											"end": 3209,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3248,
											"end": 3252,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3144,
											"end": 3180,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3190,
											"end": 3227,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 3190,
											"end": 3264,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3190,
											"end": 3264,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 3190,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3002,
											"end": 3271,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3519,
											"end": 3529,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3518,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3530,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3536,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3511,
											"end": 3536,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3536,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3511,
											"end": 3536,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 3511,
											"end": 3536,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2326,
											"end": 2328,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2308,
											"end": 2329,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2365,
											"end": 2367,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 2345,
											"end": 2363,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2345,
											"end": 2363,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2345,
											"end": 2363,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2338,
											"end": 2368,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365204669727374205374616B65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2384,
											"end": 2402,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2384,
											"end": 2402,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2384,
											"end": 2402,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2377,
											"end": 2425,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2442,
											"end": 2460,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2442,
											"end": 2460,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 2124,
											"end": 2466,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3503,
											"end": 3558,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3590,
											"end": 3600,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3568,
											"end": 3579,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3589,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3601,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3611,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3582,
											"end": 3611,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 3635,
											"end": 3651,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3670,
											"end": 3682,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3670,
											"end": 3682,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3621,
											"end": 3653,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3621,
											"end": 3653,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3670,
											"end": 3682,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3692,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 3693,
											"end": 3703,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3705,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 3621,
											"end": 3653,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3705,
											"end": 3711,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3705,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 3705,
											"end": 3720,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3705,
											"end": 3720,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 3705,
											"end": 3720,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2928,
											"end": 2960,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2960,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2960,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2910,
											"end": 2961,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2977,
											"end": 2995,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2977,
											"end": 2995,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2977,
											"end": 2995,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2970,
											"end": 3004,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2883,
											"end": 2901,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2883,
											"end": 2901,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "136"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 3663,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3743,
											"end": 3754,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3742,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3755,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3731,
											"end": 3765,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3790,
											"end": 3800,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3789,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3782,
											"end": 3801,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3801,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3466,
											"end": 3808,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2591,
											"end": 2598,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2660,
											"end": 2675,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2660,
											"end": 2675,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2641,
											"end": 2651,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2610,
											"end": 2625,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2640,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2652,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2610,
											"end": 2625,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2610,
											"end": 2625,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2660,
											"end": 2675,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2629,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2629,
											"end": 2658,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2655,
											"end": 2658,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 2629,
											"end": 2658,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 2629,
											"end": 2658,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2629,
											"end": 2658,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 2629,
											"end": 2658,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 2628,
											"end": 2675,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2610,
											"end": 2675,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2538,
											"end": 2709,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "tag",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 2125,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2204,
											"end": 2214,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2203,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2219,
											"end": 2225,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2219,
											"end": 2225,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2215,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2219,
											"end": 2225,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2219,
											"end": 2225,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2192,
											"end": 2225,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2254,
											"end": 2260,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2250,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2235,
											"end": 2250,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2235,
											"end": 2260,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2277,
											"end": 2289,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2277,
											"end": 2289,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2270,
											"end": 2323,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 2270,
											"end": 2323,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2277,
											"end": 2289,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2304,
											"end": 2314,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2316,
											"end": 2322,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2270,
											"end": 2303,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 2270,
											"end": 2323,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3968,
											"end": 3978,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3867,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3967,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3979,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3989,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3960,
											"end": 3989,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3960,
											"end": 3989,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3867,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3856,
											"end": 3867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3989,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 3942,
											"end": 3989,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3957,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 3942,
											"end": 3989,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 3942,
											"end": 3989,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3942,
											"end": 3989,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 3942,
											"end": 3989,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3933,
											"end": 3937,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3933,
											"end": 3937,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3909,
											"end": 3919,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3908,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3920,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3930,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 3901,
											"end": 3937,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3933,
											"end": 3937,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3901,
											"end": 3937,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 3901,
											"end": 3937,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3901,
											"end": 3937,
											"name": "tag",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 3901,
											"end": 3937,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 3900,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3883,
											"end": 3990,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4000,
											"end": 4016,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4019,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 4031,
											"end": 4035,
											"name": "PUSH",
											"source": 9,
											"value": "1770"
										},
										{
											"begin": 3883,
											"end": 3990,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4019,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 4019,
											"end": 4035,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4019,
											"end": 4035,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 4019,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4076,
											"end": 4086,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4075,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4087,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4068,
											"end": 4097,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4000,
											"end": 4035,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4000,
											"end": 4035,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4054,
											"end": 4097,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 4054,
											"end": 4097,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4000,
											"end": 4035,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4054,
											"end": 4097,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 4054,
											"end": 4097,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4054,
											"end": 4097,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 4054,
											"end": 4097,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4045,
											"end": 4097,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4045,
											"end": 4097,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4107,
											"end": 4120,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4107,
											"end": 4120,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3814,
											"end": 4127,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 1643,
											"end": 1933,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1726,
											"end": 1737,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1726,
											"end": 1737,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1726,
											"end": 1737,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1724,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1714,
											"end": 1737,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4024,
											"end": 4026,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4006,
											"end": 4027,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4063,
											"end": 4065,
											"name": "PUSH",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 4043,
											"end": 4061,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4043,
											"end": 4061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4043,
											"end": 4061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4036,
											"end": 4066,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4102,
											"end": 4127,
											"name": "PUSH",
											"source": 10,
											"value": "4F6E6C79204F776E65722063616E207472616E73666572000000000000000000"
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4082,
											"end": 4100,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4075,
											"end": 4128,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4145,
											"end": 4163,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4145,
											"end": 4163,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 3822,
											"end": 4169,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 1706,
											"end": 1764,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1786,
											"end": 1796,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1785,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1800,
											"end": 1807,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1800,
											"end": 1807,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1797,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1800,
											"end": 1807,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1800,
											"end": 1807,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "tag",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1774,
											"end": 1807,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1836,
											"end": 1843,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1832,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 1817,
											"end": 1832,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1817,
											"end": 1843,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1860,
											"end": 1872,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 1860,
											"end": 1872,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 1853,
											"end": 1926,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1860,
											"end": 1872,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1891,
											"end": 1901,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1911,
											"end": 1915,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1918,
											"end": 1925,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1853,
											"end": 1890,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 1853,
											"end": 1926,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4542,
											"end": 4552,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4446,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4541,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4553,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4563,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4534,
											"end": 4563,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4534,
											"end": 4563,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4446,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4439,
											"end": 4446,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4516,
											"end": 4563,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 4516,
											"end": 4563,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4516,
											"end": 4531,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 4516,
											"end": 4563,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 4516,
											"end": 4563,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4516,
											"end": 4563,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 4516,
											"end": 4563,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4507,
											"end": 4511,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 4507,
											"end": 4511,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4483,
											"end": 4493,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4482,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4494,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4504,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 4475,
											"end": 4511,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4507,
											"end": 4511,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4475,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 4475,
											"end": 4511,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4475,
											"end": 4511,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 4475,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "tag",
											"source": 9,
											"value": "177"
										},
										{
											"begin": 4474,
											"end": 4564,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4457,
											"end": 4564,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4574,
											"end": 4590,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4593,
											"end": 4609,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 4605,
											"end": 4609,
											"name": "PUSH",
											"source": 9,
											"value": "1770"
										},
										{
											"begin": 4457,
											"end": 4564,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4593,
											"end": 4609,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 4593,
											"end": 4609,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4593,
											"end": 4609,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 4593,
											"end": 4609,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4574,
											"end": 4609,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4391,
											"end": 4644,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "tag",
											"source": 9,
											"value": "98"
										},
										{
											"begin": 5516,
											"end": 5720,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5593,
											"end": 5606,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5593,
											"end": 5606,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5593,
											"end": 5606,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5579,
											"end": 5589,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5579,
											"end": 5606,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4376,
											"end": 4378,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4358,
											"end": 4379,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4415,
											"end": 4417,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 4395,
											"end": 4413,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4395,
											"end": 4413,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4395,
											"end": 4413,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4388,
											"end": 4418,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E76616C69642061646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4434,
											"end": 4452,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4434,
											"end": 4452,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4434,
											"end": 4452,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4427,
											"end": 4472,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4489,
											"end": 4507,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4489,
											"end": 4507,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 4174,
											"end": 4513,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "tag",
											"source": 9,
											"value": "180"
										},
										{
											"begin": 5571,
											"end": 5626,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5644,
											"end": 5657,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 5644,
											"end": 5657,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5676,
											"end": 5686,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1519,
											"end": 1553,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5695,
											"end": 5699,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 1569,
											"end": 1587,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1569,
											"end": 1587,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1569,
											"end": 1587,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1562,
											"end": 1605,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1621,
											"end": 1639,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1614,
											"end": 1648,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1614,
											"end": 1648,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1614,
											"end": 1648,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1684,
											"end": 1687,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1657,
											"end": 1688,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1704,
											"end": 1723,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 1704,
											"end": 1723,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1704,
											"end": 1723,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1697,
											"end": 1727,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5644,
											"end": 5657,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5644,
											"end": 5657,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5644,
											"end": 5657,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5644,
											"end": 5657,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5636,
											"end": 5675,
											"name": "PUSH",
											"source": 9,
											"value": "B88D4FDE"
										},
										{
											"begin": 5636,
											"end": 5675,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1744,
											"end": 1763,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 1744,
											"end": 1763,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5636,
											"end": 5713,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 1214,
											"end": 1769,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "tag",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4898,
											"end": 4911,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4898,
											"end": 4928,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4826,
											"end": 4935,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4720,
											"end": 4722,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4702,
											"end": 4723,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4759,
											"end": 4761,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 4739,
											"end": 4757,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4739,
											"end": 4757,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4739,
											"end": 4757,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4732,
											"end": 4762,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4798,
											"end": 4832,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4778,
											"end": 4796,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4778,
											"end": 4796,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4778,
											"end": 4796,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 4833,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4849,
											"end": 4867,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4849,
											"end": 4867,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4849,
											"end": 4867,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4842,
											"end": 4878,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4895,
											"end": 4914,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4895,
											"end": 4914,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 4518,
											"end": 4920,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "tag",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5482,
											"end": 5486,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 5482,
											"end": 5504,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 5401,
											"end": 5511,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5127,
											"end": 5129,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5109,
											"end": 5130,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5130,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5130,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5146,
											"end": 5164,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5139,
											"end": 5169,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5205,
											"end": 5239,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 5185,
											"end": 5203,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5185,
											"end": 5203,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5185,
											"end": 5203,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5178,
											"end": 5240,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5257,
											"end": 5275,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5257,
											"end": 5275,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 4925,
											"end": 5281,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5544,
											"end": 5559,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5544,
											"end": 5559,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5544,
											"end": 5559,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5526,
											"end": 5560,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5596,
											"end": 5611,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5596,
											"end": 5611,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5576,
											"end": 5594,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5576,
											"end": 5594,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5576,
											"end": 5594,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5569,
											"end": 5612,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5628,
											"end": 5646,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5628,
											"end": 5646,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5628,
											"end": 5646,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5621,
											"end": 5655,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5621,
											"end": 5655,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5621,
											"end": 5655,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "208"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5461,
											"end": 5479,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 5461,
											"end": 5479,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "tag",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 3,
											"value": "208"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2928,
											"end": 2960,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2960,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2910,
											"end": 2961,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2977,
											"end": 2995,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 2977,
											"end": 2995,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2977,
											"end": 2995,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2970,
											"end": 3004,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2970,
											"end": 3004,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2970,
											"end": 3004,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 895,
											"end": 900,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2883,
											"end": 2901,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2883,
											"end": 2901,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 2736,
											"end": 3010,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5868,
											"end": 5870,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5850,
											"end": 5871,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5907,
											"end": 5909,
											"name": "PUSH",
											"source": 10,
											"value": "2A"
										},
										{
											"begin": 5887,
											"end": 5905,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 5887,
											"end": 5905,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5887,
											"end": 5905,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5880,
											"end": 5910,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5946,
											"end": 5980,
											"name": "PUSH",
											"source": 10,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 5926,
											"end": 5944,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5926,
											"end": 5944,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5926,
											"end": 5944,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5919,
											"end": 5981,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5997,
											"end": 6015,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5997,
											"end": 6015,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5997,
											"end": 6015,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5990,
											"end": 6030,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6047,
											"end": 6066,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 6047,
											"end": 6066,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 5666,
											"end": 6072,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4037,
											"end": 4058,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "tag",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4030,
											"end": 4089,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5125,
											"end": 5137,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5182,
											"end": 5187,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5178,
											"name": "SELFBALANCE",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 5157,
											"end": 5187,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6279,
											"end": 6281,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6261,
											"end": 6282,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6318,
											"end": 6320,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 6298,
											"end": 6316,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 6298,
											"end": 6316,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6298,
											"end": 6316,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6291,
											"end": 6321,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6357,
											"end": 6391,
											"name": "PUSH",
											"source": 10,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 6337,
											"end": 6355,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6337,
											"end": 6355,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6337,
											"end": 6355,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6330,
											"end": 6392,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6408,
											"end": 6426,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6408,
											"end": 6426,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6408,
											"end": 6426,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6401,
											"end": 6437,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6454,
											"end": 6473,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 6454,
											"end": 6473,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 6077,
											"end": 6479,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "tag",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 5149,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "232"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "233"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "232"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 6,
											"value": "235"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP8",
											"source": 6
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7701,
											"end": 7711,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7722,
											"end": 7723,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7701,
											"end": 7723,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7228,
											"end": 7230,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7210,
											"end": 7231,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7267,
											"end": 7269,
											"name": "PUSH",
											"source": 10,
											"value": "1D"
										},
										{
											"begin": 7247,
											"end": 7265,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7247,
											"end": 7265,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7247,
											"end": 7265,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7240,
											"end": 7270,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7306,
											"end": 7337,
											"name": "PUSH",
											"source": 10,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 7286,
											"end": 7304,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 7286,
											"end": 7304,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7286,
											"end": 7304,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7279,
											"end": 7338,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7355,
											"end": 7373,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7355,
											"end": 7373,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 7026,
											"end": 7379,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "252"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 6,
											"value": "252"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "255"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 589,
											"end": 875,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 589,
											"end": 875,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 648,
											"end": 654,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 701,
											"end": 703,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 689,
											"end": 698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 680,
											"end": 687,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 676,
											"end": 699,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 672,
											"end": 704,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 669,
											"end": 721,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 669,
											"end": 721,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 669,
											"end": 721,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 717,
											"end": 718,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 714,
											"end": 715,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 707,
											"end": 719,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 669,
											"end": 721,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 669,
											"end": 721,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 743,
											"end": 766,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 743,
											"end": 766,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 795,
											"end": 826,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 795,
											"end": 826,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 785,
											"end": 827,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 775,
											"end": 845,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 775,
											"end": 845,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 841,
											"end": 842,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 838,
											"end": 839,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 831,
											"end": 843,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2471,
											"end": 2598,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 2471,
											"end": 2598,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2532,
											"end": 2542,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 2527,
											"end": 2530,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 2523,
											"end": 2543,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2520,
											"end": 2521,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2513,
											"end": 2544,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2563,
											"end": 2567,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 2560,
											"end": 2561,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2553,
											"end": 2568,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2587,
											"end": 2591,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 2584,
											"end": 2585,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2577,
											"end": 2592,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2603,
											"end": 2731,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 2603,
											"end": 2731,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2643,
											"end": 2646,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2674,
											"end": 2675,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2670,
											"end": 2676,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 2667,
											"end": 2668,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2664,
											"end": 2677,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2661,
											"end": 2700,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2661,
											"end": 2700,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 2661,
											"end": 2700,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2680,
											"end": 2698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 2680,
											"end": 2698,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 2680,
											"end": 2698,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2680,
											"end": 2698,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 2680,
											"end": 2698,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2716,
											"end": 2725,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2716,
											"end": 2725,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2603,
											"end": 2731,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3015,
											"end": 3292,
											"name": "tag",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 3015,
											"end": 3292,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3082,
											"end": 3088,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3135,
											"end": 3137,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3123,
											"end": 3132,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3114,
											"end": 3121,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3110,
											"end": 3133,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3106,
											"end": 3138,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3103,
											"end": 3155,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3103,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 3103,
											"end": 3155,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3151,
											"end": 3152,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3148,
											"end": 3149,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3141,
											"end": 3153,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3103,
											"end": 3155,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 3103,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3183,
											"end": 3192,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3177,
											"end": 3193,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3236,
											"end": 3241,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3229,
											"end": 3242,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3243,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3215,
											"end": 3220,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3212,
											"end": 3244,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3202,
											"end": 3262,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 3202,
											"end": 3262,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3258,
											"end": 3259,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3255,
											"end": 3256,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3248,
											"end": 3260,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3297,
											"end": 3422,
											"name": "tag",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 3297,
											"end": 3422,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3337,
											"end": 3341,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3365,
											"end": 3366,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3362,
											"end": 3363,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3359,
											"end": 3367,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3356,
											"end": 3390,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3356,
											"end": 3390,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 3356,
											"end": 3390,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "tag",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 3370,
											"end": 3388,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3407,
											"end": 3416,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3416,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3297,
											"end": 3422,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3427,
											"end": 3595,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 3427,
											"end": 3595,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3467,
											"end": 3474,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3533,
											"end": 3534,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3529,
											"end": 3530,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3525,
											"end": 3531,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 3521,
											"end": 3535,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3518,
											"end": 3519,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3515,
											"end": 3536,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3510,
											"end": 3511,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3503,
											"end": 3512,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3496,
											"end": 3513,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3492,
											"end": 3537,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3489,
											"end": 3560,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3489,
											"end": 3560,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 3489,
											"end": 3560,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3540,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 3540,
											"end": 3558,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 3540,
											"end": 3558,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3540,
											"end": 3558,
											"name": "tag",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 3540,
											"end": 3558,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3580,
											"end": 3589,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3580,
											"end": 3589,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3427,
											"end": 3595,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3600,
											"end": 3817,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 3600,
											"end": 3817,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3640,
											"end": 3641,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3666,
											"end": 3667,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3656,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 3656,
											"end": 3788,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3710,
											"end": 3720,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 3705,
											"end": 3708,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 3701,
											"end": 3721,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 3698,
											"end": 3699,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3691,
											"end": 3722,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3745,
											"end": 3749,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 3742,
											"end": 3743,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3735,
											"end": 3750,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3773,
											"end": 3777,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 3770,
											"end": 3771,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3763,
											"end": 3778,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3656,
											"end": 3788,
											"name": "tag",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 3656,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3802,
											"end": 3811,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3802,
											"end": 3811,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3600,
											"end": 3817,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6484,
											"end": 6742,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 6484,
											"end": 6742,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6557,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "tag",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6580,
											"end": 6586,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6577,
											"end": 6578,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6587,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6656,
											"end": 6667,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6656,
											"end": 6667,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6656,
											"end": 6667,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6650,
											"end": 6668,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6637,
											"end": 6648,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6637,
											"end": 6648,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6637,
											"end": 6648,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6630,
											"end": 6669,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6602,
											"end": 6604,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6595,
											"end": 6605,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "tag",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 6566,
											"end": 6679,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6697,
											"end": 6703,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6694,
											"end": 6695,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6691,
											"end": 6704,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 6688,
											"end": 6736,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6688,
											"end": 6736,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "208"
										},
										{
											"begin": 6688,
											"end": 6736,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6732,
											"end": 6733,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6714,
											"end": 6730,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6714,
											"end": 6730,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6707,
											"end": 6734,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6484,
											"end": 6742,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6747,
											"end": 7021,
											"name": "tag",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 6747,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6876,
											"end": 6879,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6914,
											"end": 6920,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6908,
											"end": 6921,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6930,
											"end": 6983,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 6976,
											"end": 6982,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6971,
											"end": 6974,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6964,
											"end": 6968,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6956,
											"end": 6962,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 6952,
											"end": 6969,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6930,
											"end": 6983,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 6930,
											"end": 6983,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6930,
											"end": 6983,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 6930,
											"end": 6983,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6999,
											"end": 7015,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6999,
											"end": 7015,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6999,
											"end": 7015,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6999,
											"end": 7015,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6999,
											"end": 7015,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6747,
											"end": 7021,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6747,
											"end": 7021,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7384,
											"end": 7767,
											"name": "tag",
											"source": 10,
											"value": "255"
										},
										{
											"begin": 7384,
											"end": 7767,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7533,
											"end": 7535,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7522,
											"end": 7531,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7515,
											"end": 7536,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7496,
											"end": 7500,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7565,
											"end": 7571,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7559,
											"end": 7572,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7608,
											"end": 7614,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7603,
											"end": 7605,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7592,
											"end": 7601,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7588,
											"end": 7606,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7615,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7624,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 7683,
											"end": 7689,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7678,
											"end": 7680,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7667,
											"end": 7676,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7663,
											"end": 7681,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7658,
											"end": 7660,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7650,
											"end": 7656,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7646,
											"end": 7661,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7624,
											"end": 7690,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 7624,
											"end": 7690,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7624,
											"end": 7690,
											"name": "tag",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 7624,
											"end": 7690,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7751,
											"end": 7753,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 7730,
											"end": 7745,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7726,
											"end": 7755,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7711,
											"end": 7756,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7758,
											"end": 7760,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7761,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7707,
											"end": 7761,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7384,
											"end": 7767,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7384,
											"end": 7767,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"AdminAddToken(uint256)": "c0cd40ee",
							"AdminWithDrawToken(uint256)": "a88e132f",
							"Deposit(uint256)": "4d6ce1e5",
							"Details(address)": "e88cc2be",
							"ERC20Address()": "a6021ace",
							"ERC721address()": "b7171a2e",
							"OwnerTokens(address)": "2ffce210",
							"Reward(address)": "57488064",
							"UpdateERC20(address)": "275bd33f",
							"UpdateERC721(address)": "ee0106d2",
							"UpdateRatePersentage(uint256)": "f89d832f",
							"Utilization()": "7b2f247f",
							"Withdraw()": "57ea89b6",
							"calculateIntrest()": "c3c917b0",
							"depositNFT(uint256)": "e91a7ca6",
							"owenerERC20()": "10fd4fba",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"rewardrate()": "5eb82e94",
							"showReward()": "ab0ee2ac",
							"totalOwnerToken()": "0ccff6e9",
							"transferOwnership(address)": "f2fde38b",
							"unstaketimeval()": "de9d3ddb",
							"withdrawNFT(uint256)": "023245d7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratePersentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnerTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"name\":\"UpdateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721address\",\"type\":\"address\"}],\"name\":\"UpdateERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratePersentage\",\"type\":\"uint256\"}],\"name\":\"UpdateRatePersentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateIntrest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owenerERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOwnerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstaketimeval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenStaking/TokenStaking.sol\":\"ERC20Stakeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/TokenStaking/TokenStaking.sol\":{\"keccak256\":\"0x5891b96e1e5eae9a85c28a5a178053f6650101258c2c3657cbaf12c9cef5cc9b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://966df3e9203f26a00441cbf85e271f7c6f1ca206520d3e236788a58d1f9305e8\",\"dweb:/ipfs/QmNUm7Kc7wV1MFnpdZW4wyGnb9Sg4S83Jo56qox4ciMtCe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1031,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "ERC721address",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1033,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "owenerERC20",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1035,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "ERC20Address",
								"offset": 0,
								"slot": "3",
								"type": "t_address"
							},
							{
								"astId": 1037,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "rewardrate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1039,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "unstaketimeval",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1041,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "totalOwnerToken",
								"offset": 0,
								"slot": "6",
								"type": "t_uint256"
							},
							{
								"astId": 1043,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "rate",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 1055,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "Details",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_struct(Staker)1050_storage)"
							},
							{
								"astId": 1059,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "Reward",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1063,
								"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
								"label": "OwnerTokens",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Staker)1050_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20Stakeable.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)1050_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Staker)1050_storage": {
								"encoding": "inplace",
								"label": "struct ERC20Stakeable.Staker",
								"members": [
									{
										"astId": 1045,
										"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
										"label": "deposited",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1047,
										"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
										"label": "timestake",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1049,
										"contract": "contracts/TokenStaking/TokenStaking.sol:ERC20Stakeable",
										"label": "check",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1006
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1007,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1006,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1006
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 996,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 996,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							226
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:2",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1494:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1585:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1604:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:2"
									},
									"scope": 226,
									"src": "1446:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1950:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1988:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:2"
									},
									"scope": 226,
									"src": "1934:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2240:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 222,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:2"
									},
									"scope": 226,
									"src": "2189:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 227,
							"src": "620:1631:2",
							"usedErrors": []
						}
					],
					"src": "114:2138:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							984
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"SafeERC20": [
							507
						]
					},
					"id": 508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 191,
							"src": "140:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 227,
							"src": "164:46:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 985,
							"src": "211:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 232,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 235,
									"libraryName": {
										"id": 233,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 984,
										"src": "737:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:3",
									"typeName": {
										"id": 234,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "865:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 246,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 238,
															"src": "895:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 249,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 238,
																			"src": "925:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 252,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "950:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 253,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "954:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 245,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "875:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "875:86:3"
											}
										]
									},
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "794:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:3"
													},
													"referencedDeclaration": 190,
													"src": "794:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "816:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "836:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:3"
									},
									"scope": 507,
									"src": "763:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1102:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1132:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 261,
																			"src": "1162:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "1191:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "1197:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "1201:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1112:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:3"
											}
										]
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1009:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1031:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1053:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1073:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:3"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:3"
									},
									"scope": 507,
									"src": "974:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1581:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 296,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "1830:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 304,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 303,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 302,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 306,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 290,
																					"src": "1877:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 300,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 288,
																					"src": "1846:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 314,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2001:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 288,
																			"src": "2031:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 322,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "2055:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "2064:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1981:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:3"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1505:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 286,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1527:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1552:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:3"
									},
									"scope": 507,
									"src": "1475:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2200:194:3",
										"statements": [
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "2210:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 344,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 342,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 346,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "2264:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 340,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "2233:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "2275:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "2310:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 355,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 331,
																			"src": "2340:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 358,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "2364:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 359,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "2373:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 353,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 351,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "2290:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:3"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 329,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2146:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2171:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:3"
									},
									"scope": 507,
									"src": "2084:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "2516:370:3",
										"statements": [
											{
												"id": 410,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:3",
												"statements": [
													{
														"assignments": [
															375
														],
														"declarations": [
															{
																"constant": false,
																"id": 375,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2550:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 384,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 380,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 378,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 382,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "2604:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 376,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2573:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 386,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 375,
																		"src": "2634:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 387,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "2650:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 385,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 391,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:3"
													},
													{
														"assignments": [
															393
														],
														"declarations": [
															{
																"constant": false,
																"id": 393,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2715:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 397,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2738:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 395,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "2753:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 399,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2792:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 402,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 367,
																					"src": "2822:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 403,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 405,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 369,
																			"src": "2846:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 406,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2855:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 400,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 398,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "2772:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 409,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:3"
													}
												]
											}
										]
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2440:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 366,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 365,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2462:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2487:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:3"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:3"
									},
									"scope": 507,
									"src": "2400:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 467,
										"nodeType": "Block",
										"src": "3107:257:3",
										"statements": [
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3117:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3152:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 434,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3139:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3139:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3181:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "3188:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3197:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "3204:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 446,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "3214:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 447,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "3217:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 448,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "3220:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3168:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3168:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:3"
											},
											{
												"assignments": [
													452
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3232:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [
														{
															"id": 455,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 453,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3253:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3253:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "3290:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 460,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 433,
																	"src": "3304:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:3"
											}
										]
									},
									"id": 468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2921:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$226",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 413,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 226,
														"src": "2921:12:3"
													},
													"referencedDeclaration": 226,
													"src": "2921:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$226",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2949:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2972:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3020:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3046:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 424,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3063:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3082:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:3"
									},
									"scope": 507,
									"src": "2892:472:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3817:636:3",
										"statements": [
											{
												"assignments": [
													478
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 505,
														"src": "4166:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 477,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 487,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 481,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "4200:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 479,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 744,
														"src": "4192:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "4275:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 504,
												"nodeType": "IfStatement",
												"src": "4271:176:3",
												"trueBody": {
													"id": 503,
													"nodeType": "Block",
													"src": "4298:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "4370:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 492,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 502,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 470,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:3"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3790:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:3"
									},
									"scope": 507,
									"src": "3747:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 508,
							"src": "707:3748:3",
							"usedErrors": []
						}
					],
					"src": "115:4341:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						],
						"IERC721": [
							623
						]
					},
					"id": 624,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 624,
							"sourceUnit": 1019,
							"src": "133:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 512,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1018,
										"src": "271:7:4"
									},
									"id": 513,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:4"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 511,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 623,
							"linearizedBaseContracts": [
								623,
								1018
							],
							"name": "IERC721",
							"nameLocation": "260:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 522,
									"name": "Transfer",
									"nameLocation": "384:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "393:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "415:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "435:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:4"
									},
									"src": "378:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 531,
									"name": "Approval",
									"nameLocation": "571:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "580:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "603:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "629:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:4"
									},
									"src": "565:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 540,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "803:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "826:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "852:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:4"
									},
									"src": "782:85:4"
								},
								{
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "973:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:4"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "1011:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:4"
									},
									"scope": 623,
									"src": "954:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1187:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1227:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:4"
									},
									"scope": 623,
									"src": "1170:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1844:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1866:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1886:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1911:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:4"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:4"
									},
									"scope": 623,
									"src": "1809:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2701:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2721:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:4"
									},
									"scope": 623,
									"src": "2644:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3526:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3548:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3568:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:4"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:4"
									},
									"scope": 623,
									"src": "3495:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4079:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4091:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:4"
									},
									"scope": 623,
									"src": "4062:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4464:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4482:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 600,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:4"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:4"
									},
									"scope": 623,
									"src": "4437:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4678:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:4"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4718:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:4"
									},
									"scope": 623,
									"src": "4657:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4911:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4926:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:4"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4967:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 619,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:4"
									},
									"scope": 623,
									"src": "4885:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 624,
							"src": "250:4725:4",
							"usedErrors": []
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							654
						]
					},
					"id": 655,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 625,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 626,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 655,
							"sourceUnit": 624,
							"src": "154:24:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 628,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 623,
										"src": "348:7:5"
									},
									"id": 629,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:5"
								}
							],
							"canonicalName": "IERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 627,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:5",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 654,
							"linearizedBaseContracts": [
								654,
								623,
								1018
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 630,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:5",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 635,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:5"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "495:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:5"
									},
									"scope": 654,
									"src": "449:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:5",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 645,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "715:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "730:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:5"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 645,
												"src": "768:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:5"
									},
									"scope": 654,
									"src": "686:91:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 646,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:5",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "974:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 647,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:5"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "1012:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:5"
									},
									"scope": 654,
									"src": "952:69:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 655,
							"src": "317:706:5",
							"usedErrors": []
						}
					],
					"src": "129:895:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							984
						]
					},
					"id": 985,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 656,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 657,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 984,
							"linearizedBaseContracts": [
								984
							],
							"name": "Address",
							"nameLocation": "202:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "1241:254:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 665,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "1465:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 668,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 664,
												"id": 670,
												"nodeType": "Return",
												"src": "1458:30:6"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1195:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:6"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "1235:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:6"
									},
									"scope": 984,
									"src": "1175:320:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "2483:241:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 683,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		],
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 681,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 686,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "2526:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 680,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 690,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:6"
											},
											{
												"assignments": [
													692,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 692,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 705,
														"src": "2578:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 691,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 699,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 693,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 675,
																"src": "2596:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 694,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 695,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "2618:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 701,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "2647:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 700,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 704,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:6"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "2431:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "2458:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:6"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:6"
									},
									"scope": 984,
									"src": "2412:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "3555:96:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 717,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "3594:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 718,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "3602:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 716,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "3572:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 715,
												"id": 722,
												"nodeType": "Return",
												"src": "3565:79:6"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3488:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3504:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 710,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:6"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "3541:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:6"
									},
									"scope": 984,
									"src": "3466:185:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 743,
										"nodeType": "Block",
										"src": "4020:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 737,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "4059:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 738,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "4067:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 739,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 740,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "4076:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 736,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "4037:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 735,
												"id": 742,
												"nodeType": "Return",
												"src": "4030:59:6"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 744,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3904:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3928:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "3955:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 730,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:6"
									},
									"returnParameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 744,
												"src": "4006:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:6"
									},
									"scope": 984,
									"src": "3873:223:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 763,
										"nodeType": "Block",
										"src": "4601:111:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 757,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "4640:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 758,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4648:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 759,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 751,
															"src": "4654:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 756,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															764,
															808
														],
														"referencedDeclaration": 808,
														"src": "4618:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 755,
												"id": 762,
												"nodeType": "Return",
												"src": "4611:94:6"
											}
										]
									},
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 764,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4498:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4522:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 748,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4549:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:6"
									},
									"returnParameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 764,
												"src": "4587:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 753,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:6"
									},
									"scope": 984,
									"src": "4458:254:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "5139:267:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 781,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$984",
																				"typeString": "library Address"
																			}
																		],
																		"id": 780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 779,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 782,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 783,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 784,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "5182:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 778,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:6"
											},
											{
												"assignments": [
													790,
													792
												],
												"declarations": [
													{
														"constant": false,
														"id": 790,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5241:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 789,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 792,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "5255:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 791,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 799,
												"initialValue": {
													"arguments": [
														{
															"id": 797,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "5308:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 793,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "5282:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 796,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 795,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 771,
																"src": "5301:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 801,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "5357:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 802,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 790,
															"src": "5365:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 803,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "5374:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 804,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "5386:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 800,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "5330:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 777,
												"id": 806,
												"nodeType": "Return",
												"src": "5323:76:6"
											}
										]
									},
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 774,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5000:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5024:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 768,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5051:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5074:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 772,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:6"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 776,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "5125:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 775,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:6"
									},
									"scope": 984,
									"src": "4960:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 824,
										"nodeType": "Block",
										"src": "5683:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 819,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 811,
															"src": "5719:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 820,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "5727:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 821,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 818,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															825,
															854
														],
														"referencedDeclaration": 854,
														"src": "5700:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 817,
												"id": 823,
												"nodeType": "Return",
												"src": "5693:80:6"
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5611:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5627:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 812,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:6"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 825,
												"src": "5669:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 815,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:6"
									},
									"scope": 984,
									"src": "5583:197:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 853,
										"nodeType": "Block",
										"src": "6122:168:6",
										"statements": [
											{
												"assignments": [
													838,
													840
												],
												"declarations": [
													{
														"constant": false,
														"id": 838,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "6133:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 837,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 840,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 853,
														"src": "6147:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 839,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 845,
												"initialValue": {
													"arguments": [
														{
															"id": 843,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "6192:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 841,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "6174:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 842,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 847,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "6241:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 848,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 838,
															"src": "6249:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 849,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "6258:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 850,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 832,
															"src": "6270:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 846,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "6214:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 836,
												"id": 852,
												"nodeType": "Return",
												"src": "6207:76:6"
											}
										]
									},
									"documentation": {
										"id": 826,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 854,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6001:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6025:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 829,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6052:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 831,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:6"
									},
									"returnParameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "6108:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 834,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:6"
									},
									"scope": 984,
									"src": "5964:326:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 870,
										"nodeType": "Block",
										"src": "6566:101:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 865,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 857,
															"src": "6604:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "6612:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 864,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															871,
															900
														],
														"referencedDeclaration": 900,
														"src": "6583:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 863,
												"id": 869,
												"nodeType": "Return",
												"src": "6576:84:6"
											}
										]
									},
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6499:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6515:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 858,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:6"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 871,
												"src": "6552:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 861,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:6"
									},
									"scope": 984,
									"src": "6469:198:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 899,
										"nodeType": "Block",
										"src": "7008:170:6",
										"statements": [
											{
												"assignments": [
													884,
													886
												],
												"declarations": [
													{
														"constant": false,
														"id": 884,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 899,
														"src": "7019:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 883,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 886,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 899,
														"src": "7033:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 885,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 891,
												"initialValue": {
													"arguments": [
														{
															"id": 889,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 876,
															"src": "7080:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 887,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "7060:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 888,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 893,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "7129:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 894,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 884,
															"src": "7137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 895,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 886,
															"src": "7146:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 896,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 878,
															"src": "7158:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 892,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "7102:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 882,
												"id": 898,
												"nodeType": "Return",
												"src": "7095:76:6"
											}
										]
									},
									"documentation": {
										"id": 872,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 900,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6892:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6916:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 875,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6943:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 877,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:6"
									},
									"returnParameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 900,
												"src": "6994:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 880,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:6"
									},
									"scope": 984,
									"src": "6853:325:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 938,
										"nodeType": "Block",
										"src": "7660:434:6",
										"statements": [
											{
												"condition": {
													"id": 914,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 905,
													"src": "7674:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 936,
													"nodeType": "Block",
													"src": "8030:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 932,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "8052:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 933,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 909,
																		"src": "8064:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 931,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "8044:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 935,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:6"
														}
													]
												},
												"id": 937,
												"nodeType": "IfStatement",
												"src": "7670:418:6",
												"trueBody": {
													"id": 930,
													"nodeType": "Block",
													"src": "7683:341:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 915,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "7701:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 927,
															"nodeType": "IfStatement",
															"src": "7697:286:6",
															"trueBody": {
																"id": 926,
																"nodeType": "Block",
																"src": "7725:258:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 921,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 903,
																							"src": "7927:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 920,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 672,
																						"src": "7916:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 922,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 923,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 919,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 925,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 928,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 907,
																"src": "8003:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 913,
															"id": 929,
															"nodeType": "Return",
															"src": "7996:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 901,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 939,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7511:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7535:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 904,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7557:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 906,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7590:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 908,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:6"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "7646:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 911,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:6"
									},
									"scope": 984,
									"src": "7466:628:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 962,
										"nodeType": "Block",
										"src": "8475:135:6",
										"statements": [
											{
												"condition": {
													"id": 951,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 942,
													"src": "8489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 960,
													"nodeType": "Block",
													"src": "8546:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 956,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 944,
																		"src": "8568:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 957,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 946,
																		"src": "8580:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 955,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 983,
																	"src": "8560:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 959,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:6"
														}
													]
												},
												"id": 961,
												"nodeType": "IfStatement",
												"src": "8485:119:6",
												"trueBody": {
													"id": 954,
													"nodeType": "Block",
													"src": "8498:42:6",
													"statements": [
														{
															"expression": {
																"id": 952,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "8519:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 950,
															"id": 953,
															"nodeType": "Return",
															"src": "8512:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:6",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 963,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8350:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 941,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8372:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 943,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8405:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 945,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:6"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "8461:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 948,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:6"
									},
									"scope": 984,
									"src": "8315:295:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "8699:457:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 970,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 965,
															"src": "8775:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 972,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 980,
													"nodeType": "Block",
													"src": "9105:45:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 977,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 967,
																		"src": "9126:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 976,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 978,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 979,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:6"
														}
													]
												},
												"id": 981,
												"nodeType": "IfStatement",
												"src": "8771:379:6",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "8798:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 965,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 965,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:6",
																	"valueSize": 1
																}
															],
															"id": 974,
															"nodeType": "InlineAssembly",
															"src": "8947:142:6"
														}
													]
												}
											}
										]
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "8633:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 964,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "8658:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 966,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:6"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:6"
									},
									"scope": 984,
									"src": "8616:540:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 985,
							"src": "194:8964:6",
							"usedErrors": []
						}
					],
					"src": "101:9058:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1006
						]
					},
					"id": 1007,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 986,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 987,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1006,
							"linearizedBaseContracts": [
								1006
							],
							"name": "Context",
							"nameLocation": "626:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 995,
										"nodeType": "Block",
										"src": "702:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 992,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 991,
												"id": 994,
												"nodeType": "Return",
												"src": "712:17:7"
											}
										]
									},
									"id": 996,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:7"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "693:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:7"
									},
									"scope": 1006,
									"src": "640:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1004,
										"nodeType": "Block",
										"src": "809:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1001,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1000,
												"id": 1003,
												"nodeType": "Return",
												"src": "819:15:7"
											}
										]
									},
									"id": 1005,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:7"
									},
									"returnParameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 999,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "793:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 998,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:7"
									},
									"scope": 1006,
									"src": "742:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1007,
							"src": "608:235:7",
							"usedErrors": []
						}
					],
					"src": "86:758:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1018
						]
					},
					"id": 1019,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1008,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1009,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1018,
							"linearizedBaseContracts": [
								1018
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1010,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1017,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1011,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1014,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 1018,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1019,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"contracts/TokenStaking/TokenStaking.sol": {
				"ast": {
					"absolutePath": "contracts/TokenStaking/TokenStaking.sol",
					"exportedSymbols": {
						"Address": [
							984
						],
						"Context": [
							1006
						],
						"ERC20Stakeable": [
							1435
						],
						"IERC165": [
							1018
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							654
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							507
						]
					},
					"id": 1436,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1020,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1021,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 113,
							"src": "81:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1022,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 508,
							"src": "134:65:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 1023,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 655,
							"src": "200:79:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1024,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "308:7:9"
									},
									"id": 1025,
									"nodeType": "InheritanceSpecifier",
									"src": "308:7:9"
								}
							],
							"canonicalName": "ERC20Stakeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1435,
							"linearizedBaseContracts": [
								1435,
								112,
								1006
							],
							"name": "ERC20Stakeable",
							"nameLocation": "290:14:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1029,
									"libraryName": {
										"id": 1026,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "327:9:9"
									},
									"nodeType": "UsingForDirective",
									"src": "321:27:9",
									"typeName": {
										"id": 1028,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1027,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "341:6:9"
										},
										"referencedDeclaration": 190,
										"src": "341:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "b7171a2e",
									"id": 1031,
									"mutability": "mutable",
									"name": "ERC721address",
									"nameLocation": "368:13:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "353:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1030,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "353:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "10fd4fba",
									"id": 1033,
									"mutability": "mutable",
									"name": "owenerERC20",
									"nameLocation": "402:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "387:26:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1032,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "387:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a6021ace",
									"id": 1035,
									"mutability": "mutable",
									"name": "ERC20Address",
									"nameLocation": "434:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "419:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1034,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "419:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5eb82e94",
									"id": 1037,
									"mutability": "mutable",
									"name": "rewardrate",
									"nameLocation": "464:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "452:22:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1036,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "452:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "de9d3ddb",
									"id": 1039,
									"mutability": "mutable",
									"name": "unstaketimeval",
									"nameLocation": "493:14:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "481:26:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1038,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "481:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "0ccff6e9",
									"id": 1041,
									"mutability": "mutable",
									"name": "totalOwnerToken",
									"nameLocation": "525:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "513:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1040,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "513:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1043,
									"mutability": "mutable",
									"name": "rate",
									"nameLocation": "551:4:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "546:9:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1042,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "546:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "ERC20Stakeable.Staker",
									"id": 1050,
									"members": [
										{
											"constant": false,
											"id": 1045,
											"mutability": "mutable",
											"name": "deposited",
											"nameLocation": "593:9:9",
											"nodeType": "VariableDeclaration",
											"scope": 1050,
											"src": "585:17:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1044,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "585:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1047,
											"mutability": "mutable",
											"name": "timestake",
											"nameLocation": "620:9:9",
											"nodeType": "VariableDeclaration",
											"scope": 1050,
											"src": "612:17:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1046,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "612:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1049,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "644:5:9",
											"nodeType": "VariableDeclaration",
											"scope": 1050,
											"src": "639:10:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1048,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "639:4:9",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "568:6:9",
									"nodeType": "StructDefinition",
									"scope": 1435,
									"src": "561:96:9",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e88cc2be",
									"id": 1055,
									"mutability": "mutable",
									"name": "Details",
									"nameLocation": "697:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "662:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
										"typeString": "mapping(address => struct ERC20Stakeable.Staker)"
									},
									"typeName": {
										"id": 1054,
										"keyType": {
											"id": 1051,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "671:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "662:27:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
											"typeString": "mapping(address => struct ERC20Stakeable.Staker)"
										},
										"valueType": {
											"id": 1053,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1052,
												"name": "Staker",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1050,
												"src": "682:6:9"
											},
											"referencedDeclaration": 1050,
											"src": "682:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$1050_storage_ptr",
												"typeString": "struct ERC20Stakeable.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "57488064",
									"id": 1059,
									"mutability": "mutable",
									"name": "Reward",
									"nameLocation": "743:6:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "710:39:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1058,
										"keyType": {
											"id": 1056,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "719:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "710:25:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1057,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "730:4:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2ffce210",
									"id": 1063,
									"mutability": "mutable",
									"name": "OwnerTokens",
									"nameLocation": "789:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "755:45:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1062,
										"keyType": {
											"id": 1060,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "764:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "755:26:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1061,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "775:4:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1089,
										"nodeType": "Block",
										"src": "1266:151:9",
										"statements": [
											{
												"expression": {
													"id": 1074,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1072,
														"name": "ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "1276:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1073,
														"name": "_ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1065,
														"src": "1292:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1276:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1075,
												"nodeType": "ExpressionStatement",
												"src": "1276:30:9"
											},
											{
												"expression": {
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1076,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "1316:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1077,
														"name": "_ratePersentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1067,
														"src": "1323:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1316:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1079,
												"nodeType": "ExpressionStatement",
												"src": "1316:22:9"
											},
											{
												"expression": {
													"id": 1082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1080,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "1348:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1081,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "1363:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1348:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1083,
												"nodeType": "ExpressionStatement",
												"src": "1348:28:9"
											},
											{
												"expression": {
													"id": 1087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1084,
														"name": "owenerERC20",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "1386:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1085,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1400:3:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1086,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1400:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1386:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1088,
												"nodeType": "ExpressionStatement",
												"src": "1386:24:9"
											}
										]
									},
									"id": 1090,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "_ERC721address",
												"nameLocation": "1202:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "1194:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1064,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1194:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "_ratePersentage",
												"nameLocation": "1226:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "1218:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1066,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1218:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "1251:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1090,
												"src": "1243:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1243:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1193:72:9"
									},
									"returnParameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1266:0:9"
									},
									"scope": 1435,
									"src": "1182:235:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1129,
										"nodeType": "Block",
										"src": "1696:237:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1098,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1714:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1099,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1714:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1100,
																"name": "owenerERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1033,
																"src": "1726:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1714:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c79204f776e65722063616e207472616e73666572",
															"id": 1102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1738:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80",
																"typeString": "literal_string \"Only Owner can transfer\""
															},
															"value": "Only Owner can transfer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_28c1cb577aa40b9e795d347404ee0993f194817ea72e74d9b4f95c5c18354b80",
																"typeString": "literal_string \"Only Owner can transfer\""
															}
														],
														"id": 1097,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1706:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1706:58:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1104,
												"nodeType": "ExpressionStatement",
												"src": "1706:58:9"
											},
											{
												"expression": {
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1105,
															"name": "OwnerTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1063,
															"src": "1774:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1108,
														"indexExpression": {
															"expression": {
																"id": 1106,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1786:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1786:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1774:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1109,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1092,
														"src": "1800:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1774:33:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1111,
												"nodeType": "ExpressionStatement",
												"src": "1774:33:9"
											},
											{
												"expression": {
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1112,
														"name": "totalOwnerToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "1817:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1113,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1092,
														"src": "1836:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1817:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1115,
												"nodeType": "ExpressionStatement",
												"src": "1817:26:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1120,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1891:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1891:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1124,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1911:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1123,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1903:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1122,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1903:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1125,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1903:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1126,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "1918:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1117,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "1860:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1116,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "1853:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1853:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1119,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "1853:37:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1853:73:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1128,
												"nodeType": "ExpressionStatement",
												"src": "1853:73:9"
											}
										]
									},
									"functionSelector": "c0cd40ee",
									"id": 1130,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1095,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1094,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1687:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1687:9:9"
										}
									],
									"name": "AdminAddToken",
									"nameLocation": "1652:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1671:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "1666:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1091,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1666:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1665:14:9"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1696:0:9"
									},
									"scope": 1435,
									"src": "1643:290:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1157,
										"nodeType": "Block",
										"src": "2182:148:9",
										"statements": [
											{
												"expression": {
													"id": 1142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1137,
															"name": "OwnerTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1063,
															"src": "2192:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1140,
														"indexExpression": {
															"expression": {
																"id": 1138,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2204:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1139,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2204:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2192:23:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1141,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1132,
														"src": "2219:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2192:33:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1143,
												"nodeType": "ExpressionStatement",
												"src": "2192:33:9"
											},
											{
												"expression": {
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1144,
														"name": "totalOwnerToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "2235:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1145,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1132,
														"src": "2254:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2235:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1147,
												"nodeType": "ExpressionStatement",
												"src": "2235:25:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1152,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2304:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2304:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1154,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1132,
															"src": "2316:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1149,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "2277:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1148,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "2270:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2270:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 258,
														"src": "2270:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2270:53:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1156,
												"nodeType": "ExpressionStatement",
												"src": "2270:53:9"
											}
										]
									},
									"functionSelector": "a88e132f",
									"id": 1158,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1135,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1134,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2173:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2173:9:9"
										}
									],
									"name": "AdminWithDrawToken",
									"nameLocation": "2134:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2158:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1158,
												"src": "2153:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1131,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2153:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2152:13:9"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2182:0:9"
									},
									"scope": 1435,
									"src": "2125:205:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1179,
										"nodeType": "Block",
										"src": "2600:109:9",
										"statements": [
											{
												"assignments": [
													1166
												],
												"declarations": [
													{
														"constant": false,
														"id": 1166,
														"mutability": "mutable",
														"name": "Persentage",
														"nameLocation": "2615:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 1179,
														"src": "2610:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1165,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2610:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1176,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 1167,
																		"name": "OwnerTokens",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1063,
																		"src": "2629:11:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1170,
																	"indexExpression": {
																		"expression": {
																			"id": 1168,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2641:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1169,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2641:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2629:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2655:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "2629:29:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1173,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2628:31:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1174,
														"name": "totalOwnerToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "2660:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:47:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2610:65:9"
											},
											{
												"expression": {
													"id": 1177,
													"name": "Persentage",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1166,
													"src": "2692:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1164,
												"id": 1178,
												"nodeType": "Return",
												"src": "2685:17:9"
											}
										]
									},
									"functionSelector": "7b2f247f",
									"id": 1180,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1161,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1160,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2573:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2573:9:9"
										}
									],
									"name": "Utilization",
									"nameLocation": "2547:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2558:2:9"
									},
									"returnParameters": {
										"id": 1164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "2591:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2591:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2590:9:9"
									},
									"scope": 1435,
									"src": "2538:171:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1220,
										"nodeType": "Block",
										"src": "3043:228:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "3061:26:9",
															"subExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1186,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1055,
																		"src": "3062:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1189,
																	"indexExpression": {
																		"expression": {
																			"id": 1187,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3070:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1188,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3070:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3062:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1050_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"id": 1190,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "check",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1049,
																"src": "3062:25:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205769746844726177",
															"id": 1192,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3088:23:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d",
																"typeString": "literal_string \"Please First WithDraw\""
															},
															"value": "Please First WithDraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_79bec14e0e6d2eafd9dc2978f3b2f873c68c443dadf7f8a79d5a26018702e95d",
																"typeString": "literal_string \"Please First WithDraw\""
															}
														],
														"id": 1185,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3053:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3053:59:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1194,
												"nodeType": "ExpressionStatement",
												"src": "3053:59:9"
											},
											{
												"expression": {
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1195,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "3122:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
															}
														},
														"id": 1198,
														"indexExpression": {
															"expression": {
																"id": 1196,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3130:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3130:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3122:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1050_storage",
															"typeString": "struct ERC20Stakeable.Staker storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1200,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1182,
																"src": "3151:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 1201,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3159:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3159:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 1203,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3175:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1199,
															"name": "Staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1050,
															"src": "3144:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Staker_$1050_storage_ptr_$",
																"typeString": "type(struct ERC20Stakeable.Staker storage pointer)"
															}
														},
														"id": 1204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3144:36:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1050_memory_ptr",
															"typeString": "struct ERC20Stakeable.Staker memory"
														}
													},
													"src": "3122:58:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Staker_$1050_storage",
														"typeString": "struct ERC20Stakeable.Staker storage ref"
													}
												},
												"id": 1206,
												"nodeType": "ExpressionStatement",
												"src": "3122:58:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1211,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3228:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3228:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1215,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3248:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1214,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3240:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1213,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3240:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3240:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1217,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1182,
															"src": "3256:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1208,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "3197:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1207,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "3190:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3190:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1210,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "3190:37:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3190:74:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1219,
												"nodeType": "ExpressionStatement",
												"src": "3190:74:9"
											}
										]
									},
									"functionSelector": "4d6ce1e5",
									"id": 1221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Deposit",
									"nameLocation": "3011:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1182,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3027:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "3019:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3019:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3018:17:9"
									},
									"returnParameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3043:0:9"
									},
									"scope": 1435,
									"src": "3002:269:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "3493:315:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1225,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1055,
																	"src": "3511:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																	}
																},
																"id": 1228,
																"indexExpression": {
																	"expression": {
																		"id": 1226,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3519:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1227,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3519:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3511:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1050_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1049,
															"src": "3511:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205374616b65",
															"id": 1230,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3537:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd",
																"typeString": "literal_string \"Please First Stake\""
															},
															"value": "Please First Stake"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd",
																"typeString": "literal_string \"Please First Stake\""
															}
														],
														"id": 1224,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3503:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3503:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1232,
												"nodeType": "ExpressionStatement",
												"src": "3503:55:9"
											},
											{
												"assignments": [
													1234
												],
												"declarations": [
													{
														"constant": false,
														"id": 1234,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "3573:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "3568:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1233,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3568:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1240,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 1235,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "3582:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
															}
														},
														"id": 1238,
														"indexExpression": {
															"expression": {
																"id": 1236,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3590:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1237,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3590:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3582:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1050_storage",
															"typeString": "struct ERC20Stakeable.Staker storage ref"
														}
													},
													"id": 1239,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "deposited",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1045,
													"src": "3582:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3568:43:9"
											},
											{
												"assignments": [
													1242
												],
												"declarations": [
													{
														"constant": false,
														"id": 1242,
														"mutability": "mutable",
														"name": "newval",
														"nameLocation": "3626:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "3621:11:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1241,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3621:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1245,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1243,
														"name": "calculateIntrest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1350,
														"src": "3635:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 1244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3635:18:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3621:32:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1250,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3693:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3693:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1252,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1234,
																"src": "3705:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1253,
																"name": "newval",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1242,
																"src": "3714:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3705:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1247,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "3670:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1246,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "3663:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3663:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 157,
														"src": "3663:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3663:58:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1256,
												"nodeType": "ExpressionStatement",
												"src": "3663:58:9"
											},
											{
												"expression": {
													"id": 1261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1257,
															"name": "OwnerTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1063,
															"src": "3731:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1259,
														"indexExpression": {
															"id": 1258,
															"name": "owenerERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "3743:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3731:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1260,
														"name": "newval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1242,
														"src": "3759:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3731:34:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1262,
												"nodeType": "ExpressionStatement",
												"src": "3731:34:9"
											},
											{
												"expression": {
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "3775:26:9",
													"subExpression": {
														"baseExpression": {
															"id": 1263,
															"name": "Details",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "3782:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
															}
														},
														"id": 1266,
														"indexExpression": {
															"expression": {
																"id": 1264,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3790:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3790:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3782:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1050_storage",
															"typeString": "struct ERC20Stakeable.Staker storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1268,
												"nodeType": "ExpressionStatement",
												"src": "3775:26:9"
											}
										]
									},
									"functionSelector": "57ea89b6",
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Withdraw",
									"nameLocation": "3475:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3483:2:9"
									},
									"returnParameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3493:0:9"
									},
									"scope": 1435,
									"src": "3466:342:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1314,
										"nodeType": "Block",
										"src": "3873:254:9",
										"statements": [
											{
												"assignments": [
													1276
												],
												"declarations": [
													{
														"constant": false,
														"id": 1276,
														"mutability": "mutable",
														"name": "RewardEst",
														"nameLocation": "3888:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1314,
														"src": "3883:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1275,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "3883:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1295,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1277,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1055,
																			"src": "3901:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																				"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																			}
																		},
																		"id": 1280,
																		"indexExpression": {
																			"expression": {
																				"id": 1278,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "3909:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1279,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "3909:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3901:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1050_storage",
																			"typeString": "struct ERC20Stakeable.Staker storage ref"
																		}
																	},
																	"id": 1281,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "deposited",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1045,
																	"src": "3901:29:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1282,
																	"name": "rate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1043,
																	"src": "3933:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3901:36:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1284,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3900:38:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1292,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1285,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3942:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "3942:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1287,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1055,
																			"src": "3960:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																				"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																			}
																		},
																		"id": 1290,
																		"indexExpression": {
																			"expression": {
																				"id": 1288,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "3968:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "3968:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3960:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1050_storage",
																			"typeString": "struct ERC20Stakeable.Staker storage ref"
																		}
																	},
																	"id": 1291,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestake",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1047,
																	"src": "3960:29:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3942:47:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1293,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3941:49:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3900:90:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3883:107:9"
											},
											{
												"assignments": [
													1297
												],
												"declarations": [
													{
														"constant": false,
														"id": 1297,
														"mutability": "mutable",
														"name": "TotalReward",
														"nameLocation": "4005:11:9",
														"nodeType": "VariableDeclaration",
														"scope": 1314,
														"src": "4000:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1296,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4000:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1301,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1298,
														"name": "RewardEst",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1276,
														"src": "4019:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "36303030",
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4031:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6000_by_1",
															"typeString": "int_const 6000"
														},
														"value": "6000"
													},
													"src": "4019:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4000:35:9"
											},
											{
												"expression": {
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1302,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1273,
														"src": "4045:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1309,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1303,
															"name": "TotalReward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1297,
															"src": "4054:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1304,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1055,
																	"src": "4068:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																	}
																},
																"id": 1307,
																"indexExpression": {
																	"expression": {
																		"id": 1305,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4076:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1306,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4076:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4068:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1050_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1308,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "deposited",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1045,
															"src": "4068:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "4054:43:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4045:52:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1311,
												"nodeType": "ExpressionStatement",
												"src": "4045:52:9"
											},
											{
												"expression": {
													"id": 1312,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1273,
													"src": "4114:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1274,
												"id": 1313,
												"nodeType": "Return",
												"src": "4107:13:9"
											}
										]
									},
									"functionSelector": "ab0ee2ac",
									"id": 1315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "showReward",
									"nameLocation": "3823:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3833:2:9"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3861:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "3856:11:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1272,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "3856:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3855:13:9"
									},
									"scope": 1435,
									"src": "3814:313:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1349,
										"nodeType": "Block",
										"src": "4447:197:9",
										"statements": [
											{
												"assignments": [
													1321
												],
												"declarations": [
													{
														"constant": false,
														"id": 1321,
														"mutability": "mutable",
														"name": "RewardEst",
														"nameLocation": "4462:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1349,
														"src": "4457:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1320,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4457:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1340,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1339,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1328,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1322,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1055,
																			"src": "4475:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																				"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																			}
																		},
																		"id": 1325,
																		"indexExpression": {
																			"expression": {
																				"id": 1323,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "4483:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1324,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "4483:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4475:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1050_storage",
																			"typeString": "struct ERC20Stakeable.Staker storage ref"
																		}
																	},
																	"id": 1326,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "deposited",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1045,
																	"src": "4475:29:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1327,
																	"name": "rate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1043,
																	"src": "4507:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4475:36:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1329,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4474:38:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1330,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4516:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "4516:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1332,
																			"name": "Details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1055,
																			"src": "4534:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1050_storage_$",
																				"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																			}
																		},
																		"id": 1335,
																		"indexExpression": {
																			"expression": {
																				"id": 1333,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "4542:3:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "4542:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4534:19:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Staker_$1050_storage",
																			"typeString": "struct ERC20Stakeable.Staker storage ref"
																		}
																	},
																	"id": 1336,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestake",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1047,
																	"src": "4534:29:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4516:47:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1338,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "4515:49:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4474:90:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4457:107:9"
											},
											{
												"assignments": [
													1342
												],
												"declarations": [
													{
														"constant": false,
														"id": 1342,
														"mutability": "mutable",
														"name": "TotalReward",
														"nameLocation": "4579:11:9",
														"nodeType": "VariableDeclaration",
														"scope": 1349,
														"src": "4574:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1341,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "4574:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1346,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1343,
														"name": "RewardEst",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "4593:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "36303030",
														"id": 1344,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4605:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6000_by_1",
															"typeString": "int_const 6000"
														},
														"value": "6000"
													},
													"src": "4593:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4574:35:9"
											},
											{
												"expression": {
													"id": 1347,
													"name": "TotalReward",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1342,
													"src": "4626:11:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1319,
												"id": 1348,
												"nodeType": "Return",
												"src": "4619:18:9"
											}
										]
									},
									"functionSelector": "c3c917b0",
									"id": 1350,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateIntrest",
									"nameLocation": "4400:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4416:2:9"
									},
									"returnParameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1318,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "4439:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4439:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4438:9:9"
									},
									"scope": 1435,
									"src": "4391:253:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1361,
										"nodeType": "Block",
										"src": "4888:47:9",
										"statements": [
											{
												"expression": {
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1357,
														"name": "ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1031,
														"src": "4898:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1358,
														"name": "_ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1352,
														"src": "4914:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4898:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1360,
												"nodeType": "ExpressionStatement",
												"src": "4898:30:9"
											}
										]
									},
									"functionSelector": "ee0106d2",
									"id": 1362,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1355,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1354,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "4879:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "4879:9:9"
										}
									],
									"name": "UpdateERC721",
									"nameLocation": "4835:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "_ERC721address",
												"nameLocation": "4856:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "4848:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4848:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4847:24:9"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4888:0:9"
									},
									"scope": 1435,
									"src": "4826:109:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1373,
										"nodeType": "Block",
										"src": "5174:45:9",
										"statements": [
											{
												"expression": {
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1369,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1035,
														"src": "5184:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1370,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1364,
														"src": "5199:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5184:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1372,
												"nodeType": "ExpressionStatement",
												"src": "5184:28:9"
											}
										]
									},
									"functionSelector": "275bd33f",
									"id": 1374,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1367,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1366,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "5165:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "5165:9:9"
										}
									],
									"name": "UpdateERC20",
									"nameLocation": "5121:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "5143:13:9",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "5135:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5135:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5133:24:9"
									},
									"returnParameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5174:0:9"
									},
									"scope": 1435,
									"src": "5112:107:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1385,
										"nodeType": "Block",
										"src": "5472:39:9",
										"statements": [
											{
												"expression": {
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1381,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "5482:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1382,
														"name": "_ratePersentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1376,
														"src": "5489:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5482:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1384,
												"nodeType": "ExpressionStatement",
												"src": "5482:22:9"
											}
										]
									},
									"functionSelector": "f89d832f",
									"id": 1386,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1379,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1378,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "5463:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "5463:9:9"
										}
									],
									"name": "UpdateRatePersentage",
									"nameLocation": "5410:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "_ratePersentage",
												"nameLocation": "5439:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "5431:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5431:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5430:25:9"
									},
									"returnParameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5472:0:9"
									},
									"scope": 1435,
									"src": "5401:110:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1413,
										"nodeType": "Block",
										"src": "5561:159:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1392,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5579:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5579:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1394,
																"name": "ERC721address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1031,
																"src": "5593:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5579:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642061646472657373",
															"id": 1396,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5608:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															},
															"value": "Invalid address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
																"typeString": "literal_string \"Invalid address\""
															}
														],
														"id": 1391,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5571:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5571:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1398,
												"nodeType": "ExpressionStatement",
												"src": "5571:55:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1403,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5676:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5676:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1407,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5695:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1406,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5687:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1405,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5687:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5687:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1409,
															"name": "tokenIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1388,
															"src": "5701:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1410,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5710:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1400,
																	"name": "ERC721address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "5644:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1399,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "5636:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 1401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5636:22:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$623",
																"typeString": "contract IERC721"
															}
														},
														"id": 1402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 568,
														"src": "5636:39:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5636:77:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1412,
												"nodeType": "ExpressionStatement",
												"src": "5636:77:9"
											}
										]
									},
									"functionSelector": "e91a7ca6",
									"id": 1414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "depositNFT",
									"nameLocation": "5525:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1388,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "5544:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1414,
												"src": "5536:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5536:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5535:18:9"
									},
									"returnParameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5561:0:9"
									},
									"scope": 1435,
									"src": "5516:204:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1433,
										"nodeType": "Block",
										"src": "5772:95:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1425,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5830:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1435",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5822:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1423,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5822:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5822:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1427,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5837:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1428,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5837:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1429,
															"name": "tokenIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1416,
															"src": "5848:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1430,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5857:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1420,
																	"name": "ERC721address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "5790:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1419,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "5782:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 1421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5782:22:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$623",
																"typeString": "contract IERC721"
															}
														},
														"id": 1422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 568,
														"src": "5782:39:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5782:78:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1432,
												"nodeType": "ExpressionStatement",
												"src": "5782:78:9"
											}
										]
									},
									"functionSelector": "023245d7",
									"id": 1434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawNFT",
									"nameLocation": "5735:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "5755:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1434,
												"src": "5747:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5747:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5746:18:9"
									},
									"returnParameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5772:0:9"
									},
									"scope": 1435,
									"src": "5726:141:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1436,
							"src": "281:5588:9",
							"usedErrors": []
						}
					],
					"src": "56:5813:9"
				},
				"id": 9
			}
		}
	}
}
{
	"id": "bd9807c1a139859fef5a717548a59098",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/NFTStaking.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n\n// @title Moon Rabbits NFT Staking \n// @author OctaLoop\n\ncontract MoonRabbitsStaking is Ownable, ReentrancyGuard {\n\n    //NFT Contract\n    IERC721 public NFTCollection;\n\n    //Token Contract\n    IERC20 public rewardToken;\n\n    // Index of staking\n    uint256 public index = 0;\n\n    using SafeERC20 for IERC20;\n    uint256 private totalTokens;\n\n    struct Staker {\n        uint256 index;\n        address user;\n        uint256 tokenId;\n        uint256 pool;\n        uint256 timestamp;\n    }\n\n    mapping(uint256 => Staker) public stakes;\n    mapping(address => uint256[]) public staking_details;\n    mapping(address => uint256[]) public unstaking_details;\n\n    constructor(address _RewardToken,address _NFTCollection) {\n        rewardToken = IERC20(_RewardToken);\n        NFTCollection = IERC721(_NFTCollection);\n    }\n\n    event Stake(address indexed owner, uint256 id, uint256 pool, uint256 time);\n    event UnStake(address indexed owner, uint256 id, uint256 pool, uint256 time, uint256 rewardTokens);\n\n    /**\n     * Calculate reward for the user's pool\n     * @param _pool Pool of NFT\n     */\n    function calculateRewardPool(uint256 _pool) private pure returns(uint256)  {\n        if(_pool==7) {\n            return 1000;\n        } else if(_pool==14) {\n            return 3000;\n        } else if(_pool==30) {\n            return 5000;\n        } else {\n            return 10000;\n        }\n    }\n\n    /**\n     * Create a new staking for a specific user\n     * @param _tokenId Token Id of NFT to stake\n     * @param _pool Pool of NFT\n     */\n    function stakeNFT(uint256 _tokenId, uint256 _pool) public {\n        require(NFTCollection.ownerOf(_tokenId) == msg.sender,\"Can't stake nft you don't own!\");\n        stakes[index] = Staker(index,msg.sender,_tokenId, _pool, block.timestamp);\n        staking_details[msg.sender].push(index);\n        NFTCollection.transferFrom(msg.sender, address(this), _tokenId);\n        index++;\n        emit Stake(msg.sender, _tokenId, _pool, block.timestamp);\n    }\n\n    /**\n     * Unstake the NFT and rewards user if pool is completed\n     * @param _tokenId Token Id of NFT to stake\n     * @param _pool Pool of NFT\n     */\n    function unStakeNFT(uint256 _index,uint256 _tokenId, uint256 _pool) public {\n        require((block.timestamp - stakes[_index].timestamp) / 60 / 60 / 24 >= _pool,\"Staking pool not ended yet!!!!\");\n        require(stakes[_index].user == msg.sender,\"You are not owner of this NFT staking\");\n        delete stakes[_index];\n        unstaking_details[msg.sender].push(_index);\n        NFTCollection.transferFrom( address(this), msg.sender, _tokenId);\n        uint256 reward =  calculateRewardPool(_pool);\n        rewardToken.transfer( msg.sender, reward);\n        emit UnStake(msg.sender, _tokenId, _pool,  block.timestamp, reward);\n    }\n\n    /**\n     * Get user's staking list\n     * @param _user Address of the user\n     */\n    function userStakingList(address _user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory list = staking_details[_user];\n        return list;\n    }\n\n    /**\n     * Check if nft index is already unstaked\n      * @param _tempIndex of the nft\n      * @param _user of the user\n     */\n    function checkIfAlreadyUnstaked(uint256 _tempIndex,address _user) public view returns(bool) {\n        for (uint j=0; j < unstaking_details[_user].length; j++) {\n            if(unstaking_details[_user][j]==_tempIndex){\n                    return true;\n            }\n        }  \n        return false;\n    }\n}"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB2 0xFB CODECOPY 0xF8 DUP5 JUMP SHL 0xAD PUSH27 0x62544D63197E691ED9B4BF51396178C74C59A554CE2F64736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 0xB2 0xFB CODECOPY 0xF8 DUP5 JUMP SHL 0xAD PUSH27 0x62544D63197E691ED9B4BF51396178C74C59A554CE2F64736F6C63 NUMBER STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "707:3748:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a9b2fb39f884561bad7a62544d63197e691ed9b4bf51396178c74c59a554ce2f64736f6c63430008070033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x7B19F8CE8FEE8F6AFC7520ABA0995F8916 0xB0 0xCF DUP1 PUSH17 0x93A219746DE5A8D7065664736F6C634300 ADDMOD SMOD STOP CALLER ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x7B19F8CE8FEE8F6AFC7520ABA0995F8916 0xB0 0xCF DUP1 PUSH17 0x93A219746DE5A8D7065664736F6C634300 ADDMOD SMOD STOP CALLER ",
							"sourceMap": "194:8964:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220707b19f8ce8fee8f6afc7520aba0995f8916b0cf807093a219746de5a8d7065664736f6c63430008070033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/NFTStaking.sol": {
				"MoonRabbitsStaking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_RewardToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_NFTCollection",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "pool",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "Stake",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "pool",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "rewardTokens",
									"type": "uint256"
								}
							],
							"name": "UnStake",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "NFTCollection",
							"outputs": [
								{
									"internalType": "contract IERC721",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tempIndex",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "checkIfAlreadyUnstaked",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "index",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "rewardToken",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_pool",
									"type": "uint256"
								}
							],
							"name": "stakeNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "stakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "pool",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "staking_details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_index",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_pool",
									"type": "uint256"
								}
							],
							"name": "unStakeNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "unstaking_details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "userStakingList",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"checkIfAlreadyUnstaked(uint256,address)": {
								"params": {
									"_tempIndex": "of the nft",
									"_user": "of the user"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"stakeNFT(uint256,uint256)": {
								"params": {
									"_pool": "Pool of NFT",
									"_tokenId": "Token Id of NFT to stake"
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"unStakeNFT(uint256,uint256,uint256)": {
								"params": {
									"_pool": "Pool of NFT",
									"_tokenId": "Token Id of NFT to stake"
								}
							},
							"userStakingList(address)": {
								"params": {
									"_user": "Address of the user"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/NFTStaking.sol\":415:3876  contract MoonRabbitsStaking is Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/NFTStaking.sol\":632:633  0 */\n  0x00\n    /* \"contracts/NFTStaking.sol\":609:633  uint256 public index = 0 */\n  0x04\n  sstore\n    /* \"contracts/NFTStaking.sol\":1017:1174  constructor(address _RewardToken,address _NFTCollection) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_8\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_9\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  shl(0x20, tag_10)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  shl(0x20, tag_11)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1828  _status */\n  dup1\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/NFTStaking.sol\":1105:1117  _RewardToken */\n  dup2\n    /* \"contracts/NFTStaking.sol\":1084:1095  rewardToken */\n  0x03\n  0x00\n    /* \"contracts/NFTStaking.sol\":1084:1118  rewardToken = IERC20(_RewardToken) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/NFTStaking.sol\":1152:1166  _NFTCollection */\n  dup1\n    /* \"contracts/NFTStaking.sol\":1128:1141  NFTCollection */\n  0x02\n  0x00\n    /* \"contracts/NFTStaking.sol\":1128:1167  NFTCollection = IERC721(_NFTCollection) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/NFTStaking.sol\":1017:1174  constructor(address _RewardToken,address _NFTCollection) {... */\n  pop\n  pop\n    /* \"contracts/NFTStaking.sol\":415:3876  contract MoonRabbitsStaking is Ownable, ReentrancyGuard {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_10:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n  0x00\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7:150   */\ntag_18:\n    /* \"#utility.yul\":64:69   */\n  0x00\n    /* \"#utility.yul\":95:101   */\n  dup2\n    /* \"#utility.yul\":89:102   */\n  mload\n    /* \"#utility.yul\":80:102   */\n  swap1\n  pop\n    /* \"#utility.yul\":111:144   */\n  tag_20\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":111:144   */\n  tag_21\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":7:150   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":156:663   */\ntag_3:\n    /* \"#utility.yul\":235:241   */\n  0x00\n    /* \"#utility.yul\":243:249   */\n  dup1\n    /* \"#utility.yul\":292:294   */\n  0x40\n    /* \"#utility.yul\":280:289   */\n  dup4\n    /* \"#utility.yul\":271:278   */\n  dup6\n    /* \"#utility.yul\":267:290   */\n  sub\n    /* \"#utility.yul\":263:295   */\n  slt\n    /* \"#utility.yul\":260:379   */\n  iszero\n  tag_23\n  jumpi\n    /* \"#utility.yul\":298:377   */\n  tag_24\n  tag_25\n  jump\t// in\ntag_24:\n    /* \"#utility.yul\":260:379   */\ntag_23:\n    /* \"#utility.yul\":418:419   */\n  0x00\n    /* \"#utility.yul\":443:507   */\n  tag_26\n    /* \"#utility.yul\":499:506   */\n  dup6\n    /* \"#utility.yul\":490:496   */\n  dup3\n    /* \"#utility.yul\":479:488   */\n  dup7\n    /* \"#utility.yul\":475:497   */\n  add\n    /* \"#utility.yul\":443:507   */\n  tag_18\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":433:507   */\n  swap3\n  pop\n    /* \"#utility.yul\":389:517   */\n  pop\n    /* \"#utility.yul\":556:558   */\n  0x20\n    /* \"#utility.yul\":582:646   */\n  tag_27\n    /* \"#utility.yul\":638:645   */\n  dup6\n    /* \"#utility.yul\":629:635   */\n  dup3\n    /* \"#utility.yul\":618:627   */\n  dup7\n    /* \"#utility.yul\":614:636   */\n  add\n    /* \"#utility.yul\":582:646   */\n  tag_18\n  jump\t// in\ntag_27:\n    /* \"#utility.yul\":572:646   */\n  swap2\n  pop\n    /* \"#utility.yul\":527:656   */\n  pop\n    /* \"#utility.yul\":156:663   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":750:846   */\ntag_30:\n    /* \"#utility.yul\":787:794   */\n  0x00\n    /* \"#utility.yul\":816:840   */\n  tag_32\n    /* \"#utility.yul\":834:839   */\n  dup3\n    /* \"#utility.yul\":816:840   */\n  tag_33\n  jump\t// in\ntag_32:\n    /* \"#utility.yul\":805:840   */\n  swap1\n  pop\n    /* \"#utility.yul\":750:846   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":852:978   */\ntag_33:\n    /* \"#utility.yul\":889:896   */\n  0x00\n    /* \"#utility.yul\":929:971   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":922:927   */\n  dup3\n    /* \"#utility.yul\":918:972   */\n  and\n    /* \"#utility.yul\":907:972   */\n  swap1\n  pop\n    /* \"#utility.yul\":852:978   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1107:1224   */\ntag_25:\n    /* \"#utility.yul\":1216:1217   */\n  0x00\n    /* \"#utility.yul\":1213:1214   */\n  dup1\n    /* \"#utility.yul\":1206:1218   */\n  revert\n    /* \"#utility.yul\":1230:1352   */\ntag_21:\n    /* \"#utility.yul\":1303:1327   */\n  tag_39\n    /* \"#utility.yul\":1321:1326   */\n  dup2\n    /* \"#utility.yul\":1303:1327   */\n  tag_30\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1296:1301   */\n  dup2\n    /* \"#utility.yul\":1293:1328   */\n  eq\n    /* \"#utility.yul\":1283:1346   */\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1342:1343   */\n  0x00\n    /* \"#utility.yul\":1339:1340   */\n  dup1\n    /* \"#utility.yul\":1332:1344   */\n  revert\n    /* \"#utility.yul\":1283:1346   */\ntag_40:\n    /* \"#utility.yul\":1230:1352   */\n  pop\n  jump\t// out\n    /* \"contracts/NFTStaking.sol\":415:3876  contract MoonRabbitsStaking is Ownable, ReentrancyGuard {... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/NFTStaking.sol\":415:3876  contract MoonRabbitsStaking is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x78dba594\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xd5a44f86\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xd5a44f86\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf7c618c1\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xfbaca086\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x78dba594\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x79e5f7d7\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x2986c0e5\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x3af416d1\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3f106929\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x51cecc80\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x78b2e3a9\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/NFTStaking.sol\":609:633  uint256 public index = 0 */\n    tag_3:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":956:1010  mapping(address => uint256[]) public unstaking_details */\n    tag_4:\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":898:950  mapping(address => uint256[]) public staking_details */\n    tag_5:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_28\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_28:\n      tag_29\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":1902:2352  function stakeNFT(uint256 _tokenId, uint256 _pool) public {... */\n    tag_6:\n      tag_31\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n    tag_31:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_7:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/NFTStaking.sol\":497:525  IERC721 public NFTCollection */\n    tag_8:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      tag_39\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":2515:3148  function unStakeNFT(uint256 _index,uint256 _tokenId, uint256 _pool) public {... */\n    tag_9:\n      tag_41\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      stop\n        /* \"contracts/NFTStaking.sol\":3241:3432  function userStakingList(address _user)... */\n    tag_10:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_11:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":852:892  mapping(uint256 => Staker) public stakes */\n    tag_12:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_59\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_60\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_13:\n      tag_61\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_62\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n    tag_61:\n      stop\n        /* \"contracts/NFTStaking.sol\":553:578  IERC20 public rewardToken */\n    tag_14:\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":3570:3874  function checkIfAlreadyUnstaked(uint256 _tempIndex,address _user) public view returns(bool) {... */\n    tag_15:\n      tag_68\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_69\n      swap2\n      swap1\n      tag_70\n      jump\t// in\n    tag_69:\n      tag_71\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      tag_72\n      swap2\n      swap1\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/NFTStaking.sol\":609:633  uint256 public index = 0 */\n    tag_19:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":956:1010  mapping(address => uint256[]) public unstaking_details */\n    tag_25:\n      mstore(0x20, 0x08)\n      dup2\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_74\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_74:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":898:950  mapping(address => uint256[]) public staking_details */\n    tag_29:\n      mstore(0x20, 0x07)\n      dup2\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_76\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_76:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":1902:2352  function stakeNFT(uint256 _tokenId, uint256 _pool) public {... */\n    tag_34:\n        /* \"contracts/NFTStaking.sol\":2013:2023  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":1978:2023  NFTCollection.ownerOf(_tokenId) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":1978:1991  NFTCollection */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":1978:1999  NFTCollection.ownerOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x6352211e\n        /* \"contracts/NFTStaking.sol\":2000:2008  _tokenId */\n      dup5\n        /* \"contracts/NFTStaking.sol\":1978:2009  NFTCollection.ownerOf(_tokenId) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_79\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_79:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_82\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_82:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_83\n      swap2\n      swap1\n      tag_84\n      jump\t// in\n    tag_83:\n        /* \"contracts/NFTStaking.sol\":1978:2023  NFTCollection.ownerOf(_tokenId) == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/NFTStaking.sol\":1970:2057  require(NFTCollection.ownerOf(_tokenId) == msg.sender,\"Can't stake nft you don't own!\") */\n      tag_85\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_86\n      swap1\n      tag_87\n      jump\t// in\n    tag_86:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_85:\n        /* \"contracts/NFTStaking.sol\":2083:2140  Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      mload(0x40)\n      dup1\n      0xa0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/NFTStaking.sol\":2090:2095  index */\n      sload(0x04)\n        /* \"contracts/NFTStaking.sol\":2083:2140  Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/NFTStaking.sol\":2096:2106  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2083:2140  Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/NFTStaking.sol\":2107:2115  _tokenId */\n      dup4\n        /* \"contracts/NFTStaking.sol\":2083:2140  Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/NFTStaking.sol\":2117:2122  _pool */\n      dup3\n        /* \"contracts/NFTStaking.sol\":2083:2140  Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/NFTStaking.sol\":2124:2139  block.timestamp */\n      timestamp\n        /* \"contracts/NFTStaking.sol\":2083:2140  Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      dup2\n      mstore\n      pop\n        /* \"contracts/NFTStaking.sol\":2067:2073  stakes */\n      0x06\n        /* \"contracts/NFTStaking.sol\":2067:2080  stakes[index] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2074:2079  index */\n      sload(0x04)\n        /* \"contracts/NFTStaking.sol\":2067:2080  stakes[index] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":2067:2140  stakes[index] = Staker(index,msg.sender,_tokenId, _pool, block.timestamp) */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      sstore\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      sstore\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      sstore\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      sstore\n      swap1\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":2150:2165  staking_details */\n      0x07\n        /* \"contracts/NFTStaking.sol\":2150:2177  staking_details[msg.sender] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2166:2176  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2150:2177  staking_details[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":2183:2188  index */\n      sload(0x04)\n        /* \"contracts/NFTStaking.sol\":2150:2189  staking_details[msg.sender].push(index) */\n      swap1\n      dup1\n      0x01\n      dup2\n      sload\n      add\n      dup1\n      dup3\n      sstore\n      dup1\n      swap2\n      pop\n      pop\n      0x01\n      swap1\n      sub\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      swap2\n      swap1\n      swap2\n      swap1\n      swap2\n      pop\n      sstore\n        /* \"contracts/NFTStaking.sol\":2199:2212  NFTCollection */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":2199:2225  NFTCollection.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/NFTStaking.sol\":2226:2236  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2246:2250  this */\n      address\n        /* \"contracts/NFTStaking.sol\":2253:2261  _tokenId */\n      dup6\n        /* \"contracts/NFTStaking.sol\":2199:2262  NFTCollection.transferFrom(msg.sender, address(this), _tokenId) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_89\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_89:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_93\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_93:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":2272:2277  index */\n      0x04\n      0x00\n        /* \"contracts/NFTStaking.sol\":2272:2279  index++ */\n      dup2\n      sload\n      dup1\n      swap3\n      swap2\n      swap1\n      tag_94\n      swap1\n      tag_95\n      jump\t// in\n    tag_94:\n      swap2\n      swap1\n      pop\n      sstore\n      pop\n        /* \"contracts/NFTStaking.sol\":2300:2310  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2294:2345  Stake(msg.sender, _tokenId, _pool, block.timestamp) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xf556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c446\n        /* \"contracts/NFTStaking.sol\":2312:2320  _tokenId */\n      dup4\n        /* \"contracts/NFTStaking.sol\":2322:2327  _pool */\n      dup4\n        /* \"contracts/NFTStaking.sol\":2329:2344  block.timestamp */\n      timestamp\n        /* \"contracts/NFTStaking.sol\":2294:2345  Stake(msg.sender, _tokenId, _pool, block.timestamp) */\n      mload(0x40)\n      tag_96\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_97\n      jump\t// in\n    tag_96:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/NFTStaking.sol\":1902:2352  function stakeNFT(uint256 _tokenId, uint256 _pool) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_99\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_100\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_102\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_103\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_102:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":497:525  IERC721 public NFTCollection */\n    tag_38:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":2515:3148  function unStakeNFT(uint256 _index,uint256 _tokenId, uint256 _pool) public {... */\n    tag_44:\n        /* \"contracts/NFTStaking.sol\":2671:2676  _pool */\n      dup1\n        /* \"contracts/NFTStaking.sol\":2665:2667  24 */\n      0x18\n        /* \"contracts/NFTStaking.sol\":2660:2662  60 */\n      0x3c\n        /* \"contracts/NFTStaking.sol\":2655:2657  60 */\n      dup1\n        /* \"contracts/NFTStaking.sol\":2627:2633  stakes */\n      0x06\n        /* \"contracts/NFTStaking.sol\":2627:2641  stakes[_index] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2634:2640  _index */\n      dup9\n        /* \"contracts/NFTStaking.sol\":2627:2641  stakes[_index] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":2627:2651  stakes[_index].timestamp */\n      0x04\n      add\n      sload\n        /* \"contracts/NFTStaking.sol\":2609:2624  block.timestamp */\n      timestamp\n        /* \"contracts/NFTStaking.sol\":2609:2651  block.timestamp - stakes[_index].timestamp */\n      tag_105\n      swap2\n      swap1\n      tag_106\n      jump\t// in\n    tag_105:\n        /* \"contracts/NFTStaking.sol\":2608:2657  (block.timestamp - stakes[_index].timestamp) / 60 */\n      tag_107\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_107:\n        /* \"contracts/NFTStaking.sol\":2608:2662  (block.timestamp - stakes[_index].timestamp) / 60 / 60 */\n      tag_109\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_109:\n        /* \"contracts/NFTStaking.sol\":2608:2667  (block.timestamp - stakes[_index].timestamp) / 60 / 60 / 24 */\n      tag_110\n      swap2\n      swap1\n      tag_108\n      jump\t// in\n    tag_110:\n        /* \"contracts/NFTStaking.sol\":2608:2676  (block.timestamp - stakes[_index].timestamp) / 60 / 60 / 24 >= _pool */\n      lt\n      iszero\n        /* \"contracts/NFTStaking.sol\":2600:2710  require((block.timestamp - stakes[_index].timestamp) / 60 / 60 / 24 >= _pool,\"Staking pool not ended yet!!!!\") */\n      tag_111\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_112\n      swap1\n      tag_113\n      jump\t// in\n    tag_112:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_111:\n        /* \"contracts/NFTStaking.sol\":2751:2761  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2728:2761  stakes[_index].user == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":2728:2734  stakes */\n      0x06\n        /* \"contracts/NFTStaking.sol\":2728:2742  stakes[_index] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2735:2741  _index */\n      dup6\n        /* \"contracts/NFTStaking.sol\":2728:2742  stakes[_index] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":2728:2747  stakes[_index].user */\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":2728:2761  stakes[_index].user == msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/NFTStaking.sol\":2720:2802  require(stakes[_index].user == msg.sender,\"You are not owner of this NFT staking\") */\n      tag_114\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_114:\n        /* \"contracts/NFTStaking.sol\":2819:2825  stakes */\n      0x06\n        /* \"contracts/NFTStaking.sol\":2819:2833  stakes[_index] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2826:2832  _index */\n      dup5\n        /* \"contracts/NFTStaking.sol\":2819:2833  stakes[_index] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/NFTStaking.sol\":2812:2833  delete stakes[_index] */\n      dup1\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x01\n      dup3\n      add\n      exp(0x0100, 0x00)\n      dup2\n      sload\n      swap1\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":2843:2860  unstaking_details */\n      0x08\n        /* \"contracts/NFTStaking.sol\":2843:2872  unstaking_details[msg.sender] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2861:2871  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2843:2872  unstaking_details[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":2878:2884  _index */\n      dup4\n        /* \"contracts/NFTStaking.sol\":2843:2885  unstaking_details[msg.sender].push(_index) */\n      swap1\n      dup1\n      0x01\n      dup2\n      sload\n      add\n      dup1\n      dup3\n      sstore\n      dup1\n      swap2\n      pop\n      pop\n      0x01\n      swap1\n      sub\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      swap2\n      swap1\n      swap2\n      swap1\n      swap2\n      pop\n      sstore\n        /* \"contracts/NFTStaking.sol\":2895:2908  NFTCollection */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":2895:2921  NFTCollection.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/NFTStaking.sol\":2931:2935  this */\n      address\n        /* \"contracts/NFTStaking.sol\":2938:2948  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":2950:2958  _tokenId */\n      dup6\n        /* \"contracts/NFTStaking.sol\":2895:2959  NFTCollection.transferFrom( address(this), msg.sender, _tokenId) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_118\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_118:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_119\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_119:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_121\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_121:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":2969:2983  uint256 reward */\n      0x00\n        /* \"contracts/NFTStaking.sol\":2987:3013  calculateRewardPool(_pool) */\n      tag_122\n        /* \"contracts/NFTStaking.sol\":3007:3012  _pool */\n      dup3\n        /* \"contracts/NFTStaking.sol\":2987:3006  calculateRewardPool */\n      tag_123\n        /* \"contracts/NFTStaking.sol\":2987:3013  calculateRewardPool(_pool) */\n      jump\t// in\n    tag_122:\n        /* \"contracts/NFTStaking.sol\":2969:3013  uint256 reward =  calculateRewardPool(_pool) */\n      swap1\n      pop\n        /* \"contracts/NFTStaking.sol\":3023:3034  rewardToken */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/NFTStaking.sol\":3023:3043  rewardToken.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xa9059cbb\n        /* \"contracts/NFTStaking.sol\":3045:3055  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":3057:3063  reward */\n      dup4\n        /* \"contracts/NFTStaking.sol\":3023:3064  rewardToken.transfer( msg.sender, reward) */\n      mload(0x40)\n      dup4\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap3\n      swap2\n      swap1\n      tag_125\n      jump\t// in\n    tag_124:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_128\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_128:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_129\n      swap2\n      swap1\n      tag_130\n      jump\t// in\n    tag_129:\n      pop\n        /* \"contracts/NFTStaking.sol\":3087:3097  msg.sender */\n      caller\n        /* \"contracts/NFTStaking.sol\":3079:3141  UnStake(msg.sender, _tokenId, _pool,  block.timestamp, reward) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xf74c9f1985016ff6aa83c3fd81e31d0be3b194f205ae5e1b57f5bd74ad28e4cf\n        /* \"contracts/NFTStaking.sol\":3099:3107  _tokenId */\n      dup5\n        /* \"contracts/NFTStaking.sol\":3109:3114  _pool */\n      dup5\n        /* \"contracts/NFTStaking.sol\":3117:3132  block.timestamp */\n      timestamp\n        /* \"contracts/NFTStaking.sol\":3134:3140  reward */\n      dup6\n        /* \"contracts/NFTStaking.sol\":3079:3141  UnStake(msg.sender, _tokenId, _pool,  block.timestamp, reward) */\n      mload(0x40)\n      tag_131\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_132\n      jump\t// in\n    tag_131:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/NFTStaking.sol\":2590:3148  {... */\n      pop\n        /* \"contracts/NFTStaking.sol\":2515:3148  function unStakeNFT(uint256 _index,uint256 _tokenId, uint256 _pool) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":3241:3432  function userStakingList(address _user)... */\n    tag_48:\n        /* \"contracts/NFTStaking.sol\":3326:3342  uint256[] memory */\n      0x60\n        /* \"contracts/NFTStaking.sol\":3358:3379  uint256[] memory list */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3382:3397  staking_details */\n      0x07\n        /* \"contracts/NFTStaking.sol\":3382:3404  staking_details[_user] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3398:3403  _user */\n      dup5\n        /* \"contracts/NFTStaking.sol\":3382:3404  staking_details[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":3358:3404  uint256[] memory list = staking_details[_user] */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_135:\n      dup2\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      dup1\n      dup4\n      gt\n      tag_135\n      jumpi\n    tag_134:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/NFTStaking.sol\":3421:3425  list */\n      dup1\n        /* \"contracts/NFTStaking.sol\":3414:3425  return list */\n      swap2\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":3241:3432  function userStakingList(address _user)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1266:1279  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":852:892  mapping(uint256 => Staker) public stakes */\n    tag_58:\n      mstore(0x20, 0x06)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      dup1\n      0x00\n      add\n      sload\n      swap1\n      dup1\n      0x01\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      dup1\n      0x02\n      add\n      sload\n      swap1\n      dup1\n      0x03\n      add\n      sload\n      swap1\n      dup1\n      0x04\n      add\n      sload\n      swap1\n      pop\n      dup6\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_138\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_100\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_138:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2189:2190  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2177  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_140\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_141\n      swap1\n      tag_142\n      jump\t// in\n    tag_141:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_140:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_143\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_103\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_143:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":553:578  IERC20 public rewardToken */\n    tag_65:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":3570:3874  function checkIfAlreadyUnstaked(uint256 _tempIndex,address _user) public view returns(bool) {... */\n    tag_71:\n        /* \"contracts/NFTStaking.sol\":3656:3660  bool */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3677:3683  uint j */\n      dup1\n        /* \"contracts/NFTStaking.sol\":3684:3685  0 */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3677:3685  uint j=0 */\n      swap1\n      pop\n        /* \"contracts/NFTStaking.sol\":3672:3844  for (uint j=0; j < unstaking_details[_user].length; j++) {... */\n    tag_145:\n        /* \"contracts/NFTStaking.sol\":3691:3708  unstaking_details */\n      0x08\n        /* \"contracts/NFTStaking.sol\":3691:3715  unstaking_details[_user] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3709:3714  _user */\n      dup5\n        /* \"contracts/NFTStaking.sol\":3691:3715  unstaking_details[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":3691:3722  unstaking_details[_user].length */\n      dup1\n      sload\n      swap1\n      pop\n        /* \"contracts/NFTStaking.sol\":3687:3688  j */\n      dup2\n        /* \"contracts/NFTStaking.sol\":3687:3722  j < unstaking_details[_user].length */\n      lt\n        /* \"contracts/NFTStaking.sol\":3672:3844  for (uint j=0; j < unstaking_details[_user].length; j++) {... */\n      iszero\n      tag_146\n      jumpi\n        /* \"contracts/NFTStaking.sol\":3775:3785  _tempIndex */\n      dup4\n        /* \"contracts/NFTStaking.sol\":3746:3763  unstaking_details */\n      0x08\n        /* \"contracts/NFTStaking.sol\":3746:3770  unstaking_details[_user] */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3764:3769  _user */\n      dup6\n        /* \"contracts/NFTStaking.sol\":3746:3770  unstaking_details[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/NFTStaking.sol\":3771:3772  j */\n      dup3\n        /* \"contracts/NFTStaking.sol\":3746:3773  unstaking_details[_user][j] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_148\n      jumpi\n      tag_149\n      tag_150\n      jump\t// in\n    tag_149:\n    tag_148:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"contracts/NFTStaking.sol\":3746:3785  unstaking_details[_user][j]==_tempIndex */\n      eq\n        /* \"contracts/NFTStaking.sol\":3743:3834  if(unstaking_details[_user][j]==_tempIndex){... */\n      iszero\n      tag_152\n      jumpi\n        /* \"contracts/NFTStaking.sol\":3815:3819  true */\n      0x01\n        /* \"contracts/NFTStaking.sol\":3808:3819  return true */\n      swap2\n      pop\n      pop\n      jump(tag_144)\n        /* \"contracts/NFTStaking.sol\":3743:3834  if(unstaking_details[_user][j]==_tempIndex){... */\n    tag_152:\n        /* \"contracts/NFTStaking.sol\":3724:3727  j++ */\n      dup1\n      dup1\n      tag_153\n      swap1\n      tag_95\n      jump\t// in\n    tag_153:\n      swap2\n      pop\n      pop\n        /* \"contracts/NFTStaking.sol\":3672:3844  for (uint j=0; j < unstaking_details[_user].length; j++) {... */\n      jump(tag_145)\n    tag_146:\n      pop\n        /* \"contracts/NFTStaking.sol\":3862:3867  false */\n      0x00\n        /* \"contracts/NFTStaking.sol\":3855:3867  return false */\n      swap1\n      pop\n        /* \"contracts/NFTStaking.sol\":3570:3874  function checkIfAlreadyUnstaked(uint256 _tempIndex,address _user) public view returns(bool) {... */\n    tag_144:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_100:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_155\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_156\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_155:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      tag_157\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1427  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_158\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_159\n      swap1\n      tag_160\n      jump\t// in\n    tag_159:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_158:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_103:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2531  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2550:2558  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2547  _owner */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2604:2612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2594:2602  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/NFTStaking.sol\":1457:1752  function calculateRewardPool(uint256 _pool) private pure returns(uint256)  {... */\n    tag_123:\n        /* \"contracts/NFTStaking.sol\":1522:1529  uint256 */\n      0x00\n        /* \"contracts/NFTStaking.sol\":1552:1553  7 */\n      0x07\n        /* \"contracts/NFTStaking.sol\":1545:1550  _pool */\n      dup3\n        /* \"contracts/NFTStaking.sol\":1545:1553  _pool==7 */\n      eq\n        /* \"contracts/NFTStaking.sol\":1542:1746  if(_pool==7) {... */\n      iszero\n      tag_163\n      jumpi\n        /* \"contracts/NFTStaking.sol\":1576:1580  1000 */\n      0x03e8\n        /* \"contracts/NFTStaking.sol\":1569:1580  return 1000 */\n      swap1\n      pop\n      jump(tag_162)\n        /* \"contracts/NFTStaking.sol\":1542:1746  if(_pool==7) {... */\n    tag_163:\n        /* \"contracts/NFTStaking.sol\":1607:1609  14 */\n      0x0e\n        /* \"contracts/NFTStaking.sol\":1600:1605  _pool */\n      dup3\n        /* \"contracts/NFTStaking.sol\":1600:1609  _pool==14 */\n      eq\n        /* \"contracts/NFTStaking.sol\":1597:1746  if(_pool==14) {... */\n      iszero\n      tag_165\n      jumpi\n        /* \"contracts/NFTStaking.sol\":1632:1636  3000 */\n      0x0bb8\n        /* \"contracts/NFTStaking.sol\":1625:1636  return 3000 */\n      swap1\n      pop\n      jump(tag_162)\n        /* \"contracts/NFTStaking.sol\":1597:1746  if(_pool==14) {... */\n    tag_165:\n        /* \"contracts/NFTStaking.sol\":1663:1665  30 */\n      0x1e\n        /* \"contracts/NFTStaking.sol\":1656:1661  _pool */\n      dup3\n        /* \"contracts/NFTStaking.sol\":1656:1665  _pool==30 */\n      eq\n        /* \"contracts/NFTStaking.sol\":1653:1746  if(_pool==30) {... */\n      iszero\n      tag_167\n      jumpi\n        /* \"contracts/NFTStaking.sol\":1688:1692  5000 */\n      0x1388\n        /* \"contracts/NFTStaking.sol\":1681:1692  return 5000 */\n      swap1\n      pop\n      jump(tag_162)\n        /* \"contracts/NFTStaking.sol\":1653:1746  if(_pool==30) {... */\n    tag_167:\n        /* \"contracts/NFTStaking.sol\":1730:1735  10000 */\n      0x2710\n        /* \"contracts/NFTStaking.sol\":1723:1735  return 10000 */\n      swap1\n      pop\n        /* \"contracts/NFTStaking.sol\":1457:1752  function calculateRewardPool(uint256 _pool) private pure returns(uint256)  {... */\n    tag_162:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_156:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_171:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_173\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_174\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:295   */\n    tag_175:\n        /* \"#utility.yul\":209:214   */\n      0x00\n        /* \"#utility.yul\":240:246   */\n      dup2\n        /* \"#utility.yul\":234:247   */\n      mload\n        /* \"#utility.yul\":225:247   */\n      swap1\n      pop\n        /* \"#utility.yul\":256:289   */\n      tag_177\n        /* \"#utility.yul\":283:288   */\n      dup2\n        /* \"#utility.yul\":256:289   */\n      tag_174\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":152:295   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":301:438   */\n    tag_178:\n        /* \"#utility.yul\":355:360   */\n      0x00\n        /* \"#utility.yul\":386:392   */\n      dup2\n        /* \"#utility.yul\":380:393   */\n      mload\n        /* \"#utility.yul\":371:393   */\n      swap1\n      pop\n        /* \"#utility.yul\":402:432   */\n      tag_180\n        /* \"#utility.yul\":426:431   */\n      dup2\n        /* \"#utility.yul\":402:432   */\n      tag_181\n      jump\t// in\n    tag_180:\n        /* \"#utility.yul\":301:438   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":444:583   */\n    tag_182:\n        /* \"#utility.yul\":490:495   */\n      0x00\n        /* \"#utility.yul\":528:534   */\n      dup2\n        /* \"#utility.yul\":515:535   */\n      calldataload\n        /* \"#utility.yul\":506:535   */\n      swap1\n      pop\n        /* \"#utility.yul\":544:577   */\n      tag_184\n        /* \"#utility.yul\":571:576   */\n      dup2\n        /* \"#utility.yul\":544:577   */\n      tag_185\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":444:583   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":589:918   */\n    tag_47:\n        /* \"#utility.yul\":648:654   */\n      0x00\n        /* \"#utility.yul\":697:699   */\n      0x20\n        /* \"#utility.yul\":685:694   */\n      dup3\n        /* \"#utility.yul\":676:683   */\n      dup5\n        /* \"#utility.yul\":672:695   */\n      sub\n        /* \"#utility.yul\":668:700   */\n      slt\n        /* \"#utility.yul\":665:784   */\n      iszero\n      tag_187\n      jumpi\n        /* \"#utility.yul\":703:782   */\n      tag_188\n      tag_189\n      jump\t// in\n    tag_188:\n        /* \"#utility.yul\":665:784   */\n    tag_187:\n        /* \"#utility.yul\":823:824   */\n      0x00\n        /* \"#utility.yul\":848:901   */\n      tag_190\n        /* \"#utility.yul\":893:900   */\n      dup5\n        /* \"#utility.yul\":884:890   */\n      dup3\n        /* \"#utility.yul\":873:882   */\n      dup6\n        /* \"#utility.yul\":869:891   */\n      add\n        /* \"#utility.yul\":848:901   */\n      tag_171\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":838:901   */\n      swap2\n      pop\n        /* \"#utility.yul\":794:911   */\n      pop\n        /* \"#utility.yul\":589:918   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1275   */\n    tag_84:\n        /* \"#utility.yul\":994:1000   */\n      0x00\n        /* \"#utility.yul\":1043:1045   */\n      0x20\n        /* \"#utility.yul\":1031:1040   */\n      dup3\n        /* \"#utility.yul\":1022:1029   */\n      dup5\n        /* \"#utility.yul\":1018:1041   */\n      sub\n        /* \"#utility.yul\":1014:1046   */\n      slt\n        /* \"#utility.yul\":1011:1130   */\n      iszero\n      tag_192\n      jumpi\n        /* \"#utility.yul\":1049:1128   */\n      tag_193\n      tag_189\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":1011:1130   */\n    tag_192:\n        /* \"#utility.yul\":1169:1170   */\n      0x00\n        /* \"#utility.yul\":1194:1258   */\n      tag_194\n        /* \"#utility.yul\":1250:1257   */\n      dup5\n        /* \"#utility.yul\":1241:1247   */\n      dup3\n        /* \"#utility.yul\":1230:1239   */\n      dup6\n        /* \"#utility.yul\":1226:1248   */\n      add\n        /* \"#utility.yul\":1194:1258   */\n      tag_175\n      jump\t// in\n    tag_194:\n        /* \"#utility.yul\":1184:1258   */\n      swap2\n      pop\n        /* \"#utility.yul\":1140:1268   */\n      pop\n        /* \"#utility.yul\":924:1275   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1281:1755   */\n    tag_24:\n        /* \"#utility.yul\":1349:1355   */\n      0x00\n        /* \"#utility.yul\":1357:1363   */\n      dup1\n        /* \"#utility.yul\":1406:1408   */\n      0x40\n        /* \"#utility.yul\":1394:1403   */\n      dup4\n        /* \"#utility.yul\":1385:1392   */\n      dup6\n        /* \"#utility.yul\":1381:1404   */\n      sub\n        /* \"#utility.yul\":1377:1409   */\n      slt\n        /* \"#utility.yul\":1374:1493   */\n      iszero\n      tag_196\n      jumpi\n        /* \"#utility.yul\":1412:1491   */\n      tag_197\n      tag_189\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":1374:1493   */\n    tag_196:\n        /* \"#utility.yul\":1532:1533   */\n      0x00\n        /* \"#utility.yul\":1557:1610   */\n      tag_198\n        /* \"#utility.yul\":1602:1609   */\n      dup6\n        /* \"#utility.yul\":1593:1599   */\n      dup3\n        /* \"#utility.yul\":1582:1591   */\n      dup7\n        /* \"#utility.yul\":1578:1600   */\n      add\n        /* \"#utility.yul\":1557:1610   */\n      tag_171\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":1547:1610   */\n      swap3\n      pop\n        /* \"#utility.yul\":1503:1620   */\n      pop\n        /* \"#utility.yul\":1659:1661   */\n      0x20\n        /* \"#utility.yul\":1685:1738   */\n      tag_199\n        /* \"#utility.yul\":1730:1737   */\n      dup6\n        /* \"#utility.yul\":1721:1727   */\n      dup3\n        /* \"#utility.yul\":1710:1719   */\n      dup7\n        /* \"#utility.yul\":1706:1728   */\n      add\n        /* \"#utility.yul\":1685:1738   */\n      tag_182\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":1675:1738   */\n      swap2\n      pop\n        /* \"#utility.yul\":1630:1748   */\n      pop\n        /* \"#utility.yul\":1281:1755   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1761:2106   */\n    tag_130:\n        /* \"#utility.yul\":1828:1834   */\n      0x00\n        /* \"#utility.yul\":1877:1879   */\n      0x20\n        /* \"#utility.yul\":1865:1874   */\n      dup3\n        /* \"#utility.yul\":1856:1863   */\n      dup5\n        /* \"#utility.yul\":1852:1875   */\n      sub\n        /* \"#utility.yul\":1848:1880   */\n      slt\n        /* \"#utility.yul\":1845:1964   */\n      iszero\n      tag_201\n      jumpi\n        /* \"#utility.yul\":1883:1962   */\n      tag_202\n      tag_189\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":1845:1964   */\n    tag_201:\n        /* \"#utility.yul\":2003:2004   */\n      0x00\n        /* \"#utility.yul\":2028:2089   */\n      tag_203\n        /* \"#utility.yul\":2081:2088   */\n      dup5\n        /* \"#utility.yul\":2072:2078   */\n      dup3\n        /* \"#utility.yul\":2061:2070   */\n      dup6\n        /* \"#utility.yul\":2057:2079   */\n      add\n        /* \"#utility.yul\":2028:2089   */\n      tag_178\n      jump\t// in\n    tag_203:\n        /* \"#utility.yul\":2018:2089   */\n      swap2\n      pop\n        /* \"#utility.yul\":1974:2099   */\n      pop\n        /* \"#utility.yul\":1761:2106   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2112:2441   */\n    tag_57:\n        /* \"#utility.yul\":2171:2177   */\n      0x00\n        /* \"#utility.yul\":2220:2222   */\n      0x20\n        /* \"#utility.yul\":2208:2217   */\n      dup3\n        /* \"#utility.yul\":2199:2206   */\n      dup5\n        /* \"#utility.yul\":2195:2218   */\n      sub\n        /* \"#utility.yul\":2191:2223   */\n      slt\n        /* \"#utility.yul\":2188:2307   */\n      iszero\n      tag_205\n      jumpi\n        /* \"#utility.yul\":2226:2305   */\n      tag_206\n      tag_189\n      jump\t// in\n    tag_206:\n        /* \"#utility.yul\":2188:2307   */\n    tag_205:\n        /* \"#utility.yul\":2346:2347   */\n      0x00\n        /* \"#utility.yul\":2371:2424   */\n      tag_207\n        /* \"#utility.yul\":2416:2423   */\n      dup5\n        /* \"#utility.yul\":2407:2413   */\n      dup3\n        /* \"#utility.yul\":2396:2405   */\n      dup6\n        /* \"#utility.yul\":2392:2414   */\n      add\n        /* \"#utility.yul\":2371:2424   */\n      tag_182\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":2361:2424   */\n      swap2\n      pop\n        /* \"#utility.yul\":2317:2434   */\n      pop\n        /* \"#utility.yul\":2112:2441   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2447:2921   */\n    tag_70:\n        /* \"#utility.yul\":2515:2521   */\n      0x00\n        /* \"#utility.yul\":2523:2529   */\n      dup1\n        /* \"#utility.yul\":2572:2574   */\n      0x40\n        /* \"#utility.yul\":2560:2569   */\n      dup4\n        /* \"#utility.yul\":2551:2558   */\n      dup6\n        /* \"#utility.yul\":2547:2570   */\n      sub\n        /* \"#utility.yul\":2543:2575   */\n      slt\n        /* \"#utility.yul\":2540:2659   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":2578:2657   */\n      tag_210\n      tag_189\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":2540:2659   */\n    tag_209:\n        /* \"#utility.yul\":2698:2699   */\n      0x00\n        /* \"#utility.yul\":2723:2776   */\n      tag_211\n        /* \"#utility.yul\":2768:2775   */\n      dup6\n        /* \"#utility.yul\":2759:2765   */\n      dup3\n        /* \"#utility.yul\":2748:2757   */\n      dup7\n        /* \"#utility.yul\":2744:2766   */\n      add\n        /* \"#utility.yul\":2723:2776   */\n      tag_182\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":2713:2776   */\n      swap3\n      pop\n        /* \"#utility.yul\":2669:2786   */\n      pop\n        /* \"#utility.yul\":2825:2827   */\n      0x20\n        /* \"#utility.yul\":2851:2904   */\n      tag_212\n        /* \"#utility.yul\":2896:2903   */\n      dup6\n        /* \"#utility.yul\":2887:2893   */\n      dup3\n        /* \"#utility.yul\":2876:2885   */\n      dup7\n        /* \"#utility.yul\":2872:2894   */\n      add\n        /* \"#utility.yul\":2851:2904   */\n      tag_171\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":2841:2904   */\n      swap2\n      pop\n        /* \"#utility.yul\":2796:2914   */\n      pop\n        /* \"#utility.yul\":2447:2921   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2927:3401   */\n    tag_33:\n        /* \"#utility.yul\":2995:3001   */\n      0x00\n        /* \"#utility.yul\":3003:3009   */\n      dup1\n        /* \"#utility.yul\":3052:3054   */\n      0x40\n        /* \"#utility.yul\":3040:3049   */\n      dup4\n        /* \"#utility.yul\":3031:3038   */\n      dup6\n        /* \"#utility.yul\":3027:3050   */\n      sub\n        /* \"#utility.yul\":3023:3055   */\n      slt\n        /* \"#utility.yul\":3020:3139   */\n      iszero\n      tag_214\n      jumpi\n        /* \"#utility.yul\":3058:3137   */\n      tag_215\n      tag_189\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":3020:3139   */\n    tag_214:\n        /* \"#utility.yul\":3178:3179   */\n      0x00\n        /* \"#utility.yul\":3203:3256   */\n      tag_216\n        /* \"#utility.yul\":3248:3255   */\n      dup6\n        /* \"#utility.yul\":3239:3245   */\n      dup3\n        /* \"#utility.yul\":3228:3237   */\n      dup7\n        /* \"#utility.yul\":3224:3246   */\n      add\n        /* \"#utility.yul\":3203:3256   */\n      tag_182\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":3193:3256   */\n      swap3\n      pop\n        /* \"#utility.yul\":3149:3266   */\n      pop\n        /* \"#utility.yul\":3305:3307   */\n      0x20\n        /* \"#utility.yul\":3331:3384   */\n      tag_217\n        /* \"#utility.yul\":3376:3383   */\n      dup6\n        /* \"#utility.yul\":3367:3373   */\n      dup3\n        /* \"#utility.yul\":3356:3365   */\n      dup7\n        /* \"#utility.yul\":3352:3374   */\n      add\n        /* \"#utility.yul\":3331:3384   */\n      tag_182\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":3321:3384   */\n      swap2\n      pop\n        /* \"#utility.yul\":3276:3394   */\n      pop\n        /* \"#utility.yul\":2927:3401   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3407:4026   */\n    tag_43:\n        /* \"#utility.yul\":3484:3490   */\n      0x00\n        /* \"#utility.yul\":3492:3498   */\n      dup1\n        /* \"#utility.yul\":3500:3506   */\n      0x00\n        /* \"#utility.yul\":3549:3551   */\n      0x60\n        /* \"#utility.yul\":3537:3546   */\n      dup5\n        /* \"#utility.yul\":3528:3535   */\n      dup7\n        /* \"#utility.yul\":3524:3547   */\n      sub\n        /* \"#utility.yul\":3520:3552   */\n      slt\n        /* \"#utility.yul\":3517:3636   */\n      iszero\n      tag_219\n      jumpi\n        /* \"#utility.yul\":3555:3634   */\n      tag_220\n      tag_189\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":3517:3636   */\n    tag_219:\n        /* \"#utility.yul\":3675:3676   */\n      0x00\n        /* \"#utility.yul\":3700:3753   */\n      tag_221\n        /* \"#utility.yul\":3745:3752   */\n      dup7\n        /* \"#utility.yul\":3736:3742   */\n      dup3\n        /* \"#utility.yul\":3725:3734   */\n      dup8\n        /* \"#utility.yul\":3721:3743   */\n      add\n        /* \"#utility.yul\":3700:3753   */\n      tag_182\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":3690:3753   */\n      swap4\n      pop\n        /* \"#utility.yul\":3646:3763   */\n      pop\n        /* \"#utility.yul\":3802:3804   */\n      0x20\n        /* \"#utility.yul\":3828:3881   */\n      tag_222\n        /* \"#utility.yul\":3873:3880   */\n      dup7\n        /* \"#utility.yul\":3864:3870   */\n      dup3\n        /* \"#utility.yul\":3853:3862   */\n      dup8\n        /* \"#utility.yul\":3849:3871   */\n      add\n        /* \"#utility.yul\":3828:3881   */\n      tag_182\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":3818:3881   */\n      swap3\n      pop\n        /* \"#utility.yul\":3773:3891   */\n      pop\n        /* \"#utility.yul\":3930:3932   */\n      0x40\n        /* \"#utility.yul\":3956:4009   */\n      tag_223\n        /* \"#utility.yul\":4001:4008   */\n      dup7\n        /* \"#utility.yul\":3992:3998   */\n      dup3\n        /* \"#utility.yul\":3981:3990   */\n      dup8\n        /* \"#utility.yul\":3977:3999   */\n      add\n        /* \"#utility.yul\":3956:4009   */\n      tag_182\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":3946:4009   */\n      swap2\n      pop\n        /* \"#utility.yul\":3901:4019   */\n      pop\n        /* \"#utility.yul\":3407:4026   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4032:4211   */\n    tag_224:\n        /* \"#utility.yul\":4101:4111   */\n      0x00\n        /* \"#utility.yul\":4122:4168   */\n      tag_226\n        /* \"#utility.yul\":4164:4167   */\n      dup4\n        /* \"#utility.yul\":4156:4162   */\n      dup4\n        /* \"#utility.yul\":4122:4168   */\n      tag_227\n      jump\t// in\n    tag_226:\n        /* \"#utility.yul\":4200:4204   */\n      0x20\n        /* \"#utility.yul\":4195:4198   */\n      dup4\n        /* \"#utility.yul\":4191:4205   */\n      add\n        /* \"#utility.yul\":4177:4205   */\n      swap1\n      pop\n        /* \"#utility.yul\":4032:4211   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4217:4335   */\n    tag_228:\n        /* \"#utility.yul\":4304:4328   */\n      tag_230\n        /* \"#utility.yul\":4322:4327   */\n      dup2\n        /* \"#utility.yul\":4304:4328   */\n      tag_231\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":4299:4302   */\n      dup3\n        /* \"#utility.yul\":4292:4329   */\n      mstore\n        /* \"#utility.yul\":4217:4335   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4371:5103   */\n    tag_232:\n        /* \"#utility.yul\":4490:4493   */\n      0x00\n        /* \"#utility.yul\":4519:4573   */\n      tag_234\n        /* \"#utility.yul\":4567:4572   */\n      dup3\n        /* \"#utility.yul\":4519:4573   */\n      tag_235\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":4589:4675   */\n      tag_236\n        /* \"#utility.yul\":4668:4674   */\n      dup2\n        /* \"#utility.yul\":4663:4666   */\n      dup6\n        /* \"#utility.yul\":4589:4675   */\n      tag_237\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":4582:4675   */\n      swap4\n      pop\n        /* \"#utility.yul\":4699:4755   */\n      tag_238\n        /* \"#utility.yul\":4749:4754   */\n      dup4\n        /* \"#utility.yul\":4699:4755   */\n      tag_239\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":4778:4785   */\n      dup1\n        /* \"#utility.yul\":4809:4810   */\n      0x00\n        /* \"#utility.yul\":4794:5078   */\n    tag_240:\n        /* \"#utility.yul\":4819:4825   */\n      dup4\n        /* \"#utility.yul\":4816:4817   */\n      dup2\n        /* \"#utility.yul\":4813:4826   */\n      lt\n        /* \"#utility.yul\":4794:5078   */\n      iszero\n      tag_242\n      jumpi\n        /* \"#utility.yul\":4895:4901   */\n      dup2\n        /* \"#utility.yul\":4889:4902   */\n      mload\n        /* \"#utility.yul\":4922:4985   */\n      tag_243\n        /* \"#utility.yul\":4981:4984   */\n      dup9\n        /* \"#utility.yul\":4966:4979   */\n      dup3\n        /* \"#utility.yul\":4922:4985   */\n      tag_224\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":4915:4985   */\n      swap8\n      pop\n        /* \"#utility.yul\":5008:5068   */\n      tag_244\n        /* \"#utility.yul\":5061:5067   */\n      dup4\n        /* \"#utility.yul\":5008:5068   */\n      tag_245\n      jump\t// in\n    tag_244:\n        /* \"#utility.yul\":4998:5068   */\n      swap3\n      pop\n        /* \"#utility.yul\":4854:5078   */\n      pop\n        /* \"#utility.yul\":4841:4842   */\n      0x01\n        /* \"#utility.yul\":4838:4839   */\n      dup2\n        /* \"#utility.yul\":4834:4843   */\n      add\n        /* \"#utility.yul\":4829:4843   */\n      swap1\n      pop\n        /* \"#utility.yul\":4794:5078   */\n      jump(tag_240)\n    tag_242:\n        /* \"#utility.yul\":4798:4812   */\n      pop\n        /* \"#utility.yul\":5094:5097   */\n      dup6\n        /* \"#utility.yul\":5087:5097   */\n      swap4\n      pop\n        /* \"#utility.yul\":4495:5103   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":4371:5103   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5109:5218   */\n    tag_246:\n        /* \"#utility.yul\":5190:5211   */\n      tag_248\n        /* \"#utility.yul\":5205:5210   */\n      dup2\n        /* \"#utility.yul\":5190:5211   */\n      tag_249\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":5185:5188   */\n      dup3\n        /* \"#utility.yul\":5178:5212   */\n      mstore\n        /* \"#utility.yul\":5109:5218   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5224:5383   */\n    tag_250:\n        /* \"#utility.yul\":5325:5376   */\n      tag_252\n        /* \"#utility.yul\":5370:5375   */\n      dup2\n        /* \"#utility.yul\":5325:5376   */\n      tag_253\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":5320:5323   */\n      dup3\n        /* \"#utility.yul\":5313:5377   */\n      mstore\n        /* \"#utility.yul\":5224:5383   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5389:5550   */\n    tag_254:\n        /* \"#utility.yul\":5491:5543   */\n      tag_256\n        /* \"#utility.yul\":5537:5542   */\n      dup2\n        /* \"#utility.yul\":5491:5543   */\n      tag_257\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":5486:5489   */\n      dup3\n        /* \"#utility.yul\":5479:5544   */\n      mstore\n        /* \"#utility.yul\":5389:5550   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5556:5922   */\n    tag_258:\n        /* \"#utility.yul\":5698:5701   */\n      0x00\n        /* \"#utility.yul\":5719:5786   */\n      tag_260\n        /* \"#utility.yul\":5783:5785   */\n      0x1e\n        /* \"#utility.yul\":5778:5781   */\n      dup4\n        /* \"#utility.yul\":5719:5786   */\n      tag_261\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":5712:5786   */\n      swap2\n      pop\n        /* \"#utility.yul\":5795:5888   */\n      tag_262\n        /* \"#utility.yul\":5884:5887   */\n      dup3\n        /* \"#utility.yul\":5795:5888   */\n      tag_263\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":5913:5915   */\n      0x20\n        /* \"#utility.yul\":5908:5911   */\n      dup3\n        /* \"#utility.yul\":5904:5916   */\n      add\n        /* \"#utility.yul\":5897:5916   */\n      swap1\n      pop\n        /* \"#utility.yul\":5556:5922   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5928:6294   */\n    tag_264:\n        /* \"#utility.yul\":6070:6073   */\n      0x00\n        /* \"#utility.yul\":6091:6158   */\n      tag_266\n        /* \"#utility.yul\":6155:6157   */\n      0x26\n        /* \"#utility.yul\":6150:6153   */\n      dup4\n        /* \"#utility.yul\":6091:6158   */\n      tag_261\n      jump\t// in\n    tag_266:\n        /* \"#utility.yul\":6084:6158   */\n      swap2\n      pop\n        /* \"#utility.yul\":6167:6260   */\n      tag_267\n        /* \"#utility.yul\":6256:6259   */\n      dup3\n        /* \"#utility.yul\":6167:6260   */\n      tag_268\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":6285:6287   */\n      0x40\n        /* \"#utility.yul\":6280:6283   */\n      dup3\n        /* \"#utility.yul\":6276:6288   */\n      add\n        /* \"#utility.yul\":6269:6288   */\n      swap1\n      pop\n        /* \"#utility.yul\":5928:6294   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6300:6666   */\n    tag_269:\n        /* \"#utility.yul\":6442:6445   */\n      0x00\n        /* \"#utility.yul\":6463:6530   */\n      tag_271\n        /* \"#utility.yul\":6527:6529   */\n      0x1e\n        /* \"#utility.yul\":6522:6525   */\n      dup4\n        /* \"#utility.yul\":6463:6530   */\n      tag_261\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":6456:6530   */\n      swap2\n      pop\n        /* \"#utility.yul\":6539:6632   */\n      tag_272\n        /* \"#utility.yul\":6628:6631   */\n      dup3\n        /* \"#utility.yul\":6539:6632   */\n      tag_273\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":6657:6659   */\n      0x20\n        /* \"#utility.yul\":6652:6655   */\n      dup3\n        /* \"#utility.yul\":6648:6660   */\n      add\n        /* \"#utility.yul\":6641:6660   */\n      swap1\n      pop\n        /* \"#utility.yul\":6300:6666   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6672:7038   */\n    tag_274:\n        /* \"#utility.yul\":6814:6817   */\n      0x00\n        /* \"#utility.yul\":6835:6902   */\n      tag_276\n        /* \"#utility.yul\":6899:6901   */\n      0x20\n        /* \"#utility.yul\":6894:6897   */\n      dup4\n        /* \"#utility.yul\":6835:6902   */\n      tag_261\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":6828:6902   */\n      swap2\n      pop\n        /* \"#utility.yul\":6911:7004   */\n      tag_277\n        /* \"#utility.yul\":7000:7003   */\n      dup3\n        /* \"#utility.yul\":6911:7004   */\n      tag_278\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":7029:7031   */\n      0x20\n        /* \"#utility.yul\":7024:7027   */\n      dup3\n        /* \"#utility.yul\":7020:7032   */\n      add\n        /* \"#utility.yul\":7013:7032   */\n      swap1\n      pop\n        /* \"#utility.yul\":6672:7038   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7044:7410   */\n    tag_279:\n        /* \"#utility.yul\":7186:7189   */\n      0x00\n        /* \"#utility.yul\":7207:7274   */\n      tag_281\n        /* \"#utility.yul\":7271:7273   */\n      0x25\n        /* \"#utility.yul\":7266:7269   */\n      dup4\n        /* \"#utility.yul\":7207:7274   */\n      tag_261\n      jump\t// in\n    tag_281:\n        /* \"#utility.yul\":7200:7274   */\n      swap2\n      pop\n        /* \"#utility.yul\":7283:7376   */\n      tag_282\n        /* \"#utility.yul\":7372:7375   */\n      dup3\n        /* \"#utility.yul\":7283:7376   */\n      tag_283\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":7401:7403   */\n      0x40\n        /* \"#utility.yul\":7396:7399   */\n      dup3\n        /* \"#utility.yul\":7392:7404   */\n      add\n        /* \"#utility.yul\":7385:7404   */\n      swap1\n      pop\n        /* \"#utility.yul\":7044:7410   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7416:7524   */\n    tag_227:\n        /* \"#utility.yul\":7493:7517   */\n      tag_285\n        /* \"#utility.yul\":7511:7516   */\n      dup2\n        /* \"#utility.yul\":7493:7517   */\n      tag_286\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":7488:7491   */\n      dup3\n        /* \"#utility.yul\":7481:7518   */\n      mstore\n        /* \"#utility.yul\":7416:7524   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7530:7648   */\n    tag_287:\n        /* \"#utility.yul\":7617:7641   */\n      tag_289\n        /* \"#utility.yul\":7635:7640   */\n      dup2\n        /* \"#utility.yul\":7617:7641   */\n      tag_286\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":7612:7615   */\n      dup3\n        /* \"#utility.yul\":7605:7642   */\n      mstore\n        /* \"#utility.yul\":7530:7648   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7654:7876   */\n    tag_54:\n        /* \"#utility.yul\":7747:7751   */\n      0x00\n        /* \"#utility.yul\":7785:7787   */\n      0x20\n        /* \"#utility.yul\":7774:7783   */\n      dup3\n        /* \"#utility.yul\":7770:7788   */\n      add\n        /* \"#utility.yul\":7762:7788   */\n      swap1\n      pop\n        /* \"#utility.yul\":7798:7869   */\n      tag_291\n        /* \"#utility.yul\":7866:7867   */\n      0x00\n        /* \"#utility.yul\":7855:7864   */\n      dup4\n        /* \"#utility.yul\":7851:7868   */\n      add\n        /* \"#utility.yul\":7842:7848   */\n      dup5\n        /* \"#utility.yul\":7798:7869   */\n      tag_228\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":7654:7876   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7882:8324   */\n    tag_90:\n        /* \"#utility.yul\":8031:8035   */\n      0x00\n        /* \"#utility.yul\":8069:8071   */\n      0x60\n        /* \"#utility.yul\":8058:8067   */\n      dup3\n        /* \"#utility.yul\":8054:8072   */\n      add\n        /* \"#utility.yul\":8046:8072   */\n      swap1\n      pop\n        /* \"#utility.yul\":8082:8153   */\n      tag_293\n        /* \"#utility.yul\":8150:8151   */\n      0x00\n        /* \"#utility.yul\":8139:8148   */\n      dup4\n        /* \"#utility.yul\":8135:8152   */\n      add\n        /* \"#utility.yul\":8126:8132   */\n      dup7\n        /* \"#utility.yul\":8082:8153   */\n      tag_228\n      jump\t// in\n    tag_293:\n        /* \"#utility.yul\":8163:8235   */\n      tag_294\n        /* \"#utility.yul\":8231:8233   */\n      0x20\n        /* \"#utility.yul\":8220:8229   */\n      dup4\n        /* \"#utility.yul\":8216:8234   */\n      add\n        /* \"#utility.yul\":8207:8213   */\n      dup6\n        /* \"#utility.yul\":8163:8235   */\n      tag_228\n      jump\t// in\n    tag_294:\n        /* \"#utility.yul\":8245:8317   */\n      tag_295\n        /* \"#utility.yul\":8313:8315   */\n      0x40\n        /* \"#utility.yul\":8302:8311   */\n      dup4\n        /* \"#utility.yul\":8298:8316   */\n      add\n        /* \"#utility.yul\":8289:8295   */\n      dup5\n        /* \"#utility.yul\":8245:8317   */\n      tag_287\n      jump\t// in\n    tag_295:\n        /* \"#utility.yul\":7882:8324   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8330:8662   */\n    tag_125:\n        /* \"#utility.yul\":8451:8455   */\n      0x00\n        /* \"#utility.yul\":8489:8491   */\n      0x40\n        /* \"#utility.yul\":8478:8487   */\n      dup3\n        /* \"#utility.yul\":8474:8492   */\n      add\n        /* \"#utility.yul\":8466:8492   */\n      swap1\n      pop\n        /* \"#utility.yul\":8502:8573   */\n      tag_297\n        /* \"#utility.yul\":8570:8571   */\n      0x00\n        /* \"#utility.yul\":8559:8568   */\n      dup4\n        /* \"#utility.yul\":8555:8572   */\n      add\n        /* \"#utility.yul\":8546:8552   */\n      dup6\n        /* \"#utility.yul\":8502:8573   */\n      tag_228\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":8583:8655   */\n      tag_298\n        /* \"#utility.yul\":8651:8653   */\n      0x20\n        /* \"#utility.yul\":8640:8649   */\n      dup4\n        /* \"#utility.yul\":8636:8654   */\n      add\n        /* \"#utility.yul\":8627:8633   */\n      dup5\n        /* \"#utility.yul\":8583:8655   */\n      tag_287\n      jump\t// in\n    tag_298:\n        /* \"#utility.yul\":8330:8662   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8668:9041   */\n    tag_50:\n        /* \"#utility.yul\":8811:8815   */\n      0x00\n        /* \"#utility.yul\":8849:8851   */\n      0x20\n        /* \"#utility.yul\":8838:8847   */\n      dup3\n        /* \"#utility.yul\":8834:8852   */\n      add\n        /* \"#utility.yul\":8826:8852   */\n      swap1\n      pop\n        /* \"#utility.yul\":8898:8907   */\n      dup2\n        /* \"#utility.yul\":8892:8896   */\n      dup2\n        /* \"#utility.yul\":8888:8908   */\n      sub\n        /* \"#utility.yul\":8884:8885   */\n      0x00\n        /* \"#utility.yul\":8873:8882   */\n      dup4\n        /* \"#utility.yul\":8869:8886   */\n      add\n        /* \"#utility.yul\":8862:8909   */\n      mstore\n        /* \"#utility.yul\":8926:9034   */\n      tag_300\n        /* \"#utility.yul\":9029:9033   */\n      dup2\n        /* \"#utility.yul\":9020:9026   */\n      dup5\n        /* \"#utility.yul\":8926:9034   */\n      tag_232\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":8918:9034   */\n      swap1\n      pop\n        /* \"#utility.yul\":8668:9041   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9047:9257   */\n    tag_73:\n        /* \"#utility.yul\":9134:9138   */\n      0x00\n        /* \"#utility.yul\":9172:9174   */\n      0x20\n        /* \"#utility.yul\":9161:9170   */\n      dup3\n        /* \"#utility.yul\":9157:9175   */\n      add\n        /* \"#utility.yul\":9149:9175   */\n      swap1\n      pop\n        /* \"#utility.yul\":9185:9250   */\n      tag_302\n        /* \"#utility.yul\":9247:9248   */\n      0x00\n        /* \"#utility.yul\":9236:9245   */\n      dup4\n        /* \"#utility.yul\":9232:9249   */\n      add\n        /* \"#utility.yul\":9223:9229   */\n      dup5\n        /* \"#utility.yul\":9185:9250   */\n      tag_246\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":9047:9257   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9263:9513   */\n    tag_67:\n        /* \"#utility.yul\":9370:9374   */\n      0x00\n        /* \"#utility.yul\":9408:9410   */\n      0x20\n        /* \"#utility.yul\":9397:9406   */\n      dup3\n        /* \"#utility.yul\":9393:9411   */\n      add\n        /* \"#utility.yul\":9385:9411   */\n      swap1\n      pop\n        /* \"#utility.yul\":9421:9506   */\n      tag_304\n        /* \"#utility.yul\":9503:9504   */\n      0x00\n        /* \"#utility.yul\":9492:9501   */\n      dup4\n        /* \"#utility.yul\":9488:9505   */\n      add\n        /* \"#utility.yul\":9479:9485   */\n      dup5\n        /* \"#utility.yul\":9421:9506   */\n      tag_250\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":9263:9513   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9519:9771   */\n    tag_40:\n        /* \"#utility.yul\":9627:9631   */\n      0x00\n        /* \"#utility.yul\":9665:9667   */\n      0x20\n        /* \"#utility.yul\":9654:9663   */\n      dup3\n        /* \"#utility.yul\":9650:9668   */\n      add\n        /* \"#utility.yul\":9642:9668   */\n      swap1\n      pop\n        /* \"#utility.yul\":9678:9764   */\n      tag_306\n        /* \"#utility.yul\":9761:9762   */\n      0x00\n        /* \"#utility.yul\":9750:9759   */\n      dup4\n        /* \"#utility.yul\":9746:9763   */\n      add\n        /* \"#utility.yul\":9737:9743   */\n      dup5\n        /* \"#utility.yul\":9678:9764   */\n      tag_254\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":9519:9771   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9777:10196   */\n    tag_87:\n        /* \"#utility.yul\":9943:9947   */\n      0x00\n        /* \"#utility.yul\":9981:9983   */\n      0x20\n        /* \"#utility.yul\":9970:9979   */\n      dup3\n        /* \"#utility.yul\":9966:9984   */\n      add\n        /* \"#utility.yul\":9958:9984   */\n      swap1\n      pop\n        /* \"#utility.yul\":10030:10039   */\n      dup2\n        /* \"#utility.yul\":10024:10028   */\n      dup2\n        /* \"#utility.yul\":10020:10040   */\n      sub\n        /* \"#utility.yul\":10016:10017   */\n      0x00\n        /* \"#utility.yul\":10005:10014   */\n      dup4\n        /* \"#utility.yul\":10001:10018   */\n      add\n        /* \"#utility.yul\":9994:10041   */\n      mstore\n        /* \"#utility.yul\":10058:10189   */\n      tag_308\n        /* \"#utility.yul\":10184:10188   */\n      dup2\n        /* \"#utility.yul\":10058:10189   */\n      tag_258\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":10050:10189   */\n      swap1\n      pop\n        /* \"#utility.yul\":9777:10196   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10202:10621   */\n    tag_142:\n        /* \"#utility.yul\":10368:10372   */\n      0x00\n        /* \"#utility.yul\":10406:10408   */\n      0x20\n        /* \"#utility.yul\":10395:10404   */\n      dup3\n        /* \"#utility.yul\":10391:10409   */\n      add\n        /* \"#utility.yul\":10383:10409   */\n      swap1\n      pop\n        /* \"#utility.yul\":10455:10464   */\n      dup2\n        /* \"#utility.yul\":10449:10453   */\n      dup2\n        /* \"#utility.yul\":10445:10465   */\n      sub\n        /* \"#utility.yul\":10441:10442   */\n      0x00\n        /* \"#utility.yul\":10430:10439   */\n      dup4\n        /* \"#utility.yul\":10426:10443   */\n      add\n        /* \"#utility.yul\":10419:10466   */\n      mstore\n        /* \"#utility.yul\":10483:10614   */\n      tag_310\n        /* \"#utility.yul\":10609:10613   */\n      dup2\n        /* \"#utility.yul\":10483:10614   */\n      tag_264\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":10475:10614   */\n      swap1\n      pop\n        /* \"#utility.yul\":10202:10621   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10627:11046   */\n    tag_113:\n        /* \"#utility.yul\":10793:10797   */\n      0x00\n        /* \"#utility.yul\":10831:10833   */\n      0x20\n        /* \"#utility.yul\":10820:10829   */\n      dup3\n        /* \"#utility.yul\":10816:10834   */\n      add\n        /* \"#utility.yul\":10808:10834   */\n      swap1\n      pop\n        /* \"#utility.yul\":10880:10889   */\n      dup2\n        /* \"#utility.yul\":10874:10878   */\n      dup2\n        /* \"#utility.yul\":10870:10890   */\n      sub\n        /* \"#utility.yul\":10866:10867   */\n      0x00\n        /* \"#utility.yul\":10855:10864   */\n      dup4\n        /* \"#utility.yul\":10851:10868   */\n      add\n        /* \"#utility.yul\":10844:10891   */\n      mstore\n        /* \"#utility.yul\":10908:11039   */\n      tag_312\n        /* \"#utility.yul\":11034:11038   */\n      dup2\n        /* \"#utility.yul\":10908:11039   */\n      tag_269\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":10900:11039   */\n      swap1\n      pop\n        /* \"#utility.yul\":10627:11046   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11052:11471   */\n    tag_160:\n        /* \"#utility.yul\":11218:11222   */\n      0x00\n        /* \"#utility.yul\":11256:11258   */\n      0x20\n        /* \"#utility.yul\":11245:11254   */\n      dup3\n        /* \"#utility.yul\":11241:11259   */\n      add\n        /* \"#utility.yul\":11233:11259   */\n      swap1\n      pop\n        /* \"#utility.yul\":11305:11314   */\n      dup2\n        /* \"#utility.yul\":11299:11303   */\n      dup2\n        /* \"#utility.yul\":11295:11315   */\n      sub\n        /* \"#utility.yul\":11291:11292   */\n      0x00\n        /* \"#utility.yul\":11280:11289   */\n      dup4\n        /* \"#utility.yul\":11276:11293   */\n      add\n        /* \"#utility.yul\":11269:11316   */\n      mstore\n        /* \"#utility.yul\":11333:11464   */\n      tag_314\n        /* \"#utility.yul\":11459:11463   */\n      dup2\n        /* \"#utility.yul\":11333:11464   */\n      tag_274\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":11325:11464   */\n      swap1\n      pop\n        /* \"#utility.yul\":11052:11471   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11477:11896   */\n    tag_116:\n        /* \"#utility.yul\":11643:11647   */\n      0x00\n        /* \"#utility.yul\":11681:11683   */\n      0x20\n        /* \"#utility.yul\":11670:11679   */\n      dup3\n        /* \"#utility.yul\":11666:11684   */\n      add\n        /* \"#utility.yul\":11658:11684   */\n      swap1\n      pop\n        /* \"#utility.yul\":11730:11739   */\n      dup2\n        /* \"#utility.yul\":11724:11728   */\n      dup2\n        /* \"#utility.yul\":11720:11740   */\n      sub\n        /* \"#utility.yul\":11716:11717   */\n      0x00\n        /* \"#utility.yul\":11705:11714   */\n      dup4\n        /* \"#utility.yul\":11701:11718   */\n      add\n        /* \"#utility.yul\":11694:11741   */\n      mstore\n        /* \"#utility.yul\":11758:11889   */\n      tag_316\n        /* \"#utility.yul\":11884:11888   */\n      dup2\n        /* \"#utility.yul\":11758:11889   */\n      tag_279\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":11750:11889   */\n      swap1\n      pop\n        /* \"#utility.yul\":11477:11896   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11902:12124   */\n    tag_21:\n        /* \"#utility.yul\":11995:11999   */\n      0x00\n        /* \"#utility.yul\":12033:12035   */\n      0x20\n        /* \"#utility.yul\":12022:12031   */\n      dup3\n        /* \"#utility.yul\":12018:12036   */\n      add\n        /* \"#utility.yul\":12010:12036   */\n      swap1\n      pop\n        /* \"#utility.yul\":12046:12117   */\n      tag_318\n        /* \"#utility.yul\":12114:12115   */\n      0x00\n        /* \"#utility.yul\":12103:12112   */\n      dup4\n        /* \"#utility.yul\":12099:12116   */\n      add\n        /* \"#utility.yul\":12090:12096   */\n      dup5\n        /* \"#utility.yul\":12046:12117   */\n      tag_287\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":11902:12124   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12130:12794   */\n    tag_60:\n        /* \"#utility.yul\":12335:12339   */\n      0x00\n        /* \"#utility.yul\":12373:12376   */\n      0xa0\n        /* \"#utility.yul\":12362:12371   */\n      dup3\n        /* \"#utility.yul\":12358:12377   */\n      add\n        /* \"#utility.yul\":12350:12377   */\n      swap1\n      pop\n        /* \"#utility.yul\":12387:12458   */\n      tag_320\n        /* \"#utility.yul\":12455:12456   */\n      0x00\n        /* \"#utility.yul\":12444:12453   */\n      dup4\n        /* \"#utility.yul\":12440:12457   */\n      add\n        /* \"#utility.yul\":12431:12437   */\n      dup9\n        /* \"#utility.yul\":12387:12458   */\n      tag_287\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":12468:12540   */\n      tag_321\n        /* \"#utility.yul\":12536:12538   */\n      0x20\n        /* \"#utility.yul\":12525:12534   */\n      dup4\n        /* \"#utility.yul\":12521:12539   */\n      add\n        /* \"#utility.yul\":12512:12518   */\n      dup8\n        /* \"#utility.yul\":12468:12540   */\n      tag_228\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":12550:12622   */\n      tag_322\n        /* \"#utility.yul\":12618:12620   */\n      0x40\n        /* \"#utility.yul\":12607:12616   */\n      dup4\n        /* \"#utility.yul\":12603:12621   */\n      add\n        /* \"#utility.yul\":12594:12600   */\n      dup7\n        /* \"#utility.yul\":12550:12622   */\n      tag_287\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":12632:12704   */\n      tag_323\n        /* \"#utility.yul\":12700:12702   */\n      0x60\n        /* \"#utility.yul\":12689:12698   */\n      dup4\n        /* \"#utility.yul\":12685:12703   */\n      add\n        /* \"#utility.yul\":12676:12682   */\n      dup6\n        /* \"#utility.yul\":12632:12704   */\n      tag_287\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":12714:12787   */\n      tag_324\n        /* \"#utility.yul\":12782:12785   */\n      0x80\n        /* \"#utility.yul\":12771:12780   */\n      dup4\n        /* \"#utility.yul\":12767:12786   */\n      add\n        /* \"#utility.yul\":12758:12764   */\n      dup5\n        /* \"#utility.yul\":12714:12787   */\n      tag_287\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":12130:12794   */\n      swap7\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12800:13242   */\n    tag_97:\n        /* \"#utility.yul\":12949:12953   */\n      0x00\n        /* \"#utility.yul\":12987:12989   */\n      0x60\n        /* \"#utility.yul\":12976:12985   */\n      dup3\n        /* \"#utility.yul\":12972:12990   */\n      add\n        /* \"#utility.yul\":12964:12990   */\n      swap1\n      pop\n        /* \"#utility.yul\":13000:13071   */\n      tag_326\n        /* \"#utility.yul\":13068:13069   */\n      0x00\n        /* \"#utility.yul\":13057:13066   */\n      dup4\n        /* \"#utility.yul\":13053:13070   */\n      add\n        /* \"#utility.yul\":13044:13050   */\n      dup7\n        /* \"#utility.yul\":13000:13071   */\n      tag_287\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":13081:13153   */\n      tag_327\n        /* \"#utility.yul\":13149:13151   */\n      0x20\n        /* \"#utility.yul\":13138:13147   */\n      dup4\n        /* \"#utility.yul\":13134:13152   */\n      add\n        /* \"#utility.yul\":13125:13131   */\n      dup6\n        /* \"#utility.yul\":13081:13153   */\n      tag_287\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":13163:13235   */\n      tag_328\n        /* \"#utility.yul\":13231:13233   */\n      0x40\n        /* \"#utility.yul\":13220:13229   */\n      dup4\n        /* \"#utility.yul\":13216:13234   */\n      add\n        /* \"#utility.yul\":13207:13213   */\n      dup5\n        /* \"#utility.yul\":13163:13235   */\n      tag_287\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":12800:13242   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13248:13801   */\n    tag_132:\n        /* \"#utility.yul\":13425:13429   */\n      0x00\n        /* \"#utility.yul\":13463:13466   */\n      0x80\n        /* \"#utility.yul\":13452:13461   */\n      dup3\n        /* \"#utility.yul\":13448:13467   */\n      add\n        /* \"#utility.yul\":13440:13467   */\n      swap1\n      pop\n        /* \"#utility.yul\":13477:13548   */\n      tag_330\n        /* \"#utility.yul\":13545:13546   */\n      0x00\n        /* \"#utility.yul\":13534:13543   */\n      dup4\n        /* \"#utility.yul\":13530:13547   */\n      add\n        /* \"#utility.yul\":13521:13527   */\n      dup8\n        /* \"#utility.yul\":13477:13548   */\n      tag_287\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":13558:13630   */\n      tag_331\n        /* \"#utility.yul\":13626:13628   */\n      0x20\n        /* \"#utility.yul\":13615:13624   */\n      dup4\n        /* \"#utility.yul\":13611:13629   */\n      add\n        /* \"#utility.yul\":13602:13608   */\n      dup7\n        /* \"#utility.yul\":13558:13630   */\n      tag_287\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":13640:13712   */\n      tag_332\n        /* \"#utility.yul\":13708:13710   */\n      0x40\n        /* \"#utility.yul\":13697:13706   */\n      dup4\n        /* \"#utility.yul\":13693:13711   */\n      add\n        /* \"#utility.yul\":13684:13690   */\n      dup6\n        /* \"#utility.yul\":13640:13712   */\n      tag_287\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":13722:13794   */\n      tag_333\n        /* \"#utility.yul\":13790:13792   */\n      0x60\n        /* \"#utility.yul\":13779:13788   */\n      dup4\n        /* \"#utility.yul\":13775:13793   */\n      add\n        /* \"#utility.yul\":13766:13772   */\n      dup5\n        /* \"#utility.yul\":13722:13794   */\n      tag_287\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":13248:13801   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13888:14020   */\n    tag_239:\n        /* \"#utility.yul\":13955:13959   */\n      0x00\n        /* \"#utility.yul\":13978:13981   */\n      dup2\n        /* \"#utility.yul\":13970:13981   */\n      swap1\n      pop\n        /* \"#utility.yul\":14008:14012   */\n      0x20\n        /* \"#utility.yul\":14003:14006   */\n      dup3\n        /* \"#utility.yul\":13999:14013   */\n      add\n        /* \"#utility.yul\":13991:14013   */\n      swap1\n      pop\n        /* \"#utility.yul\":13888:14020   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14026:14140   */\n    tag_235:\n        /* \"#utility.yul\":14093:14099   */\n      0x00\n        /* \"#utility.yul\":14127:14132   */\n      dup2\n        /* \"#utility.yul\":14121:14133   */\n      mload\n        /* \"#utility.yul\":14111:14133   */\n      swap1\n      pop\n        /* \"#utility.yul\":14026:14140   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14146:14259   */\n    tag_245:\n        /* \"#utility.yul\":14216:14220   */\n      0x00\n        /* \"#utility.yul\":14248:14252   */\n      0x20\n        /* \"#utility.yul\":14243:14246   */\n      dup3\n        /* \"#utility.yul\":14239:14253   */\n      add\n        /* \"#utility.yul\":14231:14253   */\n      swap1\n      pop\n        /* \"#utility.yul\":14146:14259   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14265:14449   */\n    tag_237:\n        /* \"#utility.yul\":14364:14375   */\n      0x00\n        /* \"#utility.yul\":14398:14404   */\n      dup3\n        /* \"#utility.yul\":14393:14396   */\n      dup3\n        /* \"#utility.yul\":14386:14405   */\n      mstore\n        /* \"#utility.yul\":14438:14442   */\n      0x20\n        /* \"#utility.yul\":14433:14436   */\n      dup3\n        /* \"#utility.yul\":14429:14443   */\n      add\n        /* \"#utility.yul\":14414:14443   */\n      swap1\n      pop\n        /* \"#utility.yul\":14265:14449   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14455:14624   */\n    tag_261:\n        /* \"#utility.yul\":14539:14550   */\n      0x00\n        /* \"#utility.yul\":14573:14579   */\n      dup3\n        /* \"#utility.yul\":14568:14571   */\n      dup3\n        /* \"#utility.yul\":14561:14580   */\n      mstore\n        /* \"#utility.yul\":14613:14617   */\n      0x20\n        /* \"#utility.yul\":14608:14611   */\n      dup3\n        /* \"#utility.yul\":14604:14618   */\n      add\n        /* \"#utility.yul\":14589:14618   */\n      swap1\n      pop\n        /* \"#utility.yul\":14455:14624   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14630:14815   */\n    tag_108:\n        /* \"#utility.yul\":14670:14671   */\n      0x00\n        /* \"#utility.yul\":14687:14707   */\n      tag_342\n        /* \"#utility.yul\":14705:14706   */\n      dup3\n        /* \"#utility.yul\":14687:14707   */\n      tag_286\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":14682:14707   */\n      swap2\n      pop\n        /* \"#utility.yul\":14721:14741   */\n      tag_343\n        /* \"#utility.yul\":14739:14740   */\n      dup4\n        /* \"#utility.yul\":14721:14741   */\n      tag_286\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":14716:14741   */\n      swap3\n      pop\n        /* \"#utility.yul\":14760:14761   */\n      dup3\n        /* \"#utility.yul\":14750:14785   */\n      tag_344\n      jumpi\n        /* \"#utility.yul\":14765:14783   */\n      tag_345\n      tag_346\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":14750:14785   */\n    tag_344:\n        /* \"#utility.yul\":14807:14808   */\n      dup3\n        /* \"#utility.yul\":14804:14805   */\n      dup3\n        /* \"#utility.yul\":14800:14809   */\n      div\n        /* \"#utility.yul\":14795:14809   */\n      swap1\n      pop\n        /* \"#utility.yul\":14630:14815   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14821:15012   */\n    tag_106:\n        /* \"#utility.yul\":14861:14865   */\n      0x00\n        /* \"#utility.yul\":14881:14901   */\n      tag_348\n        /* \"#utility.yul\":14899:14900   */\n      dup3\n        /* \"#utility.yul\":14881:14901   */\n      tag_286\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":14876:14901   */\n      swap2\n      pop\n        /* \"#utility.yul\":14915:14935   */\n      tag_349\n        /* \"#utility.yul\":14933:14934   */\n      dup4\n        /* \"#utility.yul\":14915:14935   */\n      tag_286\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":14910:14935   */\n      swap3\n      pop\n        /* \"#utility.yul\":14954:14955   */\n      dup3\n        /* \"#utility.yul\":14951:14952   */\n      dup3\n        /* \"#utility.yul\":14948:14956   */\n      lt\n        /* \"#utility.yul\":14945:14979   */\n      iszero\n      tag_350\n      jumpi\n        /* \"#utility.yul\":14959:14977   */\n      tag_351\n      tag_352\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":14945:14979   */\n    tag_350:\n        /* \"#utility.yul\":15004:15005   */\n      dup3\n        /* \"#utility.yul\":15001:15002   */\n      dup3\n        /* \"#utility.yul\":14997:15006   */\n      sub\n        /* \"#utility.yul\":14989:15006   */\n      swap1\n      pop\n        /* \"#utility.yul\":14821:15012   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15018:15114   */\n    tag_231:\n        /* \"#utility.yul\":15055:15062   */\n      0x00\n        /* \"#utility.yul\":15084:15108   */\n      tag_354\n        /* \"#utility.yul\":15102:15107   */\n      dup3\n        /* \"#utility.yul\":15084:15108   */\n      tag_355\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":15073:15108   */\n      swap1\n      pop\n        /* \"#utility.yul\":15018:15114   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15120:15210   */\n    tag_249:\n        /* \"#utility.yul\":15154:15161   */\n      0x00\n        /* \"#utility.yul\":15197:15202   */\n      dup2\n        /* \"#utility.yul\":15190:15203   */\n      iszero\n        /* \"#utility.yul\":15183:15204   */\n      iszero\n        /* \"#utility.yul\":15172:15204   */\n      swap1\n      pop\n        /* \"#utility.yul\":15120:15210   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15216:15342   */\n    tag_355:\n        /* \"#utility.yul\":15253:15260   */\n      0x00\n        /* \"#utility.yul\":15293:15335   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":15286:15291   */\n      dup3\n        /* \"#utility.yul\":15282:15336   */\n      and\n        /* \"#utility.yul\":15271:15336   */\n      swap1\n      pop\n        /* \"#utility.yul\":15216:15342   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15348:15425   */\n    tag_286:\n        /* \"#utility.yul\":15385:15392   */\n      0x00\n        /* \"#utility.yul\":15414:15419   */\n      dup2\n        /* \"#utility.yul\":15403:15419   */\n      swap1\n      pop\n        /* \"#utility.yul\":15348:15425   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15431:15571   */\n    tag_253:\n        /* \"#utility.yul\":15495:15504   */\n      0x00\n        /* \"#utility.yul\":15528:15565   */\n      tag_360\n        /* \"#utility.yul\":15559:15564   */\n      dup3\n        /* \"#utility.yul\":15528:15565   */\n      tag_361\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":15515:15565   */\n      swap1\n      pop\n        /* \"#utility.yul\":15431:15571   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15577:15718   */\n    tag_257:\n        /* \"#utility.yul\":15642:15651   */\n      0x00\n        /* \"#utility.yul\":15675:15712   */\n      tag_363\n        /* \"#utility.yul\":15706:15711   */\n      dup3\n        /* \"#utility.yul\":15675:15712   */\n      tag_361\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":15662:15712   */\n      swap1\n      pop\n        /* \"#utility.yul\":15577:15718   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15724:15850   */\n    tag_361:\n        /* \"#utility.yul\":15774:15783   */\n      0x00\n        /* \"#utility.yul\":15807:15844   */\n      tag_365\n        /* \"#utility.yul\":15838:15843   */\n      dup3\n        /* \"#utility.yul\":15807:15844   */\n      tag_366\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":15794:15844   */\n      swap1\n      pop\n        /* \"#utility.yul\":15724:15850   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15856:15969   */\n    tag_366:\n        /* \"#utility.yul\":15906:15915   */\n      0x00\n        /* \"#utility.yul\":15939:15963   */\n      tag_368\n        /* \"#utility.yul\":15957:15962   */\n      dup3\n        /* \"#utility.yul\":15939:15963   */\n      tag_355\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":15926:15963   */\n      swap1\n      pop\n        /* \"#utility.yul\":15856:15969   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15975:16208   */\n    tag_95:\n        /* \"#utility.yul\":16014:16017   */\n      0x00\n        /* \"#utility.yul\":16037:16061   */\n      tag_370\n        /* \"#utility.yul\":16055:16060   */\n      dup3\n        /* \"#utility.yul\":16037:16061   */\n      tag_286\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":16028:16061   */\n      swap2\n      pop\n        /* \"#utility.yul\":16083:16149   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":16076:16081   */\n      dup3\n        /* \"#utility.yul\":16073:16150   */\n      eq\n        /* \"#utility.yul\":16070:16173   */\n      iszero\n      tag_371\n      jumpi\n        /* \"#utility.yul\":16153:16171   */\n      tag_372\n      tag_352\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":16070:16173   */\n    tag_371:\n        /* \"#utility.yul\":16200:16201   */\n      0x01\n        /* \"#utility.yul\":16193:16198   */\n      dup3\n        /* \"#utility.yul\":16189:16202   */\n      add\n        /* \"#utility.yul\":16182:16202   */\n      swap1\n      pop\n        /* \"#utility.yul\":15975:16208   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16214:16394   */\n    tag_352:\n        /* \"#utility.yul\":16262:16339   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":16259:16260   */\n      0x00\n        /* \"#utility.yul\":16252:16340   */\n      mstore\n        /* \"#utility.yul\":16359:16363   */\n      0x11\n        /* \"#utility.yul\":16356:16357   */\n      0x04\n        /* \"#utility.yul\":16349:16364   */\n      mstore\n        /* \"#utility.yul\":16383:16387   */\n      0x24\n        /* \"#utility.yul\":16380:16381   */\n      0x00\n        /* \"#utility.yul\":16373:16388   */\n      revert\n        /* \"#utility.yul\":16400:16580   */\n    tag_346:\n        /* \"#utility.yul\":16448:16525   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":16445:16446   */\n      0x00\n        /* \"#utility.yul\":16438:16526   */\n      mstore\n        /* \"#utility.yul\":16545:16549   */\n      0x12\n        /* \"#utility.yul\":16542:16543   */\n      0x04\n        /* \"#utility.yul\":16535:16550   */\n      mstore\n        /* \"#utility.yul\":16569:16573   */\n      0x24\n        /* \"#utility.yul\":16566:16567   */\n      0x00\n        /* \"#utility.yul\":16559:16574   */\n      revert\n        /* \"#utility.yul\":16586:16766   */\n    tag_150:\n        /* \"#utility.yul\":16634:16711   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":16631:16632   */\n      0x00\n        /* \"#utility.yul\":16624:16712   */\n      mstore\n        /* \"#utility.yul\":16731:16735   */\n      0x32\n        /* \"#utility.yul\":16728:16729   */\n      0x04\n        /* \"#utility.yul\":16721:16736   */\n      mstore\n        /* \"#utility.yul\":16755:16759   */\n      0x24\n        /* \"#utility.yul\":16752:16753   */\n      0x00\n        /* \"#utility.yul\":16745:16760   */\n      revert\n        /* \"#utility.yul\":16895:17012   */\n    tag_189:\n        /* \"#utility.yul\":17004:17005   */\n      0x00\n        /* \"#utility.yul\":17001:17002   */\n      dup1\n        /* \"#utility.yul\":16994:17006   */\n      revert\n        /* \"#utility.yul\":17018:17198   */\n    tag_263:\n        /* \"#utility.yul\":17158:17190   */\n      0x43616e2774207374616b65206e667420796f7520646f6e2774206f776e210000\n        /* \"#utility.yul\":17154:17155   */\n      0x00\n        /* \"#utility.yul\":17146:17152   */\n      dup3\n        /* \"#utility.yul\":17142:17156   */\n      add\n        /* \"#utility.yul\":17135:17191   */\n      mstore\n        /* \"#utility.yul\":17018:17198   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17204:17429   */\n    tag_268:\n        /* \"#utility.yul\":17344:17378   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":17340:17341   */\n      0x00\n        /* \"#utility.yul\":17332:17338   */\n      dup3\n        /* \"#utility.yul\":17328:17342   */\n      add\n        /* \"#utility.yul\":17321:17379   */\n      mstore\n        /* \"#utility.yul\":17413:17421   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":17408:17410   */\n      0x20\n        /* \"#utility.yul\":17400:17406   */\n      dup3\n        /* \"#utility.yul\":17396:17411   */\n      add\n        /* \"#utility.yul\":17389:17422   */\n      mstore\n        /* \"#utility.yul\":17204:17429   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17435:17615   */\n    tag_273:\n        /* \"#utility.yul\":17575:17607   */\n      0x5374616b696e6720706f6f6c206e6f7420656e64656420796574212121210000\n        /* \"#utility.yul\":17571:17572   */\n      0x00\n        /* \"#utility.yul\":17563:17569   */\n      dup3\n        /* \"#utility.yul\":17559:17573   */\n      add\n        /* \"#utility.yul\":17552:17608   */\n      mstore\n        /* \"#utility.yul\":17435:17615   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17621:17803   */\n    tag_278:\n        /* \"#utility.yul\":17761:17795   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":17757:17758   */\n      0x00\n        /* \"#utility.yul\":17749:17755   */\n      dup3\n        /* \"#utility.yul\":17745:17759   */\n      add\n        /* \"#utility.yul\":17738:17796   */\n      mstore\n        /* \"#utility.yul\":17621:17803   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17809:18033   */\n    tag_283:\n        /* \"#utility.yul\":17949:17983   */\n      0x596f7520617265206e6f74206f776e6572206f662074686973204e4654207374\n        /* \"#utility.yul\":17945:17946   */\n      0x00\n        /* \"#utility.yul\":17937:17943   */\n      dup3\n        /* \"#utility.yul\":17933:17947   */\n      add\n        /* \"#utility.yul\":17926:17984   */\n      mstore\n        /* \"#utility.yul\":18018:18025   */\n      0x616b696e67000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":18013:18015   */\n      0x20\n        /* \"#utility.yul\":18005:18011   */\n      dup3\n        /* \"#utility.yul\":18001:18016   */\n      add\n        /* \"#utility.yul\":17994:18026   */\n      mstore\n        /* \"#utility.yul\":17809:18033   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18039:18161   */\n    tag_174:\n        /* \"#utility.yul\":18112:18136   */\n      tag_385\n        /* \"#utility.yul\":18130:18135   */\n      dup2\n        /* \"#utility.yul\":18112:18136   */\n      tag_231\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":18105:18110   */\n      dup2\n        /* \"#utility.yul\":18102:18137   */\n      eq\n        /* \"#utility.yul\":18092:18155   */\n      tag_386\n      jumpi\n        /* \"#utility.yul\":18151:18152   */\n      0x00\n        /* \"#utility.yul\":18148:18149   */\n      dup1\n        /* \"#utility.yul\":18141:18153   */\n      revert\n        /* \"#utility.yul\":18092:18155   */\n    tag_386:\n        /* \"#utility.yul\":18039:18161   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18167:18283   */\n    tag_181:\n        /* \"#utility.yul\":18237:18258   */\n      tag_388\n        /* \"#utility.yul\":18252:18257   */\n      dup2\n        /* \"#utility.yul\":18237:18258   */\n      tag_249\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":18230:18235   */\n      dup2\n        /* \"#utility.yul\":18227:18259   */\n      eq\n        /* \"#utility.yul\":18217:18277   */\n      tag_389\n      jumpi\n        /* \"#utility.yul\":18273:18274   */\n      0x00\n        /* \"#utility.yul\":18270:18271   */\n      dup1\n        /* \"#utility.yul\":18263:18275   */\n      revert\n        /* \"#utility.yul\":18217:18277   */\n    tag_389:\n        /* \"#utility.yul\":18167:18283   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":18289:18411   */\n    tag_185:\n        /* \"#utility.yul\":18362:18386   */\n      tag_391\n        /* \"#utility.yul\":18380:18385   */\n      dup2\n        /* \"#utility.yul\":18362:18386   */\n      tag_286\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":18355:18360   */\n      dup2\n        /* \"#utility.yul\":18352:18387   */\n      eq\n        /* \"#utility.yul\":18342:18405   */\n      tag_392\n      jumpi\n        /* \"#utility.yul\":18401:18402   */\n      0x00\n        /* \"#utility.yul\":18398:18399   */\n      dup1\n        /* \"#utility.yul\":18391:18403   */\n      revert\n        /* \"#utility.yul\":18342:18405   */\n    tag_392:\n        /* \"#utility.yul\":18289:18411   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122040a376c459bbff7b1f5c029d21f10b3f8c64abc65e7e87ca96ab02cb826f20bd64736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1113": {
									"entryPoint": null,
									"id": 1113,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_131": {
									"entryPoint": null,
									"id": 131,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1019": {
									"entryPoint": 237,
									"id": 1019,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 245,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 441,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address_fromMemory": {
									"entryPoint": 464,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 535,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 555,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 587,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 592,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1355:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "70:80:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "80:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "89:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "89:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "80:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "138:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "111:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "111:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "111:33:10"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "48:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "56:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:10",
														"type": ""
													}
												],
												"src": "7:143:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "250:413:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "296:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "298:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "298:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "298:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "271:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "280:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "267:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "267:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "292:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "263:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "263:32:10"
															},
															"nodeType": "YulIf",
															"src": "260:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "389:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "404:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "418:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "408:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "433:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "479:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "490:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "475:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "475:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "499:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "443:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "443:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "433:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "527:129:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "542:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "556:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "546:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "572:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "618:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "629:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "614:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "614:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "638:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "582:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "582:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "572:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "212:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "223:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "235:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "243:6:10",
														"type": ""
													}
												],
												"src": "156:507:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "709:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "719:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "735:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "729:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "729:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "719:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "702:6:10",
														"type": ""
													}
												],
												"src": "669:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "795:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "805:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "834:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "816:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "816:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "805:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "777:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "787:7:10",
														"type": ""
													}
												],
												"src": "750:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "897:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "907:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "922:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "929:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "918:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "918:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "907:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "879:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "889:7:10",
														"type": ""
													}
												],
												"src": "852:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1073:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1093:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1083:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1083:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1083:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "984:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1196:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1213:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1216:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1206:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1206:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1206:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1107:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1273:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1330:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1339:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1342:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1332:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1332:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1332:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1296:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1321:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1303:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1303:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1293:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1293:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1286:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1286:43:10"
															},
															"nodeType": "YulIf",
															"src": "1283:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1266:5:10",
														"type": ""
													}
												],
												"src": "1230:122:10"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405260006004553480156200001657600080fd5b5060405162001a8938038062001a8983398181016040528101906200003c9190620001d0565b6200005c62000050620000ed60201b60201c565b620000f560201b60201c565b6001808190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200026a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001ca8162000250565b92915050565b60008060408385031215620001ea57620001e96200024b565b5b6000620001fa85828601620001b9565b92505060206200020d85828601620001b9565b9150509250929050565b600062000224826200022b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200025b8162000217565b81146200026757600080fd5b50565b61180f806200027a6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806378dba5941161008c578063d5a44f8611610066578063d5a44f8614610200578063f2fde38b14610234578063f7c618c114610250578063fbaca0861461026e576100cf565b806378dba5941461019657806379e5f7d7146101b25780638da5cb5b146101e2576100cf565b80632986c0e5146100d45780633af416d1146100f25780633f1069291461012257806351cecc8014610152578063715018a61461016e57806378b2e3a914610178575b600080fd5b6100dc61029e565b6040516100e99190611377565b60405180910390f35b61010c60048036038101906101079190610efd565b6102a4565b6040516101199190611377565b60405180910390f35b61013c60048036038101906101379190610efd565b6102d5565b6040516101499190611377565b60405180910390f35b61016c60048036038101906101679190610fd7565b610306565b005b61017661064b565b005b61018061065f565b60405161018d91906112bc565b60405180910390f35b6101b060048036038101906101ab9190611017565b610685565b005b6101cc60048036038101906101c79190610ea3565b610a1b565b6040516101d99190611264565b60405180910390f35b6101ea610ab8565b6040516101f791906111e9565b60405180910390f35b61021a60048036038101906102159190610f6a565b610ae1565b60405161022b959493929190611392565b60405180910390f35b61024e60048036038101906102499190610ea3565b610b37565b005b610258610bbb565b60405161026591906112a1565b60405180910390f35b61028860048036038101906102839190610f97565b610be1565b6040516102959190611286565b60405180910390f35b60045481565b600860205281600052604060002081815481106102c057600080fd5b90600052602060002001600091509150505481565b600760205281600052604060002081815481106102f157600080fd5b90600052602060002001600091509150505481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016103789190611377565b60206040518083038186803b15801561039057600080fd5b505afa1580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190610ed0565b73ffffffffffffffffffffffffffffffffffffffff161461041e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610415906112d7565b60405180910390fd5b6040518060a0016040528060045481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001428152506006600060045481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040155905050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004549080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105ab93929190611204565b600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b50505050600460008154809291906105f0906115a0565b91905055503373ffffffffffffffffffffffffffffffffffffffff167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c44683834260405161063f939291906113e5565b60405180910390a25050565b610653610cbf565b61065d6000610d3d565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806018603c806006600088815260200190815260200160002060040154426106ad91906114dc565b6106b791906114ab565b6106c191906114ab565b6106cb91906114ab565b101561070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070390611317565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790611357565b60405180910390fd5b600660008481526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090555050600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016108d293929190611204565b600060405180830381600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b50505050600061090f82610e01565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161096e92919061123b565b602060405180830381600087803b15801561098857600080fd5b505af115801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c09190610f3d565b503373ffffffffffffffffffffffffffffffffffffffff167ff74c9f1985016ff6aa83c3fd81e31d0be3b194f205ae5e1b57f5bd74ad28e4cf84844285604051610a0d949392919061141c565b60405180910390a250505050565b60606000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610aa857602002820191906000526020600020905b815481526020019060010190808311610a94575b5050505050905080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b610b3f610cbf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba6906112f7565b60405180910390fd5b610bb881610d3d565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610cb35783600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610c8557610c84611647565b5b90600052602060002001541415610ca0576001915050610cb9565b8080610cab906115a0565b915050610be9565b50600090505b92915050565b610cc7610e47565b73ffffffffffffffffffffffffffffffffffffffff16610ce5610ab8565b73ffffffffffffffffffffffffffffffffffffffff1614610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3290611337565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006007821415610e16576103e89050610e42565b600e821415610e2957610bb89050610e42565b601e821415610e3c576113889050610e42565b61271090505b919050565b600033905090565b600081359050610e5e81611794565b92915050565b600081519050610e7381611794565b92915050565b600081519050610e88816117ab565b92915050565b600081359050610e9d816117c2565b92915050565b600060208284031215610eb957610eb8611676565b5b6000610ec784828501610e4f565b91505092915050565b600060208284031215610ee657610ee5611676565b5b6000610ef484828501610e64565b91505092915050565b60008060408385031215610f1457610f13611676565b5b6000610f2285828601610e4f565b9250506020610f3385828601610e8e565b9150509250929050565b600060208284031215610f5357610f52611676565b5b6000610f6184828501610e79565b91505092915050565b600060208284031215610f8057610f7f611676565b5b6000610f8e84828501610e8e565b91505092915050565b60008060408385031215610fae57610fad611676565b5b6000610fbc85828601610e8e565b9250506020610fcd85828601610e4f565b9150509250929050565b60008060408385031215610fee57610fed611676565b5b6000610ffc85828601610e8e565b925050602061100d85828601610e8e565b9150509250929050565b6000806000606084860312156110305761102f611676565b5b600061103e86828701610e8e565b935050602061104f86828701610e8e565b925050604061106086828701610e8e565b9150509250925092565b600061107683836111cb565b60208301905092915050565b61108b81611510565b82525050565b600061109c82611471565b6110a68185611489565b93506110b183611461565b8060005b838110156110e25781516110c9888261106a565b97506110d48361147c565b9250506001810190506110b5565b5085935050505092915050565b6110f881611522565b82525050565b61110781611558565b82525050565b6111168161156a565b82525050565b6000611129601e8361149a565b91506111348261167b565b602082019050919050565b600061114c60268361149a565b9150611157826116a4565b604082019050919050565b600061116f601e8361149a565b915061117a826116f3565b602082019050919050565b600061119260208361149a565b915061119d8261171c565b602082019050919050565b60006111b560258361149a565b91506111c082611745565b604082019050919050565b6111d48161154e565b82525050565b6111e38161154e565b82525050565b60006020820190506111fe6000830184611082565b92915050565b60006060820190506112196000830186611082565b6112266020830185611082565b61123360408301846111da565b949350505050565b60006040820190506112506000830185611082565b61125d60208301846111da565b9392505050565b6000602082019050818103600083015261127e8184611091565b905092915050565b600060208201905061129b60008301846110ef565b92915050565b60006020820190506112b660008301846110fe565b92915050565b60006020820190506112d1600083018461110d565b92915050565b600060208201905081810360008301526112f08161111c565b9050919050565b600060208201905081810360008301526113108161113f565b9050919050565b6000602082019050818103600083015261133081611162565b9050919050565b6000602082019050818103600083015261135081611185565b9050919050565b60006020820190508181036000830152611370816111a8565b9050919050565b600060208201905061138c60008301846111da565b92915050565b600060a0820190506113a760008301886111da565b6113b46020830187611082565b6113c160408301866111da565b6113ce60608301856111da565b6113db60808301846111da565b9695505050505050565b60006060820190506113fa60008301866111da565b61140760208301856111da565b61141460408301846111da565b949350505050565b600060808201905061143160008301876111da565b61143e60208301866111da565b61144b60408301856111da565b61145860608301846111da565b95945050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006114b68261154e565b91506114c18361154e565b9250826114d1576114d0611618565b5b828204905092915050565b60006114e78261154e565b91506114f28361154e565b925082821015611505576115046115e9565b5b828203905092915050565b600061151b8261152e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115638261157c565b9050919050565b60006115758261157c565b9050919050565b60006115878261158e565b9050919050565b60006115998261152e565b9050919050565b60006115ab8261154e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115de576115dd6115e9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f43616e2774207374616b65206e667420796f7520646f6e2774206f776e210000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e6720706f6f6c206e6f7420656e64656420796574212121210000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f596f7520617265206e6f74206f776e6572206f662074686973204e465420737460008201527f616b696e67000000000000000000000000000000000000000000000000000000602082015250565b61179d81611510565b81146117a857600080fd5b50565b6117b481611522565b81146117bf57600080fd5b50565b6117cb8161154e565b81146117d657600080fd5b5056fea264697066735822122040a376c459bbff7b1f5c029d21f10b3f8c64abc65e7e87ca96ab02cb826f20bd64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x4 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A89 CODESIZE SUB DUP1 PUSH3 0x1A89 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x3C SWAP2 SWAP1 PUSH3 0x1D0 JUMP JUMPDEST PUSH3 0x5C PUSH3 0x50 PUSH3 0xED PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xF5 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP PUSH3 0x26A JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1CA DUP2 PUSH3 0x250 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EA JUMPI PUSH3 0x1E9 PUSH3 0x24B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1FA DUP6 DUP3 DUP7 ADD PUSH3 0x1B9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x20D DUP6 DUP3 DUP7 ADD PUSH3 0x1B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x224 DUP3 PUSH3 0x22B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x25B DUP2 PUSH3 0x217 JUMP JUMPDEST DUP2 EQ PUSH3 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x180F DUP1 PUSH3 0x27A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78DBA594 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD5A44F86 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD5A44F86 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xFBACA086 EQ PUSH2 0x26E JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x78DBA594 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x79E5F7D7 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E2 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x2986C0E5 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x3AF416D1 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x3F106929 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x51CECC80 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x78B2E3A9 EQ PUSH2 0x178 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x176 PUSH2 0x64B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x180 PUSH2 0x65F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x12BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AB SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x685 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0xEA3 JUMP JUMPDEST PUSH2 0xA1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D9 SWAP2 SWAP1 PUSH2 0x1264 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EA PUSH2 0xAB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x11E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x215 SWAP2 SWAP1 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0xEA3 JUMP JUMPDEST PUSH2 0xB37 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0xBBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x12A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0xBE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x1286 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x378 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C8 SWAP2 SWAP1 PUSH2 0xED0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x41E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x415 SWAP1 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE SWAP1 POP POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 SLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x4 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x5F0 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF556991011E831BCFAC4F406D547E5E32CDD98267EFAB83935230D5F8D02C446 DUP4 DUP4 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x63F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x653 PUSH2 0xCBF JUMP JUMPDEST PUSH2 0x65D PUSH1 0x0 PUSH2 0xD3D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 PUSH1 0x18 PUSH1 0x3C DUP1 PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD TIMESTAMP PUSH2 0x6AD SWAP2 SWAP1 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0x6B7 SWAP2 SWAP1 PUSH2 0x14AB JUMP JUMPDEST PUSH2 0x6C1 SWAP2 SWAP1 PUSH2 0x14AB JUMP JUMPDEST PUSH2 0x6CB SWAP2 SWAP1 PUSH2 0x14AB JUMP JUMPDEST LT ISZERO PUSH2 0x70C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x703 SWAP1 PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7B0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A7 SWAP1 PUSH2 0x1357 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS CALLER DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x900 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x90F DUP3 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96E SWAP3 SWAP2 SWAP1 PUSH2 0x123B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x99C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C0 SWAP2 SWAP1 PUSH2 0xF3D JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF74C9F1985016FF6AA83C3FD81E31D0BE3B194F205AE5E1B57F5BD74AD28E4CF DUP5 DUP5 TIMESTAMP DUP6 PUSH1 0x40 MLOAD PUSH2 0xA0D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xA94 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH2 0xB3F PUSH2 0xCBF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA6 SWAP1 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBB8 DUP2 PUSH2 0xD3D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0xCB3 JUMPI DUP4 PUSH1 0x8 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xC85 JUMPI PUSH2 0xC84 PUSH2 0x1647 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD EQ ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xCB9 JUMP JUMPDEST DUP1 DUP1 PUSH2 0xCAB SWAP1 PUSH2 0x15A0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBE9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCC7 PUSH2 0xE47 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCE5 PUSH2 0xAB8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD32 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 EQ ISZERO PUSH2 0xE16 JUMPI PUSH2 0x3E8 SWAP1 POP PUSH2 0xE42 JUMP JUMPDEST PUSH1 0xE DUP3 EQ ISZERO PUSH2 0xE29 JUMPI PUSH2 0xBB8 SWAP1 POP PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x1E DUP3 EQ ISZERO PUSH2 0xE3C JUMPI PUSH2 0x1388 SWAP1 POP PUSH2 0xE42 JUMP JUMPDEST PUSH2 0x2710 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE5E DUP2 PUSH2 0x1794 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xE73 DUP2 PUSH2 0x1794 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xE88 DUP2 PUSH2 0x17AB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE9D DUP2 PUSH2 0x17C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB9 JUMPI PUSH2 0xEB8 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEC7 DUP5 DUP3 DUP6 ADD PUSH2 0xE4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE5 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEF4 DUP5 DUP3 DUP6 ADD PUSH2 0xE64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF14 JUMPI PUSH2 0xF13 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF22 DUP6 DUP3 DUP7 ADD PUSH2 0xE4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF33 DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF53 JUMPI PUSH2 0xF52 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF61 DUP5 DUP3 DUP6 ADD PUSH2 0xE79 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF80 JUMPI PUSH2 0xF7F PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF8E DUP5 DUP3 DUP6 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFAE JUMPI PUSH2 0xFAD PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFBC DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xFCD DUP6 DUP3 DUP7 ADD PUSH2 0xE4F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFEE JUMPI PUSH2 0xFED PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFFC DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x100D DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1030 JUMPI PUSH2 0x102F PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x103E DUP7 DUP3 DUP8 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x104F DUP7 DUP3 DUP8 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1060 DUP7 DUP3 DUP8 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1076 DUP4 DUP4 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x108B DUP2 PUSH2 0x1510 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109C DUP3 PUSH2 0x1471 JUMP JUMPDEST PUSH2 0x10A6 DUP2 DUP6 PUSH2 0x1489 JUMP JUMPDEST SWAP4 POP PUSH2 0x10B1 DUP4 PUSH2 0x1461 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10E2 JUMPI DUP2 MLOAD PUSH2 0x10C9 DUP9 DUP3 PUSH2 0x106A JUMP JUMPDEST SWAP8 POP PUSH2 0x10D4 DUP4 PUSH2 0x147C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x10B5 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10F8 DUP2 PUSH2 0x1522 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1107 DUP2 PUSH2 0x1558 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1116 DUP2 PUSH2 0x156A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1129 PUSH1 0x1E DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x1134 DUP3 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114C PUSH1 0x26 DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x1157 DUP3 PUSH2 0x16A4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x116F PUSH1 0x1E DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x117A DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1192 PUSH1 0x20 DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x119D DUP3 PUSH2 0x171C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B5 PUSH1 0x25 DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x11C0 DUP3 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x154E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x11E3 DUP2 PUSH2 0x154E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11FE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1082 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1219 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x1226 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x1233 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1250 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x125D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x127E DUP2 DUP5 PUSH2 0x1091 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x129B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10FE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x110D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F0 DUP2 PUSH2 0x111C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1310 DUP2 PUSH2 0x113F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1330 DUP2 PUSH2 0x1162 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1350 DUP2 PUSH2 0x1185 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1370 DUP2 PUSH2 0x11A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x138C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x13A7 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x13B4 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x13C1 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x13CE PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x13DB PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x13FA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x1407 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x1414 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1431 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x143E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x144B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x1458 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B6 DUP3 PUSH2 0x154E JUMP JUMPDEST SWAP2 POP PUSH2 0x14C1 DUP4 PUSH2 0x154E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x14D1 JUMPI PUSH2 0x14D0 PUSH2 0x1618 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14E7 DUP3 PUSH2 0x154E JUMP JUMPDEST SWAP2 POP PUSH2 0x14F2 DUP4 PUSH2 0x154E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1505 JUMPI PUSH2 0x1504 PUSH2 0x15E9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151B DUP3 PUSH2 0x152E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1563 DUP3 PUSH2 0x157C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1575 DUP3 PUSH2 0x157C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1587 DUP3 PUSH2 0x158E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1599 DUP3 PUSH2 0x152E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15AB DUP3 PUSH2 0x154E JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x15DE JUMPI PUSH2 0x15DD PUSH2 0x15E9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x43616E2774207374616B65206E667420796F7520646F6E2774206F776E210000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5374616B696E6720706F6F6C206E6F7420656E64656420796574212121210000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F74206F776E6572206F662074686973204E4654207374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616B696E67000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x179D DUP2 PUSH2 0x1510 JUMP JUMPDEST DUP2 EQ PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x17B4 DUP2 PUSH2 0x1522 JUMP JUMPDEST DUP2 EQ PUSH2 0x17BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x17CB DUP2 PUSH2 0x154E JUMP JUMPDEST DUP2 EQ PUSH2 0x17D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH LOG3 PUSH23 0xC459BBFF7B1F5C029D21F10B3F8C64ABC65E7E87CA96AB MUL 0xCB DUP3 PUSH16 0x20BD64736F6C63430008070033000000 ",
							"sourceMap": "415:3461:9:-:0;;;632:1;609:24;;1017:157;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1716:1:1;1821:7;:22;;;;1105:12:9;1084:11;;:34;;;;;;;;;;;;;;;;;;1152:14;1128:13;;:39;;;;;;;;;;;;;;;;;;1017:157;;415:3461;;640:96:7;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;7:143:10:-;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:507::-;235:6;243;292:2;280:9;271:7;267:23;263:32;260:119;;;298:79;;:::i;:::-;260:119;418:1;443:64;499:7;490:6;479:9;475:22;443:64;:::i;:::-;433:74;;389:128;556:2;582:64;638:7;629:6;618:9;614:22;582:64;:::i;:::-;572:74;;527:129;156:507;;;;;:::o;750:96::-;787:7;816:24;834:5;816:24;:::i;:::-;805:35;;750:96;;;:::o;852:126::-;889:7;929:42;922:5;918:54;907:65;;852:126;;;:::o;1107:117::-;1216:1;1213;1206:12;1230:122;1303:24;1321:5;1303:24;:::i;:::-;1296:5;1293:35;1283:63;;1342:1;1339;1332:12;1283:63;1230:122;:::o;415:3461:9:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@NFTCollection_1055": {
									"entryPoint": 1631,
									"id": 1055,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 3263,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1019": {
									"entryPoint": 3655,
									"id": 1019,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 3389,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@calculateRewardPool_1168": {
									"entryPoint": 3585,
									"id": 1168,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@checkIfAlreadyUnstaked_1385": {
									"entryPoint": 3041,
									"id": 1385,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@index_1061": {
									"entryPoint": 670,
									"id": 1061,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_40": {
									"entryPoint": 2744,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 1611,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rewardToken_1058": {
									"entryPoint": 3003,
									"id": 1058,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stakeNFT_1234": {
									"entryPoint": 774,
									"id": 1234,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakes_1083": {
									"entryPoint": 2785,
									"id": 1083,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@staking_details_1088": {
									"entryPoint": 725,
									"id": 1088,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_91": {
									"entryPoint": 2871,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@unStakeNFT_1325": {
									"entryPoint": 1669,
									"id": 1325,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@unstaking_details_1093": {
									"entryPoint": 676,
									"id": 1093,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@userStakingList_1346": {
									"entryPoint": 2587,
									"id": 1346,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 3663,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 3684,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 3705,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 3726,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3747,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 3792,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3837,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3901,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3946,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 3991,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 4055,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_uint256t_uint256": {
									"entryPoint": 4119,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
									"entryPoint": 4202,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 4226,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 4241,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 4335,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_IERC20_$244_to_t_address_fromStack": {
									"entryPoint": 4350,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_IERC721_$677_to_t_address_fromStack": {
									"entryPoint": 4365,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4380,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4415,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4450,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4485,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4520,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 4555,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 4570,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 4585,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 4612,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 4667,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 4708,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 4742,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$244__to_t_address__fromStack_reversed": {
									"entryPoint": 4769,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC721_$677__to_t_address__fromStack_reversed": {
									"entryPoint": 4796,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4823,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4855,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4887,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4919,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4951,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 4983,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_address_t_uint256_t_uint256_t_uint256__to_t_uint256_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 5010,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 5093,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 5148,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 5217,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 5233,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 5244,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 5257,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 5274,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5291,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5340,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 5392,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 5410,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 5422,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 5454,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC20_$244_to_t_address": {
									"entryPoint": 5464,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_IERC721_$677_to_t_address": {
									"entryPoint": 5482,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 5500,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 5518,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 5536,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5609,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 5656,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 5703,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 5750,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"store_literal_in_memory_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe": {
									"entryPoint": 5755,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 5796,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e": {
									"entryPoint": 5875,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 5916,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c": {
									"entryPoint": 5957,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 6036,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 6059,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6082,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:18414:10",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:10"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:10",
														"type": ""
													}
												],
												"src": "7:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "215:80:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "225:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "240:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "234:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "234:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "225:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "283:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "256:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "256:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "256:33:10"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "193:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "201:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "209:5:10",
														"type": ""
													}
												],
												"src": "152:143:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "361:77:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "371:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "386:6:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "380:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "380:13:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "371:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "426:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "402:23:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "402:30:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "402:30:10"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "339:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "347:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "355:5:10",
														"type": ""
													}
												],
												"src": "301:137:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "496:87:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "506:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "528:6:10"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "515:12:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "515:20:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "506:5:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "571:5:10"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "544:26:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "544:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "544:33:10"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "474:6:10",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "482:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "490:5:10",
														"type": ""
													}
												],
												"src": "444:139:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "655:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "701:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "703:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "703:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "703:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "676:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "685:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "672:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "672:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "697:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "668:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "668:32:10"
															},
															"nodeType": "YulIf",
															"src": "665:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "794:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "809:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "823:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "813:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "838:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "873:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "884:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "869:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "869:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "893:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "848:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "848:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "838:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "625:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "636:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "648:6:10",
														"type": ""
													}
												],
												"src": "589:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1001:274:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1047:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1049:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1049:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1049:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1022:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1031:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1018:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1018:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1043:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1014:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1014:32:10"
															},
															"nodeType": "YulIf",
															"src": "1011:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1140:128:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1155:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1169:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1159:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1184:74:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1230:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1241:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1226:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1226:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1250:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1194:31:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1194:64:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1184:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "971:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "982:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "994:6:10",
														"type": ""
													}
												],
												"src": "924:351:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1364:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1410:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1412:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1412:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1412:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1385:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1394:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1381:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1381:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1406:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1377:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1377:32:10"
															},
															"nodeType": "YulIf",
															"src": "1374:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1503:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1518:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1532:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1522:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1547:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1582:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1593:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1578:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1578:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1602:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1557:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1557:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1547:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1630:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1645:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1659:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1649:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1675:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1710:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1721:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1706:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1706:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1730:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1685:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1685:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1675:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1326:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1337:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1349:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1357:6:10",
														"type": ""
													}
												],
												"src": "1281:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1835:271:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1881:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1883:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1883:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1883:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1856:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1865:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1852:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1852:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1877:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1848:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "1848:32:10"
															},
															"nodeType": "YulIf",
															"src": "1845:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "1974:125:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1989:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2003:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1993:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2018:71:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2061:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2072:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2057:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2057:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2081:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "2028:28:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2028:61:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2018:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1805:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1816:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1828:6:10",
														"type": ""
													}
												],
												"src": "1761:345:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2178:263:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2224:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2226:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2226:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2226:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2199:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2208:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2195:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2195:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2220:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2191:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2191:32:10"
															},
															"nodeType": "YulIf",
															"src": "2188:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2317:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2332:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2346:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2336:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2361:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2396:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2407:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2392:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2392:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2416:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2371:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2371:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2361:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2148:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2159:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2171:6:10",
														"type": ""
													}
												],
												"src": "2112:329:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2530:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2576:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2578:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2578:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2578:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2551:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2560:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2547:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2547:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2572:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2543:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "2543:32:10"
															},
															"nodeType": "YulIf",
															"src": "2540:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "2669:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2684:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2698:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2688:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2713:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2748:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2759:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2744:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2744:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2768:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2723:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2723:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2713:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2796:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2811:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2825:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2815:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2841:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2876:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2887:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2872:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2872:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2896:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2851:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2851:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2841:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2492:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2503:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2515:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2523:6:10",
														"type": ""
													}
												],
												"src": "2447:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3010:391:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3056:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3058:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3058:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3058:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3031:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3040:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3027:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3027:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3052:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3023:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3023:32:10"
															},
															"nodeType": "YulIf",
															"src": "3020:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "3149:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3164:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3178:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3168:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3193:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3228:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3239:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3224:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3224:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3248:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3203:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3203:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3193:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3276:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3291:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3305:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3295:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3321:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3356:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3367:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3352:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3352:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3376:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3331:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3331:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3321:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2972:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2983:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2995:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3003:6:10",
														"type": ""
													}
												],
												"src": "2927:474:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3507:519:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3553:83:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3555:77:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3555:79:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3555:79:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3528:7:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3537:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3524:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3524:23:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3549:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3520:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "3520:32:10"
															},
															"nodeType": "YulIf",
															"src": "3517:119:10"
														},
														{
															"nodeType": "YulBlock",
															"src": "3646:117:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3661:15:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3675:1:10",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3665:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3690:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3725:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3736:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3721:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3721:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3745:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3700:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3700:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3690:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3773:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3788:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3802:2:10",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3792:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3818:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3853:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3864:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3849:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3849:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3873:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3828:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3828:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3818:6:10"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3901:118:10",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3916:16:10",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3930:2:10",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3920:6:10",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3946:63:10",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3981:9:10"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3992:6:10"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3977:3:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3977:22:10"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4001:7:10"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3956:20:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3956:53:10"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "3946:6:10"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3461:9:10",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3472:7:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3484:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3492:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3500:6:10",
														"type": ""
													}
												],
												"src": "3407:619:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4112:99:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4156:6:10"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4164:3:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4122:33:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4122:46:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4122:46:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4177:28:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4195:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4200:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4191:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4191:14:10"
															},
															"variableNames": [
																{
																	"name": "updatedPos",
																	"nodeType": "YulIdentifier",
																	"src": "4177:10:10"
																}
															]
														}
													]
												},
												"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4085:6:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4093:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updatedPos",
														"nodeType": "YulTypedName",
														"src": "4101:10:10",
														"type": ""
													}
												],
												"src": "4032:179:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4282:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4299:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4322:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4304:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4304:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4292:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4292:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4292:37:10"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4270:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4277:3:10",
														"type": ""
													}
												],
												"src": "4217:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4495:608:10",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4505:68:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4567:5:10"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "4519:47:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4519:54:10"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4509:6:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4582:93:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4663:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4668:6:10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4589:73:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4589:86:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "4582:3:10"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4684:71:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4749:5:10"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "4699:49:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4699:56:10"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nodeType": "YulTypedName",
																	"src": "4688:7:10",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4764:21:10",
															"value": {
																"name": "baseRef",
																"nodeType": "YulIdentifier",
																"src": "4778:7:10"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "4768:6:10",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4854:224:10",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4868:34:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "4895:6:10"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "4889:5:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4889:13:10"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nodeType": "YulTypedName",
																				"src": "4872:13:10",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "4915:70:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nodeType": "YulIdentifier",
																					"src": "4966:13:10"
																				},
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "4981:3:10"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "4922:43:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4922:63:10"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4915:3:10"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "4998:70:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "5061:6:10"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
																				"nodeType": "YulIdentifier",
																				"src": "5008:52:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5008:60:10"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4998:6:10"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4816:1:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4819:6:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4813:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "4813:13:10"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4827:18:10",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4829:14:10",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4838:1:10"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4841:1:10",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4834:3:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4834:9:10"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4829:1:10"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4798:14:10",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4800:10:10",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "4809:1:10",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nodeType": "YulTypedName",
																				"src": "4804:1:10",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "4794:284:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5087:10:10",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "5094:3:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5087:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4474:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4481:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4490:3:10",
														"type": ""
													}
												],
												"src": "4371:732:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5168:50:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5185:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5205:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "5190:14:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5190:21:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5178:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:34:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5178:34:10"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5156:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5163:3:10",
														"type": ""
													}
												],
												"src": "5109:109:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5303:80:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5320:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5370:5:10"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC20_$244_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5325:44:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5325:51:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5313:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5313:64:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5313:64:10"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC20_$244_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5291:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5298:3:10",
														"type": ""
													}
												],
												"src": "5224:159:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5469:81:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5486:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5537:5:10"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_IERC721_$677_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5491:45:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5491:52:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5479:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5479:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5479:65:10"
														}
													]
												},
												"name": "abi_encode_t_contract$_IERC721_$677_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5457:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5464:3:10",
														"type": ""
													}
												],
												"src": "5389:161:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5702:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5712:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5778:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5783:2:10",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5719:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5719:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5712:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5884:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe",
																	"nodeType": "YulIdentifier",
																	"src": "5795:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5795:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5795:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5897:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5908:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5913:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5904:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "5904:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5897:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5690:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5698:3:10",
														"type": ""
													}
												],
												"src": "5556:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6074:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6084:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6150:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6155:2:10",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6091:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6091:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6084:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6256:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "6167:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6167:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6167:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6269:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6280:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6285:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6276:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6276:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6269:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6062:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6070:3:10",
														"type": ""
													}
												],
												"src": "5928:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6446:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6456:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6522:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6527:2:10",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6463:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6463:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6456:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6628:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e",
																	"nodeType": "YulIdentifier",
																	"src": "6539:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6539:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6539:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6641:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6652:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6657:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6648:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6648:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6641:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6434:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6442:3:10",
														"type": ""
													}
												],
												"src": "6300:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6818:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6828:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6894:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6899:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6835:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6828:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7000:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "6911:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "6911:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6911:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7013:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7024:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7029:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7020:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7020:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7013:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6806:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6814:3:10",
														"type": ""
													}
												],
												"src": "6672:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7190:220:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7200:74:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7266:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7271:2:10",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7207:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7207:67:10"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7200:3:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7372:3:10"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c",
																	"nodeType": "YulIdentifier",
																	"src": "7283:88:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7283:93:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7283:93:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7385:19:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7396:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7401:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7392:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7392:12:10"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7385:3:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7178:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7186:3:10",
														"type": ""
													}
												],
												"src": "7044:366:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7471:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7488:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7511:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7493:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7493:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7481:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7481:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7481:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7459:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7466:3:10",
														"type": ""
													}
												],
												"src": "7416:108:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7595:53:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7612:3:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7635:5:10"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "7617:17:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7617:24:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7605:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7605:37:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7605:37:10"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7583:5:10",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7590:3:10",
														"type": ""
													}
												],
												"src": "7530:118:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7752:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7762:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7774:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7785:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7770:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7770:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7762:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7842:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7855:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7866:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7851:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7851:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7798:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "7798:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7798:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7724:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7736:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7747:4:10",
														"type": ""
													}
												],
												"src": "7654:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8036:288:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8046:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8058:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8069:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8054:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8054:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8046:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8126:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8139:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8150:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8135:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8135:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8082:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8082:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8082:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8207:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8220:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8231:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8216:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8216:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8163:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8163:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8163:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8289:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8302:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8313:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8298:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8298:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8245:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8245:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8245:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7992:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8004:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8012:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8020:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8031:4:10",
														"type": ""
													}
												],
												"src": "7882:442:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8456:206:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8466:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8478:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8489:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8474:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8474:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8466:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8546:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8559:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8570:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8555:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8555:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8502:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8502:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8502:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8627:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8640:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8651:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8636:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8636:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8583:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8583:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8583:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8420:9:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8432:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8440:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8451:4:10",
														"type": ""
													}
												],
												"src": "8330:332:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8816:225:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8826:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8838:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8849:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8834:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8834:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8826:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8873:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8884:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8869:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8869:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8892:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8898:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8888:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8888:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8862:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8862:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8862:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8918:116:10",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9020:6:10"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9029:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8926:93:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "8926:108:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8918:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8788:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8800:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8811:4:10",
														"type": ""
													}
												],
												"src": "8668:373:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9139:118:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9149:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9161:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9172:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9157:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9157:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9149:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9223:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9236:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9247:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9232:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9232:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9185:37:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9185:65:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9185:65:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9111:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9123:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9134:4:10",
														"type": ""
													}
												],
												"src": "9047:210:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9375:138:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9385:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9397:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9408:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9393:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9393:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9385:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9479:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9492:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9503:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9488:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9488:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC20_$244_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9421:57:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9421:85:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9421:85:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$244__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9347:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9359:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9370:4:10",
														"type": ""
													}
												],
												"src": "9263:250:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9632:139:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9642:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9654:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9665:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9650:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9650:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9642:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9737:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9750:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9761:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9746:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9746:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_IERC721_$677_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9678:58:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9678:86:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9678:86:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC721_$677__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9604:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9616:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9627:4:10",
														"type": ""
													}
												],
												"src": "9519:252:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9948:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9958:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9970:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9981:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9966:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9966:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9958:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10005:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10016:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10001:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10001:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10024:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10030:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10020:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10020:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9994:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "9994:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9994:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10050:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10184:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10058:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10058:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10050:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9928:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9943:4:10",
														"type": ""
													}
												],
												"src": "9777:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10373:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10383:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10395:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10406:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10391:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10391:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10383:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10430:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10441:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10426:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10426:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10449:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10455:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10445:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10445:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10419:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10419:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10419:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10475:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "10609:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10483:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10483:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10475:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10353:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10368:4:10",
														"type": ""
													}
												],
												"src": "10202:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10798:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10808:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10820:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10831:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10816:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10816:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10808:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10855:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10866:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10851:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10851:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "10874:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10880:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10870:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10870:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10844:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10844:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10844:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10900:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11034:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10908:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "10908:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10900:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10778:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10793:4:10",
														"type": ""
													}
												],
												"src": "10627:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11223:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11233:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11245:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11256:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11241:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11241:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11233:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11280:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11291:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11276:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11276:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11299:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11305:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11295:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11295:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11269:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11269:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11269:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11325:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11459:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11333:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11333:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11325:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11203:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11218:4:10",
														"type": ""
													}
												],
												"src": "11052:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11648:248:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11658:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11670:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11681:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11666:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11666:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11658:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11705:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11716:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11701:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11701:17:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11724:4:10"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11730:9:10"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11720:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11720:20:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11694:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11694:47:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11694:47:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11750:139:10",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11884:4:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11758:124:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "11758:131:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11750:4:10"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11628:9:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11643:4:10",
														"type": ""
													}
												],
												"src": "11477:419:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12000:124:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12010:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12022:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12033:2:10",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12018:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12018:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12010:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12090:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12103:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12114:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12099:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12099:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12046:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12046:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12046:71:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11972:9:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11984:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11995:4:10",
														"type": ""
													}
												],
												"src": "11902:222:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12340:454:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12350:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12362:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12373:3:10",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12358:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12358:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12350:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12431:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12444:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12455:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12440:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12440:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12387:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12387:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12387:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12512:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12525:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12536:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12521:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12521:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12468:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12468:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12468:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12594:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12607:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12618:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12603:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12603:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12550:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12550:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12550:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "12676:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12689:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12700:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12685:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12685:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12632:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12632:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12632:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "12758:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12771:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12782:3:10",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12767:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12767:19:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12714:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12714:73:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12714:73:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_address_t_uint256_t_uint256_t_uint256__to_t_uint256_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12280:9:10",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "12292:6:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "12300:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12308:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12316:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12324:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12335:4:10",
														"type": ""
													}
												],
												"src": "12130:664:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12954:288:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12964:26:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12976:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12987:2:10",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12972:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "12972:18:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12964:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13044:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13057:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13068:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13053:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13053:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13000:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13000:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13000:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13125:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13138:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13149:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13134:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13134:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13081:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13081:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13081:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13207:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13220:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13231:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13216:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13216:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13163:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13163:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13163:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12910:9:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12922:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12930:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12938:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12949:4:10",
														"type": ""
													}
												],
												"src": "12800:442:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13430:371:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13440:27:10",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13452:9:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13463:3:10",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13448:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13448:19:10"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13440:4:10"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13521:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13534:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13545:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13530:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13530:17:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13477:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13477:71:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13477:71:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13602:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13615:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13626:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13611:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13611:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13558:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13558:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13558:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13684:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13697:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13708:2:10",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13693:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13693:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13640:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13640:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13640:72:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "13766:6:10"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13779:9:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13790:2:10",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13775:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13775:18:10"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13722:43:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13722:72:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13722:72:10"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13378:9:10",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13390:6:10",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13398:6:10",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13406:6:10",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13414:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13425:4:10",
														"type": ""
													}
												],
												"src": "13248:553:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13847:35:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13857:19:10",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13873:2:10",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13867:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13867:9:10"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "13857:6:10"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13840:6:10",
														"type": ""
													}
												],
												"src": "13807:75:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13960:60:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13970:11:10",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "13978:3:10"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "13970:4:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13991:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "14003:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14008:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13999:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "13999:14:10"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "13991:4:10"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "13947:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "13955:4:10",
														"type": ""
													}
												],
												"src": "13888:132:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14100:40:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14111:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14127:5:10"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14121:5:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14121:12:10"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "14111:6:10"
																}
															]
														}
													]
												},
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14083:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14093:6:10",
														"type": ""
													}
												],
												"src": "14026:114:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14221:38:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14231:22:10",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "14243:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14248:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14239:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14239:14:10"
															},
															"variableNames": [
																{
																	"name": "next",
																	"nodeType": "YulIdentifier",
																	"src": "14231:4:10"
																}
															]
														}
													]
												},
												"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "14208:3:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "next",
														"nodeType": "YulTypedName",
														"src": "14216:4:10",
														"type": ""
													}
												],
												"src": "14146:113:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14376:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14393:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14398:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14386:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14386:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14386:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14414:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14433:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14438:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14429:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14429:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "14414:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14348:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14353:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "14364:11:10",
														"type": ""
													}
												],
												"src": "14265:184:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14551:73:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14568:3:10"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14573:6:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14561:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14561:19:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14561:19:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14589:29:10",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14608:3:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14613:4:10",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14604:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14604:14:10"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "14589:11:10"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14523:3:10",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "14528:6:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "14539:11:10",
														"type": ""
													}
												],
												"src": "14455:169:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14672:143:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14682:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14705:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14687:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14687:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "14682:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14716:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14739:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14721:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14721:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "14716:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14763:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "14765:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14765:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14765:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14760:1:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14753:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14753:9:10"
															},
															"nodeType": "YulIf",
															"src": "14750:35:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14795:14:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14804:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14807:1:10"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "14800:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14800:9:10"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "14795:1:10"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "14661:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "14664:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "14670:1:10",
														"type": ""
													}
												],
												"src": "14630:185:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14866:146:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14876:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14899:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14881:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14881:20:10"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "14876:1:10"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "14910:25:10",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14933:1:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "14915:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14915:20:10"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "14910:1:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14957:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "14959:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14959:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14959:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "14951:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "14954:1:10"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "14948:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14948:8:10"
															},
															"nodeType": "YulIf",
															"src": "14945:34:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14989:17:10",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15001:1:10"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15004:1:10"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "14997:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "14997:9:10"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "14989:4:10"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "14852:1:10",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "14855:1:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "14861:4:10",
														"type": ""
													}
												],
												"src": "14821:191:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15063:51:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15073:35:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15102:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "15084:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15084:24:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "15073:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15045:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "15055:7:10",
														"type": ""
													}
												],
												"src": "15018:96:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15162:48:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15172:32:10",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "15197:5:10"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "15190:6:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15190:13:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "15183:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15183:21:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "15172:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15144:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "15154:7:10",
														"type": ""
													}
												],
												"src": "15120:90:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15261:81:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15271:65:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15286:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15293:42:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "15282:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15282:54:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "15271:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15243:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "15253:7:10",
														"type": ""
													}
												],
												"src": "15216:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15393:32:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15403:16:10",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "15414:5:10"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "15403:7:10"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15375:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "15385:7:10",
														"type": ""
													}
												],
												"src": "15348:77:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15505:66:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15515:50:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15559:5:10"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "15528:30:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15528:37:10"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "15515:9:10"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC20_$244_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15485:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "15495:9:10",
														"type": ""
													}
												],
												"src": "15431:140:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15652:66:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15662:50:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15706:5:10"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "15675:30:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15675:37:10"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "15662:9:10"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_IERC721_$677_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15632:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "15642:9:10",
														"type": ""
													}
												],
												"src": "15577:141:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15784:66:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15794:50:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15838:5:10"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "15807:30:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15807:37:10"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "15794:9:10"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15764:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "15774:9:10",
														"type": ""
													}
												],
												"src": "15724:126:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15916:53:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15926:37:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15957:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "15939:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "15939:24:10"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "15926:9:10"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15896:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "15906:9:10",
														"type": ""
													}
												],
												"src": "15856:113:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16018:190:10",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16028:33:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16055:5:10"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "16037:17:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16037:24:10"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "16028:5:10"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16151:22:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "16153:16:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16153:18:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16153:18:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16076:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16083:66:10",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "16073:2:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16073:77:10"
															},
															"nodeType": "YulIf",
															"src": "16070:103:10"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16182:20:10",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16193:5:10"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16200:1:10",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16189:3:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16189:13:10"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "16182:3:10"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16004:5:10",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "16014:3:10",
														"type": ""
													}
												],
												"src": "15975:233:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16242:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16259:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16262:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16252:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16252:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16252:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16356:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16359:4:10",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16349:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16349:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16349:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16380:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16383:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16373:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16373:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16373:15:10"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "16214:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16428:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16445:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16448:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16438:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16438:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16438:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16542:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16545:4:10",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16535:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16535:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16535:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16566:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16569:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16559:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16559:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16559:15:10"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "16400:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16614:152:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16631:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16634:77:10",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16624:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16624:88:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16624:88:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16728:1:10",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16731:4:10",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "16721:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16721:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16721:15:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16752:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16755:4:10",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16745:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16745:15:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16745:15:10"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "16586:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16861:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16878:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "16881:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16871:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16871:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16871:12:10"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "16772:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16984:28:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17001:1:10",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17004:1:10",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "16994:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "16994:12:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16994:12:10"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "16895:117:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17124:74:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17146:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17154:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17142:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17142:14:10"
																	},
																	{
																		"hexValue": "43616e2774207374616b65206e667420796f7520646f6e2774206f776e21",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17158:32:10",
																		"type": "",
																		"value": "Can't stake nft you don't own!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17135:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17135:56:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17135:56:10"
														}
													]
												},
												"name": "store_literal_in_memory_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "17116:6:10",
														"type": ""
													}
												],
												"src": "17018:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17310:119:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17332:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17340:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17328:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17328:14:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17344:34:10",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17321:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17321:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17321:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17400:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17408:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17396:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17396:15:10"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17413:8:10",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17389:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17389:33:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17389:33:10"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "17302:6:10",
														"type": ""
													}
												],
												"src": "17204:225:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17541:74:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17563:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17571:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17559:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17559:14:10"
																	},
																	{
																		"hexValue": "5374616b696e6720706f6f6c206e6f7420656e6465642079657421212121",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17575:32:10",
																		"type": "",
																		"value": "Staking pool not ended yet!!!!"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17552:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17552:56:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17552:56:10"
														}
													]
												},
												"name": "store_literal_in_memory_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "17533:6:10",
														"type": ""
													}
												],
												"src": "17435:180:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17727:76:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17749:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17757:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17745:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17745:14:10"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17761:34:10",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17738:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17738:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17738:58:10"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "17719:6:10",
														"type": ""
													}
												],
												"src": "17621:182:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17915:118:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "17937:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17945:1:10",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17933:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17933:14:10"
																	},
																	{
																		"hexValue": "596f7520617265206e6f74206f776e6572206f662074686973204e4654207374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "17949:34:10",
																		"type": "",
																		"value": "You are not owner of this NFT st"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17926:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17926:58:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17926:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "18005:6:10"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "18013:2:10",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "18001:3:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18001:15:10"
																	},
																	{
																		"hexValue": "616b696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "18018:7:10",
																		"type": "",
																		"value": "aking"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17994:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "17994:32:10"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17994:32:10"
														}
													]
												},
												"name": "store_literal_in_memory_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "17907:6:10",
														"type": ""
													}
												],
												"src": "17809:224:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18082:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18139:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18148:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18151:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "18141:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18141:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18141:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "18105:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "18130:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "18112:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18112:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "18102:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18102:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "18095:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18095:43:10"
															},
															"nodeType": "YulIf",
															"src": "18092:63:10"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18075:5:10",
														"type": ""
													}
												],
												"src": "18039:122:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18207:76:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18261:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18270:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18273:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "18263:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18263:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18263:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "18230:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "18252:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "18237:14:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18237:21:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "18227:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18227:32:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "18220:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18220:40:10"
															},
															"nodeType": "YulIf",
															"src": "18217:60:10"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18200:5:10",
														"type": ""
													}
												],
												"src": "18167:116:10"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "18332:79:10",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "18389:16:10",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18398:1:10",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "18401:1:10",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "18391:6:10"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "18391:12:10"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "18391:12:10"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "18355:5:10"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "18380:5:10"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "18362:17:10"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "18362:24:10"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "18352:2:10"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "18352:35:10"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "18345:6:10"
																},
																"nodeType": "YulFunctionCall",
																"src": "18345:43:10"
															},
															"nodeType": "YulIf",
															"src": "18342:63:10"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "18325:5:10",
														"type": ""
													}
												],
												"src": "18289:122:10"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_contract$_IERC20_$244_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC20_$244_to_t_address(value))\n    }\n\n    function abi_encode_t_contract$_IERC721_$677_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IERC721_$677_to_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_IERC20_$244__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC20_$244_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_contract$_IERC721_$677__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IERC721_$677_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address_t_uint256_t_uint256_t_uint256__to_t_uint256_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_IERC20_$244_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function convert_t_contract$_IERC721_$677_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function store_literal_in_memory_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Can't stake nft you don't own!\")\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function store_literal_in_memory_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e(memPtr) {\n\n        mstore(add(memPtr, 0), \"Staking pool not ended yet!!!!\")\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function store_literal_in_memory_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c(memPtr) {\n\n        mstore(add(memPtr, 0), \"You are not owner of this NFT st\")\n\n        mstore(add(memPtr, 32), \"aking\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 10,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100cf5760003560e01c806378dba5941161008c578063d5a44f8611610066578063d5a44f8614610200578063f2fde38b14610234578063f7c618c114610250578063fbaca0861461026e576100cf565b806378dba5941461019657806379e5f7d7146101b25780638da5cb5b146101e2576100cf565b80632986c0e5146100d45780633af416d1146100f25780633f1069291461012257806351cecc8014610152578063715018a61461016e57806378b2e3a914610178575b600080fd5b6100dc61029e565b6040516100e99190611377565b60405180910390f35b61010c60048036038101906101079190610efd565b6102a4565b6040516101199190611377565b60405180910390f35b61013c60048036038101906101379190610efd565b6102d5565b6040516101499190611377565b60405180910390f35b61016c60048036038101906101679190610fd7565b610306565b005b61017661064b565b005b61018061065f565b60405161018d91906112bc565b60405180910390f35b6101b060048036038101906101ab9190611017565b610685565b005b6101cc60048036038101906101c79190610ea3565b610a1b565b6040516101d99190611264565b60405180910390f35b6101ea610ab8565b6040516101f791906111e9565b60405180910390f35b61021a60048036038101906102159190610f6a565b610ae1565b60405161022b959493929190611392565b60405180910390f35b61024e60048036038101906102499190610ea3565b610b37565b005b610258610bbb565b60405161026591906112a1565b60405180910390f35b61028860048036038101906102839190610f97565b610be1565b6040516102959190611286565b60405180910390f35b60045481565b600860205281600052604060002081815481106102c057600080fd5b90600052602060002001600091509150505481565b600760205281600052604060002081815481106102f157600080fd5b90600052602060002001600091509150505481565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016103789190611377565b60206040518083038186803b15801561039057600080fd5b505afa1580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c89190610ed0565b73ffffffffffffffffffffffffffffffffffffffff161461041e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610415906112d7565b60405180910390fd5b6040518060a0016040528060045481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001428152506006600060045481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040155905050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004549080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016105ab93929190611204565b600060405180830381600087803b1580156105c557600080fd5b505af11580156105d9573d6000803e3d6000fd5b50505050600460008154809291906105f0906115a0565b91905055503373ffffffffffffffffffffffffffffffffffffffff167ff556991011e831bcfac4f406d547e5e32cdd98267efab83935230d5f8d02c44683834260405161063f939291906113e5565b60405180910390a25050565b610653610cbf565b61065d6000610d3d565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806018603c806006600088815260200190815260200160002060040154426106ad91906114dc565b6106b791906114ab565b6106c191906114ab565b6106cb91906114ab565b101561070c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070390611317565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166006600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a790611357565b60405180910390fd5b600660008481526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090555050600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190915055600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016108d293929190611204565b600060405180830381600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b50505050600061090f82610e01565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161096e92919061123b565b602060405180830381600087803b15801561098857600080fd5b505af115801561099c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c09190610f3d565b503373ffffffffffffffffffffffffffffffffffffffff167ff74c9f1985016ff6aa83c3fd81e31d0be3b194f205ae5e1b57f5bd74ad28e4cf84844285604051610a0d949392919061141c565b60405180910390a250505050565b60606000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610aa857602002820191906000526020600020905b815481526020019060010190808311610a94575b5050505050905080915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154905085565b610b3f610cbf565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba6906112f7565b60405180910390fd5b610bb881610d3d565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015610cb35783600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610c8557610c84611647565b5b90600052602060002001541415610ca0576001915050610cb9565b8080610cab906115a0565b915050610be9565b50600090505b92915050565b610cc7610e47565b73ffffffffffffffffffffffffffffffffffffffff16610ce5610ab8565b73ffffffffffffffffffffffffffffffffffffffff1614610d3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3290611337565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006007821415610e16576103e89050610e42565b600e821415610e2957610bb89050610e42565b601e821415610e3c576113889050610e42565b61271090505b919050565b600033905090565b600081359050610e5e81611794565b92915050565b600081519050610e7381611794565b92915050565b600081519050610e88816117ab565b92915050565b600081359050610e9d816117c2565b92915050565b600060208284031215610eb957610eb8611676565b5b6000610ec784828501610e4f565b91505092915050565b600060208284031215610ee657610ee5611676565b5b6000610ef484828501610e64565b91505092915050565b60008060408385031215610f1457610f13611676565b5b6000610f2285828601610e4f565b9250506020610f3385828601610e8e565b9150509250929050565b600060208284031215610f5357610f52611676565b5b6000610f6184828501610e79565b91505092915050565b600060208284031215610f8057610f7f611676565b5b6000610f8e84828501610e8e565b91505092915050565b60008060408385031215610fae57610fad611676565b5b6000610fbc85828601610e8e565b9250506020610fcd85828601610e4f565b9150509250929050565b60008060408385031215610fee57610fed611676565b5b6000610ffc85828601610e8e565b925050602061100d85828601610e8e565b9150509250929050565b6000806000606084860312156110305761102f611676565b5b600061103e86828701610e8e565b935050602061104f86828701610e8e565b925050604061106086828701610e8e565b9150509250925092565b600061107683836111cb565b60208301905092915050565b61108b81611510565b82525050565b600061109c82611471565b6110a68185611489565b93506110b183611461565b8060005b838110156110e25781516110c9888261106a565b97506110d48361147c565b9250506001810190506110b5565b5085935050505092915050565b6110f881611522565b82525050565b61110781611558565b82525050565b6111168161156a565b82525050565b6000611129601e8361149a565b91506111348261167b565b602082019050919050565b600061114c60268361149a565b9150611157826116a4565b604082019050919050565b600061116f601e8361149a565b915061117a826116f3565b602082019050919050565b600061119260208361149a565b915061119d8261171c565b602082019050919050565b60006111b560258361149a565b91506111c082611745565b604082019050919050565b6111d48161154e565b82525050565b6111e38161154e565b82525050565b60006020820190506111fe6000830184611082565b92915050565b60006060820190506112196000830186611082565b6112266020830185611082565b61123360408301846111da565b949350505050565b60006040820190506112506000830185611082565b61125d60208301846111da565b9392505050565b6000602082019050818103600083015261127e8184611091565b905092915050565b600060208201905061129b60008301846110ef565b92915050565b60006020820190506112b660008301846110fe565b92915050565b60006020820190506112d1600083018461110d565b92915050565b600060208201905081810360008301526112f08161111c565b9050919050565b600060208201905081810360008301526113108161113f565b9050919050565b6000602082019050818103600083015261133081611162565b9050919050565b6000602082019050818103600083015261135081611185565b9050919050565b60006020820190508181036000830152611370816111a8565b9050919050565b600060208201905061138c60008301846111da565b92915050565b600060a0820190506113a760008301886111da565b6113b46020830187611082565b6113c160408301866111da565b6113ce60608301856111da565b6113db60808301846111da565b9695505050505050565b60006060820190506113fa60008301866111da565b61140760208301856111da565b61141460408301846111da565b949350505050565b600060808201905061143160008301876111da565b61143e60208301866111da565b61144b60408301856111da565b61145860608301846111da565b95945050505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006114b68261154e565b91506114c18361154e565b9250826114d1576114d0611618565b5b828204905092915050565b60006114e78261154e565b91506114f28361154e565b925082821015611505576115046115e9565b5b828203905092915050565b600061151b8261152e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115638261157c565b9050919050565b60006115758261157c565b9050919050565b60006115878261158e565b9050919050565b60006115998261152e565b9050919050565b60006115ab8261154e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115de576115dd6115e9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f43616e2774207374616b65206e667420796f7520646f6e2774206f776e210000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5374616b696e6720706f6f6c206e6f7420656e64656420796574212121210000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f596f7520617265206e6f74206f776e6572206f662074686973204e465420737460008201527f616b696e67000000000000000000000000000000000000000000000000000000602082015250565b61179d81611510565b81146117a857600080fd5b50565b6117b481611522565b81146117bf57600080fd5b50565b6117cb8161154e565b81146117d657600080fd5b5056fea264697066735822122040a376c459bbff7b1f5c029d21f10b3f8c64abc65e7e87ca96ab02cb826f20bd64736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78DBA594 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD5A44F86 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD5A44F86 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xF7C618C1 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0xFBACA086 EQ PUSH2 0x26E JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x78DBA594 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x79E5F7D7 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E2 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x2986C0E5 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x3AF416D1 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x3F106929 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x51CECC80 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x78B2E3A9 EQ PUSH2 0x178 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x29E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0xEFD JUMP JUMPDEST PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xFD7 JUMP JUMPDEST PUSH2 0x306 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x176 PUSH2 0x64B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x180 PUSH2 0x65F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18D SWAP2 SWAP1 PUSH2 0x12BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AB SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x685 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C7 SWAP2 SWAP1 PUSH2 0xEA3 JUMP JUMPDEST PUSH2 0xA1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D9 SWAP2 SWAP1 PUSH2 0x1264 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1EA PUSH2 0xAB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F7 SWAP2 SWAP1 PUSH2 0x11E9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x215 SWAP2 SWAP1 PUSH2 0xF6A JUMP JUMPDEST PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1392 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0xEA3 JUMP JUMPDEST PUSH2 0xB37 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0xBBB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x12A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x288 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x283 SWAP2 SWAP1 PUSH2 0xF97 JUMP JUMPDEST PUSH2 0xBE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x1286 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6352211E DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x378 SWAP2 SWAP1 PUSH2 0x1377 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3C8 SWAP2 SWAP1 PUSH2 0xED0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x41E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x415 SWAP1 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE SWAP1 POP POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 SLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x4 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x5F0 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF556991011E831BCFAC4F406D547E5E32CDD98267EFAB83935230D5F8D02C446 DUP4 DUP4 TIMESTAMP PUSH1 0x40 MLOAD PUSH2 0x63F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x653 PUSH2 0xCBF JUMP JUMPDEST PUSH2 0x65D PUSH1 0x0 PUSH2 0xD3D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST DUP1 PUSH1 0x18 PUSH1 0x3C DUP1 PUSH1 0x6 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD SLOAD TIMESTAMP PUSH2 0x6AD SWAP2 SWAP1 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0x6B7 SWAP2 SWAP1 PUSH2 0x14AB JUMP JUMPDEST PUSH2 0x6C1 SWAP2 SWAP1 PUSH2 0x14AB JUMP JUMPDEST PUSH2 0x6CB SWAP2 SWAP1 PUSH2 0x14AB JUMP JUMPDEST LT ISZERO PUSH2 0x70C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x703 SWAP1 PUSH2 0x1317 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7B0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A7 SWAP1 PUSH2 0x1357 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP PUSH1 0x8 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS CALLER DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1204 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x900 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH2 0x90F DUP3 PUSH2 0xE01 JUMP JUMPDEST SWAP1 POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB CALLER DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96E SWAP3 SWAP2 SWAP1 PUSH2 0x123B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x99C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9C0 SWAP2 SWAP1 PUSH2 0xF3D JUMP JUMPDEST POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF74C9F1985016FF6AA83C3FD81E31D0BE3B194F205AE5E1B57F5BD74AD28E4CF DUP5 DUP5 TIMESTAMP DUP6 PUSH1 0x40 MLOAD PUSH2 0xA0D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xAA8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xA94 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP6 JUMP JUMPDEST PUSH2 0xB3F PUSH2 0xCBF JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA6 SWAP1 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBB8 DUP2 PUSH2 0xD3D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x8 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0xCB3 JUMPI DUP4 PUSH1 0x8 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xC85 JUMPI PUSH2 0xC84 PUSH2 0x1647 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD EQ ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xCB9 JUMP JUMPDEST DUP1 DUP1 PUSH2 0xCAB SWAP1 PUSH2 0x15A0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xBE9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCC7 PUSH2 0xE47 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCE5 PUSH2 0xAB8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD3B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD32 SWAP1 PUSH2 0x1337 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 DUP3 EQ ISZERO PUSH2 0xE16 JUMPI PUSH2 0x3E8 SWAP1 POP PUSH2 0xE42 JUMP JUMPDEST PUSH1 0xE DUP3 EQ ISZERO PUSH2 0xE29 JUMPI PUSH2 0xBB8 SWAP1 POP PUSH2 0xE42 JUMP JUMPDEST PUSH1 0x1E DUP3 EQ ISZERO PUSH2 0xE3C JUMPI PUSH2 0x1388 SWAP1 POP PUSH2 0xE42 JUMP JUMPDEST PUSH2 0x2710 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE5E DUP2 PUSH2 0x1794 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xE73 DUP2 PUSH2 0x1794 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xE88 DUP2 PUSH2 0x17AB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE9D DUP2 PUSH2 0x17C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEB9 JUMPI PUSH2 0xEB8 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEC7 DUP5 DUP3 DUP6 ADD PUSH2 0xE4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEE6 JUMPI PUSH2 0xEE5 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEF4 DUP5 DUP3 DUP6 ADD PUSH2 0xE64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF14 JUMPI PUSH2 0xF13 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF22 DUP6 DUP3 DUP7 ADD PUSH2 0xE4F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF33 DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF53 JUMPI PUSH2 0xF52 PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF61 DUP5 DUP3 DUP6 ADD PUSH2 0xE79 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF80 JUMPI PUSH2 0xF7F PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF8E DUP5 DUP3 DUP6 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFAE JUMPI PUSH2 0xFAD PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFBC DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xFCD DUP6 DUP3 DUP7 ADD PUSH2 0xE4F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFEE JUMPI PUSH2 0xFED PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFFC DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x100D DUP6 DUP3 DUP7 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1030 JUMPI PUSH2 0x102F PUSH2 0x1676 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x103E DUP7 DUP3 DUP8 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x104F DUP7 DUP3 DUP8 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1060 DUP7 DUP3 DUP8 ADD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1076 DUP4 DUP4 PUSH2 0x11CB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x108B DUP2 PUSH2 0x1510 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109C DUP3 PUSH2 0x1471 JUMP JUMPDEST PUSH2 0x10A6 DUP2 DUP6 PUSH2 0x1489 JUMP JUMPDEST SWAP4 POP PUSH2 0x10B1 DUP4 PUSH2 0x1461 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x10E2 JUMPI DUP2 MLOAD PUSH2 0x10C9 DUP9 DUP3 PUSH2 0x106A JUMP JUMPDEST SWAP8 POP PUSH2 0x10D4 DUP4 PUSH2 0x147C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x10B5 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10F8 DUP2 PUSH2 0x1522 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1107 DUP2 PUSH2 0x1558 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1116 DUP2 PUSH2 0x156A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1129 PUSH1 0x1E DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x1134 DUP3 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x114C PUSH1 0x26 DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x1157 DUP3 PUSH2 0x16A4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x116F PUSH1 0x1E DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x117A DUP3 PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1192 PUSH1 0x20 DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x119D DUP3 PUSH2 0x171C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11B5 PUSH1 0x25 DUP4 PUSH2 0x149A JUMP JUMPDEST SWAP2 POP PUSH2 0x11C0 DUP3 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x11D4 DUP2 PUSH2 0x154E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x11E3 DUP2 PUSH2 0x154E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x11FE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1082 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1219 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x1226 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x1233 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1250 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x125D PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x127E DUP2 DUP5 PUSH2 0x1091 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x129B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10FE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x12D1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x110D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F0 DUP2 PUSH2 0x111C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1310 DUP2 PUSH2 0x113F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1330 DUP2 PUSH2 0x1162 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1350 DUP2 PUSH2 0x1185 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1370 DUP2 PUSH2 0x11A8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x138C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x13A7 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x13B4 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x13C1 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x13CE PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x13DB PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x13FA PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x1407 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x1414 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1431 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x143E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x144B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x11DA JUMP JUMPDEST PUSH2 0x1458 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x11DA JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14B6 DUP3 PUSH2 0x154E JUMP JUMPDEST SWAP2 POP PUSH2 0x14C1 DUP4 PUSH2 0x154E JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x14D1 JUMPI PUSH2 0x14D0 PUSH2 0x1618 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14E7 DUP3 PUSH2 0x154E JUMP JUMPDEST SWAP2 POP PUSH2 0x14F2 DUP4 PUSH2 0x154E JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1505 JUMPI PUSH2 0x1504 PUSH2 0x15E9 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x151B DUP3 PUSH2 0x152E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1563 DUP3 PUSH2 0x157C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1575 DUP3 PUSH2 0x157C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1587 DUP3 PUSH2 0x158E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1599 DUP3 PUSH2 0x152E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15AB DUP3 PUSH2 0x154E JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x15DE JUMPI PUSH2 0x15DD PUSH2 0x15E9 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x43616E2774207374616B65206E667420796F7520646F6E2774206F776E210000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x5374616B696E6720706F6F6C206E6F7420656E64656420796574212121210000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x596F7520617265206E6F74206F776E6572206F662074686973204E4654207374 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616B696E67000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x179D DUP2 PUSH2 0x1510 JUMP JUMPDEST DUP2 EQ PUSH2 0x17A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x17B4 DUP2 PUSH2 0x1522 JUMP JUMPDEST DUP2 EQ PUSH2 0x17BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x17CB DUP2 PUSH2 0x154E JUMP JUMPDEST DUP2 EQ PUSH2 0x17D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH LOG3 PUSH23 0xC459BBFF7B1F5C029D21F10B3F8C64ABC65E7E87CA96AB MUL 0xCB DUP3 PUSH16 0x20BD64736F6C63430008070033000000 ",
							"sourceMap": "415:3461:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;609:24;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;956:54;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;898:52;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1902:450;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1831:101:0;;;:::i;:::-;;497:28:9;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2515:633;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3241:191;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;852:40:9;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;2081:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;553:25:9;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3570:304;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;609:24;;;;:::o;956:54::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;898:52::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1902:450::-;2013:10;1978:45;;:13;;;;;;;;;;;:21;;;2000:8;1978:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:45;;;1970:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;2083:57;;;;;;;;2090:5;;2083:57;;;;2096:10;2083:57;;;;;;2107:8;2083:57;;;;2117:5;2083:57;;;;2124:15;2083:57;;;2067:6;:13;2074:5;;2067:13;;;;;;;;;;;:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2150:15;:27;2166:10;2150:27;;;;;;;;;;;;;;;2183:5;;2150:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2199:13;;;;;;;;;;;:26;;;2226:10;2246:4;2253:8;2199:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2272:5;;:7;;;;;;;;;:::i;:::-;;;;;;2300:10;2294:51;;;2312:8;2322:5;2329:15;2294:51;;;;;;;;:::i;:::-;;;;;;;;1902:450;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;497:28:9:-;;;;;;;;;;;;;:::o;2515:633::-;2671:5;2665:2;2660;2655;2627:6;:14;2634:6;2627:14;;;;;;;;;;;:24;;;2609:15;:42;;;;:::i;:::-;2608:49;;;;:::i;:::-;:54;;;;:::i;:::-;:59;;;;:::i;:::-;:68;;2600:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;2751:10;2728:33;;:6;:14;2735:6;2728:14;;;;;;;;;;;:19;;;;;;;;;;;;:33;;;2720:82;;;;;;;;;;;;:::i;:::-;;;;;;;;;2819:6;:14;2826:6;2819:14;;;;;;;;;;;;2812:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2843:17;:29;2861:10;2843:29;;;;;;;;;;;;;;;2878:6;2843:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2895:13;;;;;;;;;;;:26;;;2931:4;2938:10;2950:8;2895:64;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2969:14;2987:26;3007:5;2987:19;:26::i;:::-;2969:44;;3023:11;;;;;;;;;;;:20;;;3045:10;3057:6;3023:41;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3087:10;3079:62;;;3099:8;3109:5;3117:15;3134:6;3079:62;;;;;;;;;:::i;:::-;;;;;;;;2590:558;2515:633;;;:::o;3241:191::-;3326:16;3358:21;3382:15;:22;3398:5;3382:22;;;;;;;;;;;;;;;3358:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3421:4;3414:11;;;3241:191;;;:::o;1201:85:0:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;852:40:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;553:25:9:-;;;;;;;;;;;;;:::o;3570:304::-;3656:4;3677:6;3684:1;3677:8;;3672:172;3691:17;:24;3709:5;3691:24;;;;;;;;;;;;;;;:31;;;;3687:1;:35;3672:172;;;3775:10;3746:17;:24;3764:5;3746:24;;;;;;;;;;;;;;;3771:1;3746:27;;;;;;;;:::i;:::-;;;;;;;;;;:39;3743:91;;;3815:4;3808:11;;;;;3743:91;3724:3;;;;;:::i;:::-;;;;3672:172;;;;3862:5;3855:12;;3570:304;;;;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;2433:187::-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;1457:295:9:-;1522:7;1552:1;1545:5;:8;1542:204;;;1576:4;1569:11;;;;1542:204;1607:2;1600:5;:9;1597:149;;;1632:4;1625:11;;;;1597:149;1663:2;1656:5;:9;1653:93;;;1688:4;1681:11;;;;1653:93;1730:5;1723:12;;1457:295;;;;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;7:139:10:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:143::-;209:5;240:6;234:13;225:22;;256:33;283:5;256:33;:::i;:::-;152:143;;;;:::o;301:137::-;355:5;386:6;380:13;371:22;;402:30;426:5;402:30;:::i;:::-;301:137;;;;:::o;444:139::-;490:5;528:6;515:20;506:29;;544:33;571:5;544:33;:::i;:::-;444:139;;;;:::o;589:329::-;648:6;697:2;685:9;676:7;672:23;668:32;665:119;;;703:79;;:::i;:::-;665:119;823:1;848:53;893:7;884:6;873:9;869:22;848:53;:::i;:::-;838:63;;794:117;589:329;;;;:::o;924:351::-;994:6;1043:2;1031:9;1022:7;1018:23;1014:32;1011:119;;;1049:79;;:::i;:::-;1011:119;1169:1;1194:64;1250:7;1241:6;1230:9;1226:22;1194:64;:::i;:::-;1184:74;;1140:128;924:351;;;;:::o;1281:474::-;1349:6;1357;1406:2;1394:9;1385:7;1381:23;1377:32;1374:119;;;1412:79;;:::i;:::-;1374:119;1532:1;1557:53;1602:7;1593:6;1582:9;1578:22;1557:53;:::i;:::-;1547:63;;1503:117;1659:2;1685:53;1730:7;1721:6;1710:9;1706:22;1685:53;:::i;:::-;1675:63;;1630:118;1281:474;;;;;:::o;1761:345::-;1828:6;1877:2;1865:9;1856:7;1852:23;1848:32;1845:119;;;1883:79;;:::i;:::-;1845:119;2003:1;2028:61;2081:7;2072:6;2061:9;2057:22;2028:61;:::i;:::-;2018:71;;1974:125;1761:345;;;;:::o;2112:329::-;2171:6;2220:2;2208:9;2199:7;2195:23;2191:32;2188:119;;;2226:79;;:::i;:::-;2188:119;2346:1;2371:53;2416:7;2407:6;2396:9;2392:22;2371:53;:::i;:::-;2361:63;;2317:117;2112:329;;;;:::o;2447:474::-;2515:6;2523;2572:2;2560:9;2551:7;2547:23;2543:32;2540:119;;;2578:79;;:::i;:::-;2540:119;2698:1;2723:53;2768:7;2759:6;2748:9;2744:22;2723:53;:::i;:::-;2713:63;;2669:117;2825:2;2851:53;2896:7;2887:6;2876:9;2872:22;2851:53;:::i;:::-;2841:63;;2796:118;2447:474;;;;;:::o;2927:::-;2995:6;3003;3052:2;3040:9;3031:7;3027:23;3023:32;3020:119;;;3058:79;;:::i;:::-;3020:119;3178:1;3203:53;3248:7;3239:6;3228:9;3224:22;3203:53;:::i;:::-;3193:63;;3149:117;3305:2;3331:53;3376:7;3367:6;3356:9;3352:22;3331:53;:::i;:::-;3321:63;;3276:118;2927:474;;;;;:::o;3407:619::-;3484:6;3492;3500;3549:2;3537:9;3528:7;3524:23;3520:32;3517:119;;;3555:79;;:::i;:::-;3517:119;3675:1;3700:53;3745:7;3736:6;3725:9;3721:22;3700:53;:::i;:::-;3690:63;;3646:117;3802:2;3828:53;3873:7;3864:6;3853:9;3849:22;3828:53;:::i;:::-;3818:63;;3773:118;3930:2;3956:53;4001:7;3992:6;3981:9;3977:22;3956:53;:::i;:::-;3946:63;;3901:118;3407:619;;;;;:::o;4032:179::-;4101:10;4122:46;4164:3;4156:6;4122:46;:::i;:::-;4200:4;4195:3;4191:14;4177:28;;4032:179;;;;:::o;4217:118::-;4304:24;4322:5;4304:24;:::i;:::-;4299:3;4292:37;4217:118;;:::o;4371:732::-;4490:3;4519:54;4567:5;4519:54;:::i;:::-;4589:86;4668:6;4663:3;4589:86;:::i;:::-;4582:93;;4699:56;4749:5;4699:56;:::i;:::-;4778:7;4809:1;4794:284;4819:6;4816:1;4813:13;4794:284;;;4895:6;4889:13;4922:63;4981:3;4966:13;4922:63;:::i;:::-;4915:70;;5008:60;5061:6;5008:60;:::i;:::-;4998:70;;4854:224;4841:1;4838;4834:9;4829:14;;4794:284;;;4798:14;5094:3;5087:10;;4495:608;;;4371:732;;;;:::o;5109:109::-;5190:21;5205:5;5190:21;:::i;:::-;5185:3;5178:34;5109:109;;:::o;5224:159::-;5325:51;5370:5;5325:51;:::i;:::-;5320:3;5313:64;5224:159;;:::o;5389:161::-;5491:52;5537:5;5491:52;:::i;:::-;5486:3;5479:65;5389:161;;:::o;5556:366::-;5698:3;5719:67;5783:2;5778:3;5719:67;:::i;:::-;5712:74;;5795:93;5884:3;5795:93;:::i;:::-;5913:2;5908:3;5904:12;5897:19;;5556:366;;;:::o;5928:::-;6070:3;6091:67;6155:2;6150:3;6091:67;:::i;:::-;6084:74;;6167:93;6256:3;6167:93;:::i;:::-;6285:2;6280:3;6276:12;6269:19;;5928:366;;;:::o;6300:::-;6442:3;6463:67;6527:2;6522:3;6463:67;:::i;:::-;6456:74;;6539:93;6628:3;6539:93;:::i;:::-;6657:2;6652:3;6648:12;6641:19;;6300:366;;;:::o;6672:::-;6814:3;6835:67;6899:2;6894:3;6835:67;:::i;:::-;6828:74;;6911:93;7000:3;6911:93;:::i;:::-;7029:2;7024:3;7020:12;7013:19;;6672:366;;;:::o;7044:::-;7186:3;7207:67;7271:2;7266:3;7207:67;:::i;:::-;7200:74;;7283:93;7372:3;7283:93;:::i;:::-;7401:2;7396:3;7392:12;7385:19;;7044:366;;;:::o;7416:108::-;7493:24;7511:5;7493:24;:::i;:::-;7488:3;7481:37;7416:108;;:::o;7530:118::-;7617:24;7635:5;7617:24;:::i;:::-;7612:3;7605:37;7530:118;;:::o;7654:222::-;7747:4;7785:2;7774:9;7770:18;7762:26;;7798:71;7866:1;7855:9;7851:17;7842:6;7798:71;:::i;:::-;7654:222;;;;:::o;7882:442::-;8031:4;8069:2;8058:9;8054:18;8046:26;;8082:71;8150:1;8139:9;8135:17;8126:6;8082:71;:::i;:::-;8163:72;8231:2;8220:9;8216:18;8207:6;8163:72;:::i;:::-;8245;8313:2;8302:9;8298:18;8289:6;8245:72;:::i;:::-;7882:442;;;;;;:::o;8330:332::-;8451:4;8489:2;8478:9;8474:18;8466:26;;8502:71;8570:1;8559:9;8555:17;8546:6;8502:71;:::i;:::-;8583:72;8651:2;8640:9;8636:18;8627:6;8583:72;:::i;:::-;8330:332;;;;;:::o;8668:373::-;8811:4;8849:2;8838:9;8834:18;8826:26;;8898:9;8892:4;8888:20;8884:1;8873:9;8869:17;8862:47;8926:108;9029:4;9020:6;8926:108;:::i;:::-;8918:116;;8668:373;;;;:::o;9047:210::-;9134:4;9172:2;9161:9;9157:18;9149:26;;9185:65;9247:1;9236:9;9232:17;9223:6;9185:65;:::i;:::-;9047:210;;;;:::o;9263:250::-;9370:4;9408:2;9397:9;9393:18;9385:26;;9421:85;9503:1;9492:9;9488:17;9479:6;9421:85;:::i;:::-;9263:250;;;;:::o;9519:252::-;9627:4;9665:2;9654:9;9650:18;9642:26;;9678:86;9761:1;9750:9;9746:17;9737:6;9678:86;:::i;:::-;9519:252;;;;:::o;9777:419::-;9943:4;9981:2;9970:9;9966:18;9958:26;;10030:9;10024:4;10020:20;10016:1;10005:9;10001:17;9994:47;10058:131;10184:4;10058:131;:::i;:::-;10050:139;;9777:419;;;:::o;10202:::-;10368:4;10406:2;10395:9;10391:18;10383:26;;10455:9;10449:4;10445:20;10441:1;10430:9;10426:17;10419:47;10483:131;10609:4;10483:131;:::i;:::-;10475:139;;10202:419;;;:::o;10627:::-;10793:4;10831:2;10820:9;10816:18;10808:26;;10880:9;10874:4;10870:20;10866:1;10855:9;10851:17;10844:47;10908:131;11034:4;10908:131;:::i;:::-;10900:139;;10627:419;;;:::o;11052:::-;11218:4;11256:2;11245:9;11241:18;11233:26;;11305:9;11299:4;11295:20;11291:1;11280:9;11276:17;11269:47;11333:131;11459:4;11333:131;:::i;:::-;11325:139;;11052:419;;;:::o;11477:::-;11643:4;11681:2;11670:9;11666:18;11658:26;;11730:9;11724:4;11720:20;11716:1;11705:9;11701:17;11694:47;11758:131;11884:4;11758:131;:::i;:::-;11750:139;;11477:419;;;:::o;11902:222::-;11995:4;12033:2;12022:9;12018:18;12010:26;;12046:71;12114:1;12103:9;12099:17;12090:6;12046:71;:::i;:::-;11902:222;;;;:::o;12130:664::-;12335:4;12373:3;12362:9;12358:19;12350:27;;12387:71;12455:1;12444:9;12440:17;12431:6;12387:71;:::i;:::-;12468:72;12536:2;12525:9;12521:18;12512:6;12468:72;:::i;:::-;12550;12618:2;12607:9;12603:18;12594:6;12550:72;:::i;:::-;12632;12700:2;12689:9;12685:18;12676:6;12632:72;:::i;:::-;12714:73;12782:3;12771:9;12767:19;12758:6;12714:73;:::i;:::-;12130:664;;;;;;;;:::o;12800:442::-;12949:4;12987:2;12976:9;12972:18;12964:26;;13000:71;13068:1;13057:9;13053:17;13044:6;13000:71;:::i;:::-;13081:72;13149:2;13138:9;13134:18;13125:6;13081:72;:::i;:::-;13163;13231:2;13220:9;13216:18;13207:6;13163:72;:::i;:::-;12800:442;;;;;;:::o;13248:553::-;13425:4;13463:3;13452:9;13448:19;13440:27;;13477:71;13545:1;13534:9;13530:17;13521:6;13477:71;:::i;:::-;13558:72;13626:2;13615:9;13611:18;13602:6;13558:72;:::i;:::-;13640;13708:2;13697:9;13693:18;13684:6;13640:72;:::i;:::-;13722;13790:2;13779:9;13775:18;13766:6;13722:72;:::i;:::-;13248:553;;;;;;;:::o;13888:132::-;13955:4;13978:3;13970:11;;14008:4;14003:3;13999:14;13991:22;;13888:132;;;:::o;14026:114::-;14093:6;14127:5;14121:12;14111:22;;14026:114;;;:::o;14146:113::-;14216:4;14248;14243:3;14239:14;14231:22;;14146:113;;;:::o;14265:184::-;14364:11;14398:6;14393:3;14386:19;14438:4;14433:3;14429:14;14414:29;;14265:184;;;;:::o;14455:169::-;14539:11;14573:6;14568:3;14561:19;14613:4;14608:3;14604:14;14589:29;;14455:169;;;;:::o;14630:185::-;14670:1;14687:20;14705:1;14687:20;:::i;:::-;14682:25;;14721:20;14739:1;14721:20;:::i;:::-;14716:25;;14760:1;14750:35;;14765:18;;:::i;:::-;14750:35;14807:1;14804;14800:9;14795:14;;14630:185;;;;:::o;14821:191::-;14861:4;14881:20;14899:1;14881:20;:::i;:::-;14876:25;;14915:20;14933:1;14915:20;:::i;:::-;14910:25;;14954:1;14951;14948:8;14945:34;;;14959:18;;:::i;:::-;14945:34;15004:1;15001;14997:9;14989:17;;14821:191;;;;:::o;15018:96::-;15055:7;15084:24;15102:5;15084:24;:::i;:::-;15073:35;;15018:96;;;:::o;15120:90::-;15154:7;15197:5;15190:13;15183:21;15172:32;;15120:90;;;:::o;15216:126::-;15253:7;15293:42;15286:5;15282:54;15271:65;;15216:126;;;:::o;15348:77::-;15385:7;15414:5;15403:16;;15348:77;;;:::o;15431:140::-;15495:9;15528:37;15559:5;15528:37;:::i;:::-;15515:50;;15431:140;;;:::o;15577:141::-;15642:9;15675:37;15706:5;15675:37;:::i;:::-;15662:50;;15577:141;;;:::o;15724:126::-;15774:9;15807:37;15838:5;15807:37;:::i;:::-;15794:50;;15724:126;;;:::o;15856:113::-;15906:9;15939:24;15957:5;15939:24;:::i;:::-;15926:37;;15856:113;;;:::o;15975:233::-;16014:3;16037:24;16055:5;16037:24;:::i;:::-;16028:33;;16083:66;16076:5;16073:77;16070:103;;;16153:18;;:::i;:::-;16070:103;16200:1;16193:5;16189:13;16182:20;;15975:233;;;:::o;16214:180::-;16262:77;16259:1;16252:88;16359:4;16356:1;16349:15;16383:4;16380:1;16373:15;16400:180;16448:77;16445:1;16438:88;16545:4;16542:1;16535:15;16569:4;16566:1;16559:15;16586:180;16634:77;16631:1;16624:88;16731:4;16728:1;16721:15;16755:4;16752:1;16745:15;16895:117;17004:1;17001;16994:12;17018:180;17158:32;17154:1;17146:6;17142:14;17135:56;17018:180;:::o;17204:225::-;17344:34;17340:1;17332:6;17328:14;17321:58;17413:8;17408:2;17400:6;17396:15;17389:33;17204:225;:::o;17435:180::-;17575:32;17571:1;17563:6;17559:14;17552:56;17435:180;:::o;17621:182::-;17761:34;17757:1;17749:6;17745:14;17738:58;17621:182;:::o;17809:224::-;17949:34;17945:1;17937:6;17933:14;17926:58;18018:7;18013:2;18005:6;18001:15;17994:32;17809:224;:::o;18039:122::-;18112:24;18130:5;18112:24;:::i;:::-;18105:5;18102:35;18092:63;;18151:1;18148;18141:12;18092:63;18039:122;:::o;18167:116::-;18237:21;18252:5;18237:21;:::i;:::-;18230:5;18227:32;18217:60;;18273:1;18270;18263:12;18217:60;18167:116;:::o;18289:122::-;18362:24;18380:5;18362:24;:::i;:::-;18355:5;18352:35;18342:63;;18401:1;18398;18391:12;18342:63;18289:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1231800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"NFTCollection()": "2711",
								"checkIfAlreadyUnstaked(uint256,address)": "infinite",
								"index()": "2430",
								"owner()": "2589",
								"renounceOwnership()": "30487",
								"rewardToken()": "2666",
								"stakeNFT(uint256,uint256)": "infinite",
								"stakes(uint256)": "infinite",
								"staking_details(address,uint256)": "infinite",
								"transferOwnership(address)": "30791",
								"unStakeNFT(uint256,uint256,uint256)": "infinite",
								"unstaking_details(address,uint256)": "infinite",
								"userStakingList(address)": "infinite"
							},
							"internal": {
								"calculateRewardPool(uint256)": "117"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 632,
									"end": 633,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 609,
									"end": 633,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 609,
									"end": 633,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "CODESIZE",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSHSIZE",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "JUMP",
									"source": 9,
									"value": "[in]"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 954,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1821,
									"end": 1828,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1105,
									"end": 1117,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1095,
									"name": "PUSH",
									"source": 9,
									"value": "3"
								},
								{
									"begin": 1084,
									"end": 1095,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "PUSH",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "EXP",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1084,
									"end": 1118,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1152,
									"end": 1166,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1141,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 1128,
									"end": 1141,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "PUSH",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "EXP",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 1128,
									"end": 1167,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1017,
									"end": 1174,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 7
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2531,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2550,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2541,
									"end": 2547,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2604,
									"end": 2612,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2594,
									"end": 2602,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "tag",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 64,
									"end": 69,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 95,
									"end": 101,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 89,
									"end": 102,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 80,
									"end": 102,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 80,
									"end": 102,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 111,
									"end": 144,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "tag",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 111,
									"end": 144,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 7,
									"end": 150,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 7,
									"end": 150,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 7,
									"end": 150,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 150,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 7,
									"end": 150,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 156,
									"end": 663,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 156,
									"end": 663,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 235,
									"end": 241,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 243,
									"end": 249,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 292,
									"end": 294,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 280,
									"end": 289,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 271,
									"end": 278,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 267,
									"end": 290,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 263,
									"end": 295,
									"name": "SLT",
									"source": 10
								},
								{
									"begin": 260,
									"end": 379,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 260,
									"end": 379,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 260,
									"end": 379,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 298,
									"end": 377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 298,
									"end": 377,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 298,
									"end": 377,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 298,
									"end": 377,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 298,
									"end": 377,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 260,
									"end": 379,
									"name": "tag",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 260,
									"end": 379,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 418,
									"end": 419,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 443,
									"end": 507,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 499,
									"end": 506,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 490,
									"end": 496,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 479,
									"end": 488,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 475,
									"end": 497,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 443,
									"end": 507,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 443,
									"end": 507,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 443,
									"end": 507,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 443,
									"end": 507,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 433,
									"end": 507,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 433,
									"end": 507,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 389,
									"end": 517,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 556,
									"end": 558,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 582,
									"end": 646,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 638,
									"end": 645,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 629,
									"end": 635,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 618,
									"end": 627,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 614,
									"end": 636,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 582,
									"end": 646,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 582,
									"end": 646,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 582,
									"end": 646,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 582,
									"end": 646,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 572,
									"end": 646,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 572,
									"end": 646,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 527,
									"end": 656,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 156,
									"end": 663,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 156,
									"end": 663,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 156,
									"end": 663,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 156,
									"end": 663,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 156,
									"end": 663,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 156,
									"end": 663,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 750,
									"end": 846,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 750,
									"end": 846,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 787,
									"end": 794,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 816,
									"end": 840,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 834,
									"end": 839,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 816,
									"end": 840,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 816,
									"end": 840,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 816,
									"end": 840,
									"name": "tag",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 816,
									"end": 840,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 805,
									"end": 840,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 805,
									"end": 840,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 750,
									"end": 846,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 750,
									"end": 846,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 750,
									"end": 846,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 750,
									"end": 846,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 852,
									"end": 978,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 852,
									"end": 978,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 889,
									"end": 896,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 929,
									"end": 971,
									"name": "PUSH",
									"source": 10,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 922,
									"end": 927,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 918,
									"end": 972,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 907,
									"end": 972,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 907,
									"end": 972,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 852,
									"end": 978,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 852,
									"end": 978,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 852,
									"end": 978,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 852,
									"end": 978,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 1107,
									"end": 1224,
									"name": "tag",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 1107,
									"end": 1224,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1216,
									"end": 1217,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1213,
									"end": 1214,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1206,
									"end": 1218,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1230,
									"end": 1352,
									"name": "tag",
									"source": 10,
									"value": "21"
								},
								{
									"begin": 1230,
									"end": 1352,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1303,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1321,
									"end": 1326,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1303,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 1303,
									"end": 1327,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1303,
									"end": 1327,
									"name": "tag",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 1303,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1296,
									"end": 1301,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1293,
									"end": 1328,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1283,
									"end": 1346,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1283,
									"end": 1346,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1342,
									"end": 1343,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1339,
									"end": 1340,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1332,
									"end": 1344,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1283,
									"end": 1346,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1283,
									"end": 1346,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1230,
									"end": 1352,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1230,
									"end": 1352,
									"name": "JUMP",
									"source": 10,
									"value": "[out]"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "tag",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 415,
									"end": 3876,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122040a376c459bbff7b1f5c029d21f10b3f8c64abc65e7e87ca96ab02cb826f20bd64736f6c63430008070033",
									".code": [
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "78DBA594"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "D5A44F86"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "D5A44F86"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "F7C618C1"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "FBACA086"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "78DBA594"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "79E5F7D7"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "2986C0E5"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "3AF416D1"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "3F106929"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "51CECC80"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "78B2E3A9"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 415,
											"end": 3876,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 497,
											"end": 525,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "tag",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "50"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 852,
											"end": 892,
											"name": "tag",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "tag",
											"source": 9,
											"value": "56"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 553,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "tag",
											"source": 9,
											"value": "69"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "tag",
											"source": 9,
											"value": "72"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 609,
											"end": 633,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 609,
											"end": 633,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 956,
											"end": 1010,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "tag",
											"source": 9,
											"value": "76"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 898,
											"end": 950,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2013,
											"end": 2023,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2023,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1978,
											"end": 2023,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1978,
											"end": 1991,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1999,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1978,
											"end": 1999,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 1999,
											"name": "PUSH",
											"source": 9,
											"value": "6352211E"
										},
										{
											"begin": 2000,
											"end": 2008,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "tag",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 1978,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2023,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1978,
											"end": 2023,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1978,
											"end": 2023,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "tag",
											"source": 9,
											"value": "85"
										},
										{
											"begin": 1970,
											"end": 2057,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2090,
											"end": 2095,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2090,
											"end": 2095,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2096,
											"end": 2106,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2107,
											"end": 2115,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2117,
											"end": 2122,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2124,
											"end": 2139,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2083,
											"end": 2140,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2073,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2079,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2074,
											"end": 2079,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2067,
											"end": 2080,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2067,
											"end": 2140,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2165,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2166,
											"end": 2176,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2150,
											"end": 2177,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2183,
											"end": 2188,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2183,
											"end": 2188,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2150,
											"end": 2189,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2199,
											"end": 2212,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2225,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2199,
											"end": 2225,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2225,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 2226,
											"end": 2236,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2246,
											"end": 2250,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 2253,
											"end": 2261,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "tag",
											"source": 9,
											"value": "93"
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2199,
											"end": 2262,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2277,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2272,
											"end": 2277,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "tag",
											"source": 9,
											"value": "94"
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2272,
											"end": 2279,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2300,
											"end": 2310,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "PUSH",
											"source": 9,
											"value": "F556991011E831BCFAC4F406D547E5E32CDD98267EFAB83935230D5F8D02C446"
										},
										{
											"begin": 2312,
											"end": 2320,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2322,
											"end": 2327,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2329,
											"end": 2344,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "97"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2294,
											"end": 2345,
											"name": "LOG2",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1902,
											"end": 2352,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 497,
											"end": 525,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 497,
											"end": 525,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "tag",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2671,
											"end": 2676,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2665,
											"end": 2667,
											"name": "PUSH",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 2660,
											"end": 2662,
											"name": "PUSH",
											"source": 9,
											"value": "3C"
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2633,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2634,
											"end": 2640,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2627,
											"end": 2641,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2651,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2627,
											"end": 2651,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2651,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2609,
											"end": 2624,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "106"
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "tag",
											"source": 9,
											"value": "105"
										},
										{
											"begin": 2609,
											"end": 2651,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "tag",
											"source": 9,
											"value": "107"
										},
										{
											"begin": 2608,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "tag",
											"source": 9,
											"value": "109"
										},
										{
											"begin": 2608,
											"end": 2662,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "108"
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "tag",
											"source": 9,
											"value": "110"
										},
										{
											"begin": 2608,
											"end": 2667,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2676,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2608,
											"end": 2676,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "tag",
											"source": 9,
											"value": "112"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "tag",
											"source": 9,
											"value": "111"
										},
										{
											"begin": 2600,
											"end": 2710,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2751,
											"end": 2761,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2761,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2728,
											"end": 2761,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2734,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2735,
											"end": 2741,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2728,
											"end": 2742,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2728,
											"end": 2747,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2761,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2728,
											"end": 2761,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2728,
											"end": 2761,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH",
											"source": 9,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "tag",
											"source": 9,
											"value": "115"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 2720,
											"end": 2802,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2825,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2826,
											"end": 2832,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2819,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2833,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2860,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2871,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2872,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2878,
											"end": 2884,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2843,
											"end": 2885,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2895,
											"end": 2908,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2921,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2895,
											"end": 2921,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2921,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 2931,
											"end": 2935,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 2938,
											"end": 2948,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2950,
											"end": 2958,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "tag",
											"source": 9,
											"value": "119"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "tag",
											"source": 9,
											"value": "121"
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2895,
											"end": 2959,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2969,
											"end": 2983,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2987,
											"end": 3013,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 3007,
											"end": 3012,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2987,
											"end": 3006,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 2987,
											"end": 3013,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 2987,
											"end": 3013,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 2987,
											"end": 3013,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2969,
											"end": 3013,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2969,
											"end": 3013,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3023,
											"end": 3034,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3043,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3023,
											"end": 3043,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3043,
											"name": "PUSH",
											"source": 9,
											"value": "A9059CBB"
										},
										{
											"begin": 3045,
											"end": 3055,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3057,
											"end": 3063,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "tag",
											"source": 9,
											"value": "128"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3023,
											"end": 3064,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3087,
											"end": 3097,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "PUSH",
											"source": 9,
											"value": "F74C9F1985016FF6AA83C3FD81E31D0BE3B194F205AE5E1B57F5BD74AD28E4CF"
										},
										{
											"begin": 3099,
											"end": 3107,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3109,
											"end": 3114,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3117,
											"end": 3132,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 3134,
											"end": 3140,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "tag",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3079,
											"end": 3141,
											"name": "LOG2",
											"source": 9
										},
										{
											"begin": 2590,
											"end": 3148,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 3148,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "tag",
											"source": 9,
											"value": "48"
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3326,
											"end": 3342,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3358,
											"end": 3379,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3382,
											"end": 3397,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3398,
											"end": 3403,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3382,
											"end": 3404,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3358,
											"end": 3404,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3425,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3414,
											"end": 3425,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3414,
											"end": 3425,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3414,
											"end": 3425,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3241,
											"end": 3432,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1266,
											"end": 1279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 852,
											"end": 892,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 852,
											"end": 892,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2189,
											"end": 2190,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2177,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "tag",
											"source": 9,
											"value": "65"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "EXP",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 553,
											"end": 578,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 553,
											"end": 578,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "tag",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3656,
											"end": 3660,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3677,
											"end": 3683,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3684,
											"end": 3685,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3677,
											"end": 3685,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3677,
											"end": 3685,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3708,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3714,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3691,
											"end": 3715,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3722,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3722,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3722,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3691,
											"end": 3722,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3687,
											"end": 3688,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3687,
											"end": 3722,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3775,
											"end": 3785,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3763,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3764,
											"end": 3769,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3746,
											"end": 3770,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3771,
											"end": 3772,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3773,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3746,
											"end": 3785,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3834,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 3743,
											"end": 3834,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3815,
											"end": 3819,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3808,
											"end": 3819,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3808,
											"end": 3819,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3808,
											"end": 3819,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3808,
											"end": 3819,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3808,
											"end": 3819,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3743,
											"end": 3834,
											"name": "tag",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 3743,
											"end": 3834,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3724,
											"end": 3727,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3672,
											"end": 3844,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3862,
											"end": 3867,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3855,
											"end": 3867,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3855,
											"end": 3867,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3570,
											"end": 3874,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2531,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2550,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2541,
											"end": 2547,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2604,
											"end": 2612,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2594,
											"end": 2602,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1522,
											"end": 1529,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1552,
											"end": 1553,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1545,
											"end": 1550,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1545,
											"end": 1553,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1746,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 1542,
											"end": 1746,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1576,
											"end": 1580,
											"name": "PUSH",
											"source": 9,
											"value": "3E8"
										},
										{
											"begin": 1569,
											"end": 1580,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1569,
											"end": 1580,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1569,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 1569,
											"end": 1580,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1542,
											"end": 1746,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 1542,
											"end": 1746,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1607,
											"end": 1609,
											"name": "PUSH",
											"source": 9,
											"value": "E"
										},
										{
											"begin": 1600,
											"end": 1605,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1600,
											"end": 1609,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1597,
											"end": 1746,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1597,
											"end": 1746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 1597,
											"end": 1746,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1632,
											"end": 1636,
											"name": "PUSH",
											"source": 9,
											"value": "BB8"
										},
										{
											"begin": 1625,
											"end": 1636,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1636,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1636,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 1625,
											"end": 1636,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1597,
											"end": 1746,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 1597,
											"end": 1746,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1663,
											"end": 1665,
											"name": "PUSH",
											"source": 9,
											"value": "1E"
										},
										{
											"begin": 1656,
											"end": 1661,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1656,
											"end": 1665,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1746,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 1653,
											"end": 1746,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1688,
											"end": 1692,
											"name": "PUSH",
											"source": 9,
											"value": "1388"
										},
										{
											"begin": 1681,
											"end": 1692,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1681,
											"end": 1692,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1681,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 1681,
											"end": 1692,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1653,
											"end": 1746,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 1653,
											"end": 1746,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1730,
											"end": 1735,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 1723,
											"end": 1735,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1723,
											"end": 1735,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1457,
											"end": 1752,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 295,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 152,
											"end": 295,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 209,
											"end": 214,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 240,
											"end": 246,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 234,
											"end": 247,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 225,
											"end": 247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 225,
											"end": 247,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 256,
											"end": 289,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 283,
											"end": 288,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 256,
											"end": 289,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 256,
											"end": 289,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 256,
											"end": 289,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 256,
											"end": 289,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 152,
											"end": 295,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 152,
											"end": 295,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 152,
											"end": 295,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 152,
											"end": 295,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 152,
											"end": 295,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 301,
											"end": 438,
											"name": "tag",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 301,
											"end": 438,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 355,
											"end": 360,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 386,
											"end": 392,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 380,
											"end": 393,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 371,
											"end": 393,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 371,
											"end": 393,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 402,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 426,
											"end": 431,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 402,
											"end": 432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 402,
											"end": 432,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 402,
											"end": 432,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 402,
											"end": 432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 301,
											"end": 438,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 301,
											"end": 438,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 301,
											"end": 438,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 301,
											"end": 438,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 301,
											"end": 438,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 444,
											"end": 583,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 444,
											"end": 583,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 490,
											"end": 495,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 528,
											"end": 534,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 515,
											"end": 535,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 506,
											"end": 535,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 506,
											"end": 535,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 544,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 571,
											"end": 576,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 544,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 544,
											"end": 577,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 544,
											"end": 577,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 544,
											"end": 577,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 444,
											"end": 583,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 444,
											"end": 583,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 444,
											"end": 583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 444,
											"end": 583,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 444,
											"end": 583,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 589,
											"end": 918,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 589,
											"end": 918,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 648,
											"end": 654,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 697,
											"end": 699,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 685,
											"end": 694,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 676,
											"end": 683,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 672,
											"end": 695,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 668,
											"end": 700,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 665,
											"end": 784,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 665,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 665,
											"end": 784,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 703,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 703,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 703,
											"end": 782,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 703,
											"end": 782,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 703,
											"end": 782,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 665,
											"end": 784,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 665,
											"end": 784,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 823,
											"end": 824,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 848,
											"end": 901,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 893,
											"end": 900,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 884,
											"end": 890,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 873,
											"end": 882,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 869,
											"end": 891,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 848,
											"end": 901,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 848,
											"end": 901,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 848,
											"end": 901,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 848,
											"end": 901,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 838,
											"end": 901,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 838,
											"end": 901,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 794,
											"end": 911,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 589,
											"end": 918,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 589,
											"end": 918,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 589,
											"end": 918,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 589,
											"end": 918,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 589,
											"end": 918,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 994,
											"end": 1000,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1043,
											"end": 1045,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1031,
											"end": 1040,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1022,
											"end": 1029,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1018,
											"end": 1041,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1014,
											"end": 1046,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1011,
											"end": 1130,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1011,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 1011,
											"end": 1130,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1049,
											"end": 1128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 1049,
											"end": 1128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 1049,
											"end": 1128,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1049,
											"end": 1128,
											"name": "tag",
											"source": 10,
											"value": "193"
										},
										{
											"begin": 1049,
											"end": 1128,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1011,
											"end": 1130,
											"name": "tag",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 1011,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1169,
											"end": 1170,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1194,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 1250,
											"end": 1257,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1241,
											"end": 1247,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1230,
											"end": 1239,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1226,
											"end": 1248,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1194,
											"end": 1258,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 1194,
											"end": 1258,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1194,
											"end": 1258,
											"name": "tag",
											"source": 10,
											"value": "194"
										},
										{
											"begin": 1194,
											"end": 1258,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1184,
											"end": 1258,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1184,
											"end": 1258,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1140,
											"end": 1268,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 924,
											"end": 1275,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1349,
											"end": 1355,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1357,
											"end": 1363,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1406,
											"end": 1408,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1394,
											"end": 1403,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1385,
											"end": 1392,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1381,
											"end": 1404,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1377,
											"end": 1409,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1374,
											"end": 1493,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1374,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 1374,
											"end": 1493,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 1412,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 1412,
											"end": 1491,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1412,
											"end": 1491,
											"name": "tag",
											"source": 10,
											"value": "197"
										},
										{
											"begin": 1412,
											"end": 1491,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1374,
											"end": 1493,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 1374,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1532,
											"end": 1533,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 1602,
											"end": 1609,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1593,
											"end": 1599,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1578,
											"end": 1600,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "tag",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 1557,
											"end": 1610,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1547,
											"end": 1610,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1547,
											"end": 1610,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1503,
											"end": 1620,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1659,
											"end": 1661,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1685,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 1730,
											"end": 1737,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1721,
											"end": 1727,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1710,
											"end": 1719,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 1706,
											"end": 1728,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1685,
											"end": 1738,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 1685,
											"end": 1738,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1685,
											"end": 1738,
											"name": "tag",
											"source": 10,
											"value": "199"
										},
										{
											"begin": 1685,
											"end": 1738,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1675,
											"end": 1738,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1675,
											"end": 1738,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1630,
											"end": 1748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1281,
											"end": 1755,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1828,
											"end": 1834,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1877,
											"end": 1879,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1865,
											"end": 1874,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1856,
											"end": 1863,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1852,
											"end": 1875,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 1848,
											"end": 1880,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 1845,
											"end": 1964,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1845,
											"end": 1964,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 1845,
											"end": 1964,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1883,
											"end": 1962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 1883,
											"end": 1962,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 1883,
											"end": 1962,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1883,
											"end": 1962,
											"name": "tag",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 1883,
											"end": 1962,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1845,
											"end": 1964,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 1845,
											"end": 1964,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2003,
											"end": 2004,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2028,
											"end": 2089,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 2081,
											"end": 2088,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2078,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2061,
											"end": 2070,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2057,
											"end": 2079,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2028,
											"end": 2089,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 2028,
											"end": 2089,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2028,
											"end": 2089,
											"name": "tag",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 2028,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2018,
											"end": 2089,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2018,
											"end": 2089,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1974,
											"end": 2099,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1761,
											"end": 2106,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "tag",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2171,
											"end": 2177,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2220,
											"end": 2222,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2208,
											"end": 2217,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2199,
											"end": 2206,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2195,
											"end": 2218,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2223,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2188,
											"end": 2307,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2188,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 2188,
											"end": 2307,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2226,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 2226,
											"end": 2305,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 2226,
											"end": 2305,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2226,
											"end": 2305,
											"name": "tag",
											"source": 10,
											"value": "206"
										},
										{
											"begin": 2226,
											"end": 2305,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2188,
											"end": 2307,
											"name": "tag",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 2188,
											"end": 2307,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2346,
											"end": 2347,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2371,
											"end": 2424,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 2416,
											"end": 2423,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2407,
											"end": 2413,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2396,
											"end": 2405,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2392,
											"end": 2414,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2371,
											"end": 2424,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 2371,
											"end": 2424,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2371,
											"end": 2424,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 2371,
											"end": 2424,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2361,
											"end": 2424,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2361,
											"end": 2424,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2317,
											"end": 2434,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2112,
											"end": 2441,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2515,
											"end": 2521,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2523,
											"end": 2529,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2572,
											"end": 2574,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2569,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2551,
											"end": 2558,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2547,
											"end": 2570,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2543,
											"end": 2575,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 2540,
											"end": 2659,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2540,
											"end": 2659,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 2540,
											"end": 2659,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2578,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 2578,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 2578,
											"end": 2657,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2578,
											"end": 2657,
											"name": "tag",
											"source": 10,
											"value": "210"
										},
										{
											"begin": 2578,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2540,
											"end": 2659,
											"name": "tag",
											"source": 10,
											"value": "209"
										},
										{
											"begin": 2540,
											"end": 2659,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2698,
											"end": 2699,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2723,
											"end": 2776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 2768,
											"end": 2775,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2759,
											"end": 2765,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2748,
											"end": 2757,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2744,
											"end": 2766,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2723,
											"end": 2776,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 2723,
											"end": 2776,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2723,
											"end": 2776,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 2723,
											"end": 2776,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2713,
											"end": 2776,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2713,
											"end": 2776,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2669,
											"end": 2786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2825,
											"end": 2827,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2851,
											"end": 2904,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 2896,
											"end": 2903,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2887,
											"end": 2893,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2876,
											"end": 2885,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2872,
											"end": 2894,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2851,
											"end": 2904,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 2851,
											"end": 2904,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2851,
											"end": 2904,
											"name": "tag",
											"source": 10,
											"value": "212"
										},
										{
											"begin": 2851,
											"end": 2904,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2841,
											"end": 2904,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2841,
											"end": 2904,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2796,
											"end": 2914,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2447,
											"end": 2921,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2995,
											"end": 3001,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3052,
											"end": 3054,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3040,
											"end": 3049,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3031,
											"end": 3038,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3027,
											"end": 3050,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3023,
											"end": 3055,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3020,
											"end": 3139,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3020,
											"end": 3139,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 3020,
											"end": 3139,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3058,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 3058,
											"end": 3137,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 3058,
											"end": 3137,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3058,
											"end": 3137,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 3058,
											"end": 3137,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3020,
											"end": 3139,
											"name": "tag",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 3020,
											"end": 3139,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3178,
											"end": 3179,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3203,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 3248,
											"end": 3255,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3239,
											"end": 3245,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3228,
											"end": 3237,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3224,
											"end": 3246,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3203,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 3203,
											"end": 3256,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3203,
											"end": 3256,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 3203,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3193,
											"end": 3256,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3193,
											"end": 3256,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3149,
											"end": 3266,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3305,
											"end": 3307,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3331,
											"end": 3384,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 3376,
											"end": 3383,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3367,
											"end": 3373,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3356,
											"end": 3365,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3352,
											"end": 3374,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3331,
											"end": 3384,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 3331,
											"end": 3384,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3331,
											"end": 3384,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 3331,
											"end": 3384,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3321,
											"end": 3384,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3321,
											"end": 3384,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3276,
											"end": 3394,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2927,
											"end": 3401,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3484,
											"end": 3490,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3492,
											"end": 3498,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3500,
											"end": 3506,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3549,
											"end": 3551,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3537,
											"end": 3546,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3528,
											"end": 3535,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3524,
											"end": 3547,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3520,
											"end": 3552,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 3517,
											"end": 3636,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3517,
											"end": 3636,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 3517,
											"end": 3636,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3555,
											"end": 3634,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 3555,
											"end": 3634,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 3555,
											"end": 3634,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3555,
											"end": 3634,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 3555,
											"end": 3634,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3517,
											"end": 3636,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 3517,
											"end": 3636,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3675,
											"end": 3676,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3700,
											"end": 3753,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 3745,
											"end": 3752,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3736,
											"end": 3742,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3725,
											"end": 3734,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3721,
											"end": 3743,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3700,
											"end": 3753,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 3700,
											"end": 3753,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3700,
											"end": 3753,
											"name": "tag",
											"source": 10,
											"value": "221"
										},
										{
											"begin": 3700,
											"end": 3753,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3690,
											"end": 3753,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3690,
											"end": 3753,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3646,
											"end": 3763,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3802,
											"end": 3804,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3828,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 3873,
											"end": 3880,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3864,
											"end": 3870,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3853,
											"end": 3862,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3849,
											"end": 3871,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3828,
											"end": 3881,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 3828,
											"end": 3881,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3828,
											"end": 3881,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 3828,
											"end": 3881,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3818,
											"end": 3881,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3818,
											"end": 3881,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3773,
											"end": 3891,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3930,
											"end": 3932,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3956,
											"end": 4009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 4001,
											"end": 4008,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3992,
											"end": 3998,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3981,
											"end": 3990,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3977,
											"end": 3999,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3956,
											"end": 4009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 3956,
											"end": 4009,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3956,
											"end": 4009,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3956,
											"end": 4009,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3946,
											"end": 4009,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3946,
											"end": 4009,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3901,
											"end": 4019,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 4026,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4101,
											"end": 4111,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4168,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 4164,
											"end": 4167,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4156,
											"end": 4162,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4122,
											"end": 4168,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 4122,
											"end": 4168,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4122,
											"end": 4168,
											"name": "tag",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 4122,
											"end": 4168,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4200,
											"end": 4204,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4195,
											"end": 4198,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4191,
											"end": 4205,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4177,
											"end": 4205,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4177,
											"end": 4205,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4032,
											"end": 4211,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4217,
											"end": 4335,
											"name": "tag",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 4217,
											"end": 4335,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 4322,
											"end": 4327,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4304,
											"end": 4328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 4304,
											"end": 4328,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4304,
											"end": 4328,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 4304,
											"end": 4328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4299,
											"end": 4302,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4292,
											"end": 4329,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4217,
											"end": 4335,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4217,
											"end": 4335,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4217,
											"end": 4335,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "tag",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4490,
											"end": 4493,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4519,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 4567,
											"end": 4572,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4519,
											"end": 4573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 4519,
											"end": 4573,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4519,
											"end": 4573,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 4519,
											"end": 4573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4589,
											"end": 4675,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4668,
											"end": 4674,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4663,
											"end": 4666,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4589,
											"end": 4675,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 4589,
											"end": 4675,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4589,
											"end": 4675,
											"name": "tag",
											"source": 10,
											"value": "236"
										},
										{
											"begin": 4589,
											"end": 4675,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4582,
											"end": 4675,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4582,
											"end": 4675,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4699,
											"end": 4755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 4749,
											"end": 4754,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4699,
											"end": 4755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 4699,
											"end": 4755,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4699,
											"end": 4755,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 4699,
											"end": 4755,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4778,
											"end": 4785,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4809,
											"end": 4810,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "tag",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4819,
											"end": 4825,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4816,
											"end": 4817,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4826,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4895,
											"end": 4901,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4889,
											"end": 4902,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4922,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 4981,
											"end": 4984,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 4966,
											"end": 4979,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4922,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 4922,
											"end": 4985,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4922,
											"end": 4985,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 4922,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4915,
											"end": 4985,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 4915,
											"end": 4985,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5008,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 5061,
											"end": 5067,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5008,
											"end": 5068,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 5008,
											"end": 5068,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5008,
											"end": 5068,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 5008,
											"end": 5068,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4998,
											"end": 5068,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4998,
											"end": 5068,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4854,
											"end": 5078,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4841,
											"end": 4842,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4838,
											"end": 4839,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4834,
											"end": 4843,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4829,
											"end": 4843,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4829,
											"end": 4843,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "240"
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 4794,
											"end": 5078,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4798,
											"end": 4812,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5094,
											"end": 5097,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5087,
											"end": 5097,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 5087,
											"end": 5097,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4495,
											"end": 5103,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4495,
											"end": 5103,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4495,
											"end": 5103,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4371,
											"end": 5103,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5109,
											"end": 5218,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 5109,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5190,
											"end": 5211,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 5205,
											"end": 5210,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5190,
											"end": 5211,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 5190,
											"end": 5211,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5190,
											"end": 5211,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 5190,
											"end": 5211,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5185,
											"end": 5188,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5178,
											"end": 5212,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5218,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5218,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5109,
											"end": 5218,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5224,
											"end": 5383,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 5224,
											"end": 5383,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5325,
											"end": 5376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 5370,
											"end": 5375,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5325,
											"end": 5376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 5325,
											"end": 5376,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5325,
											"end": 5376,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 5325,
											"end": 5376,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5320,
											"end": 5323,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5313,
											"end": 5377,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5224,
											"end": 5383,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5224,
											"end": 5383,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5224,
											"end": 5383,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5389,
											"end": 5550,
											"name": "tag",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 5389,
											"end": 5550,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 5537,
											"end": 5542,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 5491,
											"end": 5543,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5486,
											"end": 5489,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5479,
											"end": 5544,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5389,
											"end": 5550,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5389,
											"end": 5550,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5389,
											"end": 5550,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5556,
											"end": 5922,
											"name": "tag",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 5556,
											"end": 5922,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5698,
											"end": 5701,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5719,
											"end": 5786,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 5783,
											"end": 5785,
											"name": "PUSH",
											"source": 10,
											"value": "1E"
										},
										{
											"begin": 5778,
											"end": 5781,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5719,
											"end": 5786,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 5719,
											"end": 5786,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5719,
											"end": 5786,
											"name": "tag",
											"source": 10,
											"value": "260"
										},
										{
											"begin": 5719,
											"end": 5786,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5712,
											"end": 5786,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5712,
											"end": 5786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5795,
											"end": 5888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 5884,
											"end": 5887,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5795,
											"end": 5888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 5795,
											"end": 5888,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5795,
											"end": 5888,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 5795,
											"end": 5888,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5913,
											"end": 5915,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5908,
											"end": 5911,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5904,
											"end": 5916,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5897,
											"end": 5916,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5897,
											"end": 5916,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5922,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5922,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5922,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5556,
											"end": 5922,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5928,
											"end": 6294,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 5928,
											"end": 6294,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6070,
											"end": 6073,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6091,
											"end": 6158,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 6155,
											"end": 6157,
											"name": "PUSH",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 6150,
											"end": 6153,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6091,
											"end": 6158,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 6091,
											"end": 6158,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6091,
											"end": 6158,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 6091,
											"end": 6158,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6084,
											"end": 6158,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6084,
											"end": 6158,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6167,
											"end": 6260,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 6256,
											"end": 6259,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6167,
											"end": 6260,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 6167,
											"end": 6260,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6167,
											"end": 6260,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 6167,
											"end": 6260,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6285,
											"end": 6287,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6280,
											"end": 6283,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6276,
											"end": 6288,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6269,
											"end": 6288,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6269,
											"end": 6288,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5928,
											"end": 6294,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5928,
											"end": 6294,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5928,
											"end": 6294,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5928,
											"end": 6294,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6300,
											"end": 6666,
											"name": "tag",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 6300,
											"end": 6666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6442,
											"end": 6445,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6463,
											"end": 6530,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 6527,
											"end": 6529,
											"name": "PUSH",
											"source": 10,
											"value": "1E"
										},
										{
											"begin": 6522,
											"end": 6525,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6463,
											"end": 6530,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 6463,
											"end": 6530,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6463,
											"end": 6530,
											"name": "tag",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 6463,
											"end": 6530,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6456,
											"end": 6530,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6456,
											"end": 6530,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6539,
											"end": 6632,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 6628,
											"end": 6631,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6539,
											"end": 6632,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 6539,
											"end": 6632,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6539,
											"end": 6632,
											"name": "tag",
											"source": 10,
											"value": "272"
										},
										{
											"begin": 6539,
											"end": 6632,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6657,
											"end": 6659,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6652,
											"end": 6655,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6648,
											"end": 6660,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6641,
											"end": 6660,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6641,
											"end": 6660,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6666,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6666,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6666,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6300,
											"end": 6666,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6672,
											"end": 7038,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 6672,
											"end": 7038,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6814,
											"end": 6817,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6835,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 6899,
											"end": 6901,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6894,
											"end": 6897,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6835,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 6835,
											"end": 6902,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6835,
											"end": 6902,
											"name": "tag",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 6835,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6828,
											"end": 6902,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6828,
											"end": 6902,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6911,
											"end": 7004,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 7000,
											"end": 7003,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6911,
											"end": 7004,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 6911,
											"end": 7004,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6911,
											"end": 7004,
											"name": "tag",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 6911,
											"end": 7004,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7029,
											"end": 7031,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7024,
											"end": 7027,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7020,
											"end": 7032,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7013,
											"end": 7032,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7013,
											"end": 7032,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6672,
											"end": 7038,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6672,
											"end": 7038,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6672,
											"end": 7038,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6672,
											"end": 7038,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7044,
											"end": 7410,
											"name": "tag",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 7044,
											"end": 7410,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7186,
											"end": 7189,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7207,
											"end": 7274,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 7271,
											"end": 7273,
											"name": "PUSH",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 7266,
											"end": 7269,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7207,
											"end": 7274,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 7207,
											"end": 7274,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7207,
											"end": 7274,
											"name": "tag",
											"source": 10,
											"value": "281"
										},
										{
											"begin": 7207,
											"end": 7274,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7200,
											"end": 7274,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7200,
											"end": 7274,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7283,
											"end": 7376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 7372,
											"end": 7375,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7283,
											"end": 7376,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 7283,
											"end": 7376,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7283,
											"end": 7376,
											"name": "tag",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 7283,
											"end": 7376,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7401,
											"end": 7403,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7396,
											"end": 7399,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7392,
											"end": 7404,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7385,
											"end": 7404,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7385,
											"end": 7404,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7044,
											"end": 7410,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7044,
											"end": 7410,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7044,
											"end": 7410,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7044,
											"end": 7410,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7416,
											"end": 7524,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 7416,
											"end": 7524,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7493,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 7511,
											"end": 7516,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7493,
											"end": 7517,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 7493,
											"end": 7517,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7493,
											"end": 7517,
											"name": "tag",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 7493,
											"end": 7517,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7488,
											"end": 7491,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7481,
											"end": 7518,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7416,
											"end": 7524,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7416,
											"end": 7524,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7416,
											"end": 7524,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7530,
											"end": 7648,
											"name": "tag",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 7530,
											"end": 7648,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7617,
											"end": 7641,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 7635,
											"end": 7640,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7617,
											"end": 7641,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 7617,
											"end": 7641,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7617,
											"end": 7641,
											"name": "tag",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 7617,
											"end": 7641,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7612,
											"end": 7615,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7605,
											"end": 7642,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7530,
											"end": 7648,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7530,
											"end": 7648,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7530,
											"end": 7648,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7747,
											"end": 7751,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7785,
											"end": 7787,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7774,
											"end": 7783,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7770,
											"end": 7788,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7762,
											"end": 7788,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7762,
											"end": 7788,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7798,
											"end": 7869,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 7866,
											"end": 7867,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7855,
											"end": 7864,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7851,
											"end": 7868,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7842,
											"end": 7848,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7798,
											"end": 7869,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 7798,
											"end": 7869,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7798,
											"end": 7869,
											"name": "tag",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 7798,
											"end": 7869,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7654,
											"end": 7876,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8031,
											"end": 8035,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8069,
											"end": 8071,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8058,
											"end": 8067,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8054,
											"end": 8072,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8046,
											"end": 8072,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8046,
											"end": 8072,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8082,
											"end": 8153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 8150,
											"end": 8151,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8139,
											"end": 8148,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8135,
											"end": 8152,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8126,
											"end": 8132,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8082,
											"end": 8153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 8082,
											"end": 8153,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8082,
											"end": 8153,
											"name": "tag",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 8082,
											"end": 8153,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8163,
											"end": 8235,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 8231,
											"end": 8233,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8220,
											"end": 8229,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8216,
											"end": 8234,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8207,
											"end": 8213,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8163,
											"end": 8235,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 8163,
											"end": 8235,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8163,
											"end": 8235,
											"name": "tag",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 8163,
											"end": 8235,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8245,
											"end": 8317,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 8313,
											"end": 8315,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8302,
											"end": 8311,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8298,
											"end": 8316,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8289,
											"end": 8295,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8245,
											"end": 8317,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 8245,
											"end": 8317,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8245,
											"end": 8317,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 8245,
											"end": 8317,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7882,
											"end": 8324,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8451,
											"end": 8455,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8489,
											"end": 8491,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8478,
											"end": 8487,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8474,
											"end": 8492,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8466,
											"end": 8492,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8466,
											"end": 8492,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8502,
											"end": 8573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 8570,
											"end": 8571,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8559,
											"end": 8568,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8555,
											"end": 8572,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8546,
											"end": 8552,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8502,
											"end": 8573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 8502,
											"end": 8573,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8502,
											"end": 8573,
											"name": "tag",
											"source": 10,
											"value": "297"
										},
										{
											"begin": 8502,
											"end": 8573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8583,
											"end": 8655,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 8651,
											"end": 8653,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8640,
											"end": 8649,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8636,
											"end": 8654,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8627,
											"end": 8633,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8583,
											"end": 8655,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 8583,
											"end": 8655,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8583,
											"end": 8655,
											"name": "tag",
											"source": 10,
											"value": "298"
										},
										{
											"begin": 8583,
											"end": 8655,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8330,
											"end": 8662,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8811,
											"end": 8815,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8849,
											"end": 8851,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8838,
											"end": 8847,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8834,
											"end": 8852,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8826,
											"end": 8852,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8826,
											"end": 8852,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8898,
											"end": 8907,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8892,
											"end": 8896,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8888,
											"end": 8908,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8884,
											"end": 8885,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8873,
											"end": 8882,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8869,
											"end": 8886,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8862,
											"end": 8909,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8926,
											"end": 9034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 9029,
											"end": 9033,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9020,
											"end": 9026,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8926,
											"end": 9034,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 8926,
											"end": 9034,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8926,
											"end": 9034,
											"name": "tag",
											"source": 10,
											"value": "300"
										},
										{
											"begin": 8926,
											"end": 9034,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8918,
											"end": 9034,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8918,
											"end": 9034,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8668,
											"end": 9041,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9134,
											"end": 9138,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9172,
											"end": 9174,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9161,
											"end": 9170,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9157,
											"end": 9175,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9149,
											"end": 9175,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9149,
											"end": 9175,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9185,
											"end": 9250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 9247,
											"end": 9248,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9236,
											"end": 9245,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9232,
											"end": 9249,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9223,
											"end": 9229,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9185,
											"end": 9250,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 9185,
											"end": 9250,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9185,
											"end": 9250,
											"name": "tag",
											"source": 10,
											"value": "302"
										},
										{
											"begin": 9185,
											"end": 9250,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9047,
											"end": 9257,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9370,
											"end": 9374,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9408,
											"end": 9410,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9397,
											"end": 9406,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9393,
											"end": 9411,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9385,
											"end": 9411,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9385,
											"end": 9411,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9421,
											"end": 9506,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 9503,
											"end": 9504,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9492,
											"end": 9501,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9488,
											"end": 9505,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9479,
											"end": 9485,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9421,
											"end": 9506,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 9421,
											"end": 9506,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9421,
											"end": 9506,
											"name": "tag",
											"source": 10,
											"value": "304"
										},
										{
											"begin": 9421,
											"end": 9506,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9263,
											"end": 9513,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9627,
											"end": 9631,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9665,
											"end": 9667,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9654,
											"end": 9663,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9650,
											"end": 9668,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9642,
											"end": 9668,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9642,
											"end": 9668,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9678,
											"end": 9764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 9761,
											"end": 9762,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9750,
											"end": 9759,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9746,
											"end": 9763,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9737,
											"end": 9743,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9678,
											"end": 9764,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "254"
										},
										{
											"begin": 9678,
											"end": 9764,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9678,
											"end": 9764,
											"name": "tag",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 9678,
											"end": 9764,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9519,
											"end": 9771,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 9777,
											"end": 10196,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 9777,
											"end": 10196,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9943,
											"end": 9947,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9981,
											"end": 9983,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9970,
											"end": 9979,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9966,
											"end": 9984,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9958,
											"end": 9984,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9958,
											"end": 9984,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10030,
											"end": 10039,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10024,
											"end": 10028,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10020,
											"end": 10040,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10016,
											"end": 10017,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10005,
											"end": 10014,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10001,
											"end": 10018,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9994,
											"end": 10041,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10058,
											"end": 10189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 10184,
											"end": 10188,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10058,
											"end": 10189,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 10058,
											"end": 10189,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10058,
											"end": 10189,
											"name": "tag",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 10058,
											"end": 10189,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10050,
											"end": 10189,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10050,
											"end": 10189,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9777,
											"end": 10196,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9777,
											"end": 10196,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9777,
											"end": 10196,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9777,
											"end": 10196,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10202,
											"end": 10621,
											"name": "tag",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 10202,
											"end": 10621,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10368,
											"end": 10372,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10406,
											"end": 10408,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10395,
											"end": 10404,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10391,
											"end": 10409,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10383,
											"end": 10409,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10383,
											"end": 10409,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10455,
											"end": 10464,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10449,
											"end": 10453,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10445,
											"end": 10465,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10441,
											"end": 10442,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10430,
											"end": 10439,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10426,
											"end": 10443,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10419,
											"end": 10466,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10483,
											"end": 10614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 10609,
											"end": 10613,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10483,
											"end": 10614,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 10483,
											"end": 10614,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10483,
											"end": 10614,
											"name": "tag",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 10483,
											"end": 10614,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10475,
											"end": 10614,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10475,
											"end": 10614,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10202,
											"end": 10621,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10202,
											"end": 10621,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10202,
											"end": 10621,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10202,
											"end": 10621,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 10627,
											"end": 11046,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 10627,
											"end": 11046,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10793,
											"end": 10797,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10831,
											"end": 10833,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10820,
											"end": 10829,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10816,
											"end": 10834,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10808,
											"end": 10834,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10808,
											"end": 10834,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10880,
											"end": 10889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10874,
											"end": 10878,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10870,
											"end": 10890,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 10866,
											"end": 10867,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10855,
											"end": 10864,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10851,
											"end": 10868,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10844,
											"end": 10891,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10908,
											"end": 11039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 11034,
											"end": 11038,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10908,
											"end": 11039,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "269"
										},
										{
											"begin": 10908,
											"end": 11039,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 10908,
											"end": 11039,
											"name": "tag",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 10908,
											"end": 11039,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10900,
											"end": 11039,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10900,
											"end": 11039,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10627,
											"end": 11046,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 10627,
											"end": 11046,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10627,
											"end": 11046,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 10627,
											"end": 11046,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11052,
											"end": 11471,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 11052,
											"end": 11471,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11218,
											"end": 11222,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11256,
											"end": 11258,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11245,
											"end": 11254,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11241,
											"end": 11259,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11259,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11233,
											"end": 11259,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11305,
											"end": 11314,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11299,
											"end": 11303,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11295,
											"end": 11315,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11291,
											"end": 11292,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11280,
											"end": 11289,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11276,
											"end": 11293,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11269,
											"end": 11316,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11333,
											"end": 11464,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 11459,
											"end": 11463,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11333,
											"end": 11464,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 11333,
											"end": 11464,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11333,
											"end": 11464,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 11333,
											"end": 11464,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11325,
											"end": 11464,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11325,
											"end": 11464,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11052,
											"end": 11471,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11052,
											"end": 11471,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11052,
											"end": 11471,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11052,
											"end": 11471,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11477,
											"end": 11896,
											"name": "tag",
											"source": 10,
											"value": "116"
										},
										{
											"begin": 11477,
											"end": 11896,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11643,
											"end": 11647,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11681,
											"end": 11683,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 11670,
											"end": 11679,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11666,
											"end": 11684,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11658,
											"end": 11684,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11658,
											"end": 11684,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11730,
											"end": 11739,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11724,
											"end": 11728,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11720,
											"end": 11740,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 11716,
											"end": 11717,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 11705,
											"end": 11714,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 11701,
											"end": 11718,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11694,
											"end": 11741,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11758,
											"end": 11889,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 11884,
											"end": 11888,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11758,
											"end": 11889,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "279"
										},
										{
											"begin": 11758,
											"end": 11889,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 11758,
											"end": 11889,
											"name": "tag",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 11758,
											"end": 11889,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11750,
											"end": 11889,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11750,
											"end": 11889,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11896,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11896,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11896,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11477,
											"end": 11896,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11995,
											"end": 11999,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12033,
											"end": 12035,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12022,
											"end": 12031,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12018,
											"end": 12036,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12036,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12010,
											"end": 12036,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12046,
											"end": 12117,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 12114,
											"end": 12115,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12103,
											"end": 12112,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12099,
											"end": 12116,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12090,
											"end": 12096,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12046,
											"end": 12117,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 12046,
											"end": 12117,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12046,
											"end": 12117,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 12046,
											"end": 12117,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11902,
											"end": 12124,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12335,
											"end": 12339,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12373,
											"end": 12376,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 12362,
											"end": 12371,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12358,
											"end": 12377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12350,
											"end": 12377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12350,
											"end": 12377,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12387,
											"end": 12458,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 12455,
											"end": 12456,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12444,
											"end": 12453,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12440,
											"end": 12457,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12431,
											"end": 12437,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 12387,
											"end": 12458,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 12387,
											"end": 12458,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12387,
											"end": 12458,
											"name": "tag",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 12387,
											"end": 12458,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12468,
											"end": 12540,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 12536,
											"end": 12538,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 12525,
											"end": 12534,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12521,
											"end": 12539,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12512,
											"end": 12518,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 12468,
											"end": 12540,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 12468,
											"end": 12540,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12468,
											"end": 12540,
											"name": "tag",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 12468,
											"end": 12540,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12550,
											"end": 12622,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 12618,
											"end": 12620,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 12607,
											"end": 12616,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12603,
											"end": 12621,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12594,
											"end": 12600,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 12550,
											"end": 12622,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 12550,
											"end": 12622,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12550,
											"end": 12622,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 12550,
											"end": 12622,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12632,
											"end": 12704,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 12700,
											"end": 12702,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 12689,
											"end": 12698,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12685,
											"end": 12703,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12676,
											"end": 12682,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 12632,
											"end": 12704,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 12632,
											"end": 12704,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12632,
											"end": 12704,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 12632,
											"end": 12704,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12714,
											"end": 12787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 12782,
											"end": 12785,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 12771,
											"end": 12780,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12767,
											"end": 12786,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12758,
											"end": 12764,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12714,
											"end": 12787,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 12714,
											"end": 12787,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 12714,
											"end": 12787,
											"name": "tag",
											"source": 10,
											"value": "324"
										},
										{
											"begin": 12714,
											"end": 12787,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12130,
											"end": 12794,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12949,
											"end": 12953,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 12987,
											"end": 12989,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 12976,
											"end": 12985,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12972,
											"end": 12990,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12964,
											"end": 12990,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12964,
											"end": 12990,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13000,
											"end": 13071,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "326"
										},
										{
											"begin": 13068,
											"end": 13069,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13057,
											"end": 13066,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13053,
											"end": 13070,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13044,
											"end": 13050,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 13000,
											"end": 13071,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13000,
											"end": 13071,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13000,
											"end": 13071,
											"name": "tag",
											"source": 10,
											"value": "326"
										},
										{
											"begin": 13000,
											"end": 13071,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13081,
											"end": 13153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 13149,
											"end": 13151,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13138,
											"end": 13147,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13134,
											"end": 13152,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13125,
											"end": 13131,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 13081,
											"end": 13153,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13081,
											"end": 13153,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13081,
											"end": 13153,
											"name": "tag",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 13081,
											"end": 13153,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13163,
											"end": 13235,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 13231,
											"end": 13233,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 13220,
											"end": 13229,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13216,
											"end": 13234,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13207,
											"end": 13213,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 13163,
											"end": 13235,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13163,
											"end": 13235,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13163,
											"end": 13235,
											"name": "tag",
											"source": 10,
											"value": "328"
										},
										{
											"begin": 13163,
											"end": 13235,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 12800,
											"end": 13242,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "tag",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13425,
											"end": 13429,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13463,
											"end": 13466,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 13452,
											"end": 13461,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13448,
											"end": 13467,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13440,
											"end": 13467,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13440,
											"end": 13467,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13477,
											"end": 13548,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 13545,
											"end": 13546,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13534,
											"end": 13543,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13530,
											"end": 13547,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13521,
											"end": 13527,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 13477,
											"end": 13548,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13477,
											"end": 13548,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13477,
											"end": 13548,
											"name": "tag",
											"source": 10,
											"value": "330"
										},
										{
											"begin": 13477,
											"end": 13548,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13558,
											"end": 13630,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 13626,
											"end": 13628,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 13615,
											"end": 13624,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13611,
											"end": 13629,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13602,
											"end": 13608,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 13558,
											"end": 13630,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13558,
											"end": 13630,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13558,
											"end": 13630,
											"name": "tag",
											"source": 10,
											"value": "331"
										},
										{
											"begin": 13558,
											"end": 13630,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13640,
											"end": 13712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 13708,
											"end": 13710,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 13697,
											"end": 13706,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13693,
											"end": 13711,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13684,
											"end": 13690,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 13640,
											"end": 13712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13640,
											"end": 13712,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13640,
											"end": 13712,
											"name": "tag",
											"source": 10,
											"value": "332"
										},
										{
											"begin": 13640,
											"end": 13712,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13722,
											"end": 13794,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 13790,
											"end": 13792,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 13779,
											"end": 13788,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 13775,
											"end": 13793,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13766,
											"end": 13772,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 13722,
											"end": 13794,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "287"
										},
										{
											"begin": 13722,
											"end": 13794,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 13722,
											"end": 13794,
											"name": "tag",
											"source": 10,
											"value": "333"
										},
										{
											"begin": 13722,
											"end": 13794,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13248,
											"end": 13801,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 13888,
											"end": 14020,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 13888,
											"end": 14020,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13955,
											"end": 13959,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 13978,
											"end": 13981,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13970,
											"end": 13981,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13970,
											"end": 13981,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14008,
											"end": 14012,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14003,
											"end": 14006,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 13999,
											"end": 14013,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 13991,
											"end": 14013,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13991,
											"end": 14013,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13888,
											"end": 14020,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 13888,
											"end": 14020,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 13888,
											"end": 14020,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13888,
											"end": 14020,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14026,
											"end": 14140,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 14026,
											"end": 14140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14093,
											"end": 14099,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14127,
											"end": 14132,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 14121,
											"end": 14133,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 14111,
											"end": 14133,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14111,
											"end": 14133,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14026,
											"end": 14140,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14026,
											"end": 14140,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14026,
											"end": 14140,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14026,
											"end": 14140,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14146,
											"end": 14259,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 14146,
											"end": 14259,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14216,
											"end": 14220,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14248,
											"end": 14252,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14243,
											"end": 14246,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14239,
											"end": 14253,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14231,
											"end": 14253,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14231,
											"end": 14253,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14146,
											"end": 14259,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14146,
											"end": 14259,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14146,
											"end": 14259,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14146,
											"end": 14259,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "tag",
											"source": 10,
											"value": "237"
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14364,
											"end": 14375,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14398,
											"end": 14404,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14393,
											"end": 14396,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14386,
											"end": 14405,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14438,
											"end": 14442,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14433,
											"end": 14436,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14429,
											"end": 14443,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14414,
											"end": 14443,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14414,
											"end": 14443,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14265,
											"end": 14449,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "tag",
											"source": 10,
											"value": "261"
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14539,
											"end": 14550,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14573,
											"end": 14579,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14568,
											"end": 14571,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14561,
											"end": 14580,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 14613,
											"end": 14617,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 14608,
											"end": 14611,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14604,
											"end": 14618,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14589,
											"end": 14618,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14455,
											"end": 14624,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14670,
											"end": 14671,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14687,
											"end": 14707,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 14705,
											"end": 14706,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14687,
											"end": 14707,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 14687,
											"end": 14707,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14687,
											"end": 14707,
											"name": "tag",
											"source": 10,
											"value": "342"
										},
										{
											"begin": 14687,
											"end": 14707,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14682,
											"end": 14707,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14682,
											"end": 14707,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14721,
											"end": 14741,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 14739,
											"end": 14740,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14721,
											"end": 14741,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 14721,
											"end": 14741,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14721,
											"end": 14741,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 14721,
											"end": 14741,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14716,
											"end": 14741,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14716,
											"end": 14741,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14760,
											"end": 14761,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14750,
											"end": 14785,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "344"
										},
										{
											"begin": 14750,
											"end": 14785,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 14765,
											"end": 14783,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 14765,
											"end": 14783,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 14765,
											"end": 14783,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14765,
											"end": 14783,
											"name": "tag",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 14765,
											"end": 14783,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14750,
											"end": 14785,
											"name": "tag",
											"source": 10,
											"value": "344"
										},
										{
											"begin": 14750,
											"end": 14785,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14807,
											"end": 14808,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14804,
											"end": 14805,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14800,
											"end": 14809,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 14795,
											"end": 14809,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14795,
											"end": 14809,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14630,
											"end": 14815,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14861,
											"end": 14865,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 14881,
											"end": 14901,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 14899,
											"end": 14900,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14881,
											"end": 14901,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 14881,
											"end": 14901,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14881,
											"end": 14901,
											"name": "tag",
											"source": 10,
											"value": "348"
										},
										{
											"begin": 14881,
											"end": 14901,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14876,
											"end": 14901,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14876,
											"end": 14901,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14915,
											"end": 14935,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 14933,
											"end": 14934,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 14915,
											"end": 14935,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 14915,
											"end": 14935,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14915,
											"end": 14935,
											"name": "tag",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 14915,
											"end": 14935,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14910,
											"end": 14935,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14910,
											"end": 14935,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14954,
											"end": 14955,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14951,
											"end": 14952,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14948,
											"end": 14956,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 14945,
											"end": 14979,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 14945,
											"end": 14979,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 14945,
											"end": 14979,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 14959,
											"end": 14977,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 14959,
											"end": 14977,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 14959,
											"end": 14977,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 14959,
											"end": 14977,
											"name": "tag",
											"source": 10,
											"value": "351"
										},
										{
											"begin": 14959,
											"end": 14977,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14945,
											"end": 14979,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 14945,
											"end": 14979,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15004,
											"end": 15005,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15001,
											"end": 15002,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 14997,
											"end": 15006,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 14989,
											"end": 15006,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14989,
											"end": 15006,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 14821,
											"end": 15012,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15018,
											"end": 15114,
											"name": "tag",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 15018,
											"end": 15114,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15055,
											"end": 15062,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 15102,
											"end": 15107,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "tag",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 15084,
											"end": 15108,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15073,
											"end": 15108,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15073,
											"end": 15108,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15018,
											"end": 15114,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15018,
											"end": 15114,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15018,
											"end": 15114,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15018,
											"end": 15114,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15120,
											"end": 15210,
											"name": "tag",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 15120,
											"end": 15210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15154,
											"end": 15161,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15197,
											"end": 15202,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15190,
											"end": 15203,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 15183,
											"end": 15204,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 15172,
											"end": 15204,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15172,
											"end": 15204,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15120,
											"end": 15210,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15120,
											"end": 15210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15120,
											"end": 15210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15120,
											"end": 15210,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15216,
											"end": 15342,
											"name": "tag",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 15216,
											"end": 15342,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15253,
											"end": 15260,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15293,
											"end": 15335,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 15286,
											"end": 15291,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15282,
											"end": 15336,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 15271,
											"end": 15336,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15271,
											"end": 15336,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15216,
											"end": 15342,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15216,
											"end": 15342,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15216,
											"end": 15342,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15216,
											"end": 15342,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15348,
											"end": 15425,
											"name": "tag",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 15348,
											"end": 15425,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15385,
											"end": 15392,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15414,
											"end": 15419,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 15403,
											"end": 15419,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15403,
											"end": 15419,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15348,
											"end": 15425,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15348,
											"end": 15425,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15348,
											"end": 15425,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15348,
											"end": 15425,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15431,
											"end": 15571,
											"name": "tag",
											"source": 10,
											"value": "253"
										},
										{
											"begin": 15431,
											"end": 15571,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15495,
											"end": 15504,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15528,
											"end": 15565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 15559,
											"end": 15564,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15528,
											"end": 15565,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 15528,
											"end": 15565,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15528,
											"end": 15565,
											"name": "tag",
											"source": 10,
											"value": "360"
										},
										{
											"begin": 15528,
											"end": 15565,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15515,
											"end": 15565,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15515,
											"end": 15565,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15431,
											"end": 15571,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15431,
											"end": 15571,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15431,
											"end": 15571,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15431,
											"end": 15571,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15577,
											"end": 15718,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 15577,
											"end": 15718,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15642,
											"end": 15651,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15675,
											"end": 15712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 15706,
											"end": 15711,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15675,
											"end": 15712,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 15675,
											"end": 15712,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15675,
											"end": 15712,
											"name": "tag",
											"source": 10,
											"value": "363"
										},
										{
											"begin": 15675,
											"end": 15712,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15662,
											"end": 15712,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15662,
											"end": 15712,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15577,
											"end": 15718,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15577,
											"end": 15718,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15577,
											"end": 15718,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15577,
											"end": 15718,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15724,
											"end": 15850,
											"name": "tag",
											"source": 10,
											"value": "361"
										},
										{
											"begin": 15724,
											"end": 15850,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15774,
											"end": 15783,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15807,
											"end": 15844,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 15838,
											"end": 15843,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15807,
											"end": 15844,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 15807,
											"end": 15844,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15807,
											"end": 15844,
											"name": "tag",
											"source": 10,
											"value": "365"
										},
										{
											"begin": 15807,
											"end": 15844,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15794,
											"end": 15844,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15794,
											"end": 15844,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15724,
											"end": 15850,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15724,
											"end": 15850,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15724,
											"end": 15850,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15724,
											"end": 15850,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15856,
											"end": 15969,
											"name": "tag",
											"source": 10,
											"value": "366"
										},
										{
											"begin": 15856,
											"end": 15969,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15906,
											"end": 15915,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 15939,
											"end": 15963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 15957,
											"end": 15962,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 15939,
											"end": 15963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "355"
										},
										{
											"begin": 15939,
											"end": 15963,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 15939,
											"end": 15963,
											"name": "tag",
											"source": 10,
											"value": "368"
										},
										{
											"begin": 15939,
											"end": 15963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15926,
											"end": 15963,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15926,
											"end": 15963,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15856,
											"end": 15969,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15856,
											"end": 15969,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15856,
											"end": 15969,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15856,
											"end": 15969,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 15975,
											"end": 16208,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 15975,
											"end": 16208,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16014,
											"end": 16017,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16037,
											"end": 16061,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 16055,
											"end": 16060,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16037,
											"end": 16061,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 16037,
											"end": 16061,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16037,
											"end": 16061,
											"name": "tag",
											"source": 10,
											"value": "370"
										},
										{
											"begin": 16037,
											"end": 16061,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16028,
											"end": 16061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 16028,
											"end": 16061,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 16083,
											"end": 16149,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16076,
											"end": 16081,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16073,
											"end": 16150,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 16070,
											"end": 16173,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 16070,
											"end": 16173,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 16070,
											"end": 16173,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 16153,
											"end": 16171,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "372"
										},
										{
											"begin": 16153,
											"end": 16171,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 16153,
											"end": 16171,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 16153,
											"end": 16171,
											"name": "tag",
											"source": 10,
											"value": "372"
										},
										{
											"begin": 16153,
											"end": 16171,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16070,
											"end": 16173,
											"name": "tag",
											"source": 10,
											"value": "371"
										},
										{
											"begin": 16070,
											"end": 16173,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16200,
											"end": 16201,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 16193,
											"end": 16198,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 16189,
											"end": 16202,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 16182,
											"end": 16202,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 16182,
											"end": 16202,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15975,
											"end": 16208,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 15975,
											"end": 16208,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 15975,
											"end": 16208,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 15975,
											"end": 16208,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 16214,
											"end": 16394,
											"name": "tag",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 16214,
											"end": 16394,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16262,
											"end": 16339,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16259,
											"end": 16260,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16252,
											"end": 16340,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16359,
											"end": 16363,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 16356,
											"end": 16357,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 16349,
											"end": 16364,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16383,
											"end": 16387,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 16380,
											"end": 16381,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16373,
											"end": 16388,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 16400,
											"end": 16580,
											"name": "tag",
											"source": 10,
											"value": "346"
										},
										{
											"begin": 16400,
											"end": 16580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16448,
											"end": 16525,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16445,
											"end": 16446,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16438,
											"end": 16526,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16545,
											"end": 16549,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 16542,
											"end": 16543,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 16535,
											"end": 16550,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16569,
											"end": 16573,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 16566,
											"end": 16567,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16559,
											"end": 16574,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 16586,
											"end": 16766,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 16586,
											"end": 16766,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16634,
											"end": 16711,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16631,
											"end": 16632,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16624,
											"end": 16712,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16731,
											"end": 16735,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 16728,
											"end": 16729,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 16721,
											"end": 16736,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16755,
											"end": 16759,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 16752,
											"end": 16753,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 16745,
											"end": 16760,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 16895,
											"end": 17012,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 16895,
											"end": 17012,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17004,
											"end": 17005,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17001,
											"end": 17002,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 16994,
											"end": 17006,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 17018,
											"end": 17198,
											"name": "tag",
											"source": 10,
											"value": "263"
										},
										{
											"begin": 17018,
											"end": 17198,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17158,
											"end": 17190,
											"name": "PUSH",
											"source": 10,
											"value": "43616E2774207374616B65206E667420796F7520646F6E2774206F776E210000"
										},
										{
											"begin": 17154,
											"end": 17155,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17146,
											"end": 17152,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17142,
											"end": 17156,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17135,
											"end": 17191,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17018,
											"end": 17198,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17018,
											"end": 17198,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17204,
											"end": 17429,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 17204,
											"end": 17429,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17344,
											"end": 17378,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 17340,
											"end": 17341,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17332,
											"end": 17338,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17328,
											"end": 17342,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17321,
											"end": 17379,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17413,
											"end": 17421,
											"name": "PUSH",
											"source": 10,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 17408,
											"end": 17410,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 17400,
											"end": 17406,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17396,
											"end": 17411,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17389,
											"end": 17422,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17204,
											"end": 17429,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17204,
											"end": 17429,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17435,
											"end": 17615,
											"name": "tag",
											"source": 10,
											"value": "273"
										},
										{
											"begin": 17435,
											"end": 17615,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17575,
											"end": 17607,
											"name": "PUSH",
											"source": 10,
											"value": "5374616B696E6720706F6F6C206E6F7420656E64656420796574212121210000"
										},
										{
											"begin": 17571,
											"end": 17572,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17563,
											"end": 17569,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17559,
											"end": 17573,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17552,
											"end": 17608,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17435,
											"end": 17615,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17435,
											"end": 17615,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17621,
											"end": 17803,
											"name": "tag",
											"source": 10,
											"value": "278"
										},
										{
											"begin": 17621,
											"end": 17803,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17761,
											"end": 17795,
											"name": "PUSH",
											"source": 10,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 17757,
											"end": 17758,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17749,
											"end": 17755,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17745,
											"end": 17759,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17738,
											"end": 17796,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17621,
											"end": 17803,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17621,
											"end": 17803,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 17809,
											"end": 18033,
											"name": "tag",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 17809,
											"end": 18033,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17949,
											"end": 17983,
											"name": "PUSH",
											"source": 10,
											"value": "596F7520617265206E6F74206F776E6572206F662074686973204E4654207374"
										},
										{
											"begin": 17945,
											"end": 17946,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17937,
											"end": 17943,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17933,
											"end": 17947,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17926,
											"end": 17984,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 18018,
											"end": 18025,
											"name": "PUSH",
											"source": 10,
											"value": "616B696E67000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 18013,
											"end": 18015,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 18005,
											"end": 18011,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 18001,
											"end": 18016,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 17994,
											"end": 18026,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 17809,
											"end": 18033,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17809,
											"end": 18033,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18039,
											"end": 18161,
											"name": "tag",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 18039,
											"end": 18161,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18112,
											"end": 18136,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 18130,
											"end": 18135,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18112,
											"end": 18136,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 18112,
											"end": 18136,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 18112,
											"end": 18136,
											"name": "tag",
											"source": 10,
											"value": "385"
										},
										{
											"begin": 18112,
											"end": 18136,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18105,
											"end": 18110,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18102,
											"end": 18137,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 18092,
											"end": 18155,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "386"
										},
										{
											"begin": 18092,
											"end": 18155,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 18151,
											"end": 18152,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18148,
											"end": 18149,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 18141,
											"end": 18153,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 18092,
											"end": 18155,
											"name": "tag",
											"source": 10,
											"value": "386"
										},
										{
											"begin": 18092,
											"end": 18155,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18039,
											"end": 18161,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18039,
											"end": 18161,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18167,
											"end": 18283,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 18167,
											"end": 18283,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18237,
											"end": 18258,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 18252,
											"end": 18257,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18237,
											"end": 18258,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "249"
										},
										{
											"begin": 18237,
											"end": 18258,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 18237,
											"end": 18258,
											"name": "tag",
											"source": 10,
											"value": "388"
										},
										{
											"begin": 18237,
											"end": 18258,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18230,
											"end": 18235,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18227,
											"end": 18259,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 18217,
											"end": 18277,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 18217,
											"end": 18277,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 18273,
											"end": 18274,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18270,
											"end": 18271,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 18263,
											"end": 18275,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 18217,
											"end": 18277,
											"name": "tag",
											"source": 10,
											"value": "389"
										},
										{
											"begin": 18217,
											"end": 18277,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18167,
											"end": 18283,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18167,
											"end": 18283,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 18289,
											"end": 18411,
											"name": "tag",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 18289,
											"end": 18411,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18362,
											"end": 18386,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "391"
										},
										{
											"begin": 18380,
											"end": 18385,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18362,
											"end": 18386,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 18362,
											"end": 18386,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 18362,
											"end": 18386,
											"name": "tag",
											"source": 10,
											"value": "391"
										},
										{
											"begin": 18362,
											"end": 18386,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18355,
											"end": 18360,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 18352,
											"end": 18387,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 18342,
											"end": 18405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "392"
										},
										{
											"begin": 18342,
											"end": 18405,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 18401,
											"end": 18402,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 18398,
											"end": 18399,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 18391,
											"end": 18403,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 18342,
											"end": 18405,
											"name": "tag",
											"source": 10,
											"value": "392"
										},
										{
											"begin": 18342,
											"end": 18405,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 18289,
											"end": 18411,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 18289,
											"end": 18411,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"NFTCollection()": "78b2e3a9",
							"checkIfAlreadyUnstaked(uint256,address)": "fbaca086",
							"index()": "2986c0e5",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"rewardToken()": "f7c618c1",
							"stakeNFT(uint256,uint256)": "51cecc80",
							"stakes(uint256)": "d5a44f86",
							"staking_details(address,uint256)": "3f106929",
							"transferOwnership(address)": "f2fde38b",
							"unStakeNFT(uint256,uint256,uint256)": "78dba594",
							"unstaking_details(address,uint256)": "3af416d1",
							"userStakingList(address)": "79e5f7d7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_NFTCollection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTokens\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTCollection\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tempIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkIfAlreadyUnstaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staking_details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"}],\"name\":\"unStakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstaking_details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userStakingList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkIfAlreadyUnstaked(uint256,address)\":{\"params\":{\"_tempIndex\":\"of the nft\",\"_user\":\"of the user\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stakeNFT(uint256,uint256)\":{\"params\":{\"_pool\":\"Pool of NFT\",\"_tokenId\":\"Token Id of NFT to stake\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unStakeNFT(uint256,uint256,uint256)\":{\"params\":{\"_pool\":\"Pool of NFT\",\"_tokenId\":\"Token Id of NFT to stake\"}},\"userStakingList(address)\":{\"params\":{\"_user\":\"Address of the user\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkIfAlreadyUnstaked(uint256,address)\":{\"notice\":\"Check if nft index is already unstaked\"},\"stakeNFT(uint256,uint256)\":{\"notice\":\"Create a new staking for a specific user\"},\"unStakeNFT(uint256,uint256,uint256)\":{\"notice\":\"Unstake the NFT and rewards user if pool is completed\"},\"userStakingList(address)\":{\"notice\":\"Get user's staking list\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTStaking.sol\":\"MoonRabbitsStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/NFTStaking.sol\":{\"keccak256\":\"0xa2aa515dc771c14843abb20a957113444585b7c32ddd08bb6fb411ba9d8da2be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e187bfc316983be4c58454660d3e83a4a6ed66344d900bb7fc52efaf76c7b201\",\"dweb:/ipfs/QmTzkeTcFznNh74VTUV7hR4U74b62NxgcgEHGRS1FiLoKn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 123,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1055,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "NFTCollection",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IERC721)677"
							},
							{
								"astId": 1058,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "rewardToken",
								"offset": 0,
								"slot": "3",
								"type": "t_contract(IERC20)244"
							},
							{
								"astId": 1061,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "index",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1067,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "totalTokens",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1083,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "stakes",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_uint256,t_struct(Staker)1078_storage)"
							},
							{
								"astId": 1088,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "staking_details",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
							},
							{
								"astId": 1093,
								"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
								"label": "unstaking_details",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_contract(IERC20)244": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IERC721)677": {
								"encoding": "inplace",
								"label": "contract IERC721",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256[])",
								"numberOfBytes": "32",
								"value": "t_array(t_uint256)dyn_storage"
							},
							"t_mapping(t_uint256,t_struct(Staker)1078_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct MoonRabbitsStaking.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)1078_storage"
							},
							"t_struct(Staker)1078_storage": {
								"encoding": "inplace",
								"label": "struct MoonRabbitsStaking.Staker",
								"members": [
									{
										"astId": 1069,
										"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
										"label": "index",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1071,
										"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
										"label": "user",
										"offset": 0,
										"slot": "1",
										"type": "t_address"
									},
									{
										"astId": 1073,
										"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
										"label": "tokenId",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 1075,
										"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
										"label": "pool",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 1077,
										"contract": "contracts/NFTStaking.sol:MoonRabbitsStaking",
										"label": "timestamp",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"checkIfAlreadyUnstaked(uint256,address)": {
								"notice": "Check if nft index is already unstaked"
							},
							"stakeNFT(uint256,uint256)": {
								"notice": "Create a new staking for a specific user"
							},
							"unStakeNFT(uint256,uint256,uint256)": {
								"notice": "Unstake the NFT and rewards user if pool is completed"
							},
							"userStakingList(address)": {
								"notice": "Get user's staking list"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1029
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1030,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1029,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1029
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1019,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1019,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							166
						]
					},
					"id": 167,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 166,
							"linearizedBaseContracts": [
								166
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 118,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1676:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 116,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 117,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 121,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1723:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 119,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 120,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 123,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1767:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "1811:39:1",
										"statements": [
											{
												"expression": {
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 126,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "1821:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 127,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "1831:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:1"
											}
										]
									},
									"id": 131,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:1"
									},
									"scope": 166,
									"src": "1797:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 141,
										"nodeType": "Block",
										"src": "2251:79:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 134,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 157,
														"src": "2261:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:1"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 138,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2303:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:1"
											}
										]
									},
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 142,
									"name": "nonReentrant",
									"nameLocation": "2236:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:1"
									},
									"src": "2227:103:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "2375:248:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 146,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "2468:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 147,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 121,
																"src": "2479:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 145,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:1"
											},
											{
												"expression": {
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2598:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 153,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "2608:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:1"
											}
										]
									},
									"id": 157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:1"
									},
									"scope": 166,
									"src": "2336:287:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2667:171:1",
										"statements": [
											{
												"expression": {
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 160,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2809:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 161,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2819:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 163,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:1"
											}
										]
									},
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:1"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:1"
									},
									"scope": 166,
									"src": "2629:209:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 167,
							"src": "888:1952:1",
							"usedErrors": []
						}
					],
					"src": "112:2729:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							244
						]
					},
					"id": 245,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 168,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 169,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 244,
							"linearizedBaseContracts": [
								244
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 178,
									"name": "Transfer",
									"nameLocation": "394:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "403:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "425:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "445:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:2"
									},
									"src": "388:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 187,
									"name": "Approval",
									"nameLocation": "625:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "634:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "657:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "682:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:2"
									},
									"src": "619:78:2"
								},
								{
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 193,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 244,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "931:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:2"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "971:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:2"
									},
									"scope": 244,
									"src": "912:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1211:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1223:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1257:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 208,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:2"
									},
									"scope": 244,
									"src": "1193:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 221,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1557:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1572:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:2"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "1612:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:2"
									},
									"scope": 244,
									"src": "1538:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 231,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2291:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 223,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2308:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:2"
									},
									"returnParameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2342:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 228,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:2"
									},
									"scope": 244,
									"src": "2274:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 243,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2677:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2699:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 235,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2719:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:2"
									},
									"returnParameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "2758:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 240,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:2"
									},
									"scope": 244,
									"src": "2646:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 245,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							280
						]
					},
					"id": 281,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 246,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 247,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 280,
							"linearizedBaseContracts": [
								280
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 265,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1494:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1519:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 253,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1542:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1568:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 257,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1585:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 259,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "1604:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 261,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:3"
									},
									"scope": 280,
									"src": "1446:183:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1950:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:3"
									},
									"returnParameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "1988:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:3"
									},
									"scope": 280,
									"src": "1934:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 274,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:3"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2240:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 276,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:3"
									},
									"scope": 280,
									"src": "2189:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 281,
							"src": "620:1631:3",
							"usedErrors": []
						}
					],
					"src": "114:2138:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1007
						],
						"IERC20": [
							244
						],
						"IERC20Permit": [
							280
						],
						"SafeERC20": [
							561
						]
					},
					"id": 562,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 282,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 283,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 245,
							"src": "140:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 281,
							"src": "164:46:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 562,
							"sourceUnit": 1008,
							"src": "211:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 286,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 561,
							"linearizedBaseContracts": [
								561
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 289,
									"libraryName": {
										"id": 287,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1007,
										"src": "737:7:4"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:4",
									"typeName": {
										"id": 288,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 311,
										"nodeType": "Block",
										"src": "865:103:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 300,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "895:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 303,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "925:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 211,
																		"src": "925:14:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 306,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 294,
																	"src": "950:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 307,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 296,
																	"src": "954:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 301,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 302,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 299,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "875:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 310,
												"nodeType": "ExpressionStatement",
												"src": "875:86:4"
											}
										]
									},
									"id": 312,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "794:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 291,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 290,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "794:6:4"
													},
													"referencedDeclaration": 244,
													"src": "794:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "816:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "836:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:4"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:4"
									},
									"scope": 561,
									"src": "763:205:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "1102:113:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 325,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "1132:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 328,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "1162:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 243,
																		"src": "1162:18:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 331,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 317,
																	"src": "1191:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 332,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "1197:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 333,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "1201:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 326,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 327,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 334,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 324,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1112:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:4"
											}
										]
									},
									"id": 338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1009:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 314,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 313,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "1009:6:4"
													},
													"referencedDeclaration": 244,
													"src": "1009:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1031:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1053:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "1073:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:4"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:4"
									},
									"scope": 561,
									"src": "974:241:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 381,
										"nodeType": "Block",
										"src": "1581:497:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 350,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 346,
																			"src": "1830:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 351,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 353,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 363,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 358,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$561",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$561",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 357,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 356,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:4",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 359,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:4",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 360,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 344,
																					"src": "1877:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 354,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 342,
																					"src": "1846:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$244",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 355,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 221,
																				"src": "1846:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 361,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 362,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 364,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 349,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 368,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 370,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 342,
															"src": "2001:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 373,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 342,
																			"src": "2031:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 231,
																		"src": "2031:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 376,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 344,
																	"src": "2055:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 346,
																	"src": "2064:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 369,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1981:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 380,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:4"
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:4",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 382,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1505:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 341,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 340,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "1505:6:4"
													},
													"referencedDeclaration": 244,
													"src": "1505:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1527:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "1552:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:4"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:4"
									},
									"scope": 561,
									"src": "1475:603:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 417,
										"nodeType": "Block",
										"src": "2200:194:4",
										"statements": [
											{
												"assignments": [
													393
												],
												"declarations": [
													{
														"constant": false,
														"id": 393,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 417,
														"src": "2210:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 392,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 404,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 398,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$561",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$561",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 396,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 400,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "2264:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 394,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 385,
																"src": "2233:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$244",
																	"typeString": "contract IERC20"
																}
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 221,
															"src": "2233:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 402,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "2275:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 406,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 385,
															"src": "2310:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 409,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 385,
																			"src": "2340:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$244",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 231,
																		"src": "2340:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 411,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 412,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 387,
																	"src": "2364:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 413,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 393,
																	"src": "2373:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 407,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 405,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "2290:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 416,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:4"
											}
										]
									},
									"id": 418,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2124:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 384,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 383,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "2124:6:4"
													},
													"referencedDeclaration": 244,
													"src": "2124:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2146:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "2171:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:4"
									},
									"returnParameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:4"
									},
									"scope": 561,
									"src": "2084:310:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 465,
										"nodeType": "Block",
										"src": "2516:370:4",
										"statements": [
											{
												"id": 464,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:4",
												"statements": [
													{
														"assignments": [
															429
														],
														"declarations": [
															{
																"constant": false,
																"id": 429,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 464,
																"src": "2550:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 428,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 438,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 434,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$561",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$561",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 433,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 432,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 436,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 423,
																	"src": "2604:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 430,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "2573:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 221,
																"src": "2573:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 442,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 440,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 429,
																		"src": "2634:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 441,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 425,
																		"src": "2650:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 443,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 439,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 445,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:4"
													},
													{
														"assignments": [
															447
														],
														"declarations": [
															{
																"constant": false,
																"id": 447,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:4",
																"nodeType": "VariableDeclaration",
																"scope": 464,
																"src": "2715:20:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 446,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 451,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 448,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 429,
																"src": "2738:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 449,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "2753:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 453,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "2792:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 456,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 421,
																					"src": "2822:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$244",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 457,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 231,
																				"src": "2822:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 458,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 459,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 423,
																			"src": "2846:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 460,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 447,
																			"src": "2855:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 454,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 452,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 560,
																"src": "2772:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$244_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 463,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:4"
													}
												]
											}
										]
									},
									"id": 466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2440:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 420,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 419,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "2440:6:4"
													},
													"referencedDeclaration": 244,
													"src": "2440:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2462:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 466,
												"src": "2487:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:4"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:4"
									},
									"scope": 561,
									"src": "2400:486:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 521,
										"nodeType": "Block",
										"src": "3107:257:4",
										"statements": [
											{
												"assignments": [
													487
												],
												"declarations": [
													{
														"constant": false,
														"id": 487,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "3117:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 486,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 492,
												"initialValue": {
													"arguments": [
														{
															"id": 490,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3152:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 488,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3139:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "3139:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 496,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3181:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "3188:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 498,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "3197:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 499,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "3204:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 500,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "3214:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 501,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "3217:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 502,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "3220:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 493,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3168:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 495,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 265,
														"src": "3168:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 503,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 504,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:4"
											},
											{
												"assignments": [
													506
												],
												"declarations": [
													{
														"constant": false,
														"id": 506,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 521,
														"src": "3232:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 505,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 511,
												"initialValue": {
													"arguments": [
														{
															"id": 509,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "3266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 507,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "3253:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$280",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 273,
														"src": "3253:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 513,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "3290:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 514,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 487,
																	"src": "3304:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 512,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:4"
											}
										]
									},
									"id": 522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2921:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$280",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 467,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 280,
														"src": "2921:12:4"
													},
													"referencedDeclaration": 280,
													"src": "2921:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$280",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2949:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2972:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "2997:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3020:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3046:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 478,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3063:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 480,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "3082:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 482,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:4"
									},
									"returnParameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:4"
									},
									"scope": 561,
									"src": "2892:472:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 559,
										"nodeType": "Block",
										"src": "3817:636:4",
										"statements": [
											{
												"assignments": [
													532
												],
												"declarations": [
													{
														"constant": false,
														"id": 532,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 559,
														"src": "4166:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 531,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 541,
												"initialValue": {
													"arguments": [
														{
															"id": 538,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 528,
															"src": "4220:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 535,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "4200:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$244",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 534,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 533,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 537,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 767,
														"src": "4192:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 542,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "4275:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 558,
												"nodeType": "IfStatement",
												"src": "4271:176:4",
												"trueBody": {
													"id": 557,
													"nodeType": "Block",
													"src": "4298:149:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 549,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "4370:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 551,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 550,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:4",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 552,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 547,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 546,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 555,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 556,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3776:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$244",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 525,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 524,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 244,
														"src": "3776:6:4"
													},
													"referencedDeclaration": 244,
													"src": "3776:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "3790:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 527,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:4"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:4"
									},
									"scope": 561,
									"src": "3747:706:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 562,
							"src": "707:3748:4",
							"usedErrors": []
						}
					],
					"src": "115:4341:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1041
						],
						"IERC721": [
							677
						]
					},
					"id": 678,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 563,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 564,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 678,
							"sourceUnit": 1042,
							"src": "133:47:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 566,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1041,
										"src": "271:7:5"
									},
									"id": 567,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:5"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 565,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:5",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 677,
							"linearizedBaseContracts": [
								677,
								1041
							],
							"name": "IERC721",
							"nameLocation": "260:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 568,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:5",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 576,
									"name": "Transfer",
									"nameLocation": "384:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "393:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 572,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "415:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 571,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 574,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "435:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 573,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:5"
									},
									"src": "378:82:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 577,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:5",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 585,
									"name": "Approval",
									"nameLocation": "571:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "580:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 581,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "603:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "629:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 582,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:5"
									},
									"src": "565:89:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:5",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 594,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "803:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 587,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "826:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "852:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 591,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:5"
									},
									"src": "782:85:5"
								},
								{
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:5",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 602,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "973:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:5"
									},
									"returnParameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "1011:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:5"
									},
									"scope": 677,
									"src": "954:74:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:5",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 610,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1187:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 604,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:5"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "1227:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:5"
									},
									"scope": 677,
									"src": "1170:72:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:5",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "1844:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 612,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "1866:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "1886:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 616,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "1911:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 618,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:5"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:5"
									},
									"scope": 677,
									"src": "1809:137:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:5",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 632,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "2679:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "2701:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "2721:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:5"
									},
									"returnParameters": {
										"id": 631,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:5"
									},
									"scope": 677,
									"src": "2644:108:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 633,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:5",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 642,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "3526:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "3548:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "3568:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:5"
									},
									"returnParameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:5"
									},
									"scope": 677,
									"src": "3495:104:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:5",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "4079:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "4091:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 646,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:5"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:5"
									},
									"scope": 677,
									"src": "4062:55:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:5",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 658,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "4464:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "4482:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 654,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:5"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:5"
									},
									"scope": 677,
									"src": "4437:70:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:5",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 666,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4678:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:5"
									},
									"returnParameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "4718:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:5"
									},
									"scope": 677,
									"src": "4657:79:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:5",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 676,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "4911:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "4926:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 670,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:5"
									},
									"returnParameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 676,
												"src": "4967:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 673,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:5"
									},
									"scope": 677,
									"src": "4885:88:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 678,
							"src": "250:4725:5",
							"usedErrors": []
						}
					],
					"src": "108:4868:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1007
						]
					},
					"id": 1008,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 679,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 680,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1007,
							"linearizedBaseContracts": [
								1007
							],
							"name": "Address",
							"nameLocation": "202:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 694,
										"nodeType": "Block",
										"src": "1241:254:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 688,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 683,
																"src": "1465:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 690,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 691,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 687,
												"id": 693,
												"nodeType": "Return",
												"src": "1458:30:6"
											}
										]
									},
									"documentation": {
										"id": 681,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:6",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 695,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 695,
												"src": "1195:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:6"
									},
									"returnParameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 695,
												"src": "1235:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 685,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:6"
									},
									"scope": 1007,
									"src": "1175:320:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 728,
										"nodeType": "Block",
										"src": "2483:241:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 706,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1007",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1007",
																				"typeString": "library Address"
																			}
																		],
																		"id": 705,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 704,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 709,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 700,
																"src": "2526:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 703,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:6"
											},
											{
												"assignments": [
													715,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 715,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 728,
														"src": "2578:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 714,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 722,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 716,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 698,
																"src": "2596:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 719,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 718,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 700,
																"src": "2618:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 724,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 715,
															"src": "2647:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 723,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 727,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:6"
											}
										]
									},
									"documentation": {
										"id": 696,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 729,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 729,
												"src": "2431:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 697,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 729,
												"src": "2458:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:6"
									},
									"returnParameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:6"
									},
									"scope": 1007,
									"src": "2412:312:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 746,
										"nodeType": "Block",
										"src": "3555:96:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 740,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "3594:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 741,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 734,
															"src": "3602:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 743,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 739,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															787,
															831
														],
														"referencedDeclaration": 831,
														"src": "3572:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 738,
												"id": 745,
												"nodeType": "Return",
												"src": "3565:79:6"
											}
										]
									},
									"documentation": {
										"id": 730,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "3488:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 731,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "3504:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 733,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:6"
									},
									"returnParameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "3541:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 736,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:6"
									},
									"scope": 1007,
									"src": "3466:185:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "4020:76:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 760,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "4059:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 761,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 752,
															"src": "4067:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 763,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 754,
															"src": "4076:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 759,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															787,
															831
														],
														"referencedDeclaration": 831,
														"src": "4037:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 758,
												"id": 765,
												"nodeType": "Return",
												"src": "4030:59:6"
											}
										]
									},
									"documentation": {
										"id": 748,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "3904:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 749,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "3928:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 751,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "3955:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 753,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:6"
									},
									"returnParameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "4006:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 756,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:6"
									},
									"scope": 1007,
									"src": "3873:223:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 786,
										"nodeType": "Block",
										"src": "4601:111:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 780,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "4640:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 781,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 772,
															"src": "4648:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 782,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 774,
															"src": "4654:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 783,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 779,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															787,
															831
														],
														"referencedDeclaration": 831,
														"src": "4618:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 778,
												"id": 785,
												"nodeType": "Return",
												"src": "4611:94:6"
											}
										]
									},
									"documentation": {
										"id": 768,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 787,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "4498:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "4522:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "4549:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:6"
									},
									"returnParameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "4587:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 776,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:6"
									},
									"scope": 1007,
									"src": "4458:254:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 830,
										"nodeType": "Block",
										"src": "5139:267:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 808,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 804,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1007",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1007",
																				"typeString": "library Address"
																			}
																		],
																		"id": 803,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 802,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 806,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 807,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 794,
																"src": "5182:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 801,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 811,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:6"
											},
											{
												"assignments": [
													813,
													815
												],
												"declarations": [
													{
														"constant": false,
														"id": 813,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 830,
														"src": "5241:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 812,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 815,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 830,
														"src": "5255:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 814,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 822,
												"initialValue": {
													"arguments": [
														{
															"id": 820,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 792,
															"src": "5308:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 816,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 790,
																"src": "5282:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 819,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 818,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 794,
																"src": "5301:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 824,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 790,
															"src": "5357:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 825,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 813,
															"src": "5365:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 826,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "5374:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 827,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 796,
															"src": "5386:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 823,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "5330:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 800,
												"id": 829,
												"nodeType": "Return",
												"src": "5323:76:6"
											}
										]
									},
									"documentation": {
										"id": 788,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:6",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 831,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "5000:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 789,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "5024:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 791,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "5051:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "5074:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 795,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:6"
									},
									"returnParameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 831,
												"src": "5125:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 798,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:6"
									},
									"scope": 1007,
									"src": "4960:446:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 847,
										"nodeType": "Block",
										"src": "5683:97:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 842,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 834,
															"src": "5719:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 843,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 836,
															"src": "5727:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 844,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 841,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															848,
															877
														],
														"referencedDeclaration": 877,
														"src": "5700:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 840,
												"id": 846,
												"nodeType": "Return",
												"src": "5693:80:6"
											}
										]
									},
									"documentation": {
										"id": 832,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 848,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "5611:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "5627:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 835,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:6"
									},
									"returnParameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "5669:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 838,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:6"
									},
									"scope": 1007,
									"src": "5583:197:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "6122:168:6",
										"statements": [
											{
												"assignments": [
													861,
													863
												],
												"declarations": [
													{
														"constant": false,
														"id": 861,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 876,
														"src": "6133:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 860,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 863,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 876,
														"src": "6147:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 862,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 868,
												"initialValue": {
													"arguments": [
														{
															"id": 866,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 853,
															"src": "6192:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 864,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "6174:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 865,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 867,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 870,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "6241:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 871,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "6249:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 872,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "6258:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 873,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 855,
															"src": "6270:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 869,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "6214:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 859,
												"id": 875,
												"nodeType": "Return",
												"src": "6207:76:6"
											}
										]
									},
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "6001:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 850,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "6025:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 852,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "6052:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 854,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:6"
									},
									"returnParameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 858,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "6108:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 857,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:6"
									},
									"scope": 1007,
									"src": "5964:326:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 893,
										"nodeType": "Block",
										"src": "6566:101:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 888,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 880,
															"src": "6604:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 889,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 882,
															"src": "6612:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 890,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 887,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															894,
															923
														],
														"referencedDeclaration": 923,
														"src": "6583:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 886,
												"id": 892,
												"nodeType": "Return",
												"src": "6576:84:6"
											}
										]
									},
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 894,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "6499:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "6515:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 881,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:6"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 885,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "6552:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 884,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:6"
									},
									"scope": 1007,
									"src": "6469:198:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 922,
										"nodeType": "Block",
										"src": "7008:170:6",
										"statements": [
											{
												"assignments": [
													907,
													909
												],
												"declarations": [
													{
														"constant": false,
														"id": 907,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 922,
														"src": "7019:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 906,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 909,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 922,
														"src": "7033:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 908,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 914,
												"initialValue": {
													"arguments": [
														{
															"id": 912,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 899,
															"src": "7080:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 910,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "7060:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 911,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 916,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 897,
															"src": "7129:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 917,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 907,
															"src": "7137:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 918,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 909,
															"src": "7146:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 919,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 901,
															"src": "7158:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 915,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "7102:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 920,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 905,
												"id": 921,
												"nodeType": "Return",
												"src": "7095:76:6"
											}
										]
									},
									"documentation": {
										"id": 895,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 923,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "6892:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "6916:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 898,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "6943:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 900,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:6"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 923,
												"src": "6994:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 903,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:6"
									},
									"scope": 1007,
									"src": "6853:325:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 961,
										"nodeType": "Block",
										"src": "7660:434:6",
										"statements": [
											{
												"condition": {
													"id": 937,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 928,
													"src": "7674:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 959,
													"nodeType": "Block",
													"src": "8030:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 955,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 930,
																		"src": "8052:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 956,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 932,
																		"src": "8064:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 954,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1006,
																	"src": "8044:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 958,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:6"
														}
													]
												},
												"id": 960,
												"nodeType": "IfStatement",
												"src": "7670:418:6",
												"trueBody": {
													"id": 953,
													"nodeType": "Block",
													"src": "7683:341:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 938,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 930,
																		"src": "7701:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 939,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 950,
															"nodeType": "IfStatement",
															"src": "7697:286:6",
															"trueBody": {
																"id": 949,
																"nodeType": "Block",
																"src": "7725:258:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 944,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 926,
																							"src": "7927:6:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 943,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 695,
																						"src": "7916:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 945,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:6",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 946,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 942,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 948,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 951,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 930,
																"src": "8003:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 936,
															"id": 952,
															"nodeType": "Return",
															"src": "7996:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 924,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7511:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 925,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7535:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 927,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7557:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 929,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7590:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 931,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:6"
									},
									"returnParameters": {
										"id": 936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "7646:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 934,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:6"
									},
									"scope": 1007,
									"src": "7466:628:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 985,
										"nodeType": "Block",
										"src": "8475:135:6",
										"statements": [
											{
												"condition": {
													"id": 974,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 965,
													"src": "8489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 983,
													"nodeType": "Block",
													"src": "8546:58:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 979,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 967,
																		"src": "8568:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 980,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 969,
																		"src": "8580:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 978,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1006,
																	"src": "8560:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 982,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:6"
														}
													]
												},
												"id": 984,
												"nodeType": "IfStatement",
												"src": "8485:119:6",
												"trueBody": {
													"id": 977,
													"nodeType": "Block",
													"src": "8498:42:6",
													"statements": [
														{
															"expression": {
																"id": 975,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 967,
																"src": "8519:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 973,
															"id": 976,
															"nodeType": "Return",
															"src": "8512:17:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:6",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 986,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "8350:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 964,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "8372:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 966,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "8405:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 968,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:6"
									},
									"returnParameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "8461:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 971,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:6"
									},
									"scope": 1007,
									"src": "8315:295:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1005,
										"nodeType": "Block",
										"src": "8699:457:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 993,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "8775:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 994,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 995,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1003,
													"nodeType": "Block",
													"src": "9105:45:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1000,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 990,
																		"src": "9126:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 999,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1002,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:6"
														}
													]
												},
												"id": 1004,
												"nodeType": "IfStatement",
												"src": "8771:379:6",
												"trueBody": {
													"id": 998,
													"nodeType": "Block",
													"src": "8798:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 988,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 988,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:6",
																	"valueSize": 1
																}
															],
															"id": 997,
															"nodeType": "InlineAssembly",
															"src": "8947:142:6"
														}
													]
												}
											}
										]
									},
									"id": 1006,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "8633:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 987,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "8658:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 989,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:6"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:6"
									},
									"scope": 1007,
									"src": "8616:540:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1008,
							"src": "194:8964:6",
							"usedErrors": []
						}
					],
					"src": "101:9058:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1029
						]
					},
					"id": 1030,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1009,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1010,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1029,
							"linearizedBaseContracts": [
								1029
							],
							"name": "Context",
							"nameLocation": "626:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1018,
										"nodeType": "Block",
										"src": "702:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1015,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1014,
												"id": 1017,
												"nodeType": "Return",
												"src": "712:17:7"
											}
										]
									},
									"id": 1019,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:7"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1013,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1019,
												"src": "693:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1012,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:7"
									},
									"scope": 1029,
									"src": "640:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1027,
										"nodeType": "Block",
										"src": "809:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1024,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1026,
												"nodeType": "Return",
												"src": "819:15:7"
											}
										]
									},
									"id": 1028,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:7"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "793:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1021,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:7"
									},
									"scope": 1029,
									"src": "742:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1030,
							"src": "608:235:7",
							"usedErrors": []
						}
					],
					"src": "86:758:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1041
						]
					},
					"id": 1042,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1031,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1032,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1041,
							"linearizedBaseContracts": [
								1041
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1033,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1040,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1034,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1037,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 1041,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1042,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"contracts/NFTStaking.sol": {
				"ast": {
					"absolutePath": "contracts/NFTStaking.sol",
					"exportedSymbols": {
						"Address": [
							1007
						],
						"Context": [
							1029
						],
						"IERC165": [
							1041
						],
						"IERC20": [
							244
						],
						"IERC20Permit": [
							280
						],
						"IERC721": [
							677
						],
						"MoonRabbitsStaking": [
							1386
						],
						"Ownable": [
							112
						],
						"ReentrancyGuard": [
							166
						],
						"SafeERC20": [
							561
						]
					},
					"id": 1387,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1043,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1044,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1387,
							"sourceUnit": 245,
							"src": "58:56:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1045,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1387,
							"sourceUnit": 562,
							"src": "115:65:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"id": 1046,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1387,
							"sourceUnit": 678,
							"src": "181:58:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1047,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1387,
							"sourceUnit": 113,
							"src": "240:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 1048,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1387,
							"sourceUnit": 167,
							"src": "293:62:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1049,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "446:7:9"
									},
									"id": 1050,
									"nodeType": "InheritanceSpecifier",
									"src": "446:7:9"
								},
								{
									"baseName": {
										"id": 1051,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 166,
										"src": "455:15:9"
									},
									"id": 1052,
									"nodeType": "InheritanceSpecifier",
									"src": "455:15:9"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1386,
							"linearizedBaseContracts": [
								1386,
								166,
								112,
								1029
							],
							"name": "MoonRabbitsStaking",
							"nameLocation": "424:18:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "78b2e3a9",
									"id": 1055,
									"mutability": "mutable",
									"name": "NFTCollection",
									"nameLocation": "512:13:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "497:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721_$677",
										"typeString": "contract IERC721"
									},
									"typeName": {
										"id": 1054,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1053,
											"name": "IERC721",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 677,
											"src": "497:7:9"
										},
										"referencedDeclaration": 677,
										"src": "497:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721_$677",
											"typeString": "contract IERC721"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f7c618c1",
									"id": 1058,
									"mutability": "mutable",
									"name": "rewardToken",
									"nameLocation": "567:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "553:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$244",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1057,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1056,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 244,
											"src": "553:6:9"
										},
										"referencedDeclaration": 244,
										"src": "553:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$244",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2986c0e5",
									"id": 1061,
									"mutability": "mutable",
									"name": "index",
									"nameLocation": "624:5:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "609:24:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1059,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "609:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30",
										"id": 1060,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "632:1:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "public"
								},
								{
									"id": 1065,
									"libraryName": {
										"id": 1062,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 561,
										"src": "646:9:9"
									},
									"nodeType": "UsingForDirective",
									"src": "640:27:9",
									"typeName": {
										"id": 1064,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1063,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 244,
											"src": "660:6:9"
										},
										"referencedDeclaration": 244,
										"src": "660:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$244",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"id": 1067,
									"mutability": "mutable",
									"name": "totalTokens",
									"nameLocation": "688:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "672:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1066,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "672:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"canonicalName": "MoonRabbitsStaking.Staker",
									"id": 1078,
									"members": [
										{
											"constant": false,
											"id": 1069,
											"mutability": "mutable",
											"name": "index",
											"nameLocation": "738:5:9",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "730:13:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1068,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "730:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1071,
											"mutability": "mutable",
											"name": "user",
											"nameLocation": "761:4:9",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "753:12:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1070,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "753:7:9",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1073,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "783:7:9",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "775:15:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1072,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "775:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1075,
											"mutability": "mutable",
											"name": "pool",
											"nameLocation": "808:4:9",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "800:12:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1074,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "800:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1077,
											"mutability": "mutable",
											"name": "timestamp",
											"nameLocation": "830:9:9",
											"nodeType": "VariableDeclaration",
											"scope": 1078,
											"src": "822:17:9",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1076,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "822:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "713:6:9",
									"nodeType": "StructDefinition",
									"scope": 1386,
									"src": "706:140:9",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d5a44f86",
									"id": 1083,
									"mutability": "mutable",
									"name": "stakes",
									"nameLocation": "886:6:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "852:40:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Staker_$1078_storage_$",
										"typeString": "mapping(uint256 => struct MoonRabbitsStaking.Staker)"
									},
									"typeName": {
										"id": 1082,
										"keyType": {
											"id": 1079,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "860:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "852:26:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Staker_$1078_storage_$",
											"typeString": "mapping(uint256 => struct MoonRabbitsStaking.Staker)"
										},
										"valueType": {
											"id": 1081,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1080,
												"name": "Staker",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1078,
												"src": "871:6:9"
											},
											"referencedDeclaration": 1078,
											"src": "871:6:9",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$1078_storage_ptr",
												"typeString": "struct MoonRabbitsStaking.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3f106929",
									"id": 1088,
									"mutability": "mutable",
									"name": "staking_details",
									"nameLocation": "935:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "898:52:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
										"typeString": "mapping(address => uint256[])"
									},
									"typeName": {
										"id": 1087,
										"keyType": {
											"id": 1084,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "906:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "898:29:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
											"typeString": "mapping(address => uint256[])"
										},
										"valueType": {
											"baseType": {
												"id": 1085,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "917:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 1086,
											"nodeType": "ArrayTypeName",
											"src": "917:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3af416d1",
									"id": 1093,
									"mutability": "mutable",
									"name": "unstaking_details",
									"nameLocation": "993:17:9",
									"nodeType": "VariableDeclaration",
									"scope": 1386,
									"src": "956:54:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
										"typeString": "mapping(address => uint256[])"
									},
									"typeName": {
										"id": 1092,
										"keyType": {
											"id": 1089,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "964:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "956:29:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
											"typeString": "mapping(address => uint256[])"
										},
										"valueType": {
											"baseType": {
												"id": 1090,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "975:7:9",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"id": 1091,
											"nodeType": "ArrayTypeName",
											"src": "975:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1112,
										"nodeType": "Block",
										"src": "1074:100:9",
										"statements": [
											{
												"expression": {
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1100,
														"name": "rewardToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "1084:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$244",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1102,
																"name": "_RewardToken",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1095,
																"src": "1105:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1101,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 244,
															"src": "1098:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$244_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1098:20:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$244",
															"typeString": "contract IERC20"
														}
													},
													"src": "1084:34:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$244",
														"typeString": "contract IERC20"
													}
												},
												"id": 1105,
												"nodeType": "ExpressionStatement",
												"src": "1084:34:9"
											},
											{
												"expression": {
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1106,
														"name": "NFTCollection",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1055,
														"src": "1128:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$677",
															"typeString": "contract IERC721"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1108,
																"name": "_NFTCollection",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1097,
																"src": "1152:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1107,
															"name": "IERC721",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "1144:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC721_$677_$",
																"typeString": "type(contract IERC721)"
															}
														},
														"id": 1109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1144:23:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721_$677",
															"typeString": "contract IERC721"
														}
													},
													"src": "1128:39:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721_$677",
														"typeString": "contract IERC721"
													}
												},
												"id": 1111,
												"nodeType": "ExpressionStatement",
												"src": "1128:39:9"
											}
										]
									},
									"id": 1113,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "_RewardToken",
												"nameLocation": "1037:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "1029:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1094,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "_NFTCollection",
												"nameLocation": "1058:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1113,
												"src": "1050:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1050:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1028:45:9"
									},
									"returnParameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1074:0:9"
									},
									"scope": 1386,
									"src": "1017:157:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"id": 1123,
									"name": "Stake",
									"nameLocation": "1186:5:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1208:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "1192:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1192:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1117,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "1223:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "1215:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1215:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1119,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1235:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "1227:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"indexed": false,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "1249:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "1241:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1241:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1191:63:9"
									},
									"src": "1180:75:9"
								},
								{
									"anonymous": false,
									"id": 1135,
									"name": "UnStake",
									"nameLocation": "1266:7:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1290:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "1274:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1127,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "1305:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "1297:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1297:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"indexed": false,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1317:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "1309:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1309:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"indexed": false,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "1331:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "1323:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1323:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"indexed": false,
												"mutability": "mutable",
												"name": "rewardTokens",
												"nameLocation": "1345:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "1337:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1337:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1273:85:9"
									},
									"src": "1260:99:9"
								},
								{
									"body": {
										"id": 1167,
										"nodeType": "Block",
										"src": "1532:220:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1143,
														"name": "_pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1138,
														"src": "1545:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "37",
														"id": 1144,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1552:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "1545:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1149,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "1600:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "3134",
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1607:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_14_by_1",
																"typeString": "int_const 14"
															},
															"value": "14"
														},
														"src": "1600:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1155,
																"name": "_pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1138,
																"src": "1656:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3330",
																"id": 1156,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1663:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_30_by_1",
																	"typeString": "int_const 30"
																},
																"value": "30"
															},
															"src": "1656:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"id": 1163,
															"nodeType": "Block",
															"src": "1709:37:9",
															"statements": [
																{
																	"expression": {
																		"hexValue": "3130303030",
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1730:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_10000_by_1",
																			"typeString": "int_const 10000"
																		},
																		"value": "10000"
																	},
																	"functionReturnParameters": 1142,
																	"id": 1162,
																	"nodeType": "Return",
																	"src": "1723:12:9"
																}
															]
														},
														"id": 1164,
														"nodeType": "IfStatement",
														"src": "1653:93:9",
														"trueBody": {
															"id": 1160,
															"nodeType": "Block",
															"src": "1667:36:9",
															"statements": [
																{
																	"expression": {
																		"hexValue": "35303030",
																		"id": 1158,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1688:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_5000_by_1",
																			"typeString": "int_const 5000"
																		},
																		"value": "5000"
																	},
																	"functionReturnParameters": 1142,
																	"id": 1159,
																	"nodeType": "Return",
																	"src": "1681:11:9"
																}
															]
														}
													},
													"id": 1165,
													"nodeType": "IfStatement",
													"src": "1597:149:9",
													"trueBody": {
														"id": 1154,
														"nodeType": "Block",
														"src": "1611:36:9",
														"statements": [
															{
																"expression": {
																	"hexValue": "33303030",
																	"id": 1152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1632:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_3000_by_1",
																		"typeString": "int_const 3000"
																	},
																	"value": "3000"
																},
																"functionReturnParameters": 1142,
																"id": 1153,
																"nodeType": "Return",
																"src": "1625:11:9"
															}
														]
													}
												},
												"id": 1166,
												"nodeType": "IfStatement",
												"src": "1542:204:9",
												"trueBody": {
													"id": 1148,
													"nodeType": "Block",
													"src": "1555:36:9",
													"statements": [
														{
															"expression": {
																"hexValue": "31303030",
																"id": 1146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1576:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000_by_1",
																	"typeString": "int_const 1000"
																},
																"value": "1000"
															},
															"functionReturnParameters": 1142,
															"id": 1147,
															"nodeType": "Return",
															"src": "1569:11:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1136,
										"nodeType": "StructuredDocumentation",
										"src": "1365:87:9",
										"text": " Calculate reward for the user's pool\n @param _pool Pool of NFT"
									},
									"id": 1168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateRewardPool",
									"nameLocation": "1466:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "_pool",
												"nameLocation": "1494:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "1486:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1486:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1485:15:9"
									},
									"returnParameters": {
										"id": 1142,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "1522:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1522:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1521:9:9"
									},
									"scope": 1386,
									"src": "1457:295:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1233,
										"nodeType": "Block",
										"src": "1960:392:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1179,
																		"name": "_tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1171,
																		"src": "2000:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1177,
																		"name": "NFTCollection",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1055,
																		"src": "1978:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721_$677",
																			"typeString": "contract IERC721"
																		}
																	},
																	"id": 1178,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 610,
																	"src": "1978:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view external returns (address)"
																	}
																},
																"id": 1180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1978:31:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1181,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2013:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1182,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2013:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1978:45:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "43616e2774207374616b65206e667420796f7520646f6e2774206f776e21",
															"id": 1184,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2024:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe",
																"typeString": "literal_string \"Can't stake nft you don't own!\""
															},
															"value": "Can't stake nft you don't own!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1624d4f25969ee526147bd8655de287c38135e6ace26a92631ce497b2ca81bbe",
																"typeString": "literal_string \"Can't stake nft you don't own!\""
															}
														],
														"id": 1176,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1970:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1970:87:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1186,
												"nodeType": "ExpressionStatement",
												"src": "1970:87:9"
											},
											{
												"expression": {
													"id": 1199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1187,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "2067:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Staker_$1078_storage_$",
																"typeString": "mapping(uint256 => struct MoonRabbitsStaking.Staker storage ref)"
															}
														},
														"id": 1189,
														"indexExpression": {
															"id": 1188,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "2074:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2067:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1078_storage",
															"typeString": "struct MoonRabbitsStaking.Staker storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1191,
																"name": "index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1061,
																"src": "2090:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 1192,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2096:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2096:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1194,
																"name": "_tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1171,
																"src": "2107:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1195,
																"name": "_pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1173,
																"src": "2117:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"expression": {
																	"id": 1196,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2124:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2124:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1190,
															"name": "Staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1078,
															"src": "2083:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Staker_$1078_storage_ptr_$",
																"typeString": "type(struct MoonRabbitsStaking.Staker storage pointer)"
															}
														},
														"id": 1198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2083:57:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1078_memory_ptr",
															"typeString": "struct MoonRabbitsStaking.Staker memory"
														}
													},
													"src": "2067:73:9",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Staker_$1078_storage",
														"typeString": "struct MoonRabbitsStaking.Staker storage ref"
													}
												},
												"id": 1200,
												"nodeType": "ExpressionStatement",
												"src": "2067:73:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1206,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "2183:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 1201,
																"name": "staking_details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1088,
																"src": "2150:15:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
																	"typeString": "mapping(address => uint256[] storage ref)"
																}
															},
															"id": 1204,
															"indexExpression": {
																"expression": {
																	"id": 1202,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2166:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2166:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2150:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1205,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2150:32:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer,uint256)"
														}
													},
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2150:39:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1208,
												"nodeType": "ExpressionStatement",
												"src": "2150:39:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1212,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2226:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2226:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1216,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2246:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MoonRabbitsStaking_$1386",
																		"typeString": "contract MoonRabbitsStaking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_MoonRabbitsStaking_$1386",
																		"typeString": "contract MoonRabbitsStaking"
																	}
																],
																"id": 1215,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2238:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1214,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2238:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2238:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1218,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "2253:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1209,
															"name": "NFTCollection",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "2199:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$677",
																"typeString": "contract IERC721"
															}
														},
														"id": 1211,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 642,
														"src": "2199:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 1219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2199:63:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1220,
												"nodeType": "ExpressionStatement",
												"src": "2199:63:9"
											},
											{
												"expression": {
													"id": 1222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "++",
													"prefix": false,
													"src": "2272:7:9",
													"subExpression": {
														"id": 1221,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1061,
														"src": "2272:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1223,
												"nodeType": "ExpressionStatement",
												"src": "2272:7:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1225,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2300:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2300:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1227,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "2312:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1228,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "2322:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1229,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "2329:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "2329:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1224,
														"name": "Stake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "2294:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2294:51:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1232,
												"nodeType": "EmitStatement",
												"src": "2289:56:9"
											}
										]
									},
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "1758:139:9",
										"text": " Create a new staking for a specific user\n @param _tokenId Token Id of NFT to stake\n @param _pool Pool of NFT"
									},
									"functionSelector": "51cecc80",
									"id": 1234,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "stakeNFT",
									"nameLocation": "1911:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "1928:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "1920:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1920:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "_pool",
												"nameLocation": "1946:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1234,
												"src": "1938:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1938:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1919:33:9"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1960:0:9"
									},
									"scope": 1386,
									"src": "1902:450:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1324,
										"nodeType": "Block",
										"src": "2590:558:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1260,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1258,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1254,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1251,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 1245,
																							"name": "block",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967292,
																							"src": "2609:5:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_block",
																								"typeString": "block"
																							}
																						},
																						"id": 1246,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "timestamp",
																						"nodeType": "MemberAccess",
																						"src": "2609:15:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 1247,
																								"name": "stakes",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1083,
																								"src": "2627:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Staker_$1078_storage_$",
																									"typeString": "mapping(uint256 => struct MoonRabbitsStaking.Staker storage ref)"
																								}
																							},
																							"id": 1249,
																							"indexExpression": {
																								"id": 1248,
																								"name": "_index",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1237,
																								"src": "2634:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "2627:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_Staker_$1078_storage",
																								"typeString": "struct MoonRabbitsStaking.Staker storage ref"
																							}
																						},
																						"id": 1250,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "timestamp",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 1077,
																						"src": "2627:24:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2609:42:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1252,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2608:44:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "3630",
																			"id": 1253,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2655:2:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_60_by_1",
																				"typeString": "int_const 60"
																			},
																			"value": "60"
																		},
																		"src": "2608:49:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "3630",
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2660:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_60_by_1",
																			"typeString": "int_const 60"
																		},
																		"value": "60"
																	},
																	"src": "2608:54:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "3234",
																	"id": 1257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2665:2:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_24_by_1",
																		"typeString": "int_const 24"
																	},
																	"value": "24"
																},
																"src": "2608:59:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1259,
																"name": "_pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "2671:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2608:68:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b696e6720706f6f6c206e6f7420656e6465642079657421212121",
															"id": 1261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2677:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e",
																"typeString": "literal_string \"Staking pool not ended yet!!!!\""
															},
															"value": "Staking pool not ended yet!!!!"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2c264ac290bec70a05ed24874b7a508841480fcc00576c7986fac4268cbefe0e",
																"typeString": "literal_string \"Staking pool not ended yet!!!!\""
															}
														],
														"id": 1244,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2600:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2600:110:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1263,
												"nodeType": "ExpressionStatement",
												"src": "2600:110:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1265,
																		"name": "stakes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1083,
																		"src": "2728:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Staker_$1078_storage_$",
																			"typeString": "mapping(uint256 => struct MoonRabbitsStaking.Staker storage ref)"
																		}
																	},
																	"id": 1267,
																	"indexExpression": {
																		"id": 1266,
																		"name": "_index",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1237,
																		"src": "2735:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2728:14:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1078_storage",
																		"typeString": "struct MoonRabbitsStaking.Staker storage ref"
																	}
																},
																"id": 1268,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "user",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1071,
																"src": "2728:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1269,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2751:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2751:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2728:33:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "596f7520617265206e6f74206f776e6572206f662074686973204e4654207374616b696e67",
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2762:39:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c",
																"typeString": "literal_string \"You are not owner of this NFT staking\""
															},
															"value": "You are not owner of this NFT staking"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e15a9850692d6708934a23063a6ddc95798c196bc7427dd1b63298ad85e9753c",
																"typeString": "literal_string \"You are not owner of this NFT staking\""
															}
														],
														"id": 1264,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2720:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2720:82:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1274,
												"nodeType": "ExpressionStatement",
												"src": "2720:82:9"
											},
											{
												"expression": {
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "2812:21:9",
													"subExpression": {
														"baseExpression": {
															"id": 1275,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "2819:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Staker_$1078_storage_$",
																"typeString": "mapping(uint256 => struct MoonRabbitsStaking.Staker storage ref)"
															}
														},
														"id": 1277,
														"indexExpression": {
															"id": 1276,
															"name": "_index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1237,
															"src": "2826:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2819:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Staker_$1078_storage",
															"typeString": "struct MoonRabbitsStaking.Staker storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "2812:21:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1285,
															"name": "_index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1237,
															"src": "2878:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"baseExpression": {
																"id": 1280,
																"name": "unstaking_details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "2843:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
																	"typeString": "mapping(address => uint256[] storage ref)"
																}
															},
															"id": 1283,
															"indexExpression": {
																"expression": {
																	"id": 1281,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2861:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2861:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2843:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1284,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2843:34:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer,uint256)"
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2843:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1287,
												"nodeType": "ExpressionStatement",
												"src": "2843:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1293,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2931:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MoonRabbitsStaking_$1386",
																		"typeString": "contract MoonRabbitsStaking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_MoonRabbitsStaking_$1386",
																		"typeString": "contract MoonRabbitsStaking"
																	}
																],
																"id": 1292,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2923:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1291,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2923:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1294,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2923:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1295,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2938:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2938:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1297,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "2950:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1288,
															"name": "NFTCollection",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1055,
															"src": "2895:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$677",
																"typeString": "contract IERC721"
															}
														},
														"id": 1290,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 642,
														"src": "2895:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256) external"
														}
													},
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2895:64:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1299,
												"nodeType": "ExpressionStatement",
												"src": "2895:64:9"
											},
											{
												"assignments": [
													1301
												],
												"declarations": [
													{
														"constant": false,
														"id": 1301,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "2977:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1324,
														"src": "2969:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1300,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2969:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1305,
												"initialValue": {
													"arguments": [
														{
															"id": 1303,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "3007:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1302,
														"name": "calculateRewardPool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1168,
														"src": "2987:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) pure returns (uint256)"
														}
													},
													"id": 1304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2987:26:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2969:44:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1309,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3045:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3045:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1311,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1301,
															"src": "3057:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1306,
															"name": "rewardToken",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1058,
															"src": "3023:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$244",
																"typeString": "contract IERC20"
															}
														},
														"id": 1308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3023:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3023:41:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1313,
												"nodeType": "ExpressionStatement",
												"src": "3023:41:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1315,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3087:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3087:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1317,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "3099:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1318,
															"name": "_pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "3109:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1319,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3117:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1320,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "3117:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1321,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1301,
															"src": "3134:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1314,
														"name": "UnStake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1135,
														"src": "3079:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3079:62:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1323,
												"nodeType": "EmitStatement",
												"src": "3074:67:9"
											}
										]
									},
									"documentation": {
										"id": 1235,
										"nodeType": "StructuredDocumentation",
										"src": "2358:152:9",
										"text": " Unstake the NFT and rewards user if pool is completed\n @param _tokenId Token Id of NFT to stake\n @param _pool Pool of NFT"
									},
									"functionSelector": "78dba594",
									"id": 1325,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unStakeNFT",
									"nameLocation": "2524:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "_index",
												"nameLocation": "2543:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "2535:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2535:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "2558:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "2550:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2550:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "_pool",
												"nameLocation": "2576:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "2568:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2568:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2534:48:9"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2590:0:9"
									},
									"scope": 1386,
									"src": "2515:633:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1345,
										"nodeType": "Block",
										"src": "3348:84:9",
										"statements": [
											{
												"assignments": [
													1338
												],
												"declarations": [
													{
														"constant": false,
														"id": 1338,
														"mutability": "mutable",
														"name": "list",
														"nameLocation": "3375:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1345,
														"src": "3358:21:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1336,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3358:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1337,
															"nodeType": "ArrayTypeName",
															"src": "3358:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1342,
												"initialValue": {
													"baseExpression": {
														"id": 1339,
														"name": "staking_details",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1088,
														"src": "3382:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
															"typeString": "mapping(address => uint256[] storage ref)"
														}
													},
													"id": 1341,
													"indexExpression": {
														"id": 1340,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1328,
														"src": "3398:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3382:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
														"typeString": "uint256[] storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3358:46:9"
											},
											{
												"expression": {
													"id": 1343,
													"name": "list",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1338,
													"src": "3421:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"functionReturnParameters": 1333,
												"id": 1344,
												"nodeType": "Return",
												"src": "3414:11:9"
											}
										]
									},
									"documentation": {
										"id": 1326,
										"nodeType": "StructuredDocumentation",
										"src": "3154:82:9",
										"text": " Get user's staking list\n @param _user Address of the user"
									},
									"functionSelector": "79e5f7d7",
									"id": 1346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "userStakingList",
									"nameLocation": "3250:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "3274:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "3266:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3266:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3265:15:9"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "3326:16:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1330,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3326:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1331,
													"nodeType": "ArrayTypeName",
													"src": "3326:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3325:18:9"
									},
									"scope": 1386,
									"src": "3241:191:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1384,
										"nodeType": "Block",
										"src": "3662:212:9",
										"statements": [
											{
												"body": {
													"id": 1380,
													"nodeType": "Block",
													"src": "3729:115:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1375,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1369,
																			"name": "unstaking_details",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1093,
																			"src": "3746:17:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
																				"typeString": "mapping(address => uint256[] storage ref)"
																			}
																		},
																		"id": 1371,
																		"indexExpression": {
																			"id": 1370,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1351,
																			"src": "3764:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3746:24:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																			"typeString": "uint256[] storage ref"
																		}
																	},
																	"id": 1373,
																	"indexExpression": {
																		"id": 1372,
																		"name": "j",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1357,
																		"src": "3771:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3746:27:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1374,
																	"name": "_tempIndex",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1349,
																	"src": "3775:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3746:39:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1379,
															"nodeType": "IfStatement",
															"src": "3743:91:9",
															"trueBody": {
																"id": 1378,
																"nodeType": "Block",
																"src": "3786:48:9",
																"statements": [
																	{
																		"expression": {
																			"hexValue": "74727565",
																			"id": 1376,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3815:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		},
																		"functionReturnParameters": 1355,
																		"id": 1377,
																		"nodeType": "Return",
																		"src": "3808:11:9"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1365,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1360,
														"name": "j",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1357,
														"src": "3687:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"baseExpression": {
																"id": 1361,
																"name": "unstaking_details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "3691:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
																	"typeString": "mapping(address => uint256[] storage ref)"
																}
															},
															"id": 1363,
															"indexExpression": {
																"id": 1362,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1351,
																"src": "3709:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3691:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 1364,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3691:31:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3687:35:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1381,
												"initializationExpression": {
													"assignments": [
														1357
													],
													"declarations": [
														{
															"constant": false,
															"id": 1357,
															"mutability": "mutable",
															"name": "j",
															"nameLocation": "3682:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1381,
															"src": "3677:6:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1356,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "3677:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1359,
													"initialValue": {
														"hexValue": "30",
														"id": 1358,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3684:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3677:8:9"
												},
												"loopExpression": {
													"expression": {
														"id": 1367,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3724:3:9",
														"subExpression": {
															"id": 1366,
															"name": "j",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1357,
															"src": "3724:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1368,
													"nodeType": "ExpressionStatement",
													"src": "3724:3:9"
												},
												"nodeType": "ForStatement",
												"src": "3672:172:9"
											},
											{
												"expression": {
													"hexValue": "66616c7365",
													"id": 1382,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3862:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 1355,
												"id": 1383,
												"nodeType": "Return",
												"src": "3855:12:9"
											}
										]
									},
									"documentation": {
										"id": 1347,
										"nodeType": "StructuredDocumentation",
										"src": "3438:127:9",
										"text": " Check if nft index is already unstaked\n @param _tempIndex of the nft\n @param _user of the user"
									},
									"functionSelector": "fbaca086",
									"id": 1385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkIfAlreadyUnstaked",
									"nameLocation": "3579:22:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "_tempIndex",
												"nameLocation": "3610:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "3602:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3602:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "_user",
												"nameLocation": "3629:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "3621:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3621:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3601:34:9"
									},
									"returnParameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "3656:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1353,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3656:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3655:6:9"
									},
									"scope": 1386,
									"src": "3570:304:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1387,
							"src": "415:3461:9",
							"usedErrors": []
						}
					],
					"src": "33:3843:9"
				},
				"id": 9
			}
		}
	}
}
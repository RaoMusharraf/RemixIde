{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_ERC20",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_seedValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_privateValue",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_publicValue",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_Holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "roundTyp",
						"type": "uint256"
					}
				],
				"name": "ClaimToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "TotalDays",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_Holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addPrivate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_Holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addPublic",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_Holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addSeed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_Holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "roundTyp",
						"type": "uint256"
					}
				],
				"name": "checkClaimReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startDate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "endDate",
						"type": "uint256"
					}
				],
				"name": "claimActive",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimEndDate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "claimStartDate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "erc20",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_Holder",
						"type": "address"
					}
				],
				"name": "getSeed",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "erc20",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "totalHolding",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "Price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "withdrawTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct ThreeDot.Round[]",
						"name": "",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "erc20",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "totalHolding",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "Price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "withdrawTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct ThreeDot.Round[]",
						"name": "",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "erc20",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "totalHolding",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "Price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "withdrawTime",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct ThreeDot.Round[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isClaimActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "privateValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "publicValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "rounds",
				"outputs": [
					{
						"internalType": "address",
						"name": "erc20",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "totalHolding",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "Price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "withdrawTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "seedValue",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_privateValue",
						"type": "uint256"
					}
				],
				"name": "setPrivatePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_publicValue",
						"type": "uint256"
					}
				],
				"name": "setPublicPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_seedValue",
						"type": "uint256"
					}
				],
				"name": "setSeedPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "3 Dot Link Team",
			"details": "Utilizes OpenZeppelin's contracts for ERC20 interactions and ownership management",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"ClaimToken(address,uint256)": {
					"details": "Claims are based on the duration since the last claim",
					"params": {
						"_Holder": "The address of the holder making the claim"
					}
				},
				"addPrivate(address,uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_Holder": "The address of the holder receiving the seed",
						"_amount": "The amount of tokens associated with the seed"
					}
				},
				"addPublic(address,uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_Holder": "The address of the holder receiving the seed",
						"_amount": "The amount of tokens associated with the seed"
					}
				},
				"addSeed(address,uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_Holder": "The address of the holder receiving the seed",
						"_amount": "The amount of tokens associated with the seed"
					}
				},
				"checkClaimReward(address,uint256)": {
					"params": {
						"_Holder": "The address of the holder checking the claim"
					}
				},
				"claimActive(uint256,uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"endDate": "The end date for the claim period",
						"startDate": "The start date for the claim period"
					}
				},
				"constructor": {
					"params": {
						"_ERC20": "The ERC20 token address associated with the contract",
						"_seedValue": "The initial value assigned to each seed",
						"initialOwner": "The address of the initial owner of the contract"
					}
				},
				"getSeed(address)": {
					"params": {
						"_Holder": "The address of the holder"
					},
					"returns": {
						"_0": "An array containing the seed , private and public information of the requested holder"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setPrivatePrice(uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_privateValue": "The new privateValue value"
					}
				},
				"setPublicPrice(uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_publicValue": "The new publicValue value"
					}
				},
				"setSeedPrice(uint256)": {
					"details": "Can only be called by the contract owner",
					"params": {
						"_seedValue": "The new seed value"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "A smart contract for Vasting token",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"ClaimToken(address,uint256)": {
					"notice": "Function for holders to claim their tokens"
				},
				"addPrivate(address,uint256)": {
					"notice": "Function to add a seed to a holder"
				},
				"addPublic(address,uint256)": {
					"notice": "Function to add a seed to a holder"
				},
				"addSeed(address,uint256)": {
					"notice": "Function to add a seed to a holder"
				},
				"checkClaimReward(address,uint256)": {
					"notice": "Function for holders to check their tokens"
				},
				"claimActive(uint256,uint256)": {
					"notice": "Function to activate the claim feature"
				},
				"constructor": {
					"notice": "Constructor to set initial values for the contract"
				},
				"getSeed(address)": {
					"notice": "Function to get the seed information of a specific holder"
				},
				"setPrivatePrice(uint256)": {
					"notice": "Function to set a new privateValue value"
				},
				"setPublicPrice(uint256)": {
					"notice": "Function to set a new publicValue value"
				},
				"setSeedPrice(uint256)": {
					"notice": "Function to set a new seed value"
				}
			},
			"notice": "This contract allows the owner to create seeds for token holders and manage their claims",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/3dot_Link/smartContract.sol": "ThreeDot"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867",
				"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY"
			]
		},
		"contracts/3dot_Link/smartContract.sol": {
			"keccak256": "0x4bbf9373e65b6945796e96e483aee58336d434823561811c36ad577db9a34896",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f752904bb63dce92dd8f683f81a3bcabf982ff36a8535c76dd1fd2045694aac",
				"dweb:/ipfs/QmYaPhu4WLpvgvkn32vCqxH6QqN15k7hC2DogQffTACUj1"
			]
		}
	},
	"version": 1
}
{
	"id": "752156025557d578ba5e4c674bb2c551",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Token&NFTStaking/TokenNFT1.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Creator: andreitoma8\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC20Stakeable is Ownable,IERC721Receiver{\n    using SafeERC20 for IERC20;\n    address public ERC721address;\n    address public ERC20Address;\n    uint public TotalToken;\n    uint rate;\n    struct Staker {\n        uint256 deposited;\n        uint256 timestake;\n        bool check; \n    }\n    struct StakerNFT {\n        uint256 userRate;\n        uint256 tokenId;\n        bool check; \n    }\n    mapping (address => Staker) public Details;\n    mapping (address => uint) public Reward;\n    mapping (address => StakerNFT ) public UserRate;\n    /*\n    ~~~~~~~~~~~~~~~Constructor function~~~~~~~~~~~~~~~\n   1. This function is called when contract is first deployed.\n   2. It takes three parameters:\n        a. ER721 Token Address (Address of ER721 Token Contract)\n        b. Rate Percentage (Percentage value of rate i.e., Interest percentage)\n        c. ER720 Token Address (Address of ER720 Token Contract)\n    */\n    constructor(address _ERC721address, uint256 _ratePersentage, address _ERC20Address) {\n        ERC721address = _ERC721address;\n        rate = _ratePersentage;\n        ERC20Address = _ERC20Address;\n    }\n    /*\n    ~~~~~~~~~~~~~Admin Add Token Function~~~~~~~~~~~~~~~\n    1. Owner add tokens into contract with this function\n    2. These tokens are used as rewards for staking\n    3. Only Owner can call this function\n    */\n    function AdminAddToken(uint _amount) public onlyOwner{\n        TotalToken += _amount;\n        IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Admin WithDraw Token Function~~~~~~~~~~~~~~~\n    1. Admin withdraws his/her desired amount of token from contract.\n    2. Only Owner can call this function\n    */\n    function AdminWithDrawToken(uint amount,address _to) public onlyOwner{\n        IERC20(ERC20Address).safeTransfer(_to, amount);\n    }\n    /*\n    ~~~~~~~~~~~~~Utilization Function~~~~~~~~~~~~~~~\n    1. Owner call this function to check remaining percentage of tokens left in this contract.\n    2. Only Owner can call this function\n    */\n    function Utilization() public view returns(uint256) {\n        uint Persentage = (IERC20(ERC20Address).balanceOf(address(this)) * 100)/TotalToken;\n        return Persentage;\n    }\n    /*   ~~~~~~~~~~~~~Deposit Function~~~~~~~~~~~~~~~\n    1. This function has one parameter.\n    2. This function is used to deposit desired amount of tokens in this contract by user.\n    3. If user already deposited some tokens then he/she must has to withdraw all tokens first.\n    */\n    function Deposit(uint256 _amount) public {\n        if(!Details[msg.sender].check){\n            TotalToken += _amount;\n            Details[msg.sender] = Staker(_amount,block.timestamp,true);\n            IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount);\n        }\n        else{\n            TotalToken += _amount;\n            Reward[msg.sender] +=  calculateIntrest(msg.sender);\n            Details[msg.sender] = Staker(Details[msg.sender].deposited + _amount,block.timestamp,true);\n            IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount);\n        }\n    }\n    /*   ~~~~~~~~~~~~~Withdraw Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw tokens.\n    2. User will call this function to withdraw all tokens from this contract.\n    */\n    function Withdraw() public {\n        require(Details[msg.sender].check,\"Please First Stake\");\n        if (UserRate[msg.sender].check){\n            uint amount = Details[msg.sender].deposited;\n            uint newval = calculateIntrest(msg.sender);\n            IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\");\n            IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]);\n            delete UserRate[msg.sender];\n            delete Reward[msg.sender];\n            delete Details[msg.sender];\n        }\n        else{\n            uint amount = Details[msg.sender].deposited;\n            uint newval = calculateIntrest(msg.sender);\n            IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]);\n            delete Reward[msg.sender];\n            delete Details[msg.sender];\n        }    \n    }\n     /*   ~~~~~~~~~~~~~showReward Function~~~~~~~~~~~~~~~\n    1. This function is used to show rewards.\n    2. User will call this function to check his/her total generated rewards\n    */\n    function showReward(address _to) public view returns(uint result)\n    {\n        if (UserRate[_to].check)\n        {\n            uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            result = TotalReward + Details[_to].deposited;\n            return result/1000000000000000000;\n\n        }\n        else\n        {\n            uint RewardEst = (Details[_to].deposited * rate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            result = TotalReward + Details[_to].deposited;\n            return result/1000000000000000000;\n        }\n        \n    }\n    /*   ~~~~~~~~~~~~~CalculateIntrest Function~~~~~~~~~~~~~~~\n    1. This function is used to calculate total reward generated.\n    2. Function will decide how much reward is generated after every minute by adding PercentageRate of deposited tokens .\n    */\n    function calculateIntrest(address _to) public view returns(uint256){\n        if (UserRate[_to].check)\n        {\n            uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            return TotalReward;\n        }\n        else\n        {\n            uint RewardEst = (Details[_to].deposited * rate) * ((block.timestamp - Details[_to].timestake)/60);\n            uint TotalReward = RewardEst / 100;\n            return TotalReward;\n        }\n    }\n    /*   ~~~~~~~~~~~~~UpdateERC721 Function~~~~~~~~~~~~~~~\n    1. This function is used update address of ERC721 token address.\n    2. Only Owner can call this function.\n    */\n    function UpdateERC721(address _ERC721address) public onlyOwner{\n        ERC721address = _ERC721address;\n    }\n    /*~~~~~~~~~~~~~UpdateERC20 Function~~~~~~~~~~~~~~~\n    1. This function is used update address of ERC20 token address.\n    2. Only Owner can call this function.\n    */\n    function UpdateERC20 ( address _ERC20Address) public onlyOwner{\n        ERC20Address = _ERC20Address;\n    }\n    /*~~~~~~~~~~~~~UpdateRatePersentage Function~~~~~~~~~~~~~~~\n    1. This function is used update Percentage Rate of rewards.\n    2. Only Owner can call this function.\n    */\n    function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{\n        rate = _ratePersentage;\n    }\n    /*~~~~~~~~~~~~~DepositNFT Function~~~~~~~~~~~~~~~\n    1. This function is used to deposit new token and boost the current percentage rate\n    2. This function takes two parameters i.e., Token Id and New Boosted Percentage Rate\n    */\n    function DepositNFT(uint256 tokenIds,uint _rate) public {\n        require(Details[msg.sender].check,\"First Deposit Tokens\");\n        require(!UserRate[msg.sender].check,\"Please Unstake your deposited NFT\");\n        UserRate[msg.sender] = StakerNFT(_rate,tokenIds,true); \n        IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\");\n    }\n    /*~~~~~~~~~~~~~WithdrawNFT Function~~~~~~~~~~~~~~~\n    1. This function is used to withdraw token\n    2. This function takes one parameter\n    3. User must have one nft staked before withdrawing.\n    */\n    function withdrawNFT(uint256 tokenIds) public {\n        require(UserRate[msg.sender].check,\"Please First Stake NFTs\");\n        IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\");\n        delete UserRate[msg.sender];\n    }\n    function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":707:4455  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 PUSH14 0x75860CA80FC9BDD85F12D85FBC35 0xE5 LOG3 0x23 RETURNDATASIZE LT DUP10 0xAB 0xBC 0xD4 0x5E 0x23 LOG4 PUSH30 0xA6571764736F6C6343000807003300000000000000000000000000000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 PUSH14 0x75860CA80FC9BDD85F12D85FBC35 0xE5 LOG3 0x23 RETURNDATASIZE LT DUP10 0xAB 0xBC 0xD4 0x5E 0x23 LOG4 PUSH30 0xA6571764736F6C6343000807003300000000000000000000000000000000 ",
							"sourceMap": "707:3748:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 707,
									"end": 4455,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a26d75860ca80fc9bdd85f12d85fbc35e5a3233d1089abbcd45e23a47da6571764736f6c63430008070033",
									".code": [
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 707,
											"end": 4455,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"IERC721Enumerable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:9158  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 PUSH17 0x602C71AF2A227B683D2898AB795367EB8B BLOCKHASH SLOAD 0xB7 DIV PUSH28 0xA23204BD0AB996B364736F6C63430008070033000000000000000000 ",
							"sourceMap": "194:8964:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 PUSH17 0x602C71AF2A227B683D2898AB795367EB8B BLOCKHASH SLOAD 0xB7 DIV PUSH28 0xA23204BD0AB996B364736F6C63430008070033000000000000000000 ",
							"sourceMap": "194:8964:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 194,
									"end": 9158,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202870602c71af2a227b683d2898ab795367eb8b4054b7047ba23204bd0ab996b364736f6c63430008070033",
									".code": [
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 194,
											"end": 9158,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Token&NFTStaking/TokenNFT1.sol": {
				"ERC20Stakeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC721address",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_ratePersentage",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "AdminAddToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "AdminWithDrawToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIds",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_rate",
									"type": "uint256"
								}
							],
							"name": "DepositNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Details",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "deposited",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "timestake",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC20Address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ERC721address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "Reward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TotalToken",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC20Address",
									"type": "address"
								}
							],
							"name": "UpdateERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_ERC721address",
									"type": "address"
								}
							],
							"name": "UpdateERC721",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_ratePersentage",
									"type": "uint256"
								}
							],
							"name": "UpdateRatePersentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "UserRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "userRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "check",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Utilization",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "Withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "calculateIntrest",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								}
							],
							"name": "showReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "result",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIds",
									"type": "uint256"
								}
							],
							"name": "withdrawNFT",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":348:8432  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1269:1470  constructor(address _ERC721address, uint256 _ratePersentage, address _ERC20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_7:\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1363:1376  ERC721address */\n  0x01\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1363:1393  ERC721address = _ERC721address */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap5\n  dup6\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  swap2\n  dup3\n  and\n  or\n  swap1\n  swap2\n  sstore\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1403:1407  rate */\n  0x04\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1403:1425  rate = _ratePersentage */\n  swap3\n  swap1\n  swap3\n  sstore\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1435:1447  ERC20Address */\n  0x02\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1435:1463  ERC20Address = _ERC20Address */\n  dup1\n  sload\n  swap2\n  swap1\n  swap4\n  and\n  swap2\n  and\n  or\n  swap1\n  sstore\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":348:8432  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n  jump(tag_15)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:191   */\ntag_16:\n    /* \"#utility.yul\":93:106   */\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":135:166   */\n  dup2\n  and\n    /* \"#utility.yul\":125:167   */\n  dup2\n  eq\n    /* \"#utility.yul\":115:185   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":181:182   */\n  0x00\n    /* \"#utility.yul\":178:179   */\n  dup1\n    /* \"#utility.yul\":171:183   */\n  revert\n    /* \"#utility.yul\":115:185   */\ntag_18:\n    /* \"#utility.yul\":14:191   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":196:550   */\ntag_3:\n    /* \"#utility.yul\":284:290   */\n  0x00\n    /* \"#utility.yul\":292:298   */\n  dup1\n    /* \"#utility.yul\":300:306   */\n  0x00\n    /* \"#utility.yul\":353:355   */\n  0x60\n    /* \"#utility.yul\":341:350   */\n  dup5\n    /* \"#utility.yul\":332:339   */\n  dup7\n    /* \"#utility.yul\":328:351   */\n  sub\n    /* \"#utility.yul\":324:356   */\n  slt\n    /* \"#utility.yul\":321:373   */\n  iszero\n  tag_20\n  jumpi\n    /* \"#utility.yul\":369:370   */\n  0x00\n    /* \"#utility.yul\":366:367   */\n  dup1\n    /* \"#utility.yul\":359:371   */\n  revert\n    /* \"#utility.yul\":321:373   */\ntag_20:\n    /* \"#utility.yul\":392:432   */\n  tag_21\n    /* \"#utility.yul\":422:431   */\n  dup5\n    /* \"#utility.yul\":392:432   */\n  tag_16\n  jump\t// in\ntag_21:\n    /* \"#utility.yul\":382:432   */\n  swap3\n  pop\n    /* \"#utility.yul\":472:474   */\n  0x20\n    /* \"#utility.yul\":461:470   */\n  dup5\n    /* \"#utility.yul\":457:475   */\n  add\n    /* \"#utility.yul\":451:476   */\n  mload\n    /* \"#utility.yul\":441:476   */\n  swap2\n  pop\n    /* \"#utility.yul\":495:544   */\n  tag_22\n    /* \"#utility.yul\":540:542   */\n  0x40\n    /* \"#utility.yul\":529:538   */\n  dup6\n    /* \"#utility.yul\":525:543   */\n  add\n    /* \"#utility.yul\":495:544   */\n  tag_16\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":485:544   */\n  swap1\n  pop\n    /* \"#utility.yul\":196:550   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\ntag_15:\n    /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":348:8432  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":348:8432  contract ERC20Stakeable is Ownable,IERC721Receiver{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xc45af5d8\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xc45af5d8\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xe4458b30\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xe88cc2be\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xee0106d2\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf89d832f\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x934ed772\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xa6021ace\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xb7171a2e\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xc0cd40ee\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x57488064\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x57488064\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x57ea89b6\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x7b2f247f\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x866e58af\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x8b73e331\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x023245d7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x150b7a02\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x275bd33f\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x3f601972\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x4d6ce1e5\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8005:8254  function withdrawNFT(uint256 tokenIds) public {... */\n    tag_3:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      stop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8259:8430  function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {... */\n    tag_4:\n      tag_32\n      tag_33\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_33:\n      shl(0xe1, 0x0a85bd01)\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\n    tag_32:\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":4232:4265   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":4214:4266   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4202:4204   */\n      0x20\n        /* \"#utility.yul\":4187:4205   */\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8259:8430  function onERC721Received(address,address,uint256,bytes calldata) external pure override returns (bytes4) {... */\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6788:6895  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n    tag_5:\n      tag_28\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":503:525  uint public TotalToken */\n    tag_6:\n      tag_42\n      sload(0x03)\n      dup2\n      jump\n    tag_42:\n      mload(0x40)\n        /* \"#utility.yul\":8205:8230   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":8193:8195   */\n      0x20\n        /* \"#utility.yul\":8178:8196   */\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":503:525  uint public TotalToken */\n      tag_36\n        /* \"#utility.yul\":8059:8236   */\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2873:3482  function Deposit(uint256 _amount) public {... */\n    tag_7:\n      tag_28\n      tag_47\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_47:\n      tag_48\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":796:835  mapping (address => uint) public Reward */\n    tag_8:\n      tag_42\n      tag_50\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_50:\n      mstore(0x20, 0x06)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3677:4578  function Withdraw() public {... */\n    tag_9:\n      tag_28\n      tag_54\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_10:\n      tag_28\n      tag_56\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2402:2580  function Utilization() public view returns(uint256) {... */\n    tag_11:\n      tag_42\n      tag_58\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2062:2194  function AdminWithDrawToken(uint amount,address _to) public onlyOwner{... */\n    tag_12:\n      tag_28\n      tag_61\n      calldatasize\n      0x04\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5758:6320  function calculateIntrest(address _to) public view returns(uint256){... */\n    tag_13:\n      tag_42\n      tag_65\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_65:\n      tag_66\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_14:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_68:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2807:2839   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2789:2840   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2777:2779   */\n      0x20\n        /* \"#utility.yul\":2762:2780   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      tag_36\n        /* \"#utility.yul\":2643:2846   */\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7430:7793  function DepositNFT(uint256 tokenIds,uint _rate) public {... */\n    tag_15:\n      tag_28\n      tag_73\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_73:\n      tag_75\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":470:497  address public ERC20Address */\n    tag_16:\n      sload(0x02)\n      tag_68\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":436:464  address public ERC721address */\n    tag_17:\n      sload(0x01)\n      tag_68\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1696:1870  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_18:\n      tag_28\n      tag_83\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_83:\n      tag_84\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4771:5494  function showReward(address _to) public view returns(uint result)... */\n    tag_19:\n      tag_42\n      tag_86\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":841:888  mapping (address => StakerNFT ) public UserRate */\n    tag_20:\n      tag_89\n      tag_90\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_90:\n      mstore(0x20, 0x07)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup4\n      jump\n    tag_89:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":8437:8462   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":8493:8495   */\n      0x20\n        /* \"#utility.yul\":8478:8496   */\n      dup5\n      add\n        /* \"#utility.yul\":8471:8505   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":8548:8562   */\n      iszero\n        /* \"#utility.yul\":8541:8563   */\n      iszero\n        /* \"#utility.yul\":8521:8539   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8514:8564   */\n      mstore\n        /* \"#utility.yul\":8425:8427   */\n      0x60\n        /* \"#utility.yul\":8410:8428   */\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":841:888  mapping (address => StakerNFT ) public UserRate */\n      tag_36\n        /* \"#utility.yul\":8241:8570   */\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":748:790  mapping (address => Staker) public Details */\n    tag_21:\n      tag_89\n      tag_95\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_95:\n      mstore(0x20, 0x05)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      swap1\n      0xff\n      and\n      dup4\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6502:6611  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n    tag_22:\n      tag_28\n      tag_99\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_99:\n      tag_100\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_28\n      tag_102\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_102:\n      tag_103\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7077:7187  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n    tag_24:\n      tag_28\n      tag_105\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_105:\n      tag_106\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8005:8254  function withdrawNFT(uint256 tokenIds) public {... */\n    tag_31:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8078:8088  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8069:8089  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8069:8077  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8069:8089  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8069:8095  UserRate[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8061:8122  require(UserRate[msg.sender].check,\"Please First Stake NFTs\") */\n      tag_108\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6377:6379   */\n      0x20\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8061:8122  require(UserRate[msg.sender].check,\"Please First Stake NFTs\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6359:6380   */\n      mstore\n        /* \"#utility.yul\":6416:6418   */\n      0x17\n        /* \"#utility.yul\":6396:6414   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6389:6419   */\n      mstore\n        /* \"#utility.yul\":6455:6480   */\n      0x506c65617365204669727374205374616b65204e465473000000000000000000\n        /* \"#utility.yul\":6435:6453   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6428:6481   */\n      mstore\n        /* \"#utility.yul\":6498:6516   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8061:8122  require(UserRate[msg.sender].check,\"Please First Stake NFTs\") */\n    tag_109:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_108:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8140:8153  ERC721address */\n      sload(0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8132:8210  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      mload(0x40)\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8140:8153  ERC721address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8132:8171  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8132:8210  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      tag_111\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8180:8184  this */\n      address\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8187:8197  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8198:8206  tokenIds */\n      dup7\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8132:8210  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,tokenIds,\"\") */\n      0x04\n      add\n      tag_112\n      jump\t// in\n    tag_111:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_113\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_113:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_115\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_115:\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8236:8246  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8227:8247  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8227:8235  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8227:8247  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8220:8247  delete UserRate[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      0x02\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n      pop\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":8005:8254  function withdrawNFT(uint256 tokenIds) public {... */\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6788:6895  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n    tag_41:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_118:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6860:6872  ERC20Address */\n      0x02\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6860:6888  ERC20Address = _ERC20Address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6788:6895  function UpdateERC20 ( address _ERC20Address) public onlyOwner{... */\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2873:3482  function Deposit(uint256 _amount) public {... */\n    tag_48:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2936:2946  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2928:2947  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2928:2935  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2928:2947  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2928:2953  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2924:3476  if(!Details[msg.sender].check){... */\n      tag_122\n      jumpi\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2982:2989  _amount */\n      dup1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2968:2978  TotalToken */\n      0x03\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2968:2989  TotalToken += _amount */\n      dup3\n      dup3\n      sload\n      tag_123\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_123:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3025:3061  Staker(_amount,block.timestamp,true) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      dup3\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3040:3055  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3025:3061  Staker(_amount,block.timestamp,true) */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      dup3\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3056:3060  true */\n      0x01\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3025:3061  Staker(_amount,block.timestamp,true) */\n      dup4\n      dup6\n      add\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3011:3021  msg.sender */\n      caller\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3003:3022  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3003:3010  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3003:3022  Details[msg.sender] */\n      swap1\n      swap5\n      mstore\n      swap6\n      swap1\n      swap3\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3003:3061  Details[msg.sender] = Staker(_amount,block.timestamp,true) */\n      swap4\n      mload\n      dup5\n      sstore\n      swap2\n      mload\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      mload\n      0x02\n      swap2\n      dup3\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3082:3094  ERC20Address */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3075:3149  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      tag_125\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3082:3094  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3133:3137  this */\n      address\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3025:3061  Staker(_amount,block.timestamp,true) */\n      dup5\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3075:3112  IERC20(ERC20Address).safeTransferFrom */\n      tag_126\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3075:3149  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2873:3482  function Deposit(uint256 _amount) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2924:3476  if(!Details[msg.sender].check){... */\n    tag_122:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3201:3208  _amount */\n      dup1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3187:3197  TotalToken */\n      0x03\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3187:3208  TotalToken += _amount */\n      dup3\n      dup3\n      sload\n      tag_128\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_128:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3245:3273  calculateIntrest(msg.sender) */\n      tag_129\n      swap1\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3262:3272  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3245:3261  calculateIntrest */\n      tag_66\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3245:3273  calculateIntrest(msg.sender) */\n      jump\t// in\n    tag_129:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3229:3239  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3222:3240  Reward[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3222:3228  Reward */\n      0x06\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3222:3240  Reward[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3222:3273  Reward[msg.sender] +=  calculateIntrest(msg.sender) */\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3222:3240  Reward[msg.sender] */\n      swap1\n      swap2\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3222:3273  Reward[msg.sender] +=  calculateIntrest(msg.sender) */\n      tag_130\n      swap1\n      dup5\n      swap1\n      tag_124\n      jump\t// in\n    tag_130:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3309:3377  Staker(Details[msg.sender].deposited + _amount,block.timestamp,true) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3324:3334  msg.sender */\n      caller\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3316:3335  Details[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3316:3323  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3316:3335  Details[msg.sender] */\n      0x20\n      mstore\n      swap2\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3316:3345  Details[msg.sender].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3309:3377  Staker(Details[msg.sender].deposited + _amount,block.timestamp,true) */\n      dup2\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3316:3355  Details[msg.sender].deposited + _amount */\n      tag_131\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3348:3355  _amount */\n      dup5\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3316:3355  Details[msg.sender].deposited + _amount */\n      tag_124\n      jump\t// in\n    tag_131:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3309:3377  Staker(Details[msg.sender].deposited + _amount,block.timestamp,true) */\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3356:3371  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3309:3377  Staker(Details[msg.sender].deposited + _amount,block.timestamp,true) */\n      0x20\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3372:3376  true */\n      0x01\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3309:3377  Staker(Details[msg.sender].deposited + _amount,block.timestamp,true) */\n      0x40\n      swap3\n      dup4\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3295:3305  msg.sender */\n      caller\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3287:3306  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3287:3294  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3287:3306  Details[msg.sender] */\n      dup5\n      mstore\n      dup5\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3287:3377  Details[msg.sender] = Staker(Details[msg.sender].deposited + _amount,block.timestamp,true) */\n      dup6\n      mload\n      dup2\n      sstore\n      swap3\n      dup6\n      add\n      mload\n      swap2\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      swap3\n      swap1\n      swap2\n      add\n      mload\n      0x02\n      swap2\n      dup3\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3398:3410  ERC20Address */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3391:3465  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      tag_125\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3398:3410  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3449:3453  this */\n      address\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3457:3464  _amount */\n      dup5\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3391:3428  IERC20(ERC20Address).safeTransferFrom */\n      tag_126\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3391:3465  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) , _amount) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3677:4578  function Withdraw() public {... */\n    tag_54:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3730:3740  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3722:3741  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3722:3729  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3722:3741  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3722:3747  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3714:3769  require(Details[msg.sender].check,\"Please First Stake\") */\n      tag_134\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5623:5625   */\n      0x20\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3714:3769  require(Details[msg.sender].check,\"Please First Stake\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5605:5626   */\n      mstore\n        /* \"#utility.yul\":5662:5664   */\n      0x12\n        /* \"#utility.yul\":5642:5660   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5635:5665   */\n      mstore\n      shl(0x70, 0x506c65617365204669727374205374616b65)\n        /* \"#utility.yul\":5681:5699   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5674:5722   */\n      mstore\n        /* \"#utility.yul\":5739:5757   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3714:3769  require(Details[msg.sender].check,\"Please First Stake\") */\n      tag_109\n        /* \"#utility.yul\":5421:5763   */\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3714:3769  require(Details[msg.sender].check,\"Please First Stake\") */\n    tag_134:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3792:3802  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3783:3803  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3783:3791  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3783:3803  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3783:3809  UserRate[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3779:4568  if (UserRate[msg.sender].check){... */\n      iszero\n      tag_137\n      jumpi\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3846:3856  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3824:3835  uint amount */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3838:3857  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3838:3845  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3838:3857  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3838:3867  Details[msg.sender].deposited */\n      sload\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3895:3923  calculateIntrest(msg.sender) */\n      tag_138\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3895:3911  calculateIntrest */\n      tag_66\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3895:3923  calculateIntrest(msg.sender) */\n      jump\t// in\n    tag_138:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3945:3958  ERC721address */\n      0x01\n      dup1\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3992:4002  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3945:3958  ERC721address */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4003:4023  UserRate[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4003:4011  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4003:4023  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4003:4031  UserRate[msg.sender].tokenId */\n      swap1\n      swap4\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3937:4035  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\") */\n      swap3\n      mload\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3881:3923  uint newval = calculateIntrest(msg.sender) */\n      swap4\n      swap5\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3945:3958  ERC721address */\n      swap1\n      swap2\n      and\n      swap3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3937:3976  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3937:4035  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\") */\n      tag_139\n      swap3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3985:3989  this */\n      address\n      swap3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3992:4002  msg.sender */\n      swap1\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4003:4031  UserRate[msg.sender].tokenId */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3937:4035  IERC721(ERC721address).safeTransferFrom(address(this), msg.sender,UserRate[msg.sender].tokenId,\"\") */\n      0x04\n      add\n      tag_112\n      jump\t// in\n    tag_139:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_140\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_140:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_142\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_142:\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4056:4068  ERC20Address */\n      sload(0x02)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4079:4089  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4056:4068  ERC20Address */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4109:4127  Reward[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4109:4115  Reward */\n      0x06\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4109:4127  Reward[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4056:4068  ERC20Address */\n      swap1\n      swap3\n      and\n      swap4\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4049:4078  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap3\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4079:4089  msg.sender */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4091:4106  amount + newval */\n      tag_143\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4100:4106  newval */\n      dup6\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4091:4097  amount */\n      dup8\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4091:4106  amount + newval */\n      tag_124\n      jump\t// in\n    tag_143:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4091:4127  amount + newval + Reward[msg.sender] */\n      tag_144\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_144:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4049:4128  IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3983:4015   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4049:4128  IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":3965:4016   */\n      mstore\n        /* \"#utility.yul\":4032:4050   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4025:4059   */\n      mstore\n        /* \"#utility.yul\":3938:3956   */\n      0x44\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4049:4128  IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_147\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_147:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_149\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_149:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_150\n      swap2\n      swap1\n      tag_151\n      jump\t// in\n    tag_150:\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4158:4168  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4149:4169  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4149:4157  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4149:4169  UserRate[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4142:4169  delete UserRate[msg.sender] */\n      dup4\n      dup2\n      sstore\n      0x01\n      dup1\n      dup3\n      add\n      dup6\n      swap1\n      sstore\n      0x02\n      swap2\n      dup3\n      add\n      dup1\n      sload\n      not(0xff)\n      swap1\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4190:4196  Reward */\n      0x06\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4190:4208  Reward[msg.sender] */\n      dup6\n      mstore\n      dup4\n      dup7\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4183:4208  delete Reward[msg.sender] */\n      dup7\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4229:4236  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4229:4248  Details[msg.sender] */\n      swap1\n      swap5\n      mstore\n      swap2\n      dup5\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4222:4248  delete Details[msg.sender] */\n      dup5\n      dup2\n      sstore\n      swap2\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      sstore\n      swap1\n      swap2\n      add\n      dup1\n      sload\n      swap1\n      swap2\n      and\n      swap1\n      sstore\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3677:4578  function Withdraw() public {... */\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3779:4568  if (UserRate[msg.sender].check){... */\n    tag_137:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4308:4318  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4286:4297  uint amount */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4300:4319  Details[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4300:4307  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4300:4319  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4300:4329  Details[msg.sender].deposited */\n      sload\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4357:4385  calculateIntrest(msg.sender) */\n      tag_153\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4357:4373  calculateIntrest */\n      tag_66\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4357:4385  calculateIntrest(msg.sender) */\n      jump\t// in\n    tag_153:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4406:4418  ERC20Address */\n      sload(0x02)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4429:4439  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4406:4418  ERC20Address */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4459:4477  Reward[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4459:4465  Reward */\n      0x06\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4459:4477  Reward[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4343:4385  uint newval = calculateIntrest(msg.sender) */\n      swap3\n      swap4\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4406:4418  ERC20Address */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4399:4428  IERC20(ERC20Address).transfer */\n      0xa9059cbb\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4429:4439  msg.sender */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4441:4456  amount + newval */\n      tag_154\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4343:4385  uint newval = calculateIntrest(msg.sender) */\n      dup6\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4441:4447  amount */\n      dup8\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4441:4456  amount + newval */\n      tag_124\n      jump\t// in\n    tag_154:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4441:4477  amount + newval + Reward[msg.sender] */\n      tag_155\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_155:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4399:4478  IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3983:4015   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4399:4478  IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":3965:4016   */\n      mstore\n        /* \"#utility.yul\":4032:4050   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4025:4059   */\n      mstore\n        /* \"#utility.yul\":3938:3956   */\n      0x44\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4399:4478  IERC20(ERC20Address).transfer(msg.sender, amount + newval + Reward[msg.sender]) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_157\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_157:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_159\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_159:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_160\n      swap2\n      swap1\n      tag_151\n      jump\t// in\n    tag_160:\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4506:4516  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4499:4517  Reward[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4499:4505  Reward */\n      0x06\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4499:4517  Reward[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4492:4517  delete Reward[msg.sender] */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4538:4545  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4538:4557  Details[msg.sender] */\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4531:4557  delete Details[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      0x02\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3779:4568  if (UserRate[msg.sender].check){... */\n    tag_152:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":3677:4578  function Withdraw() public {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_162\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_162:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_152\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_165\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2402:2580  function Utilization() public view returns(uint256) {... */\n    tag_58:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2536:2546  TotalToken */\n      sload(0x03)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2490:2502  ERC20Address */\n      sload(0x02)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2483:2528  IERC20(ERC20Address).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2522:2526  this */\n      address\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2483:2528  IERC20(ERC20Address).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2789:2840   */\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2445:2452  uint256 */\n      0x00\n      swap3\n      dup4\n      swap3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2536:2546  TotalToken */\n      swap1\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2490:2502  ERC20Address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2483:2513  IERC20(ERC20Address).balanceOf */\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":2762:2780   */\n      0x24\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2483:2528  IERC20(ERC20Address).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_168\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_168:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_170\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_170:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_171\n      swap2\n      swap1\n      tag_172\n      jump\t// in\n    tag_171:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2483:2534  IERC20(ERC20Address).balanceOf(address(this)) * 100 */\n      tag_173\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2531:2534  100 */\n      0x64\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2483:2534  IERC20(ERC20Address).balanceOf(address(this)) * 100 */\n      tag_174\n      jump\t// in\n    tag_173:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2482:2546  (IERC20(ERC20Address).balanceOf(address(this)) * 100)/TotalToken */\n      tag_175\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_175:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2464:2546  uint Persentage = (IERC20(ERC20Address).balanceOf(address(this)) * 100)/TotalToken */\n      swap3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2402:2580  function Utilization() public view returns(uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2062:2194  function AdminWithDrawToken(uint amount,address _to) public onlyOwner{... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_178\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_178:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2148:2160  ERC20Address */\n      sload(0x02)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2141:2187  IERC20(ERC20Address).safeTransfer(_to, amount) */\n      tag_180\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2148:2160  ERC20Address */\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2175:2178  _to */\n      dup3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2180:2186  amount */\n      dup5\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2141:2174  IERC20(ERC20Address).safeTransfer */\n      tag_181\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2141:2187  IERC20(ERC20Address).safeTransfer(_to, amount) */\n      jump\t// in\n    tag_180:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":2062:2194  function AdminWithDrawToken(uint amount,address _to) public onlyOwner{... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5758:6320  function calculateIntrest(address _to) public view returns(uint256){... */\n    tag_66:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5839:5852  UserRate[_to] */\n      dup2\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5817:5824  uint256 */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5839:5852  UserRate[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5839:5847  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5839:5852  UserRate[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5839:5858  UserRate[_to].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5835:6314  if (UserRate[_to].check)... */\n      iszero\n      tag_183\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5971:5983  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5882:5896  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5971:5983  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5971:5978  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5971:5983  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5971:5993  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5995:5997  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5953:5993  block.timestamp - Details[_to].timestake */\n      tag_184\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5953:5968  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5953:5993  block.timestamp - Details[_to].timestake */\n      tag_185\n      jump\t// in\n    tag_184:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5952:5997  (block.timestamp - Details[_to].timestake)/60 */\n      tag_186\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_186:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5925:5938  UserRate[_to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5925:5933  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5925:5938  UserRate[_to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5925:5947  UserRate[_to].userRate */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5900:5907  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5900:5912  Details[_to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5900:5922  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5900:5947  Details[_to].deposited * UserRate[_to].userRate */\n      tag_187\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5925:5947  UserRate[_to].userRate */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5900:5947  Details[_to].deposited * UserRate[_to].userRate */\n      tag_174\n      jump\t// in\n    tag_187:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5899:5998  (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      tag_188\n      swap2\n      swap1\n      tag_174\n      jump\t// in\n    tag_188:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5882:5998  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      swap1\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6012:6028  uint TotalReward */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6031:6046  RewardEst / 100 */\n      tag_189\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6043:6046  100 */\n      0x64\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5882:5998  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      dup4\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6031:6046  RewardEst / 100 */\n      tag_176\n      jump\t// in\n    tag_189:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6012:6046  uint TotalReward = RewardEst / 100 */\n      swap5\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5758:6320  function calculateIntrest(address _to) public view returns(uint256){... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5835:6314  if (UserRate[_to].check)... */\n    tag_183:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6196:6208  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6125:6139  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6196:6208  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6196:6203  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6196:6208  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6196:6218  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6220:6222  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6178:6218  block.timestamp - Details[_to].timestake */\n      tag_191\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6178:6193  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6178:6218  block.timestamp - Details[_to].timestake */\n      tag_185\n      jump\t// in\n    tag_191:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6177:6222  (block.timestamp - Details[_to].timestake)/60 */\n      tag_192\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_192:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6168:6172  rate */\n      sload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6143:6155  Details[_to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6143:6150  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6143:6155  Details[_to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6143:6165  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6143:6172  Details[_to].deposited * rate */\n      tag_187\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6168:6172  rate */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6143:6172  Details[_to].deposited * rate */\n      tag_174\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5835:6314  if (UserRate[_to].check)... */\n    tag_190:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5758:6320  function calculateIntrest(address _to) public view returns(uint256){... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7430:7793  function DepositNFT(uint256 tokenIds,uint _rate) public {... */\n    tag_75:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7512:7522  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7504:7523  Details[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7504:7511  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7504:7523  Details[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7504:7529  Details[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7496:7553  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5274:5276   */\n      0x20\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7496:7553  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5256:5277   */\n      mstore\n        /* \"#utility.yul\":5313:5315   */\n      0x14\n        /* \"#utility.yul\":5293:5311   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5286:5316   */\n      mstore\n      shl(0x60, 0x4669727374204465706f73697420546f6b656e73)\n        /* \"#utility.yul\":5332:5350   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5325:5375   */\n      mstore\n        /* \"#utility.yul\":5392:5410   */\n      0x64\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7496:7553  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n      tag_109\n        /* \"#utility.yul\":5072:5416   */\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7496:7553  require(Details[msg.sender].check,\"First Deposit Tokens\") */\n    tag_198:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7581:7591  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7572:7592  UserRate[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7572:7580  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7572:7592  UserRate[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7572:7598  UserRate[msg.sender].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7571:7598  !UserRate[msg.sender].check */\n      iszero\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7563:7635  require(!UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n      tag_201\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7859:7861   */\n      0x20\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7563:7635  require(!UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7841:7862   */\n      mstore\n        /* \"#utility.yul\":7898:7900   */\n      0x21\n        /* \"#utility.yul\":7878:7896   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7871:7901   */\n      mstore\n        /* \"#utility.yul\":7937:7971   */\n      0x506c6561736520556e7374616b6520796f7572206465706f7369746564204e46\n        /* \"#utility.yul\":7917:7935   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7910:7972   */\n      mstore\n      shl(0xfa, 0x15)\n        /* \"#utility.yul\":7988:8006   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7981:8012   */\n      mstore\n        /* \"#utility.yul\":8029:8048   */\n      0x84\n      add\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7563:7635  require(!UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n      tag_109\n        /* \"#utility.yul\":7657:8054   */\n      jump\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7563:7635  require(!UserRate[msg.sender].check,\"Please Unstake your deposited NFT\") */\n    tag_201:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7668:7698  StakerNFT(_rate,tokenIds,true) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n      dup3\n      dup2\n      mstore\n      0x20\n      dup1\n      dup3\n      add\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7693:7697  true */\n      0x01\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7668:7698  StakerNFT(_rate,tokenIds,true) */\n      dup4\n      dup6\n      add\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7654:7664  msg.sender */\n      caller\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7645:7665  UserRate[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7645:7653  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7645:7665  UserRate[msg.sender] */\n      swap1\n      swap6\n      mstore\n      swap4\n      dup7\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7645:7698  UserRate[msg.sender] = StakerNFT(_rate,tokenIds,true) */\n      swap5\n      mload\n      dup6\n      sstore\n      swap2\n      mload\n      dup5\n      dup3\n      add\n      sstore\n      swap1\n      mload\n      0x02\n      swap1\n      swap4\n      add\n      dup1\n      sload\n      not(0xff)\n      and\n      swap4\n      iszero\n      iszero\n      swap4\n      swap1\n      swap4\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7717:7730  ERC721address */\n      swap1\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7709:7786  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      swap2\n      mload\n      shl(0xe1, 0x5c46a7ef)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7717:7730  ERC721address */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7709:7748  IERC721(ERC721address).safeTransferFrom */\n      0xb88d4fde\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7709:7786  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      tag_204\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7768:7772  this */\n      address\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7668:7698  StakerNFT(_rate,tokenIds,true) */\n      dup8\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7709:7786  IERC721(ERC721address).safeTransferFrom(msg.sender,address(this),tokenIds,\"\") */\n      0x04\n      add\n      tag_112\n      jump\t// in\n    tag_204:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_205\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_205:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_207\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_207:\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7430:7793  function DepositNFT(uint256 tokenIds,uint _rate) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1696:1870  function AdminAddToken(uint _amount) public onlyOwner{... */\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_209\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_209:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1773:1780  _amount */\n      dup1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1759:1769  TotalToken */\n      0x03\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1759:1780  TotalToken += _amount */\n      dup3\n      dup3\n      sload\n      tag_211\n      swap2\n      swap1\n      tag_124\n      jump\t// in\n    tag_211:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1797:1809  ERC20Address */\n      sload(0x02)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1790:1863  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      tag_125\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1797:1809  ERC20Address */\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1828:1838  msg.sender */\n      caller\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1848:1852  this */\n      address\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1855:1862  _amount */\n      dup5\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1790:1827  IERC20(ERC20Address).safeTransferFrom */\n      tag_126\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":1790:1863  IERC20(ERC20Address).safeTransferFrom(msg.sender, address(this) ,_amount) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4771:5494  function showReward(address _to) public view returns(uint result)... */\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4855:4868  UserRate[_to] */\n      dup2\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4824:4835  uint result */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4855:4868  UserRate[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4855:4863  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4855:4868  UserRate[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4855:4874  UserRate[_to].check */\n      0x02\n      add\n      sload\n      0xff\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4851:5479  if (UserRate[_to].check)... */\n      iszero\n      tag_214\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4987:4999  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4898:4912  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4987:4999  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4987:4994  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4987:4999  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4987:5009  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5011:5013  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4969:5009  block.timestamp - Details[_to].timestake */\n      tag_215\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4969:4984  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4969:5009  block.timestamp - Details[_to].timestake */\n      tag_185\n      jump\t// in\n    tag_215:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4968:5013  (block.timestamp - Details[_to].timestake)/60 */\n      tag_216\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_216:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4941:4954  UserRate[_to] */\n      dup5\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4941:4949  UserRate */\n      0x07\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4941:4954  UserRate[_to] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4941:4963  UserRate[_to].userRate */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4916:4923  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4916:4928  Details[_to] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4916:4938  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4916:4963  Details[_to].deposited * UserRate[_to].userRate */\n      tag_217\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4941:4963  UserRate[_to].userRate */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4916:4963  Details[_to].deposited * UserRate[_to].userRate */\n      tag_174\n      jump\t// in\n    tag_217:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4915:5014  (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      tag_218\n      swap2\n      swap1\n      tag_174\n      jump\t// in\n    tag_218:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4898:5014  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      swap1\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5028:5044  uint TotalReward */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5047:5062  RewardEst / 100 */\n      tag_219\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5059:5062  100 */\n      0x64\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4898:5014  uint RewardEst = (Details[_to].deposited * UserRate[_to].userRate) * ((block.timestamp - Details[_to].timestake)/60) */\n      dup4\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5047:5062  RewardEst / 100 */\n      tag_176\n      jump\t// in\n    tag_219:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5099:5111  Details[_to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5099:5106  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5099:5111  Details[_to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5099:5121  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5028:5062  uint TotalReward = RewardEst / 100 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5085:5121  TotalReward + Details[_to].deposited */\n      tag_220\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5028:5062  uint TotalReward = RewardEst / 100 */\n      dup3\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5085:5121  TotalReward + Details[_to].deposited */\n      tag_124\n      jump\t// in\n    tag_220:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5076:5121  result = TotalReward + Details[_to].deposited */\n      swap3\n      pop\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5142:5168  result/1000000000000000000 */\n      tag_189\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5149:5168  1000000000000000000 */\n      0x0de0b6b3a7640000\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5076:5121  result = TotalReward + Details[_to].deposited */\n      dup5\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5142:5168  result/1000000000000000000 */\n      tag_176\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":4851:5479  if (UserRate[_to].check)... */\n    tag_214:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5287:5299  Details[_to] */\n      dup3\n      and\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5216:5230  uint RewardEst */\n      0x00\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5287:5299  Details[_to] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5287:5294  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5287:5299  Details[_to] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5287:5309  Details[_to].timestake */\n      0x01\n      add\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5311:5313  60 */\n      0x3c\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5269:5309  block.timestamp - Details[_to].timestake */\n      tag_223\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5269:5284  block.timestamp */\n      timestamp\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5269:5309  block.timestamp - Details[_to].timestake */\n      tag_185\n      jump\t// in\n    tag_223:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5268:5313  (block.timestamp - Details[_to].timestake)/60 */\n      tag_224\n      swap2\n      swap1\n      tag_176\n      jump\t// in\n    tag_224:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5259:5263  rate */\n      sload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5234:5246  Details[_to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5234:5241  Details */\n      0x05\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5234:5246  Details[_to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5234:5256  Details[_to].deposited */\n      sload\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5234:5263  Details[_to].deposited * rate */\n      tag_217\n      swap2\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5259:5263  rate */\n      swap1\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":5234:5263  Details[_to].deposited * rate */\n      tag_174\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6502:6611  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n    tag_100:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_231\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_231:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6574:6587  ERC721address */\n      0x01\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6574:6604  ERC721address = _ERC721address */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":6502:6611  function UpdateERC721(address _ERC721address) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_103:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_234\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_234:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4867:4869   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4849:4870   */\n      mstore\n        /* \"#utility.yul\":4906:4908   */\n      0x26\n        /* \"#utility.yul\":4886:4904   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4879:4909   */\n      mstore\n        /* \"#utility.yul\":4945:4979   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4925:4943   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4918:4980   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":4996:5014   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4989:5025   */\n      mstore\n        /* \"#utility.yul\":5042:5061   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_109\n        /* \"#utility.yul\":4665:5067   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_236:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_125\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_165\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7077:7187  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n    tag_106:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_241\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_241:\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7158:7162  rate */\n      0x04\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7158:7180  rate = _ratePersentage */\n      sstore\n        /* \"contracts/Token&NFTStaking/TokenNFT1.sol\":7077:7187  function UpdateRatePersentage(uint256 _ratePersentage) public onlyOwner{... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_119:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_152\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6729:6731   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6711:6732   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":6748:6766   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6741:6771   */\n      mstore\n        /* \"#utility.yul\":6807:6841   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":6787:6805   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6780:6842   */\n      mstore\n        /* \"#utility.yul\":6859:6877   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_109\n        /* \"#utility.yul\":6527:6883   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n    tag_126:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3109:3124   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":3091:3125   */\n      mstore\n        /* \"#utility.yul\":3161:3176   */\n      dup4\n      and\n        /* \"#utility.yul\":3141:3159   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3134:3177   */\n      mstore\n        /* \"#utility.yul\":3193:3211   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":3186:3220   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_251\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1132:1137  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1162:1189  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":3026:3044   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1207  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n    tag_252:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1131  _callOptionalReturn */\n      tag_254\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1112:1208  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":974:1215  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_165:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2496:2620  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n    tag_181:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3983:4015   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3965:4016   */\n      mstore\n        /* \"#utility.yul\":4032:4050   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":4025:4059   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_257\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":895:900  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":925:948  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":3938:3956   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":902:960  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      tag_252\n        /* \"#utility.yul\":3791:4065   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":875:961  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n    tag_257:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":763:968  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3747:4453  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_254:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4189  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_261\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4220:4224  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4200:4205  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4219  address(token).functionCall */\n      and\n      tag_262\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4192:4261  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_261:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4292  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4166:4261  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4275:4296  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4271:4447  if (returndata.length > 0) {... */\n      tag_257\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4370:4380  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4359:4389  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_264\n      swap2\n      swap1\n      tag_151\n      jump\t// in\n    tag_264:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_257\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7448:7450   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7430:7451   */\n      mstore\n        /* \"#utility.yul\":7487:7489   */\n      0x2a\n        /* \"#utility.yul\":7467:7485   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7460:7490   */\n      mstore\n        /* \"#utility.yul\":7526:7560   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":7506:7524   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7499:7561   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":7577:7595   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7570:7610   */\n      mstore\n        /* \"#utility.yul\":7627:7646   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4351:4436  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_109\n        /* \"#utility.yul\":7246:7652   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3873:4096  function functionCall(... */\n    tag_262:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4037:4089  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_189\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4059:4065  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4067:4071  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4073:4074  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4076:4088  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4006:4018  bytes memory */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5241:5253  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5255:5278  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5288  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5293  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5301:5306  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5308:5312  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5282:5313  target.call{value: value}(data) */\n      mload(0x40)\n      tag_275\n      swap2\n      swap1\n      tag_276\n      jump\t// in\n    tag_275:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_279\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_278)\n    tag_279:\n      0x60\n      swap2\n      pop\n    tag_278:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5240:5313  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_280\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5357:5363  target */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5365:5372  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5374:5384  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5386:5398  errorMessage */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5356  verifyCallResultFromTarget */\n      tag_281\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5330:5399  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_280:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5323:5399  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4960:5406  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7466:8094  function verifyCallResultFromTarget(... */\n    tag_281:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7646:7658  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7674:7681  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n      iszero\n      tag_283\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7701:7718  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7697:7983  if (returndata.length == 0) {... */\n      tag_287\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_287\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7090:7092   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7072:7093   */\n      mstore\n        /* \"#utility.yul\":7129:7131   */\n      0x1d\n        /* \"#utility.yul\":7109:7127   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7102:7132   */\n      mstore\n        /* \"#utility.yul\":7168:7199   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":7148:7166   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7141:7200   */\n      mstore\n        /* \"#utility.yul\":7217:7235   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n      tag_109\n        /* \"#utility.yul\":6888:7241   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7908:7968  require(isContract(target), \"Address: call to non-contract\") */\n    tag_287:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8003:8013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7996:8013  return returndata */\n      jump(tag_189)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7670:8088  if (success) {... */\n    tag_283:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8044:8077  _revert(returndata, errorMessage) */\n      tag_189\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8052:8062  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8076  errorMessage */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8792  returndata.length */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8775:8796  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n      tag_295\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9003:9013  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8997:9014  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9059:9074  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9046:9056  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9042:9044  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9038:9057  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9031:9075  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8771:9150  if (returndata.length > 0) {... */\n    tag_295:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9126:9138  errorMessage */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":9119:9139  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_109\n      swap2\n      swap1\n      tag_298\n      jump\t// in\n        /* \"#utility.yul\":14:187   */\n    tag_300:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_190\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":192:378   */\n    tag_40:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_304\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_304:\n        /* \"#utility.yul\":343:372   */\n      tag_305\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_300\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":333:372   */\n      swap4\n        /* \"#utility.yul\":192:378   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":383:1191   */\n    tag_34:\n        /* \"#utility.yul\":480:486   */\n      0x00\n        /* \"#utility.yul\":488:494   */\n      dup1\n        /* \"#utility.yul\":496:502   */\n      0x00\n        /* \"#utility.yul\":504:510   */\n      dup1\n        /* \"#utility.yul\":512:518   */\n      0x00\n        /* \"#utility.yul\":565:568   */\n      0x80\n        /* \"#utility.yul\":553:562   */\n      dup7\n        /* \"#utility.yul\":544:551   */\n      dup9\n        /* \"#utility.yul\":540:563   */\n      sub\n        /* \"#utility.yul\":536:569   */\n      slt\n        /* \"#utility.yul\":533:586   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":582:583   */\n      0x00\n        /* \"#utility.yul\":579:580   */\n      dup1\n        /* \"#utility.yul\":572:584   */\n      revert\n        /* \"#utility.yul\":533:586   */\n    tag_307:\n        /* \"#utility.yul\":605:634   */\n      tag_308\n        /* \"#utility.yul\":624:633   */\n      dup7\n        /* \"#utility.yul\":605:634   */\n      tag_300\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":595:634   */\n      swap5\n      pop\n        /* \"#utility.yul\":653:691   */\n      tag_309\n        /* \"#utility.yul\":687:689   */\n      0x20\n        /* \"#utility.yul\":676:685   */\n      dup8\n        /* \"#utility.yul\":672:690   */\n      add\n        /* \"#utility.yul\":653:691   */\n      tag_300\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":643:691   */\n      swap4\n      pop\n        /* \"#utility.yul\":738:740   */\n      0x40\n        /* \"#utility.yul\":727:736   */\n      dup7\n        /* \"#utility.yul\":723:741   */\n      add\n        /* \"#utility.yul\":710:742   */\n      calldataload\n        /* \"#utility.yul\":700:742   */\n      swap3\n      pop\n        /* \"#utility.yul\":793:795   */\n      0x60\n        /* \"#utility.yul\":782:791   */\n      dup7\n        /* \"#utility.yul\":778:796   */\n      add\n        /* \"#utility.yul\":765:797   */\n      calldataload\n        /* \"#utility.yul\":816:834   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":857:859   */\n      dup1\n        /* \"#utility.yul\":849:855   */\n      dup3\n        /* \"#utility.yul\":846:860   */\n      gt\n        /* \"#utility.yul\":843:877   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":873:874   */\n      0x00\n        /* \"#utility.yul\":870:871   */\n      dup1\n        /* \"#utility.yul\":863:875   */\n      revert\n        /* \"#utility.yul\":843:877   */\n    tag_310:\n        /* \"#utility.yul\":911:917   */\n      dup2\n        /* \"#utility.yul\":900:909   */\n      dup9\n        /* \"#utility.yul\":896:918   */\n      add\n        /* \"#utility.yul\":886:918   */\n      swap2\n      pop\n        /* \"#utility.yul\":956:963   */\n      dup9\n        /* \"#utility.yul\":949:953   */\n      0x1f\n        /* \"#utility.yul\":945:947   */\n      dup4\n        /* \"#utility.yul\":941:954   */\n      add\n        /* \"#utility.yul\":937:964   */\n      slt\n        /* \"#utility.yul\":927:982   */\n      tag_311\n      jumpi\n        /* \"#utility.yul\":978:979   */\n      0x00\n        /* \"#utility.yul\":975:976   */\n      dup1\n        /* \"#utility.yul\":968:980   */\n      revert\n        /* \"#utility.yul\":927:982   */\n    tag_311:\n        /* \"#utility.yul\":1018:1020   */\n      dup2\n        /* \"#utility.yul\":1005:1021   */\n      calldataload\n        /* \"#utility.yul\":1044:1046   */\n      dup2\n        /* \"#utility.yul\":1036:1042   */\n      dup2\n        /* \"#utility.yul\":1033:1047   */\n      gt\n        /* \"#utility.yul\":1030:1064   */\n      iszero\n      tag_312\n      jumpi\n        /* \"#utility.yul\":1060:1061   */\n      0x00\n        /* \"#utility.yul\":1057:1058   */\n      dup1\n        /* \"#utility.yul\":1050:1062   */\n      revert\n        /* \"#utility.yul\":1030:1064   */\n    tag_312:\n        /* \"#utility.yul\":1105:1112   */\n      dup10\n        /* \"#utility.yul\":1100:1102   */\n      0x20\n        /* \"#utility.yul\":1091:1097   */\n      dup3\n        /* \"#utility.yul\":1087:1089   */\n      dup6\n        /* \"#utility.yul\":1083:1098   */\n      add\n        /* \"#utility.yul\":1079:1103   */\n      add\n        /* \"#utility.yul\":1076:1113   */\n      gt\n        /* \"#utility.yul\":1073:1130   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":1126:1127   */\n      0x00\n        /* \"#utility.yul\":1123:1124   */\n      dup1\n        /* \"#utility.yul\":1116:1128   */\n      revert\n        /* \"#utility.yul\":1073:1130   */\n    tag_313:\n        /* \"#utility.yul\":383:1191   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      pop\n        /* \"#utility.yul\":1157:1159   */\n      0x20\n        /* \"#utility.yul\":1149:1160   */\n      add\n      swap5\n        /* \"#utility.yul\":1179:1185   */\n      swap4\n        /* \"#utility.yul\":383:1191   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1196:1473   */\n    tag_151:\n        /* \"#utility.yul\":1263:1269   */\n      0x00\n        /* \"#utility.yul\":1316:1318   */\n      0x20\n        /* \"#utility.yul\":1304:1313   */\n      dup3\n        /* \"#utility.yul\":1295:1302   */\n      dup5\n        /* \"#utility.yul\":1291:1314   */\n      sub\n        /* \"#utility.yul\":1287:1319   */\n      slt\n        /* \"#utility.yul\":1284:1336   */\n      iszero\n      tag_315\n      jumpi\n        /* \"#utility.yul\":1332:1333   */\n      0x00\n        /* \"#utility.yul\":1329:1330   */\n      dup1\n        /* \"#utility.yul\":1322:1334   */\n      revert\n        /* \"#utility.yul\":1284:1336   */\n    tag_315:\n        /* \"#utility.yul\":1364:1373   */\n      dup2\n        /* \"#utility.yul\":1358:1374   */\n      mload\n        /* \"#utility.yul\":1417:1422   */\n      dup1\n        /* \"#utility.yul\":1410:1423   */\n      iszero\n        /* \"#utility.yul\":1403:1424   */\n      iszero\n        /* \"#utility.yul\":1396:1401   */\n      dup2\n        /* \"#utility.yul\":1393:1425   */\n      eq\n        /* \"#utility.yul\":1383:1443   */\n      tag_305\n      jumpi\n        /* \"#utility.yul\":1439:1440   */\n      0x00\n        /* \"#utility.yul\":1436:1437   */\n      dup1\n        /* \"#utility.yul\":1429:1441   */\n      revert\n        /* \"#utility.yul\":1478:1658   */\n    tag_30:\n        /* \"#utility.yul\":1537:1543   */\n      0x00\n        /* \"#utility.yul\":1590:1592   */\n      0x20\n        /* \"#utility.yul\":1578:1587   */\n      dup3\n        /* \"#utility.yul\":1569:1576   */\n      dup5\n        /* \"#utility.yul\":1565:1588   */\n      sub\n        /* \"#utility.yul\":1561:1593   */\n      slt\n        /* \"#utility.yul\":1558:1610   */\n      iszero\n      tag_318\n      jumpi\n        /* \"#utility.yul\":1606:1607   */\n      0x00\n        /* \"#utility.yul\":1603:1604   */\n      dup1\n        /* \"#utility.yul\":1596:1608   */\n      revert\n        /* \"#utility.yul\":1558:1610   */\n    tag_318:\n      pop\n        /* \"#utility.yul\":1629:1652   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1478:1658   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1663:1847   */\n    tag_172:\n        /* \"#utility.yul\":1733:1739   */\n      0x00\n        /* \"#utility.yul\":1786:1788   */\n      0x20\n        /* \"#utility.yul\":1774:1783   */\n      dup3\n        /* \"#utility.yul\":1765:1772   */\n      dup5\n        /* \"#utility.yul\":1761:1784   */\n      sub\n        /* \"#utility.yul\":1757:1789   */\n      slt\n        /* \"#utility.yul\":1754:1806   */\n      iszero\n      tag_320\n      jumpi\n        /* \"#utility.yul\":1802:1803   */\n      0x00\n        /* \"#utility.yul\":1799:1800   */\n      dup1\n        /* \"#utility.yul\":1792:1804   */\n      revert\n        /* \"#utility.yul\":1754:1806   */\n    tag_320:\n      pop\n        /* \"#utility.yul\":1825:1841   */\n      mload\n      swap2\n        /* \"#utility.yul\":1663:1847   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1852:2106   */\n    tag_62:\n        /* \"#utility.yul\":1920:1926   */\n      0x00\n        /* \"#utility.yul\":1928:1934   */\n      dup1\n        /* \"#utility.yul\":1981:1983   */\n      0x40\n        /* \"#utility.yul\":1969:1978   */\n      dup4\n        /* \"#utility.yul\":1960:1967   */\n      dup6\n        /* \"#utility.yul\":1956:1979   */\n      sub\n        /* \"#utility.yul\":1952:1984   */\n      slt\n        /* \"#utility.yul\":1949:2001   */\n      iszero\n      tag_322\n      jumpi\n        /* \"#utility.yul\":1997:1998   */\n      0x00\n        /* \"#utility.yul\":1994:1995   */\n      dup1\n        /* \"#utility.yul\":1987:1999   */\n      revert\n        /* \"#utility.yul\":1949:2001   */\n    tag_322:\n        /* \"#utility.yul\":2033:2042   */\n      dup3\n        /* \"#utility.yul\":2020:2043   */\n      calldataload\n        /* \"#utility.yul\":2010:2043   */\n      swap2\n      pop\n        /* \"#utility.yul\":2062:2100   */\n      tag_323\n        /* \"#utility.yul\":2096:2098   */\n      0x20\n        /* \"#utility.yul\":2085:2094   */\n      dup5\n        /* \"#utility.yul\":2081:2099   */\n      add\n        /* \"#utility.yul\":2062:2100   */\n      tag_300\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":2052:2100   */\n      swap1\n      pop\n        /* \"#utility.yul\":1852:2106   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2111:2359   */\n    tag_74:\n        /* \"#utility.yul\":2179:2185   */\n      0x00\n        /* \"#utility.yul\":2187:2193   */\n      dup1\n        /* \"#utility.yul\":2240:2242   */\n      0x40\n        /* \"#utility.yul\":2228:2237   */\n      dup4\n        /* \"#utility.yul\":2219:2226   */\n      dup6\n        /* \"#utility.yul\":2215:2238   */\n      sub\n        /* \"#utility.yul\":2211:2243   */\n      slt\n        /* \"#utility.yul\":2208:2260   */\n      iszero\n      tag_325\n      jumpi\n        /* \"#utility.yul\":2256:2257   */\n      0x00\n        /* \"#utility.yul\":2253:2254   */\n      dup1\n        /* \"#utility.yul\":2246:2258   */\n      revert\n        /* \"#utility.yul\":2208:2260   */\n    tag_325:\n      pop\n      pop\n        /* \"#utility.yul\":2279:2302   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":2349:2351   */\n      0x20\n        /* \"#utility.yul\":2334:2352   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2321:2353   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":2111:2359   */\n      jump\t// out\n        /* \"#utility.yul\":2364:2638   */\n    tag_276:\n        /* \"#utility.yul\":2493:2496   */\n      0x00\n        /* \"#utility.yul\":2531:2537   */\n      dup3\n        /* \"#utility.yul\":2525:2538   */\n      mload\n        /* \"#utility.yul\":2547:2600   */\n      tag_327\n        /* \"#utility.yul\":2593:2599   */\n      dup2\n        /* \"#utility.yul\":2588:2591   */\n      dup5\n        /* \"#utility.yul\":2581:2585   */\n      0x20\n        /* \"#utility.yul\":2573:2579   */\n      dup8\n        /* \"#utility.yul\":2569:2586   */\n      add\n        /* \"#utility.yul\":2547:2600   */\n      tag_328\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":2616:2632   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":2364:2638   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3231:3786   */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3554:3569   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":3536:3570   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3606:3621   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":3601:3603   */\n      0x20\n        /* \"#utility.yul\":3586:3604   */\n      dup3\n      add\n        /* \"#utility.yul\":3579:3622   */\n      mstore\n        /* \"#utility.yul\":3653:3655   */\n      0x40\n        /* \"#utility.yul\":3638:3656   */\n      dup2\n      add\n        /* \"#utility.yul\":3631:3665   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3701:3704   */\n      0x80\n        /* \"#utility.yul\":3696:3698   */\n      0x60\n        /* \"#utility.yul\":3681:3699   */\n      dup3\n      add\n        /* \"#utility.yul\":3674:3705   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3479:3483   */\n      0x00\n        /* \"#utility.yul\":3721:3740   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3714:3744   */\n      mstore\n        /* \"#utility.yul\":3516:3519   */\n      0xa0\n        /* \"#utility.yul\":3761:3780   */\n      add\n      swap1\n        /* \"#utility.yul\":3231:3786   */\n      jump\t// out\n        /* \"#utility.yul\":4277:4660   */\n    tag_298:\n        /* \"#utility.yul\":4426:4428   */\n      0x20\n        /* \"#utility.yul\":4415:4424   */\n      dup2\n        /* \"#utility.yul\":4408:4429   */\n      mstore\n        /* \"#utility.yul\":4389:4393   */\n      0x00\n        /* \"#utility.yul\":4458:4464   */\n      dup3\n        /* \"#utility.yul\":4452:4465   */\n      mload\n        /* \"#utility.yul\":4501:4507   */\n      dup1\n        /* \"#utility.yul\":4496:4498   */\n      0x20\n        /* \"#utility.yul\":4485:4494   */\n      dup5\n        /* \"#utility.yul\":4481:4499   */\n      add\n        /* \"#utility.yul\":4474:4508   */\n      mstore\n        /* \"#utility.yul\":4517:4583   */\n      tag_335\n        /* \"#utility.yul\":4576:4582   */\n      dup2\n        /* \"#utility.yul\":4571:4573   */\n      0x40\n        /* \"#utility.yul\":4560:4569   */\n      dup6\n        /* \"#utility.yul\":4556:4574   */\n      add\n        /* \"#utility.yul\":4551:4553   */\n      0x20\n        /* \"#utility.yul\":4543:4549   */\n      dup8\n        /* \"#utility.yul\":4539:4554   */\n      add\n        /* \"#utility.yul\":4517:4583   */\n      tag_328\n      jump\t// in\n    tag_335:\n        /* \"#utility.yul\":4644:4646   */\n      0x1f\n        /* \"#utility.yul\":4623:4638   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4619:4648   */\n      and\n        /* \"#utility.yul\":4604:4649   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":4651:4653   */\n      0x40\n        /* \"#utility.yul\":4600:4654   */\n      add\n      swap3\n        /* \"#utility.yul\":4277:4660   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8575:8703   */\n    tag_124:\n        /* \"#utility.yul\":8615:8618   */\n      0x00\n        /* \"#utility.yul\":8646:8647   */\n      dup3\n        /* \"#utility.yul\":8642:8648   */\n      not\n        /* \"#utility.yul\":8639:8640   */\n      dup3\n        /* \"#utility.yul\":8636:8649   */\n      gt\n        /* \"#utility.yul\":8633:8672   */\n      iszero\n      tag_349\n      jumpi\n        /* \"#utility.yul\":8652:8670   */\n      tag_349\n      tag_350\n      jump\t// in\n    tag_349:\n      pop\n        /* \"#utility.yul\":8688:8697   */\n      add\n      swap1\n        /* \"#utility.yul\":8575:8703   */\n      jump\t// out\n        /* \"#utility.yul\":8708:8925   */\n    tag_176:\n        /* \"#utility.yul\":8748:8749   */\n      0x00\n        /* \"#utility.yul\":8774:8775   */\n      dup3\n        /* \"#utility.yul\":8764:8896   */\n      tag_352\n      jumpi\n        /* \"#utility.yul\":8818:8828   */\n      0x4e487b71\n        /* \"#utility.yul\":8813:8816   */\n      0xe0\n        /* \"#utility.yul\":8809:8829   */\n      shl\n        /* \"#utility.yul\":8806:8807   */\n      0x00\n        /* \"#utility.yul\":8799:8830   */\n      mstore\n        /* \"#utility.yul\":8853:8857   */\n      0x12\n        /* \"#utility.yul\":8850:8851   */\n      0x04\n        /* \"#utility.yul\":8843:8858   */\n      mstore\n        /* \"#utility.yul\":8881:8885   */\n      0x24\n        /* \"#utility.yul\":8878:8879   */\n      0x00\n        /* \"#utility.yul\":8871:8886   */\n      revert\n        /* \"#utility.yul\":8764:8896   */\n    tag_352:\n      pop\n        /* \"#utility.yul\":8910:8919   */\n      div\n      swap1\n        /* \"#utility.yul\":8708:8925   */\n      jump\t// out\n        /* \"#utility.yul\":8930:9098   */\n    tag_174:\n        /* \"#utility.yul\":8970:8977   */\n      0x00\n        /* \"#utility.yul\":9036:9037   */\n      dup2\n        /* \"#utility.yul\":9032:9033   */\n      0x00\n        /* \"#utility.yul\":9028:9034   */\n      not\n        /* \"#utility.yul\":9024:9038   */\n      div\n        /* \"#utility.yul\":9021:9022   */\n      dup4\n        /* \"#utility.yul\":9018:9039   */\n      gt\n        /* \"#utility.yul\":9013:9014   */\n      dup3\n        /* \"#utility.yul\":9006:9015   */\n      iszero\n        /* \"#utility.yul\":8999:9016   */\n      iszero\n        /* \"#utility.yul\":8995:9040   */\n      and\n        /* \"#utility.yul\":8992:9063   */\n      iszero\n      tag_355\n      jumpi\n        /* \"#utility.yul\":9043:9061   */\n      tag_355\n      tag_350\n      jump\t// in\n    tag_355:\n      pop\n        /* \"#utility.yul\":9083:9092   */\n      mul\n      swap1\n        /* \"#utility.yul\":8930:9098   */\n      jump\t// out\n        /* \"#utility.yul\":9103:9228   */\n    tag_185:\n        /* \"#utility.yul\":9143:9147   */\n      0x00\n        /* \"#utility.yul\":9171:9172   */\n      dup3\n        /* \"#utility.yul\":9168:9169   */\n      dup3\n        /* \"#utility.yul\":9165:9173   */\n      lt\n        /* \"#utility.yul\":9162:9196   */\n      iszero\n      tag_358\n      jumpi\n        /* \"#utility.yul\":9176:9194   */\n      tag_358\n      tag_350\n      jump\t// in\n    tag_358:\n      pop\n        /* \"#utility.yul\":9213:9222   */\n      sub\n      swap1\n        /* \"#utility.yul\":9103:9228   */\n      jump\t// out\n        /* \"#utility.yul\":9233:9491   */\n    tag_328:\n        /* \"#utility.yul\":9305:9306   */\n      0x00\n        /* \"#utility.yul\":9315:9428   */\n    tag_360:\n        /* \"#utility.yul\":9329:9335   */\n      dup4\n        /* \"#utility.yul\":9326:9327   */\n      dup2\n        /* \"#utility.yul\":9323:9336   */\n      lt\n        /* \"#utility.yul\":9315:9428   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":9405:9416   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":9399:9417   */\n      mload\n        /* \"#utility.yul\":9386:9397   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":9379:9418   */\n      mstore\n        /* \"#utility.yul\":9351:9353   */\n      0x20\n        /* \"#utility.yul\":9344:9354   */\n      add\n        /* \"#utility.yul\":9315:9428   */\n      jump(tag_360)\n    tag_362:\n        /* \"#utility.yul\":9446:9452   */\n      dup4\n        /* \"#utility.yul\":9443:9444   */\n      dup2\n        /* \"#utility.yul\":9440:9453   */\n      gt\n        /* \"#utility.yul\":9437:9485   */\n      iszero\n      tag_251\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":9481:9482   */\n      0x00\n        /* \"#utility.yul\":9463:9479   */\n      swap2\n      add\n        /* \"#utility.yul\":9456:9483   */\n      mstore\n        /* \"#utility.yul\":9233:9491   */\n      jump\t// out\n        /* \"#utility.yul\":9496:9623   */\n    tag_350:\n        /* \"#utility.yul\":9557:9567   */\n      0x4e487b71\n        /* \"#utility.yul\":9552:9555   */\n      0xe0\n        /* \"#utility.yul\":9548:9568   */\n      shl\n        /* \"#utility.yul\":9545:9546   */\n      0x00\n        /* \"#utility.yul\":9538:9569   */\n      mstore\n        /* \"#utility.yul\":9588:9592   */\n      0x11\n        /* \"#utility.yul\":9585:9586   */\n      0x04\n        /* \"#utility.yul\":9578:9593   */\n      mstore\n        /* \"#utility.yul\":9612:9616   */\n      0x24\n        /* \"#utility.yul\":9609:9610   */\n      0x00\n        /* \"#utility.yul\":9602:9617   */\n      revert\n\n    auxdata: 0xa26469706673582212207dbf72729eeb0e1460d5d38fc56dcbb2b306499ecd739c1c01a8c80fcfe7cc1864736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1108": {
									"entryPoint": null,
									"id": 1108,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1014": {
									"entryPoint": null,
									"id": 1014,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_111": {
									"entryPoint": 119,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address_fromMemory": {
									"entryPoint": 199,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_address_fromMemory": {
									"entryPoint": 228,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:552:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "74:117:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "84:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "99:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "93:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "93:13:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "84:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "169:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "178:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "181:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "171:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "171:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "171:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "128:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "139:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "154:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "159:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "150:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "150:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "163:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "146:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "146:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "135:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "135:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "125:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "125:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "118:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "118:50:11"
															},
															"nodeType": "YulIf",
															"src": "115:70:11"
														}
													]
												},
												"name": "abi_decode_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "53:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "64:5:11",
														"type": ""
													}
												],
												"src": "14:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "311:239:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "357:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "366:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "369:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "359:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "359:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "359:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "332:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "341:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "328:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "328:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "353:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "324:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "324:32:11"
															},
															"nodeType": "YulIf",
															"src": "321:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "382:50:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "422:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "392:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "392:40:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "382:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "441:35:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "461:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "472:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "457:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "457:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "451:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "451:25:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "441:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "485:59:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "529:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "540:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "525:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "525:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "495:29:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "495:49:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "485:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "261:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "272:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "284:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "292:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "300:6:11",
														"type": ""
													}
												],
												"src": "196:354:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x15E1 CODESIZE SUB DUP1 PUSH3 0x15E1 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xE4 JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x77 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x4 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0x125 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x105 DUP5 PUSH3 0xC7 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD SWAP2 POP PUSH3 0x11C PUSH1 0x40 DUP6 ADD PUSH3 0xC7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x14AC DUP1 PUSH3 0x135 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xC45AF5D8 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC45AF5D8 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xE4458B30 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xEE0106D2 EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0xF89D832F EQ PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0x934ED772 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xB7171A2E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x57488064 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x57488064 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x7B2F247F EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x866E58AF EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x8B73E331 EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23245D7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x275BD33F EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x3F601972 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x4D6CE1E5 EQ PUSH2 0x1C3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x372 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17B PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1205 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1B5 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x491 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x5FB JUMP JUMPDEST PUSH2 0x15A PUSH2 0x921 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0x12F4 JUMP JUMPDEST PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1320 JUMP JUMPDEST PUSH2 0xAFB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0xCAB JUMP JUMPDEST PUSH2 0x2EA PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x190 JUMP JUMPDEST PUSH2 0x2EA PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0xDDD JUMP JUMPDEST PUSH2 0x15A PUSH2 0x35A CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0xE7D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65617365204669727374205374616B65204E465473000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH2 0x40D SWAP1 ADDRESS SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x46F PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x52C JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4BD SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SLOAD PUSH2 0x529 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0xEE4 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x53E SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x54D SWAP1 POP CALLER PUSH2 0x9F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x56C SWAP1 DUP5 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH2 0x598 SWAP1 DUP5 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP5 MSTORE DUP5 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP3 DUP6 ADD MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SLOAD PUSH2 0x529 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0xEE4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x506C65617365204669727374205374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x814 JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x687 SWAP1 PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 SWAP4 ADD SLOAD SWAP3 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0xB88D4FDE SWAP3 PUSH2 0x6D2 SWAP3 ADDRESS SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x700 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xA9059CBB SWAP3 POP SWAP1 PUSH2 0x734 DUP6 DUP8 PUSH2 0x13C4 JUMP JUMPDEST PUSH2 0x73E SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x798 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7BC SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP6 SWAP1 SSTORE PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP7 SWAP1 SSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 KECCAK256 DUP5 DUP2 SSTORE SWAP2 DUP3 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x82E SWAP1 PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x2 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 SWAP1 PUSH2 0x861 DUP6 DUP8 PUSH2 0x13C4 JUMP JUMPDEST PUSH2 0x86B SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E9 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH2 0x929 PUSH2 0xE8A JUMP JUMPDEST PUSH2 0x91F PUSH1 0x0 PUSH2 0xF55 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x980 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x994 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B8 SWAP2 SWAP1 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x9C3 SWAP1 PUSH1 0x64 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0x9CD SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9DB PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x9F2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP5 PUSH2 0xFA5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA9D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xA43 SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xA4D SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0xA86 SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA95 PUSH1 0x64 DUP4 PUSH2 0x13DC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xAC6 SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xAD0 SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xB54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4669727374204465706F73697420546F6B656E73 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C6561736520556E7374616B6520796F7572206465706F7369746564204E46 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP6 MSTORE SWAP4 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD DUP5 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 SLOAD SWAP2 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xB88D4FDE SWAP2 PUSH2 0xC3E SWAP2 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC7C PUSH2 0xE8A JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC8E SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD PUSH2 0x529 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0xEE4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD84 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xCF8 SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xD02 SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0xD31 SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0xD3B SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD4A PUSH1 0x64 DUP4 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xD70 SWAP1 DUP3 PUSH2 0x13C4 JUMP JUMPDEST SWAP3 POP PUSH2 0xA95 PUSH8 0xDE0B6B3A7640000 DUP5 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xDAD SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xDB7 SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD31 SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE0F PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0x529 DUP2 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0xE85 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xF4F SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xFDA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xFD5 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xF18 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x102F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10AC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xFD5 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x104D SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH2 0xFD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA95 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x10D3 SWAP2 SWAP1 PUSH2 0x1342 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1110 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1126 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1131 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x119D JUMPI DUP3 MLOAD PUSH2 0x1196 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1196 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST POP DUP2 PUSH2 0xA95 JUMP JUMPDEST PUSH2 0xA95 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x11B2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3D0 SWAP2 SWAP1 PUSH2 0x1391 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11FE DUP3 PUSH2 0x11CC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x121D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1226 DUP7 PUSH2 0x11CC JUMP JUMPDEST SWAP5 POP PUSH2 0x1234 PUSH1 0x20 DUP8 ADD PUSH2 0x11CC JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x126C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x128D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x11FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1317 PUSH1 0x20 DUP5 ADD PUSH2 0x11CC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1354 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1434 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x13B0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1434 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x13D7 JUMPI PUSH2 0x13D7 PUSH2 0x1460 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x13F9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1418 JUMPI PUSH2 0x1418 PUSH2 0x1460 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x142F JUMPI PUSH2 0x142F PUSH2 0x1460 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x144F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1437 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF4F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xBF72729EEB0E1460D5D38FC56DCBB2B306499ECD739C1C01A8C80FCFE7CC XOR PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "348:8084:10:-:0;;;1269:201;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;936:32:0;719:10:8;936:18:0;:32::i;:::-;1363:13:10;:30;;-1:-1:-1;;;;;1363:30:10;;;-1:-1:-1;;;;;;1363:30:10;;;;;;;1403:4;:22;;;;1435:12;:28;;;;;;;;;;;348:8084;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:177:11:-;93:13;;-1:-1:-1;;;;;135:31:11;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:354::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;472:2;461:9;457:18;451:25;441:35;;495:49;540:2;529:9;525:18;495:49;:::i;:::-;485:59;;196:354;;;;;:::o;:::-;348:8084:10;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@AdminAddToken_1133": {
									"entryPoint": 3188,
									"id": 1133,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@AdminWithDrawToken_1151": {
									"entryPoint": 2515,
									"id": 1151,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@DepositNFT_1662": {
									"entryPoint": 2811,
									"id": 1662,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@Deposit_1265": {
									"entryPoint": 1169,
									"id": 1265,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@Details_1077": {
									"entryPoint": null,
									"id": 1077,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC20Address_1054": {
									"entryPoint": null,
									"id": 1054,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ERC721address_1052": {
									"entryPoint": null,
									"id": 1052,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Reward_1081": {
									"entryPoint": null,
									"id": 1081,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@TotalToken_1056": {
									"entryPoint": null,
									"id": 1056,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@UpdateERC20_1598": {
									"entryPoint": 1127,
									"id": 1598,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UpdateERC721_1586": {
									"entryPoint": 3549,
									"id": 1586,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UpdateRatePersentage_1610": {
									"entryPoint": 3709,
									"id": 1610,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@UserRate_1086": {
									"entryPoint": null,
									"id": 1086,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@Utilization_1176": {
									"entryPoint": 2355,
									"id": 1176,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@Withdraw_1396": {
									"entryPoint": 1531,
									"id": 1396,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_callOptionalReturn_506": {
									"entryPoint": 4058,
									"id": 506,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_54": {
									"entryPoint": 3722,
									"id": 54,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1014": {
									"entryPoint": null,
									"id": 1014,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_revert_1001": {
									"entryPoint": null,
									"id": 1001,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_111": {
									"entryPoint": 3925,
									"id": 111,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@calculateIntrest_1574": {
									"entryPoint": 2550,
									"id": 1574,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@functionCallWithValue_826": {
									"entryPoint": null,
									"id": 826,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_762": {
									"entryPoint": 4268,
									"id": 762,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@isContract_690": {
									"entryPoint": null,
									"id": 690,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@onERC721Received_1716": {
									"entryPoint": null,
									"id": 1716,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"@owner_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_68": {
									"entryPoint": 2337,
									"id": 68,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_284": {
									"entryPoint": 3812,
									"id": 284,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_258": {
									"entryPoint": 4005,
									"id": 258,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@showReward_1496": {
									"entryPoint": 3243,
									"id": 1496,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@transferOwnership_91": {
									"entryPoint": 3591,
									"id": 91,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_957": {
									"entryPoint": 4401,
									"id": 957,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@withdrawNFT_1697": {
									"entryPoint": 882,
									"id": 1697,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 4556,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4579,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr": {
									"entryPoint": 4613,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 4768,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4802,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 4827,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_address": {
									"entryPoint": 4852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 4896,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4930,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 4958,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5009,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5060,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5084,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 5118,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5149,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 5172,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 5216,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:9625:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:11"
															},
															"nodeType": "YulIf",
															"src": "111:70:11"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:11",
														"type": ""
													}
												],
												"src": "14:173:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:116:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "320:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:11"
															},
															"nodeType": "YulIf",
															"src": "272:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "333:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "343:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:11",
														"type": ""
													}
												],
												"src": "192:186:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "523:668:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "570:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "579:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "582:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "572:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "572:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "572:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "544:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "553:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "540:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "540:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "565:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "536:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "536:33:11"
															},
															"nodeType": "YulIf",
															"src": "533:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "595:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "624:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "605:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "605:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "595:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "643:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "676:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "687:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "672:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "672:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "653:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "653:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "643:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "700:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "727:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "738:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "723:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "710:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "710:32:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "700:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "751:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "782:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "793:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "778:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "778:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "765:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "765:32:11"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "755:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "806:28:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "816:18:11",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "810:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "861:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "870:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "873:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "863:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "863:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "863:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "857:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "846:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "846:14:11"
															},
															"nodeType": "YulIf",
															"src": "843:34:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "886:32:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "900:9:11"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "911:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "896:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "896:22:11"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "890:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "966:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "975:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "978:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "968:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "968:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "968:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "945:2:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "949:4:11",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "941:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "941:13:11"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "956:7:11"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "937:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "937:27:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "930:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "930:35:11"
															},
															"nodeType": "YulIf",
															"src": "927:55:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "991:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1018:2:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1005:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1005:16:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "995:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1048:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1057:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1060:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1050:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1050:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1050:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1036:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1044:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1033:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1033:14:11"
															},
															"nodeType": "YulIf",
															"src": "1030:34:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1114:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1123:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1126:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1116:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1116:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1116:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "1087:2:11"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1091:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1083:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1083:15:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1100:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1079:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1079:24:11"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1105:7:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1076:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1076:37:11"
															},
															"nodeType": "YulIf",
															"src": "1073:57:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1139:21:11",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1153:2:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1157:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1149:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1149:11:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1139:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1169:16:11",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "1179:6:11"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "1169:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "457:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "468:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "480:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "488:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "496:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "504:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "512:6:11",
														"type": ""
													}
												],
												"src": "383:808:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1274:199:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1320:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1329:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1332:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1322:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1322:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1322:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1295:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1304:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1291:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1291:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1316:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1287:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1287:32:11"
															},
															"nodeType": "YulIf",
															"src": "1284:52:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1345:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1364:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1358:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1358:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1349:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1427:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1436:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1439:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1429:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1429:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1429:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1396:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "1417:5:11"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "1410:6:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1410:13:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1403:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1403:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1393:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1393:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1386:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1386:40:11"
															},
															"nodeType": "YulIf",
															"src": "1383:60:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1452:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1462:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1452:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1240:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1251:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1263:6:11",
														"type": ""
													}
												],
												"src": "1196:277:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1548:110:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1594:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1603:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1606:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1596:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1596:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1596:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1569:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1578:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1565:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1565:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1590:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1561:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1561:32:11"
															},
															"nodeType": "YulIf",
															"src": "1558:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1619:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1642:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1629:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1629:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1619:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1514:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1525:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1537:6:11",
														"type": ""
													}
												],
												"src": "1478:180:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1744:103:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1790:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1799:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1802:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1792:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1792:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1792:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1765:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1774:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1761:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1761:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1786:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1757:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1757:32:11"
															},
															"nodeType": "YulIf",
															"src": "1754:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1815:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1831:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1825:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1825:16:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1815:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1710:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1721:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1733:6:11",
														"type": ""
													}
												],
												"src": "1663:184:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1939:167:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1985:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1994:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1997:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1987:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1987:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1987:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1960:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1969:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1956:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1956:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1981:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1952:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:32:11"
															},
															"nodeType": "YulIf",
															"src": "1949:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2010:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2033:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2020:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2020:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2010:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2052:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2085:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2096:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2081:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2081:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2062:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2062:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2052:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1897:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1908:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1920:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1928:6:11",
														"type": ""
													}
												],
												"src": "1852:254:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2198:161:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2244:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2253:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2256:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2246:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2246:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2246:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2219:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2228:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2215:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2215:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2240:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2211:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2211:32:11"
															},
															"nodeType": "YulIf",
															"src": "2208:52:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2269:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2292:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2279:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2279:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2269:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2311:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2338:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2349:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2334:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2334:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2321:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2321:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2311:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2156:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2167:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2179:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2187:6:11",
														"type": ""
													}
												],
												"src": "2111:248:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2501:137:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2511:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2531:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2525:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2525:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "2515:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2573:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2581:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2569:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2569:17:11"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2588:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2593:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "2547:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2547:53:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2547:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2609:23:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2620:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2625:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2616:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2616:16:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2609:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2477:3:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2482:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2493:3:11",
														"type": ""
													}
												],
												"src": "2364:274:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2744:102:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2754:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2766:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2777:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2762:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2762:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2754:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2796:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2811:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2827:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2832:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2823:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2823:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2836:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2819:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2819:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2807:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2807:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2789:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2789:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2789:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2713:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2724:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2735:4:11",
														"type": ""
													}
												],
												"src": "2643:203:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3008:218:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3018:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3030:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3041:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3026:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3026:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3018:4:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3053:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3071:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3076:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3067:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3067:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3080:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3063:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3063:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3057:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3098:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3113:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3121:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3109:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3109:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3091:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3091:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3091:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3145:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3156:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3141:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3141:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3165:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3173:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3161:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3161:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3134:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3134:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3134:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3197:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3208:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3193:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3193:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3213:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3186:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3186:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3186:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2961:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2972:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2980:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2988:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2999:4:11",
														"type": ""
													}
												],
												"src": "2851:375:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3488:298:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3498:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3516:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3521:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3512:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3512:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3525:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3508:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3508:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3502:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3543:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3558:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3566:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3554:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3554:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3536:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3536:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3536:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3590:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3601:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3586:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3586:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3610:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3618:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3606:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3606:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3579:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3579:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3579:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3642:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3653:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3638:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3638:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3658:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3631:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3631:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3631:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3685:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3696:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3681:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3681:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3701:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3674:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3674:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3674:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3725:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3736:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3721:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3721:19:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3742:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3714:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3714:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3714:30:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3753:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3765:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3776:3:11",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3761:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3761:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3753:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3441:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3452:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3460:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3468:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3479:4:11",
														"type": ""
													}
												],
												"src": "3231:555:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3920:145:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3930:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3942:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3953:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3938:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3938:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3930:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3972:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3987:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4003:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4008:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3999:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3999:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4012:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3995:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3995:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3983:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3983:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3965:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3965:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3965:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4036:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4047:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4032:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4032:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4052:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4025:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4025:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4025:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3881:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3892:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3900:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3911:4:11",
														"type": ""
													}
												],
												"src": "3791:274:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4169:103:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4179:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4191:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4202:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4187:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4187:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4179:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4221:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4236:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4248:3:11",
																						"type": "",
																						"value": "224"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4253:10:11",
																						"type": "",
																						"value": "0xffffffff"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "4244:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4244:20:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4232:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4232:33:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4214:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4214:52:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4214:52:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4138:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4149:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4160:4:11",
														"type": ""
													}
												],
												"src": "4070:202:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4398:262:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4415:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4426:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4408:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4408:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4408:21:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4438:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4458:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4452:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4452:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4442:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4485:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4496:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4481:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4481:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4501:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4474:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4474:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4474:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4543:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4551:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4539:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4539:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4560:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4571:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4556:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4556:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4576:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4517:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4517:66:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4517:66:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4592:62:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4608:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4627:6:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4635:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "4623:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4623:15:11"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4644:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4640:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4640:7:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4619:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4619:29:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4604:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4604:45:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4651:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4600:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4600:54:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4592:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4367:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4378:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4389:4:11",
														"type": ""
													}
												],
												"src": "4277:383:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4839:228:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4856:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4867:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4849:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4849:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4849:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4890:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4901:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4886:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4886:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4906:2:11",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4879:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4879:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4879:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4929:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4940:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4925:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4925:18:11"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4945:34:11",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4918:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4918:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4918:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5000:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5011:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4996:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4996:18:11"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5016:8:11",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4989:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4989:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4989:36:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5034:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5046:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5057:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5042:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5042:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5034:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4816:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4830:4:11",
														"type": ""
													}
												],
												"src": "4665:402:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5246:170:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5263:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5274:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5256:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5256:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5256:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5297:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5308:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5293:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5293:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5313:2:11",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5286:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5286:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5286:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5336:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5347:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5332:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5332:18:11"
																	},
																	{
																		"hexValue": "4669727374204465706f73697420546f6b656e73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5352:22:11",
																		"type": "",
																		"value": "First Deposit Tokens"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5325:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5325:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5325:50:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5384:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5396:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5407:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5392:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5392:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5384:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5223:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5237:4:11",
														"type": ""
													}
												],
												"src": "5072:344:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5595:168:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5612:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5623:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5605:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5605:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5605:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5646:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5657:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5642:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5662:2:11",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5635:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5635:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5635:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5685:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5696:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5681:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5681:18:11"
																	},
																	{
																		"hexValue": "506c65617365204669727374205374616b65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5701:20:11",
																		"type": "",
																		"value": "Please First Stake"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5674:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5674:48:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5674:48:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5731:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5743:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5754:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5739:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5739:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5731:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5572:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5586:4:11",
														"type": ""
													}
												],
												"src": "5421:342:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5942:228:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5959:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5970:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5952:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5952:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5952:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5993:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6004:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5989:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5989:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6009:2:11",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5982:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5982:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5982:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6032:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6043:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6028:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6028:18:11"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6048:34:11",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6021:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6021:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6021:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6103:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6114:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6099:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6099:18:11"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6119:8:11",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6092:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6092:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6092:36:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6137:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6149:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6160:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6145:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6145:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6137:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5919:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5933:4:11",
														"type": ""
													}
												],
												"src": "5768:402:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6349:173:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6366:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6377:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6359:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6359:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6359:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6400:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6411:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6396:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6396:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6416:2:11",
																		"type": "",
																		"value": "23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6389:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6389:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6389:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6439:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6450:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6435:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6435:18:11"
																	},
																	{
																		"hexValue": "506c65617365204669727374205374616b65204e465473",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6455:25:11",
																		"type": "",
																		"value": "Please First Stake NFTs"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6428:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6428:53:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6428:53:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6490:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6502:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6513:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6498:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6498:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6490:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6326:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6340:4:11",
														"type": ""
													}
												],
												"src": "6175:347:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6701:182:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6718:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6729:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6711:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6711:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6711:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6752:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6763:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6748:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6748:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6768:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6741:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6741:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6741:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6791:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6802:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6787:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6787:18:11"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6807:34:11",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6780:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6780:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6780:62:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6851:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6863:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6874:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6859:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6859:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6851:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6678:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6692:4:11",
														"type": ""
													}
												],
												"src": "6527:356:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7062:179:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7079:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7090:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7072:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7072:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7072:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7113:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7124:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7109:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7109:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7129:2:11",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7102:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7102:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7102:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7152:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7163:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7148:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7148:18:11"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7168:31:11",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7141:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7141:59:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7141:59:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7209:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7221:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7232:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7217:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7217:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7209:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7039:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7053:4:11",
														"type": ""
													}
												],
												"src": "6888:353:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7420:232:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7437:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7448:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7430:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7430:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7430:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7471:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7482:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7467:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7467:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7487:2:11",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7460:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7460:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7460:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7510:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7521:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7506:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7506:18:11"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7526:34:11",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7499:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7499:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7499:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7581:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7592:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7577:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7577:18:11"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7597:12:11",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7570:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7570:40:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7570:40:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7619:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7631:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7642:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7627:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7627:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7619:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7397:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7411:4:11",
														"type": ""
													}
												],
												"src": "7246:406:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7831:223:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7848:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7859:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7841:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7841:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7841:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7882:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7893:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7878:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7878:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7898:2:11",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7871:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7871:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7871:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7921:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7932:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7917:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7917:18:11"
																	},
																	{
																		"hexValue": "506c6561736520556e7374616b6520796f7572206465706f7369746564204e46",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7937:34:11",
																		"type": "",
																		"value": "Please Unstake your deposited NF"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7910:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7910:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7910:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7992:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8003:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7988:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7988:18:11"
																	},
																	{
																		"hexValue": "54",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8008:3:11",
																		"type": "",
																		"value": "T"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7981:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7981:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7981:31:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8021:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8033:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8044:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8029:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8029:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8021:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7808:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7822:4:11",
														"type": ""
													}
												],
												"src": "7657:397:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8160:76:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8170:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8182:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8193:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8178:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8178:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8170:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8212:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8223:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8205:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8205:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8205:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8129:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8140:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8151:4:11",
														"type": ""
													}
												],
												"src": "8059:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8392:178:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8402:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8414:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8425:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8410:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8410:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8402:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8444:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8455:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8437:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8437:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8437:25:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8482:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8493:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8478:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8478:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8498:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8471:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8471:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8471:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8525:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8536:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8521:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8521:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value2",
																						"nodeType": "YulIdentifier",
																						"src": "8555:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "8548:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8548:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8541:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8541:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8514:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8514:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8514:50:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8345:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8356:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8364:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8372:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8383:4:11",
														"type": ""
													}
												],
												"src": "8241:329:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8623:80:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8650:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8652:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8652:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8652:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8639:1:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "8646:1:11"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "8642:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8642:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8636:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8636:13:11"
															},
															"nodeType": "YulIf",
															"src": "8633:39:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8681:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8692:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8695:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8688:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8688:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "8681:3:11"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8606:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8609:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "8615:3:11",
														"type": ""
													}
												],
												"src": "8575:128:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8754:171:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8785:111:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8806:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8813:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8818:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "8809:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8809:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8799:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8799:31:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8799:31:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8850:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8853:4:11",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "8843:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8843:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8843:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8878:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8881:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8871:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8871:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8871:15:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8774:1:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8767:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8767:9:11"
															},
															"nodeType": "YulIf",
															"src": "8764:132:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8905:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "8914:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "8917:1:11"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "8910:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8910:9:11"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "8905:1:11"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8739:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8742:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "8748:1:11",
														"type": ""
													}
												],
												"src": "8708:217:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8982:116:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9041:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9043:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9043:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9043:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "9013:1:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "9006:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9006:9:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "8999:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8999:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "9021:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9032:1:11",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "9028:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9028:6:11"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "9036:1:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "9024:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9024:14:11"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "9018:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9018:21:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "8995:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8995:45:11"
															},
															"nodeType": "YulIf",
															"src": "8992:71:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9072:20:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9087:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9090:1:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "9083:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9083:9:11"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "9072:7:11"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "8961:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "8964:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "8970:7:11",
														"type": ""
													}
												],
												"src": "8930:168:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9152:76:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9174:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9176:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9176:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9176:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9168:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9171:1:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9165:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9165:8:11"
															},
															"nodeType": "YulIf",
															"src": "9162:34:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9205:17:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9217:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9220:1:11"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "9213:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9213:9:11"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "9205:4:11"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9134:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9137:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "9143:4:11",
														"type": ""
													}
												],
												"src": "9103:125:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9286:205:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9296:10:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "9305:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "9300:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9365:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "9390:3:11"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "9395:1:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9386:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9386:11:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "9409:3:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "9414:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9405:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9405:11:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "9399:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9399:18:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9379:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9379:39:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9379:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9326:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9329:6:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "9323:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9323:13:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "9337:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "9339:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "9348:1:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9351:2:11",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9344:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9344:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "9339:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "9319:3:11",
																"statements": []
															},
															"src": "9315:113:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9454:31:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "9467:3:11"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "9472:6:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9463:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9463:16:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9481:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9456:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9456:27:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9456:27:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "9443:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "9446:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9440:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9440:13:11"
															},
															"nodeType": "YulIf",
															"src": "9437:48:11"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "9264:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "9269:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "9274:6:11",
														"type": ""
													}
												],
												"src": "9233:258:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9528:95:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9545:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9552:3:11",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9557:10:11",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9548:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9548:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9538:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9538:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9538:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9585:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9588:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9578:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9578:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9578:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9609:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9612:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "9602:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9602:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9602:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "9496:127:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"First Deposit Tokens\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Please First Stake\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Please First Stake NFTs\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Please Unstake your deposited NF\")\n        mstore(add(headStart, 96), \"T\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063c45af5d81161007c578063c45af5d8146102a5578063e4458b30146102b8578063e88cc2be14610307578063ee0106d214610339578063f2fde38b1461034c578063f89d832f1461035f57600080fd5b80638da5cb5b14610234578063934ed77214610259578063a6021ace1461026c578063b7171a2e1461027f578063c0cd40ee1461029257600080fd5b8063574880641161010a57806357488064146101d657806357ea89b6146101f6578063715018a6146101fe5780637b2f247f14610206578063866e58af1461020e5780638b73e3311461022157600080fd5b8063023245d714610147578063150b7a021461015c578063275bd33f146101995780633f601972146101ac5780634d6ce1e5146101c3575b600080fd5b61015a6101553660046112c2565b610372565b005b61017b61016a366004611205565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b61015a6101a73660046111e3565b610467565b6101b560035481565b604051908152602001610190565b61015a6101d13660046112c2565b610491565b6101b56101e43660046111e3565b60066020526000908152604090205481565b61015a6105fb565b61015a610921565b6101b5610933565b61015a61021c3660046112f4565b6109d3565b6101b561022f3660046111e3565b6109f6565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610190565b61015a610267366004611320565b610afb565b600254610241906001600160a01b031681565b600154610241906001600160a01b031681565b61015a6102a03660046112c2565b610c74565b6101b56102b33660046111e3565b610cab565b6102ea6102c63660046111e3565b60076020526000908152604090208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610190565b6102ea6103153660046111e3565b60056020526000908152604090208054600182015460029092015490919060ff1683565b61015a6103473660046111e3565b610ddd565b61015a61035a3660046111e3565b610e07565b61015a61036d3660046112c2565b610e7d565b3360009081526007602052604090206002015460ff166103d95760405162461bcd60e51b815260206004820152601760248201527f506c65617365204669727374205374616b65204e46547300000000000000000060448201526064015b60405180910390fd5b600154604051635c46a7ef60e11b81526001600160a01b039091169063b88d4fde9061040d9030903390869060040161135e565b600060405180830381600087803b15801561042757600080fd5b505af115801561043b573d6000803e3d6000fd5b50503360009081526007602052604081208181556001810191909155600201805460ff19169055505050565b61046f610e8a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526005602052604090206002015460ff1661052c5780600360008282546104bd91906113c4565b909155505060408051606081018252828152426020808301918252600183850181815233600081815260059094529590922093518455915191830191909155516002918201805460ff191691151591909117905554610529916001600160a01b03909116903084610ee4565b50565b806003600082825461053e91906113c4565b9091555061054d9050336109f6565b336000908152600660205260408120805490919061056c9084906113c4565b9091555050604080516060810182523360009081526005602052919091205481906105989084906113c4565b815242602080830191909152600160409283018190523360008181526005845284902085518155928501519183019190915592909101516002918201805460ff191691151591909117905554610529916001600160a01b03909116903084610ee4565b3360009081526005602052604090206002015460ff166106525760405162461bcd60e51b8152602060048201526012602482015271506c65617365204669727374205374616b6560701b60448201526064016103d0565b3360009081526007602052604090206002015460ff1615610814573360008181526005602052604081205491610687906109f6565b600180543360008181526007602052604090819020909301549251635c46a7ef60e11b81529394506001600160a01b039091169263b88d4fde926106d292309290919060040161135e565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050600254336000818152600660205260409020546001600160a01b03909216935063a9059cbb92509061073485876113c4565b61073e91906113c4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bc91906112a0565b505033600090815260076020908152604080832083815560018082018590556002918201805460ff19908116909155600685528386208690556005909452918420848155918201939093559091018054909116905550565b336000818152600560205260408120549161082e906109f6565b600254336000818152600660205260409020549293506001600160a01b039091169163a9059cbb919061086185876113c4565b61086b91906113c4565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156108b157600080fd5b505af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e991906112a0565b5050336000908152600660209081526040808320839055600590915281208181556001810191909155600201805460ff19169055505b565b610929610e8a565b61091f6000610f55565b6003546002546040516370a0823160e01b8152306004820152600092839290916001600160a01b03909116906370a082319060240160206040518083038186803b15801561098057600080fd5b505afa158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b891906112db565b6109c39060646113fe565b6109cd91906113dc565b92915050565b6109db610e8a565b6002546109f2906001600160a01b03168284610fa5565b5050565b6001600160a01b03811660009081526007602052604081206002015460ff1615610a9d576001600160a01b038216600090815260056020526040812060010154603c90610a43904261141d565b610a4d91906113dc565b6001600160a01b038416600090815260076020908152604080832054600590925290912054610a7c91906113fe565b610a8691906113fe565b90506000610a956064836113dc565b949350505050565b6001600160a01b038216600090815260056020526040812060010154603c90610ac6904261141d565b610ad091906113dc565b6004546001600160a01b038516600090815260056020526040902054610a7c91906113fe565b919050565b3360009081526005602052604090206002015460ff16610b545760405162461bcd60e51b81526020600482015260146024820152734669727374204465706f73697420546f6b656e7360601b60448201526064016103d0565b3360009081526007602052604090206002015460ff1615610bc15760405162461bcd60e51b815260206004820152602160248201527f506c6561736520556e7374616b6520796f7572206465706f7369746564204e466044820152601560fa1b60648201526084016103d0565b60408051606081018252828152602080820185815260018385018181523360008181526007909552938690209451855591518482015590516002909301805460ff19169315159390931790925590549151635c46a7ef60e11b81526001600160a01b039092169163b88d4fde91610c3e913090879060040161135e565b600060405180830381600087803b158015610c5857600080fd5b505af1158015610c6c573d6000803e3d6000fd5b505050505050565b610c7c610e8a565b8060036000828254610c8e91906113c4565b9091555050600254610529906001600160a01b0316333084610ee4565b6001600160a01b03811660009081526007602052604081206002015460ff1615610d84576001600160a01b038216600090815260056020526040812060010154603c90610cf8904261141d565b610d0291906113dc565b6001600160a01b038416600090815260076020908152604080832054600590925290912054610d3191906113fe565b610d3b91906113fe565b90506000610d4a6064836113dc565b6001600160a01b038516600090815260056020526040902054909150610d7090826113c4565b9250610a95670de0b6b3a7640000846113dc565b6001600160a01b038216600090815260056020526040812060010154603c90610dad904261141d565b610db791906113dc565b6004546001600160a01b038516600090815260056020526040902054610d3191906113fe565b610de5610e8a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610e0f610e8a565b6001600160a01b038116610e745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d0565b61052981610f55565b610e85610e8a565b600455565b6000546001600160a01b0316331461091f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d0565b6040516001600160a01b0380851660248301528316604482015260648101829052610f4f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610fda565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038316602482015260448101829052610fd590849063a9059cbb60e01b90606401610f18565b505050565b600061102f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110ac9092919063ffffffff16565b805190915015610fd5578080602001905181019061104d91906112a0565b610fd55760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103d0565b6060610a95848460008585600080866001600160a01b031685876040516110d39190611342565b60006040518083038185875af1925050503d8060008114611110576040519150601f19603f3d011682016040523d82523d6000602084013e611115565b606091505b509150915061112687838387611131565b979650505050505050565b6060831561119d578251611196576001600160a01b0385163b6111965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103d0565b5081610a95565b610a9583838151156111b25781518083602001fd5b8060405162461bcd60e51b81526004016103d09190611391565b80356001600160a01b0381168114610af657600080fd5b6000602082840312156111f557600080fd5b6111fe826111cc565b9392505050565b60008060008060006080868803121561121d57600080fd5b611226866111cc565b9450611234602087016111cc565b935060408601359250606086013567ffffffffffffffff8082111561125857600080fd5b818801915088601f83011261126c57600080fd5b81358181111561127b57600080fd5b89602082850101111561128d57600080fd5b9699959850939650602001949392505050565b6000602082840312156112b257600080fd5b815180151581146111fe57600080fd5b6000602082840312156112d457600080fd5b5035919050565b6000602082840312156112ed57600080fd5b5051919050565b6000806040838503121561130757600080fd5b82359150611317602084016111cc565b90509250929050565b6000806040838503121561133357600080fd5b50508035926020909101359150565b60008251611354818460208701611434565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260806060820181905260009082015260a00190565b60208152600082518060208401526113b0816040850160208701611434565b601f01601f19169190910160400192915050565b600082198211156113d7576113d7611460565b500190565b6000826113f957634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561141857611418611460565b500290565b60008282101561142f5761142f611460565b500390565b60005b8381101561144f578181015183820152602001611437565b83811115610f4f5750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207dbf72729eeb0e1460d5d38fc56dcbb2b306499ecd739c1c01a8c80fcfe7cc1864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xC45AF5D8 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xC45AF5D8 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xE4458B30 EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0xE88CC2BE EQ PUSH2 0x307 JUMPI DUP1 PUSH4 0xEE0106D2 EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0xF89D832F EQ PUSH2 0x35F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0x934ED772 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0xA6021ACE EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xB7171A2E EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xC0CD40EE EQ PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x57488064 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x57488064 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x57EA89B6 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x7B2F247F EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x866E58AF EQ PUSH2 0x20E JUMPI DUP1 PUSH4 0x8B73E331 EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23245D7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x275BD33F EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x3F601972 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x4D6CE1E5 EQ PUSH2 0x1C3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x372 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17B PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1205 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST PUSH2 0x1B5 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0x491 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x5FB JUMP JUMPDEST PUSH2 0x15A PUSH2 0x921 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x21C CALLDATASIZE PUSH1 0x4 PUSH2 0x12F4 JUMP JUMPDEST PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1320 JUMP JUMPDEST PUSH2 0xAFB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x241 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0xC74 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0xCAB JUMP JUMPDEST PUSH2 0x2EA PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x190 JUMP JUMPDEST PUSH2 0x2EA PUSH2 0x315 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x347 CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0xDDD JUMP JUMPDEST PUSH2 0x15A PUSH2 0x35A CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0xE07 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x12C2 JUMP JUMPDEST PUSH2 0xE7D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C65617365204669727374205374616B65204E465473000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xB88D4FDE SWAP1 PUSH2 0x40D SWAP1 ADDRESS SWAP1 CALLER SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x427 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x43B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x46F PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x52C JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4BD SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP6 SWAP1 SWAP3 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP2 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SLOAD PUSH2 0x529 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0xEE4 JUMP JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x53E SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x54D SWAP1 POP CALLER PUSH2 0x9F6 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x56C SWAP1 DUP5 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SLOAD DUP2 SWAP1 PUSH2 0x598 SWAP1 DUP5 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP5 MSTORE DUP5 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP3 DUP6 ADD MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP3 SWAP1 SWAP2 ADD MLOAD PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SLOAD PUSH2 0x529 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP5 PUSH2 0xEE4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0x652 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x506C65617365204669727374205374616B65 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x814 JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x687 SWAP1 PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP1 SWAP4 ADD SLOAD SWAP3 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE SWAP4 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0xB88D4FDE SWAP3 PUSH2 0x6D2 SWAP3 ADDRESS SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x700 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x2 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 0xA9059CBB SWAP3 POP SWAP1 PUSH2 0x734 DUP6 DUP8 PUSH2 0x13C4 JUMP JUMPDEST PUSH2 0x73E SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x798 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7BC SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP6 SWAP1 SSTORE PUSH1 0x2 SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP7 SWAP1 SSTORE PUSH1 0x5 SWAP1 SWAP5 MSTORE SWAP2 DUP5 KECCAK256 DUP5 DUP2 SSTORE SWAP2 DUP3 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 ADD DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 PUSH2 0x82E SWAP1 PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x2 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP3 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 0xA9059CBB SWAP2 SWAP1 PUSH2 0x861 DUP6 DUP8 PUSH2 0x13C4 JUMP JUMPDEST PUSH2 0x86B SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E9 SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x5 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH2 0x929 PUSH2 0xE8A JUMP JUMPDEST PUSH2 0x91F PUSH1 0x0 PUSH2 0xF55 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x980 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x994 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9B8 SWAP2 SWAP1 PUSH2 0x12DB JUMP JUMPDEST PUSH2 0x9C3 SWAP1 PUSH1 0x64 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0x9CD SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x9DB PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x9F2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP5 PUSH2 0xFA5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA9D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xA43 SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xA4D SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0xA86 SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA95 PUSH1 0x64 DUP4 PUSH2 0x13DC JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xAC6 SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xAD0 SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND PUSH2 0xB54 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x4669727374204465706F73697420546F6B656E73 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x506C6561736520556E7374616B6520796F7572206465706F7369746564204E46 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE PUSH1 0x1 DUP4 DUP6 ADD DUP2 DUP2 MSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP6 MSTORE SWAP4 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD DUP5 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 SLOAD SWAP2 MLOAD PUSH4 0x5C46A7EF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xB88D4FDE SWAP2 PUSH2 0xC3E SWAP2 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x135E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC7C PUSH2 0xE8A JUMP JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC8E SWAP2 SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 SLOAD PUSH2 0x529 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP5 PUSH2 0xEE4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD84 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xCF8 SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xD02 SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x5 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0xD31 SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0xD3B SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD4A PUSH1 0x64 DUP4 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xD70 SWAP1 DUP3 PUSH2 0x13C4 JUMP JUMPDEST SWAP3 POP PUSH2 0xA95 PUSH8 0xDE0B6B3A7640000 DUP5 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x3C SWAP1 PUSH2 0xDAD SWAP1 TIMESTAMP PUSH2 0x141D JUMP JUMPDEST PUSH2 0xDB7 SWAP2 SWAP1 PUSH2 0x13DC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD31 SWAP2 SWAP1 PUSH2 0x13FE JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE0F PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE74 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0x529 DUP2 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0xE85 PUSH2 0xE8A JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xF4F SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xFDA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xFD5 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xF18 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x102F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10AC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xFD5 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x104D SWAP2 SWAP1 PUSH2 0x12A0 JUMP JUMPDEST PUSH2 0xFD5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3D0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA95 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x10D3 SWAP2 SWAP1 PUSH2 0x1342 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1110 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1126 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1131 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x119D JUMPI DUP3 MLOAD PUSH2 0x1196 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1196 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3D0 JUMP JUMPDEST POP DUP2 PUSH2 0xA95 JUMP JUMPDEST PUSH2 0xA95 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x11B2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3D0 SWAP2 SWAP1 PUSH2 0x1391 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAF6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11FE DUP3 PUSH2 0x11CC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x121D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1226 DUP7 PUSH2 0x11CC JUMP JUMPDEST SWAP5 POP PUSH2 0x1234 PUSH1 0x20 DUP8 ADD PUSH2 0x11CC JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x126C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x128D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x11FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1317 PUSH1 0x20 DUP5 ADD PUSH2 0x11CC JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1354 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1434 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x13B0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1434 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x13D7 JUMPI PUSH2 0x13D7 PUSH2 0x1460 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x13F9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1418 JUMPI PUSH2 0x1418 PUSH2 0x1460 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x142F JUMPI PUSH2 0x142F PUSH2 0x1460 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x144F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1437 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF4F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xBF72729EEB0E1460D5D38FC56DCBB2B306499ECD739C1C01A8C80FCFE7CC XOR PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "348:8084:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8005:249;;;;;;:::i;:::-;;:::i;:::-;;8259:171;;;;;;:::i;:::-;-1:-1:-1;;;8259:171:10;;;;;;;;;;;-1:-1:-1;;;;;;4232:33:11;;;4214:52;;4202:2;4187:18;8259:171:10;;;;;;;;6788:107;;;;;;:::i;:::-;;:::i;503:22::-;;;;;;;;;8205:25:11;;;8193:2;8178:18;503:22:10;8059:177:11;2873:609:10;;;;;;:::i;:::-;;:::i;796:39::-;;;;;;:::i;:::-;;;;;;;;;;;;;;3677:901;;;:::i;1831:101:0:-;;;:::i;2402:178:10:-;;;:::i;2062:132::-;;;;;;:::i;:::-;;:::i;5758:562::-;;;;;;:::i;:::-;;:::i;1201:85:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;;-1:-1:-1;;;;;2807:32:11;;;2789:51;;2777:2;2762:18;1201:85:0;2643:203:11;7430:363:10;;;;;;:::i;:::-;;:::i;470:27::-;;;;;-1:-1:-1;;;;;470:27:10;;;436:28;;;;;-1:-1:-1;;;;;436:28:10;;;1696:174;;;;;;:::i;:::-;;:::i;4771:723::-;;;;;;:::i;:::-;;:::i;841:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8437:25:11;;;8493:2;8478:18;;8471:34;;;;8548:14;8541:22;8521:18;;;8514:50;8425:2;8410:18;841:47:10;8241:329:11;748:42:10;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6502:109;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;7077:110:10:-;;;;;;:::i;:::-;;:::i;8005:249::-;8078:10;8069:20;;;;:8;:20;;;;;:26;;;;;8061:61;;;;-1:-1:-1;;;8061:61:10;;6377:2:11;8061:61:10;;;6359:21:11;6416:2;6396:18;;;6389:30;6455:25;6435:18;;;6428:53;6498:18;;8061:61:10;;;;;;;;;8140:13;;8132:78;;-1:-1:-1;;;8132:78:10;;-1:-1:-1;;;;;8140:13:10;;;;8132:39;;:78;;8180:4;;8187:10;;8198:8;;8132:78;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8236:10:10;8227:20;;;;:8;:20;;;;;8220:27;;;;;;;;;;;;;;-1:-1:-1;;8220:27:10;;;-1:-1:-1;;;8005:249:10:o;6788:107::-;1094:13:0;:11;:13::i;:::-;6860:12:10::1;:28:::0;;-1:-1:-1;;;;;;6860:28:10::1;-1:-1:-1::0;;;;;6860:28:10;;;::::1;::::0;;;::::1;::::0;;6788:107::o;2873:609::-;2936:10;2928:19;;;;:7;:19;;;;;:25;;;;;2924:552;;2982:7;2968:10;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;;3025:36:10;;;;;;;;;;;3040:15;3025:36;;;;;;;3056:4;3025:36;;;;;;3011:10;-1:-1:-1;3003:19:10;;;:7;:19;;;;;;;:58;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3003:58:10;;;;;;;;;;3082:12;3075:74;;-1:-1:-1;;;;;3082:12:10;;;;3133:4;3025:36;3075:37;:74::i;:::-;2873:609;:::o;2924:552::-;3201:7;3187:10;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;3245:28:10;;-1:-1:-1;3262:10:10;3245:16;:28::i;:::-;3229:10;3222:18;;;;:6;:18;;;;;:51;;:18;;;:51;;;;;:::i;:::-;;;;-1:-1:-1;;3309:68:10;;;;;;;;3324:10;-1:-1:-1;3316:19:10;;;:7;:19;;;;;;:29;3309:68;;3316:39;;3348:7;;3316:39;:::i;:::-;3309:68;;3356:15;3309:68;;;;;;;;3372:4;3309:68;;;;;;;3295:10;-1:-1:-1;3287:19:10;;;:7;:19;;;;;:90;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3287:90:10;;;;;;;;;;3398:12;3391:74;;-1:-1:-1;;;;;3398:12:10;;;;3449:4;3457:7;3391:37;:74::i;3677:901::-;3730:10;3722:19;;;;:7;:19;;;;;:25;;;;;3714:55;;;;-1:-1:-1;;;3714:55:10;;5623:2:11;3714:55:10;;;5605:21:11;5662:2;5642:18;;;5635:30;-1:-1:-1;;;5681:18:11;;;5674:48;5739:18;;3714:55:10;5421:342:11;3714:55:10;3792:10;3783:20;;;;:8;:20;;;;;:26;;;;;3779:789;;;3846:10;3824:11;3838:19;;;:7;:19;;;;;:29;;3895:28;;:16;:28::i;:::-;3945:13;;;3992:10;3945:13;4003:20;;;:8;:20;;;;;;;:28;;;;3937:98;;-1:-1:-1;;;3937:98:10;;3881:42;;-1:-1:-1;;;;;;3945:13:10;;;;3937:39;;:98;;3985:4;;3992:10;;4003:28;3937:98;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4056:12:10;;4079:10;4056:12;4109:18;;;:6;:18;;;;;;-1:-1:-1;;;;;4056:12:10;;;;-1:-1:-1;4049:29:10;;-1:-1:-1;4079:10:10;4091:15;4100:6;4091;:15;:::i;:::-;:36;;;;:::i;:::-;4049:79;;-1:-1:-1;;;;;;4049:79:10;;;;;;;-1:-1:-1;;;;;3983:32:11;;;4049:79:10;;;3965:51:11;4032:18;;;4025:34;3938:18;;4049:79:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;4158:10:10;4149:20;;;;:8;:20;;;;;;;;4142:27;;;;;;;;;;;;;;;;-1:-1:-1;;4142:27:10;;;;;;4190:6;:18;;;;;4183:25;;;4229:7;:19;;;;;;4222:26;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3677:901:10:o;3779:789::-;4308:10;4286:11;4300:19;;;:7;:19;;;;;:29;;4357:28;;:16;:28::i;:::-;4406:12;;4429:10;4406:12;4459:18;;;:6;:18;;;;;;4343:42;;-1:-1:-1;;;;;;4406:12:10;;;;4399:29;;4429:10;4441:15;4343:42;4441:6;:15;:::i;:::-;:36;;;;:::i;:::-;4399:79;;-1:-1:-1;;;;;;4399:79:10;;;;;;;-1:-1:-1;;;;;3983:32:11;;;4399:79:10;;;3965:51:11;4032:18;;;4025:34;3938:18;;4399:79:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;4506:10:10;4499:18;;;;:6;:18;;;;;;;;4492:25;;;4538:7;:19;;;;;4531:26;;;;;;;;;;;;;;-1:-1:-1;;4531:26:10;;;-1:-1:-1;3779:789:10;3677:901::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;2402:178:10:-:0;2536:10;;2490:12;;2483:45;;-1:-1:-1;;;2483:45:10;;2522:4;2483:45;;;2789:51:11;2445:7:10;;;;2536:10;;-1:-1:-1;;;;;2490:12:10;;;;2483:30;;2762:18:11;;2483:45:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;;2531:3;2483:51;:::i;:::-;2482:64;;;;:::i;:::-;2464:82;2402:178;-1:-1:-1;;2402:178:10:o;2062:132::-;1094:13:0;:11;:13::i;:::-;2148:12:10::1;::::0;2141:46:::1;::::0;-1:-1:-1;;;;;2148:12:10::1;2175:3:::0;2180:6;2141:33:::1;:46::i;:::-;2062:132:::0;;:::o;5758:562::-;-1:-1:-1;;;;;5839:13:10;;5817:7;5839:13;;;:8;:13;;;;;:19;;;;;5835:479;;;-1:-1:-1;;;;;5971:12:10;;5882:14;5971:12;;;:7;:12;;;;;:22;;;5995:2;;5953:40;;:15;:40;:::i;:::-;5952:45;;;;:::i;:::-;-1:-1:-1;;;;;5925:13:10;;;;;;:8;:13;;;;;;;;:22;5900:7;:12;;;;;;:22;:47;;5925:22;5900:47;:::i;:::-;5899:99;;;;:::i;:::-;5882:116;-1:-1:-1;6012:16:10;6031:15;6043:3;5882:116;6031:15;:::i;:::-;6012:34;5758:562;-1:-1:-1;;;;5758:562:10:o;5835:479::-;-1:-1:-1;;;;;6196:12:10;;6125:14;6196:12;;;:7;:12;;;;;:22;;;6220:2;;6178:40;;:15;:40;:::i;:::-;6177:45;;;;:::i;:::-;6168:4;;-1:-1:-1;;;;;6143:12:10;;;;;;:7;:12;;;;;:22;:29;;6168:4;6143:29;:::i;5835:479::-;5758:562;;;:::o;7430:363::-;7512:10;7504:19;;;;:7;:19;;;;;:25;;;;;7496:57;;;;-1:-1:-1;;;7496:57:10;;5274:2:11;7496:57:10;;;5256:21:11;5313:2;5293:18;;;5286:30;-1:-1:-1;;;5332:18:11;;;5325:50;5392:18;;7496:57:10;5072:344:11;7496:57:10;7581:10;7572:20;;;;:8;:20;;;;;:26;;;;;7571:27;7563:72;;;;-1:-1:-1;;;7563:72:10;;7859:2:11;7563:72:10;;;7841:21:11;7898:2;7878:18;;;7871:30;7937:34;7917:18;;;7910:62;-1:-1:-1;;;7988:18:11;;;7981:31;8029:19;;7563:72:10;7657:397:11;7563:72:10;7668:30;;;;;;;;;;;;;;;;;;7693:4;7668:30;;;;;;7654:10;-1:-1:-1;7645:20:10;;;:8;:20;;;;;;;:53;;;;;;;;;;;;;;;;;;-1:-1:-1;;7645:53:10;;;;;;;;;;;7717:13;;7709:77;;-1:-1:-1;;;7709:77:10;;-1:-1:-1;;;;;7717:13:10;;;;7709:39;;:77;;7768:4;;7668:30;;7709:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7430:363;;:::o;1696:174::-;1094:13:0;:11;:13::i;:::-;1773:7:10::1;1759:10;;:21;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;1797:12:10::1;::::0;1790:73:::1;::::0;-1:-1:-1;;;;;1797:12:10::1;1828:10;1848:4;1855:7:::0;1790:37:::1;:73::i;4771:723::-:0;-1:-1:-1;;;;;4855:13:10;;4824:11;4855:13;;;:8;:13;;;;;:19;;;;;4851:628;;;-1:-1:-1;;;;;4987:12:10;;4898:14;4987:12;;;:7;:12;;;;;:22;;;5011:2;;4969:40;;:15;:40;:::i;:::-;4968:45;;;;:::i;:::-;-1:-1:-1;;;;;4941:13:10;;;;;;:8;:13;;;;;;;;:22;4916:7;:12;;;;;;:22;:47;;4941:22;4916:47;:::i;:::-;4915:99;;;;:::i;:::-;4898:116;-1:-1:-1;5028:16:10;5047:15;5059:3;4898:116;5047:15;:::i;:::-;-1:-1:-1;;;;;5099:12:10;;;;;;:7;:12;;;;;:22;5028:34;;-1:-1:-1;5085:36:10;;5028:34;5085:36;:::i;:::-;5076:45;-1:-1:-1;5142:26:10;5149:19;5076:45;5142:26;:::i;4851:628::-;-1:-1:-1;;;;;5287:12:10;;5216:14;5287:12;;;:7;:12;;;;;:22;;;5311:2;;5269:40;;:15;:40;:::i;:::-;5268:45;;;;:::i;:::-;5259:4;;-1:-1:-1;;;;;5234:12:10;;;;;;:7;:12;;;;;:22;:29;;5259:4;5234:29;:::i;6502:109::-;1094:13:0;:11;:13::i;:::-;6574::10::1;:30:::0;;-1:-1:-1;;;;;;6574:30:10::1;-1:-1:-1::0;;;;;6574:30:10;;;::::1;::::0;;;::::1;::::0;;6502:109::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;4867:2:11;2161:73:0::1;::::0;::::1;4849:21:11::0;4906:2;4886:18;;;4879:30;4945:34;4925:18;;;4918:62;-1:-1:-1;;;4996:18:11;;;4989:36;5042:19;;2161:73:0::1;4665:402:11::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;7077:110:10:-:0;1094:13:0;:11;:13::i;:::-;7158:4:10::1;:22:::0;7077:110::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;6729:2:11;1414:68:0;;;6711:21:11;;;6748:18;;;6741:30;6807:34;6787:18;;;6780:62;6859:18;;1414:68:0;6527:356:11;974:241:3;1139:68;;-1:-1:-1;;;;;3109:15:11;;;1139:68:3;;;3091:34:11;3161:15;;3141:18;;;3134:43;3193:18;;;3186:34;;;1112:96:3;;1132:5;;-1:-1:-1;;;1162:27:3;3026:18:11;;1139:68:3;;;;-1:-1:-1;;1139:68:3;;;;;;;;;;;;;;-1:-1:-1;;;;;1139:68:3;-1:-1:-1;;;;;;1139:68:3;;;;;;;;;;1112:19;:96::i;:::-;974:241;;;;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;763:205:3:-;902:58;;-1:-1:-1;;;;;3983:32:11;;902:58:3;;;3965:51:11;4032:18;;;4025:34;;;875:86:3;;895:5;;-1:-1:-1;;;925:23:3;3938:18:11;;902:58:3;3791:274:11;875:86:3;763:205;;;:::o;3747:706::-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:3;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:3;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:3;;7448:2:11;4351:85:3;;;7430:21:11;7487:2;7467:18;;;7460:30;7526:34;7506:18;;;7499:62;-1:-1:-1;;;7577:18:11;;;7570:40;7627:19;;4351:85:3;7246:406:11;3873:223:7;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4006;5241;5255:23;5282:6;-1:-1:-1;;;;;5282:11:7;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:7:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:17;;7697:286;;-1:-1:-1;;;;;1465:19:7;;;7908:60;;;;-1:-1:-1;;;7908:60:7;;7090:2:11;7908:60:7;;;7072:21:11;7129:2;7109:18;;;7102:30;7168:31;7148:18;;;7141:59;7217:18;;7908:60:7;6888:353:11;7908:60:7;-1:-1:-1;8003:10:7;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:7;;;;;;;;:::i;14:173:11:-;82:20;;-1:-1:-1;;;;;131:31:11;;121:42;;111:70;;177:1;174;167:12;192:186;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:11:o;383:808::-;480:6;488;496;504;512;565:3;553:9;544:7;540:23;536:33;533:53;;;582:1;579;572:12;533:53;605:29;624:9;605:29;:::i;:::-;595:39;;653:38;687:2;676:9;672:18;653:38;:::i;:::-;643:48;;738:2;727:9;723:18;710:32;700:42;;793:2;782:9;778:18;765:32;816:18;857:2;849:6;846:14;843:34;;;873:1;870;863:12;843:34;911:6;900:9;896:22;886:32;;956:7;949:4;945:2;941:13;937:27;927:55;;978:1;975;968:12;927:55;1018:2;1005:16;1044:2;1036:6;1033:14;1030:34;;;1060:1;1057;1050:12;1030:34;1105:7;1100:2;1091:6;1087:2;1083:15;1079:24;1076:37;1073:57;;;1126:1;1123;1116:12;1073:57;383:808;;;;-1:-1:-1;383:808:11;;-1:-1:-1;1157:2:11;1149:11;;1179:6;383:808;-1:-1:-1;;;383:808:11:o;1196:277::-;1263:6;1316:2;1304:9;1295:7;1291:23;1287:32;1284:52;;;1332:1;1329;1322:12;1284:52;1364:9;1358:16;1417:5;1410:13;1403:21;1396:5;1393:32;1383:60;;1439:1;1436;1429:12;1478:180;1537:6;1590:2;1578:9;1569:7;1565:23;1561:32;1558:52;;;1606:1;1603;1596:12;1558:52;-1:-1:-1;1629:23:11;;1478:180;-1:-1:-1;1478:180:11:o;1663:184::-;1733:6;1786:2;1774:9;1765:7;1761:23;1757:32;1754:52;;;1802:1;1799;1792:12;1754:52;-1:-1:-1;1825:16:11;;1663:184;-1:-1:-1;1663:184:11:o;1852:254::-;1920:6;1928;1981:2;1969:9;1960:7;1956:23;1952:32;1949:52;;;1997:1;1994;1987:12;1949:52;2033:9;2020:23;2010:33;;2062:38;2096:2;2085:9;2081:18;2062:38;:::i;:::-;2052:48;;1852:254;;;;;:::o;2111:248::-;2179:6;2187;2240:2;2228:9;2219:7;2215:23;2211:32;2208:52;;;2256:1;2253;2246:12;2208:52;-1:-1:-1;;2279:23:11;;;2349:2;2334:18;;;2321:32;;-1:-1:-1;2111:248:11:o;2364:274::-;2493:3;2531:6;2525:13;2547:53;2593:6;2588:3;2581:4;2573:6;2569:17;2547:53;:::i;:::-;2616:16;;;;;2364:274;-1:-1:-1;;2364:274:11:o;3231:555::-;-1:-1:-1;;;;;3554:15:11;;;3536:34;;3606:15;;;;3601:2;3586:18;;3579:43;3653:2;3638:18;;3631:34;;;;3701:3;3696:2;3681:18;;3674:31;;;3479:4;3721:19;;;3714:30;3516:3;3761:19;;3231:555::o;4277:383::-;4426:2;4415:9;4408:21;4389:4;4458:6;4452:13;4501:6;4496:2;4485:9;4481:18;4474:34;4517:66;4576:6;4571:2;4560:9;4556:18;4551:2;4543:6;4539:15;4517:66;:::i;:::-;4644:2;4623:15;-1:-1:-1;;4619:29:11;4604:45;;;;4651:2;4600:54;;4277:383;-1:-1:-1;;4277:383:11:o;8575:128::-;8615:3;8646:1;8642:6;8639:1;8636:13;8633:39;;;8652:18;;:::i;:::-;-1:-1:-1;8688:9:11;;8575:128::o;8708:217::-;8748:1;8774;8764:132;;8818:10;8813:3;8809:20;8806:1;8799:31;8853:4;8850:1;8843:15;8881:4;8878:1;8871:15;8764:132;-1:-1:-1;8910:9:11;;8708:217::o;8930:168::-;8970:7;9036:1;9032;9028:6;9024:14;9021:1;9018:21;9013:1;9006:9;8999:17;8995:45;8992:71;;;9043:18;;:::i;:::-;-1:-1:-1;9083:9:11;;8930:168::o;9103:125::-;9143:4;9171:1;9168;9165:8;9162:34;;;9176:18;;:::i;:::-;-1:-1:-1;9213:9:11;;9103:125::o;9233:258::-;9305:1;9315:113;9329:6;9326:1;9323:13;9315:113;;;9405:11;;;9399:18;9386:11;;;9379:39;9351:2;9344:10;9315:113;;;9446:6;9443:1;9440:13;9437:48;;;-1:-1:-1;;9481:1:11;9463:16;;9456:27;9233:258::o;9496:127::-;9557:10;9552:3;9548:20;9545:1;9538:31;9588:4;9585:1;9578:15;9612:4;9609:1;9602:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1058400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"AdminAddToken(uint256)": "infinite",
								"AdminWithDrawToken(uint256,address)": "infinite",
								"Deposit(uint256)": "infinite",
								"DepositNFT(uint256,uint256)": "infinite",
								"Details(address)": "6872",
								"ERC20Address()": "2404",
								"ERC721address()": "2426",
								"Reward(address)": "2542",
								"TotalToken()": "2385",
								"UpdateERC20(address)": "26803",
								"UpdateERC721(address)": "26823",
								"UpdateRatePersentage(uint256)": "24620",
								"UserRate(address)": "6850",
								"Utilization()": "infinite",
								"Withdraw()": "infinite",
								"calculateIntrest(address)": "infinite",
								"onERC721Received(address,address,uint256,bytes)": "infinite",
								"owner()": "2343",
								"renounceOwnership()": "infinite",
								"showReward(address)": "infinite",
								"transferOwnership(address)": "28443",
								"withdrawNFT(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "CODESIZE",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSHSIZE",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "tag",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1269,
									"end": 1470,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1363,
									"end": 1376,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "AND",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1363,
									"end": 1393,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1403,
									"end": 1407,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1403,
									"end": 1425,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1403,
									"end": 1425,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1403,
									"end": 1425,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1403,
									"end": 1425,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1447,
									"name": "PUSH",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1435,
									"end": 1463,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2496,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 93,
									"end": 106,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 93,
									"end": 106,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 135,
									"end": 166,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 135,
									"end": 166,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 125,
									"end": 167,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 125,
									"end": 167,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 115,
									"end": 185,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 181,
									"end": 182,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 178,
									"end": 179,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 171,
									"end": 183,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 115,
									"end": 185,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 115,
									"end": 185,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "tag",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 284,
									"end": 290,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 292,
									"end": 298,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 300,
									"end": 306,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 353,
									"end": 355,
									"name": "PUSH",
									"source": 11,
									"value": "60"
								},
								{
									"begin": 341,
									"end": 350,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 332,
									"end": 339,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 328,
									"end": 351,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 324,
									"end": 356,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 321,
									"end": 373,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 321,
									"end": 373,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 369,
									"end": 370,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 366,
									"end": 367,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 359,
									"end": 371,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 321,
									"end": 373,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 321,
									"end": 373,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 422,
									"end": 431,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 392,
									"end": 432,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 392,
									"end": 432,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 382,
									"end": 432,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 382,
									"end": 432,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 472,
									"end": 474,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 461,
									"end": 470,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 457,
									"end": 475,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 451,
									"end": 476,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 441,
									"end": 476,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 441,
									"end": 476,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 495,
									"end": 544,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 540,
									"end": 542,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 529,
									"end": 538,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 525,
									"end": 543,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 495,
									"end": 544,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 495,
									"end": 544,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 485,
									"end": 544,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 485,
									"end": 544,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "tag",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 196,
									"end": 550,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 348,
									"end": 8432,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207dbf72729eeb0e1460d5d38fc56dcbb2b306499ecd739c1c01a8c80fcfe7cc1864736f6c63430008070033",
									".code": [
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "C45AF5D8"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "C45AF5D8"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "E4458B30"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "E88CC2BE"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "EE0106D2"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "F2FDE38B"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "F89D832F"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "tag",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "934ED772"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "A6021ACE"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "B7171A2E"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "C0CD40EE"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "tag",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "57488064"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "57488064"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "57EA89B6"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "715018A6"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "7B2F247F"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "866E58AF"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "8B73E331"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "23245D7"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "150B7A02"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "275BD33F"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "3F601972"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "4D6CE1E5"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 348,
											"end": 8432,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "tag",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "tag",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "tag",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4232,
											"end": 4265,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4232,
											"end": 4265,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4232,
											"end": 4265,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4214,
											"end": 4266,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4214,
											"end": 4266,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4202,
											"end": 4204,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4187,
											"end": 4205,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8259,
											"end": 8430,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 503,
											"end": 525,
											"name": "tag",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 503,
											"end": 525,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 503,
											"end": 525,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 503,
											"end": 525,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 503,
											"end": 525,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 503,
											"end": 525,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 503,
											"end": 525,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 503,
											"end": 525,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 503,
											"end": 525,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 503,
											"end": 525,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 503,
											"end": 525,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8205,
											"end": 8230,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8205,
											"end": 8230,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8205,
											"end": 8230,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8193,
											"end": 8195,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8178,
											"end": 8196,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 503,
											"end": 525,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 8059,
											"end": 8236,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "tag",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 796,
											"end": 835,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 796,
											"end": 835,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2807,
											"end": 2839,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2807,
											"end": 2839,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2807,
											"end": 2839,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2789,
											"end": 2840,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2789,
											"end": 2840,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2777,
											"end": 2779,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2762,
											"end": 2780,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2643,
											"end": 2846,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 470,
											"end": 497,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 470,
											"end": 497,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 470,
											"end": 497,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 470,
											"end": 497,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 470,
											"end": 497,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 470,
											"end": 497,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 470,
											"end": 497,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 470,
											"end": 497,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 470,
											"end": 497,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 436,
											"end": 464,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 436,
											"end": 464,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 436,
											"end": 464,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "tag",
											"source": 10,
											"value": "83"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "tag",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "tag",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 841,
											"end": 888,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 841,
											"end": 888,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8437,
											"end": 8462,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 8437,
											"end": 8462,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8437,
											"end": 8462,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8493,
											"end": 8495,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8478,
											"end": 8496,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8478,
											"end": 8496,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8505,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8505,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8505,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8471,
											"end": 8505,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8548,
											"end": 8562,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8541,
											"end": 8563,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8521,
											"end": 8539,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8521,
											"end": 8539,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8521,
											"end": 8539,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8514,
											"end": 8564,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8425,
											"end": 8427,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 8410,
											"end": 8428,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 841,
											"end": 888,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 8241,
											"end": 8570,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 748,
											"end": 790,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 748,
											"end": 790,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 748,
											"end": 790,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "tag",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8078,
											"end": 8088,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8077,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8089,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8095,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 8069,
											"end": 8095,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8095,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8069,
											"end": 8095,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 8069,
											"end": 8095,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6377,
											"end": 6379,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6359,
											"end": 6380,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6416,
											"end": 6418,
											"name": "PUSH",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 6396,
											"end": 6414,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6396,
											"end": 6414,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6396,
											"end": 6414,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6389,
											"end": 6419,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6455,
											"end": 6480,
											"name": "PUSH",
											"source": 11,
											"value": "506C65617365204669727374205374616B65204E465473000000000000000000"
										},
										{
											"begin": 6435,
											"end": 6453,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 6435,
											"end": 6453,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6435,
											"end": 6453,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6428,
											"end": 6481,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6498,
											"end": 6516,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6498,
											"end": 6516,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "tag",
											"source": 10,
											"value": "108"
										},
										{
											"begin": 8061,
											"end": 8122,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8140,
											"end": 8153,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8140,
											"end": 8153,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8140,
											"end": 8153,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8140,
											"end": 8153,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8140,
											"end": 8153,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8140,
											"end": 8153,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8171,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 8132,
											"end": 8171,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8180,
											"end": 8184,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 8180,
											"end": 8184,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8187,
											"end": 8197,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8187,
											"end": 8197,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8206,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8198,
											"end": 8206,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "tag",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 8132,
											"end": 8210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8236,
											"end": 8246,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8235,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8227,
											"end": 8247,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8220,
											"end": 8247,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8005,
											"end": 8254,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "tag",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6860,
											"end": 6872,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6860,
											"end": 6888,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6788,
											"end": 6895,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "tag",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2936,
											"end": 2946,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2935,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2947,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2953,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2928,
											"end": 2953,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2953,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2928,
											"end": 2953,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 2928,
											"end": 2953,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2924,
											"end": 3476,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 2924,
											"end": 3476,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2982,
											"end": 2989,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2978,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2968,
											"end": 2978,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2989,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3040,
											"end": 3055,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3056,
											"end": 3060,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3011,
											"end": 3021,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3010,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3022,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3003,
											"end": 3061,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3082,
											"end": 3094,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3075,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3075,
											"end": 3149,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3082,
											"end": 3094,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3082,
											"end": 3094,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3082,
											"end": 3094,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3082,
											"end": 3094,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3133,
											"end": 3137,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3025,
											"end": 3061,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3075,
											"end": 3112,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 3075,
											"end": 3149,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3075,
											"end": 3149,
											"name": "tag",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3075,
											"end": 3149,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2873,
											"end": 3482,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2924,
											"end": 3476,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 2924,
											"end": 3476,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3201,
											"end": 3208,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3197,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 3187,
											"end": 3197,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "tag",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3187,
											"end": 3208,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3245,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 3245,
											"end": 3273,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3262,
											"end": 3272,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3245,
											"end": 3261,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 3245,
											"end": 3273,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3245,
											"end": 3273,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 3245,
											"end": 3273,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3229,
											"end": 3239,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3228,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3240,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3222,
											"end": 3273,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3324,
											"end": 3334,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3323,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3335,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3345,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3355,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 3316,
											"end": 3355,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3348,
											"end": 3355,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3348,
											"end": 3355,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3316,
											"end": 3355,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 3316,
											"end": 3355,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3316,
											"end": 3355,
											"name": "tag",
											"source": 10,
											"value": "131"
										},
										{
											"begin": 3316,
											"end": 3355,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3356,
											"end": 3371,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3372,
											"end": 3376,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3309,
											"end": 3377,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3295,
											"end": 3305,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3294,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3306,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3287,
											"end": 3377,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3410,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3391,
											"end": 3465,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 3391,
											"end": 3465,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3398,
											"end": 3410,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3410,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3410,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3398,
											"end": 3410,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3449,
											"end": 3453,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3457,
											"end": 3464,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3391,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 3391,
											"end": 3465,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3730,
											"end": 3740,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3729,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3741,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3747,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3722,
											"end": 3747,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3747,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3722,
											"end": 3747,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3722,
											"end": 3747,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5623,
											"end": 5625,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5605,
											"end": 5626,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5662,
											"end": 5664,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 5642,
											"end": 5660,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5642,
											"end": 5660,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5642,
											"end": 5660,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5635,
											"end": 5665,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "506C65617365204669727374205374616B65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5681,
											"end": 5699,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5674,
											"end": 5722,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 5421,
											"end": 5763,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 3714,
											"end": 3769,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3792,
											"end": 3802,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3791,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3803,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3809,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3783,
											"end": 3809,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3809,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3783,
											"end": 3809,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3783,
											"end": 3809,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3846,
											"end": 3856,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3824,
											"end": 3835,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3845,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3857,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3867,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3838,
											"end": 3867,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3895,
											"end": 3923,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 3895,
											"end": 3923,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3895,
											"end": 3911,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 3895,
											"end": 3923,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3895,
											"end": 3923,
											"name": "tag",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 3895,
											"end": 3923,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3992,
											"end": 4002,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4011,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4023,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4031,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4031,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4031,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4031,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3881,
											"end": 3923,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 3881,
											"end": 3923,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3945,
											"end": 3958,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 3976,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 3937,
											"end": 3976,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3985,
											"end": 3989,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3985,
											"end": 3989,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3992,
											"end": 4002,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3992,
											"end": 4002,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4003,
											"end": 4031,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "tag",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "tag",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 3937,
											"end": 4035,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4079,
											"end": 4089,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4109,
											"end": 4115,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4109,
											"end": 4127,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4056,
											"end": 4068,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4049,
											"end": 4078,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 4049,
											"end": 4078,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4079,
											"end": 4089,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 4100,
											"end": 4106,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4097,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4106,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 4091,
											"end": 4106,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4091,
											"end": 4106,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 4091,
											"end": 4106,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 4091,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3965,
											"end": 4016,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 4049,
											"end": 4128,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4158,
											"end": 4168,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4157,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4149,
											"end": 4169,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4142,
											"end": 4169,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4190,
											"end": 4196,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4190,
											"end": 4208,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4183,
											"end": 4208,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4183,
											"end": 4208,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4183,
											"end": 4208,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4236,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4229,
											"end": 4248,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4248,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4248,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4248,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4248,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4229,
											"end": 4248,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4222,
											"end": 4248,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "tag",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4308,
											"end": 4318,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4286,
											"end": 4297,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4307,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4319,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4329,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4300,
											"end": 4329,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4357,
											"end": 4385,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 4357,
											"end": 4385,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4357,
											"end": 4373,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 4357,
											"end": 4385,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4357,
											"end": 4385,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 4357,
											"end": 4385,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4429,
											"end": 4439,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4465,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4459,
											"end": 4477,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4343,
											"end": 4385,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4343,
											"end": 4385,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4406,
											"end": 4418,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4428,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 4399,
											"end": 4428,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4429,
											"end": 4439,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4441,
											"end": 4456,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 4343,
											"end": 4385,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4441,
											"end": 4447,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4441,
											"end": 4456,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 4441,
											"end": 4456,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4441,
											"end": 4456,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 4441,
											"end": 4456,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "tag",
											"source": 10,
											"value": "155"
										},
										{
											"begin": 4441,
											"end": 4477,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3965,
											"end": 4016,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "tag",
											"source": 10,
											"value": "157"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 4399,
											"end": 4478,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4506,
											"end": 4516,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4505,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4499,
											"end": 4517,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4492,
											"end": 4517,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4492,
											"end": 4517,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4492,
											"end": 4517,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4538,
											"end": 4545,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4538,
											"end": 4557,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4538,
											"end": 4557,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4538,
											"end": 4557,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4538,
											"end": 4557,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4538,
											"end": 4557,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4531,
											"end": 4557,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 3779,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3677,
											"end": 4578,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "tag",
											"source": 10,
											"value": "58"
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2536,
											"end": 2546,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 2536,
											"end": 2546,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2522,
											"end": 2526,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2789,
											"end": 2840,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2445,
											"end": 2452,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2445,
											"end": 2452,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2452,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2445,
											"end": 2452,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2536,
											"end": 2546,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2536,
											"end": 2546,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2490,
											"end": 2502,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2513,
											"name": "PUSH",
											"source": 10,
											"value": "70A08231"
										},
										{
											"begin": 2483,
											"end": 2513,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2762,
											"end": 2780,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 2762,
											"end": 2780,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "tag",
											"source": 10,
											"value": "168"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "STATICCALL",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "tag",
											"source": 10,
											"value": "170"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "172"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 2483,
											"end": 2528,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2483,
											"end": 2534,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 2483,
											"end": 2534,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2531,
											"end": 2534,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 2483,
											"end": 2534,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 2483,
											"end": 2534,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2483,
											"end": 2534,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 2483,
											"end": 2534,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 2482,
											"end": 2546,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2464,
											"end": 2546,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2402,
											"end": 2580,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2148,
											"end": 2160,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 2148,
											"end": 2160,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2141,
											"end": 2187,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 2141,
											"end": 2187,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2148,
											"end": 2160,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2175,
											"end": 2178,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2180,
											"end": 2186,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2141,
											"end": 2174,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 2141,
											"end": 2187,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2141,
											"end": 2187,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 2141,
											"end": 2187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2062,
											"end": 2194,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5817,
											"end": 5824,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5847,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5852,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5858,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5839,
											"end": 5858,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5858,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5839,
											"end": 5858,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 5839,
											"end": 5858,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5882,
											"end": 5896,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5978,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5983,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5993,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5971,
											"end": 5993,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5971,
											"end": 5993,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5995,
											"end": 5997,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 5995,
											"end": 5997,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5953,
											"end": 5993,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 5953,
											"end": 5993,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5953,
											"end": 5968,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 5953,
											"end": 5993,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 5953,
											"end": 5993,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5953,
											"end": 5993,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 5953,
											"end": 5993,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 5952,
											"end": 5997,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5933,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5938,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5947,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5907,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5900,
											"end": 5912,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5912,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5912,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5912,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5912,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5912,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5922,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5947,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 5900,
											"end": 5947,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5925,
											"end": 5947,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5900,
											"end": 5947,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 5900,
											"end": 5947,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5900,
											"end": 5947,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 5900,
											"end": 5947,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 5899,
											"end": 5998,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5882,
											"end": 5998,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6012,
											"end": 6028,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6031,
											"end": 6046,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 6043,
											"end": 6046,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5882,
											"end": 5998,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6031,
											"end": 6046,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 6031,
											"end": 6046,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6031,
											"end": 6046,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 6031,
											"end": 6046,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6012,
											"end": 6046,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "tag",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6125,
											"end": 6139,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6203,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6208,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6218,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6196,
											"end": 6218,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6196,
											"end": 6218,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6220,
											"end": 6222,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 6220,
											"end": 6222,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6178,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 6178,
											"end": 6218,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6178,
											"end": 6193,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 6178,
											"end": 6218,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 6178,
											"end": 6218,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6178,
											"end": 6218,
											"name": "tag",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 6178,
											"end": 6218,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "tag",
											"source": 10,
											"value": "192"
										},
										{
											"begin": 6177,
											"end": 6222,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6172,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6168,
											"end": 6172,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6150,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6155,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6165,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6172,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 6143,
											"end": 6172,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6168,
											"end": 6172,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6143,
											"end": 6172,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 6143,
											"end": 6172,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "tag",
											"source": 10,
											"value": "190"
										},
										{
											"begin": 5835,
											"end": 6314,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5758,
											"end": 6320,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "tag",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7512,
											"end": 7522,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7511,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7523,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7529,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7504,
											"end": 7529,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7529,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7504,
											"end": 7529,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7504,
											"end": 7529,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5274,
											"end": 5276,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5256,
											"end": 5277,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5313,
											"end": 5315,
											"name": "PUSH",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5286,
											"end": 5316,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4669727374204465706F73697420546F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5332,
											"end": 5350,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 5332,
											"end": 5350,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5332,
											"end": 5350,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5325,
											"end": 5375,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5392,
											"end": 5410,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 5392,
											"end": 5410,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 5072,
											"end": 5416,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "tag",
											"source": 10,
											"value": "198"
										},
										{
											"begin": 7496,
											"end": 7553,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7591,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7580,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7592,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7598,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7572,
											"end": 7598,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7598,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7572,
											"end": 7598,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 7572,
											"end": 7598,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7571,
											"end": 7598,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7859,
											"end": 7861,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7841,
											"end": 7862,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7898,
											"end": 7900,
											"name": "PUSH",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 7878,
											"end": 7896,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7878,
											"end": 7896,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7878,
											"end": 7896,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7871,
											"end": 7901,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7937,
											"end": 7971,
											"name": "PUSH",
											"source": 11,
											"value": "506C6561736520556E7374616B6520796F7572206465706F7369746564204E46"
										},
										{
											"begin": 7917,
											"end": 7935,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7917,
											"end": 7935,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7917,
											"end": 7935,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7910,
											"end": 7972,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "15"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7988,
											"end": 8006,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7988,
											"end": 8006,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7988,
											"end": 8006,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7981,
											"end": 8012,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8029,
											"end": 8048,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 8029,
											"end": 8048,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 7657,
											"end": 8054,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 7563,
											"end": 7635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7693,
											"end": 7697,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7654,
											"end": 7664,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7653,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7665,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7645,
											"end": 7698,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7717,
											"end": 7730,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7717,
											"end": 7730,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5C46A7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7717,
											"end": 7730,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7717,
											"end": 7730,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7717,
											"end": 7730,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7717,
											"end": 7730,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7748,
											"name": "PUSH",
											"source": 10,
											"value": "B88D4FDE"
										},
										{
											"begin": 7709,
											"end": 7748,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7768,
											"end": 7772,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 7768,
											"end": 7772,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7668,
											"end": 7698,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "tag",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "tag",
											"source": 10,
											"value": "205"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "tag",
											"source": 10,
											"value": "207"
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7709,
											"end": 7786,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7430,
											"end": 7793,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 1696,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "209"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1773,
											"end": 1780,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1769,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1759,
											"end": 1769,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "tag",
											"source": 10,
											"value": "211"
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1759,
											"end": 1780,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1797,
											"end": 1809,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1797,
											"end": 1809,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1790,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 1790,
											"end": 1863,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1797,
											"end": 1809,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1828,
											"end": 1838,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1848,
											"end": 1852,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1790,
											"end": 1827,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "126"
										},
										{
											"begin": 1790,
											"end": 1863,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 4771,
											"end": 5494,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4824,
											"end": 4835,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4863,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4874,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4855,
											"end": 4874,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4874,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4855,
											"end": 4874,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 4855,
											"end": 4874,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4851,
											"end": 5479,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4851,
											"end": 5479,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 4851,
											"end": 5479,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4898,
											"end": 4912,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 4994,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 4999,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 5009,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4987,
											"end": 5009,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4987,
											"end": 5009,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5011,
											"end": 5013,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 5011,
											"end": 5013,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4969,
											"end": 5009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 4969,
											"end": 5009,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4969,
											"end": 4984,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 4969,
											"end": 5009,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 4969,
											"end": 5009,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4969,
											"end": 5009,
											"name": "tag",
											"source": 10,
											"value": "215"
										},
										{
											"begin": 4969,
											"end": 5009,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 4968,
											"end": 5013,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4949,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4954,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4963,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4923,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4916,
											"end": 4928,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4928,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4928,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4928,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4928,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4928,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4938,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 4916,
											"end": 4963,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4941,
											"end": 4963,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4916,
											"end": 4963,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 4916,
											"end": 4963,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4916,
											"end": 4963,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 4916,
											"end": 4963,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "tag",
											"source": 10,
											"value": "218"
										},
										{
											"begin": 4915,
											"end": 5014,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4898,
											"end": 5014,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5028,
											"end": 5044,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5047,
											"end": 5062,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 5059,
											"end": 5062,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4898,
											"end": 5014,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5047,
											"end": 5062,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5047,
											"end": 5062,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5047,
											"end": 5062,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 5047,
											"end": 5062,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5106,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5111,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5099,
											"end": 5121,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5028,
											"end": 5062,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5028,
											"end": 5062,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5085,
											"end": 5121,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 5085,
											"end": 5121,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5028,
											"end": 5062,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5085,
											"end": 5121,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 5085,
											"end": 5121,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5085,
											"end": 5121,
											"name": "tag",
											"source": 10,
											"value": "220"
										},
										{
											"begin": 5085,
											"end": 5121,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5076,
											"end": 5121,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5142,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 5149,
											"end": 5168,
											"name": "PUSH",
											"source": 10,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 5076,
											"end": 5121,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5142,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5142,
											"end": 5168,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4851,
											"end": 5479,
											"name": "tag",
											"source": 10,
											"value": "214"
										},
										{
											"begin": 4851,
											"end": 5479,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5216,
											"end": 5230,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5294,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5299,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5309,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5287,
											"end": 5309,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5287,
											"end": 5309,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5311,
											"end": 5313,
											"name": "PUSH",
											"source": 10,
											"value": "3C"
										},
										{
											"begin": 5311,
											"end": 5313,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5269,
											"end": 5309,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 5269,
											"end": 5309,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5269,
											"end": 5284,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 5269,
											"end": 5309,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 5269,
											"end": 5309,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5269,
											"end": 5309,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 5269,
											"end": 5309,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "176"
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 5268,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5259,
											"end": 5263,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5259,
											"end": 5263,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5241,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5246,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5256,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 5234,
											"end": 5263,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5259,
											"end": 5263,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5234,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 5234,
											"end": 5263,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6574,
											"end": 6587,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6574,
											"end": 6604,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6502,
											"end": 6611,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4867,
											"end": 4869,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4849,
											"end": 4870,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4906,
											"end": 4908,
											"name": "PUSH",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4886,
											"end": 4904,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4879,
											"end": 4909,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4945,
											"end": 4979,
											"name": "PUSH",
											"source": 11,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4925,
											"end": 4943,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4925,
											"end": 4943,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4925,
											"end": 4943,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4980,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4996,
											"end": 5014,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4989,
											"end": 5025,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5042,
											"end": 5061,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 5042,
											"end": 5061,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 4665,
											"end": 5067,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7158,
											"end": 7162,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7158,
											"end": 7180,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 7077,
											"end": 7187,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "152"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6729,
											"end": 6731,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6711,
											"end": 6732,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6711,
											"end": 6732,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6711,
											"end": 6732,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6748,
											"end": 6766,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6748,
											"end": 6766,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6748,
											"end": 6766,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6741,
											"end": 6771,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6807,
											"end": 6841,
											"name": "PUSH",
											"source": 11,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 6787,
											"end": 6805,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 6787,
											"end": 6805,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6787,
											"end": 6805,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6780,
											"end": 6842,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6859,
											"end": 6877,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 6859,
											"end": 6877,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 6527,
											"end": 6883,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "tag",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3109,
											"end": 3124,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3109,
											"end": 3124,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3109,
											"end": 3124,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3091,
											"end": 3125,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3161,
											"end": 3176,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3161,
											"end": 3176,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3141,
											"end": 3159,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3141,
											"end": 3159,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3141,
											"end": 3159,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3134,
											"end": 3177,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3211,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 3193,
											"end": 3211,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3193,
											"end": 3211,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3186,
											"end": 3220,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3186,
											"end": 3220,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3186,
											"end": 3220,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "251"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1132,
											"end": 1137,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1162,
											"end": 1189,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 3026,
											"end": 3044,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "tag",
											"source": 3,
											"value": "252"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1207,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1112,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "tag",
											"source": 3,
											"value": "251"
										},
										{
											"begin": 1112,
											"end": 1208,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 974,
											"end": 1215,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2496,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3983,
											"end": 4015,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 902,
											"end": 960,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 902,
											"end": 960,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3965,
											"end": 4016,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4032,
											"end": 4050,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4025,
											"end": 4059,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 875,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "257"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 895,
											"end": 900,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 895,
											"end": 900,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 925,
											"end": 948,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 3938,
											"end": 3956,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 902,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "252"
										},
										{
											"begin": 3791,
											"end": 4065,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 875,
											"end": 961,
											"name": "tag",
											"source": 3,
											"value": "257"
										},
										{
											"begin": 875,
											"end": 961,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 763,
											"end": 968,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "tag",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 3747,
											"end": 4453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4189,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "261"
										},
										{
											"begin": 4220,
											"end": 4224,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4200,
											"end": 4205,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "262"
										},
										{
											"begin": 4192,
											"end": 4219,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "tag",
											"source": 3,
											"value": "261"
										},
										{
											"begin": 4192,
											"end": 4261,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4275,
											"end": 4292,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4166,
											"end": 4261,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4275,
											"end": 4296,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "257"
										},
										{
											"begin": 4271,
											"end": 4447,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4380,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "264"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "151"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "tag",
											"source": 3,
											"value": "264"
										},
										{
											"begin": 4359,
											"end": 4389,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "257"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7448,
											"end": 7450,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7430,
											"end": 7451,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7487,
											"end": 7489,
											"name": "PUSH",
											"source": 11,
											"value": "2A"
										},
										{
											"begin": 7467,
											"end": 7485,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7467,
											"end": 7485,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7467,
											"end": 7485,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7460,
											"end": 7490,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7526,
											"end": 7560,
											"name": "PUSH",
											"source": 11,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 7506,
											"end": 7524,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7506,
											"end": 7524,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7506,
											"end": 7524,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7499,
											"end": 7561,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7577,
											"end": 7595,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7577,
											"end": 7595,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7577,
											"end": 7595,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7570,
											"end": 7610,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7627,
											"end": 7646,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 7627,
											"end": 7646,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4351,
											"end": 4436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 7246,
											"end": 7652,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "tag",
											"source": 7,
											"value": "262"
										},
										{
											"begin": 3873,
											"end": 4096,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4037,
											"end": 4089,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 4059,
											"end": 4065,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4067,
											"end": 4071,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4076,
											"end": 4088,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4006,
											"end": 4018,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5241,
											"end": 5253,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5278,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5288,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5282,
											"end": 5293,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5301,
											"end": 5306,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5308,
											"end": 5312,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "3F"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "tag",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5282,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5240,
											"end": 5313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 5357,
											"end": 5363,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5365,
											"end": 5372,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5374,
											"end": 5384,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5386,
											"end": 5398,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5330,
											"end": 5356,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "tag",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 5330,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5323,
											"end": 5399,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4960,
											"end": 5406,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "tag",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 7466,
											"end": 8094,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7646,
											"end": 7658,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 7674,
											"end": 7681,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7701,
											"end": 7718,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 7697,
											"end": 7983,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7090,
											"end": 7092,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7072,
											"end": 7093,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7129,
											"end": 7131,
											"name": "PUSH",
											"source": 11,
											"value": "1D"
										},
										{
											"begin": 7109,
											"end": 7127,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7109,
											"end": 7127,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7109,
											"end": 7127,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7102,
											"end": 7132,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7168,
											"end": 7199,
											"name": "PUSH",
											"source": 11,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 7148,
											"end": 7166,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7148,
											"end": 7166,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7148,
											"end": 7166,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7141,
											"end": 7200,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7217,
											"end": 7235,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7217,
											"end": 7235,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 6888,
											"end": 7241,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "tag",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 7908,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8003,
											"end": 8013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 7996,
											"end": 8013,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "tag",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 7670,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8044,
											"end": 8077,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8064,
											"end": 8076,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8775,
											"end": 8792,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8775,
											"end": 8796,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 9003,
											"end": 9013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8997,
											"end": 9014,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9059,
											"end": 9074,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9046,
											"end": 9056,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9042,
											"end": 9044,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9038,
											"end": 9057,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9031,
											"end": 9075,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "tag",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 8771,
											"end": 9150,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9126,
											"end": 9138,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 9119,
											"end": 9139,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "304"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 11,
											"value": "304"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "tag",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 343,
											"end": 372,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 333,
											"end": 372,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 192,
											"end": 378,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "tag",
											"source": 11,
											"value": "34"
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 480,
											"end": 486,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 488,
											"end": 494,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 496,
											"end": 502,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 504,
											"end": 510,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 512,
											"end": 518,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 565,
											"end": 568,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 553,
											"end": 562,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 544,
											"end": 551,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 540,
											"end": 563,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 536,
											"end": 569,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 533,
											"end": 586,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 533,
											"end": 586,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 533,
											"end": 586,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 582,
											"end": 583,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 579,
											"end": 580,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 572,
											"end": 584,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 533,
											"end": 586,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 533,
											"end": 586,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 605,
											"end": 634,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 624,
											"end": 633,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 605,
											"end": 634,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 605,
											"end": 634,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 605,
											"end": 634,
											"name": "tag",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 605,
											"end": 634,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 595,
											"end": 634,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 595,
											"end": 634,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 653,
											"end": 691,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 687,
											"end": 689,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 676,
											"end": 685,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 672,
											"end": 690,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 653,
											"end": 691,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 653,
											"end": 691,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 653,
											"end": 691,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 653,
											"end": 691,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 643,
											"end": 691,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 643,
											"end": 691,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 738,
											"end": 740,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 727,
											"end": 736,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 723,
											"end": 741,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 710,
											"end": 742,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 700,
											"end": 742,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 700,
											"end": 742,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 793,
											"end": 795,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 782,
											"end": 791,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 778,
											"end": 796,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 765,
											"end": 797,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 816,
											"end": 834,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 857,
											"end": 859,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 846,
											"end": 860,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 843,
											"end": 877,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 843,
											"end": 877,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 843,
											"end": 877,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 873,
											"end": 874,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 871,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 863,
											"end": 875,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 843,
											"end": 877,
											"name": "tag",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 843,
											"end": 877,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 911,
											"end": 917,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 900,
											"end": 909,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 896,
											"end": 918,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 886,
											"end": 918,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 886,
											"end": 918,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 956,
											"end": 963,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 949,
											"end": 953,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 941,
											"end": 954,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 937,
											"end": 964,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 927,
											"end": 982,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 927,
											"end": 982,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 978,
											"end": 979,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 975,
											"end": 976,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 968,
											"end": 980,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 927,
											"end": 982,
											"name": "tag",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 927,
											"end": 982,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1018,
											"end": 1020,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1005,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1044,
											"end": 1046,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1036,
											"end": 1042,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1033,
											"end": 1047,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1030,
											"end": 1064,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1030,
											"end": 1064,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 1030,
											"end": 1064,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1060,
											"end": 1061,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1057,
											"end": 1058,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1050,
											"end": 1062,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1030,
											"end": 1064,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 1030,
											"end": 1064,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1105,
											"end": 1112,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 1100,
											"end": 1102,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1091,
											"end": 1097,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1087,
											"end": 1089,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1083,
											"end": 1098,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1079,
											"end": 1103,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1076,
											"end": 1113,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1073,
											"end": 1130,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1073,
											"end": 1130,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 1073,
											"end": 1130,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1126,
											"end": 1127,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1123,
											"end": 1124,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1116,
											"end": 1128,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1073,
											"end": 1130,
											"name": "tag",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 1073,
											"end": 1130,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP10",
											"source": 11
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP9",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1157,
											"end": 1159,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1149,
											"end": 1160,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1149,
											"end": 1160,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 1179,
											"end": 1185,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 383,
											"end": 1191,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1196,
											"end": 1473,
											"name": "tag",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 1196,
											"end": 1473,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1263,
											"end": 1269,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1316,
											"end": 1318,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1304,
											"end": 1313,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1295,
											"end": 1302,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1291,
											"end": 1314,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1287,
											"end": 1319,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1284,
											"end": 1336,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1284,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 1284,
											"end": 1336,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1332,
											"end": 1333,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1329,
											"end": 1330,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1322,
											"end": 1334,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1284,
											"end": 1336,
											"name": "tag",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 1284,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1364,
											"end": 1373,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1358,
											"end": 1374,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1417,
											"end": 1422,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1410,
											"end": 1423,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1403,
											"end": 1424,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1396,
											"end": 1401,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1393,
											"end": 1425,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1383,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 1383,
											"end": 1443,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1439,
											"end": 1440,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1436,
											"end": 1437,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1478,
											"end": 1658,
											"name": "tag",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 1478,
											"end": 1658,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1537,
											"end": 1543,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1590,
											"end": 1592,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1578,
											"end": 1587,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1576,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1565,
											"end": 1588,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1561,
											"end": 1593,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1558,
											"end": 1610,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1558,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 1558,
											"end": 1610,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1606,
											"end": 1607,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1603,
											"end": 1604,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1596,
											"end": 1608,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1558,
											"end": 1610,
											"name": "tag",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 1558,
											"end": 1610,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1629,
											"end": 1652,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1629,
											"end": 1652,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1478,
											"end": 1658,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1478,
											"end": 1658,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1663,
											"end": 1847,
											"name": "tag",
											"source": 11,
											"value": "172"
										},
										{
											"begin": 1663,
											"end": 1847,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1733,
											"end": 1739,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 1788,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1774,
											"end": 1783,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1765,
											"end": 1772,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1761,
											"end": 1784,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1754,
											"end": 1806,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1754,
											"end": 1806,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 1754,
											"end": 1806,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1802,
											"end": 1803,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1799,
											"end": 1800,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1792,
											"end": 1804,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1754,
											"end": 1806,
											"name": "tag",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 1754,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1825,
											"end": 1841,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1825,
											"end": 1841,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1663,
											"end": 1847,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1663,
											"end": 1847,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "tag",
											"source": 11,
											"value": "62"
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1920,
											"end": 1926,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1928,
											"end": 1934,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1981,
											"end": 1983,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1978,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1960,
											"end": 1967,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1956,
											"end": 1979,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1952,
											"end": 1984,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1949,
											"end": 2001,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1949,
											"end": 2001,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 1949,
											"end": 2001,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1997,
											"end": 1998,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1994,
											"end": 1995,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1987,
											"end": 1999,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1949,
											"end": 2001,
											"name": "tag",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 1949,
											"end": 2001,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2033,
											"end": 2042,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2020,
											"end": 2043,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2010,
											"end": 2043,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2010,
											"end": 2043,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2062,
											"end": 2100,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 2096,
											"end": 2098,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2085,
											"end": 2094,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2062,
											"end": 2100,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 2062,
											"end": 2100,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2062,
											"end": 2100,
											"name": "tag",
											"source": 11,
											"value": "323"
										},
										{
											"begin": 2062,
											"end": 2100,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2052,
											"end": 2100,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2052,
											"end": 2100,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1852,
											"end": 2106,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2111,
											"end": 2359,
											"name": "tag",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 2111,
											"end": 2359,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2179,
											"end": 2185,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2193,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2240,
											"end": 2242,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2228,
											"end": 2237,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2219,
											"end": 2226,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2215,
											"end": 2238,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2211,
											"end": 2243,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2208,
											"end": 2260,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2208,
											"end": 2260,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 2208,
											"end": 2260,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2256,
											"end": 2257,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2253,
											"end": 2254,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2246,
											"end": 2258,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2208,
											"end": 2260,
											"name": "tag",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 2208,
											"end": 2260,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2279,
											"end": 2302,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2279,
											"end": 2302,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2279,
											"end": 2302,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2349,
											"end": 2351,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2334,
											"end": 2352,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2334,
											"end": 2352,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2334,
											"end": 2352,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2353,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2353,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2111,
											"end": 2359,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2364,
											"end": 2638,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 2364,
											"end": 2638,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2493,
											"end": 2496,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2531,
											"end": 2537,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2538,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2547,
											"end": 2600,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 2593,
											"end": 2599,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2588,
											"end": 2591,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 2581,
											"end": 2585,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2573,
											"end": 2579,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 2569,
											"end": 2586,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2547,
											"end": 2600,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 2547,
											"end": 2600,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2547,
											"end": 2600,
											"name": "tag",
											"source": 11,
											"value": "327"
										},
										{
											"begin": 2547,
											"end": 2600,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2364,
											"end": 2638,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2364,
											"end": 2638,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3231,
											"end": 3786,
											"name": "tag",
											"source": 11,
											"value": "112"
										},
										{
											"begin": 3231,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3554,
											"end": 3569,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3569,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3554,
											"end": 3569,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3536,
											"end": 3570,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3536,
											"end": 3570,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3621,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3621,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3621,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3606,
											"end": 3621,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3601,
											"end": 3603,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3586,
											"end": 3604,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3586,
											"end": 3604,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3579,
											"end": 3622,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3653,
											"end": 3655,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3665,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3665,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3665,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3665,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3701,
											"end": 3704,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 3696,
											"end": 3698,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3681,
											"end": 3699,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3681,
											"end": 3699,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3674,
											"end": 3705,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3674,
											"end": 3705,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3674,
											"end": 3705,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3479,
											"end": 3483,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3721,
											"end": 3740,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3721,
											"end": 3740,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3721,
											"end": 3740,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3714,
											"end": 3744,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3516,
											"end": 3519,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 3761,
											"end": 3780,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3761,
											"end": 3780,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3231,
											"end": 3786,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 4277,
											"end": 4660,
											"name": "tag",
											"source": 11,
											"value": "298"
										},
										{
											"begin": 4277,
											"end": 4660,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4426,
											"end": 4428,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4415,
											"end": 4424,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4429,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4389,
											"end": 4393,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4458,
											"end": 4464,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4452,
											"end": 4465,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 4501,
											"end": 4507,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4496,
											"end": 4498,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4485,
											"end": 4494,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4481,
											"end": 4499,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4474,
											"end": 4508,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4517,
											"end": 4583,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 4576,
											"end": 4582,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4571,
											"end": 4573,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4560,
											"end": 4569,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4556,
											"end": 4574,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4551,
											"end": 4553,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4543,
											"end": 4549,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4539,
											"end": 4554,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4517,
											"end": 4583,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 4517,
											"end": 4583,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 4517,
											"end": 4583,
											"name": "tag",
											"source": 11,
											"value": "335"
										},
										{
											"begin": 4517,
											"end": 4583,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 4623,
											"end": 4638,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4619,
											"end": 4648,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4604,
											"end": 4649,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4604,
											"end": 4649,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4604,
											"end": 4649,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4604,
											"end": 4649,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4651,
											"end": 4653,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4600,
											"end": 4654,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4600,
											"end": 4654,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4277,
											"end": 4660,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4277,
											"end": 4660,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8575,
											"end": 8703,
											"name": "tag",
											"source": 11,
											"value": "124"
										},
										{
											"begin": 8575,
											"end": 8703,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8615,
											"end": 8618,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8646,
											"end": 8647,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8642,
											"end": 8648,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 8639,
											"end": 8640,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8636,
											"end": 8649,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8633,
											"end": 8672,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8633,
											"end": 8672,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 8633,
											"end": 8672,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8652,
											"end": 8670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 8652,
											"end": 8670,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "350"
										},
										{
											"begin": 8652,
											"end": 8670,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 8652,
											"end": 8670,
											"name": "tag",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 8652,
											"end": 8670,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8688,
											"end": 8697,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8688,
											"end": 8697,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8575,
											"end": 8703,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8708,
											"end": 8925,
											"name": "tag",
											"source": 11,
											"value": "176"
										},
										{
											"begin": 8708,
											"end": 8925,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8748,
											"end": 8749,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8774,
											"end": 8775,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8764,
											"end": 8896,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "352"
										},
										{
											"begin": 8764,
											"end": 8896,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8818,
											"end": 8828,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 8813,
											"end": 8816,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 8809,
											"end": 8829,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 8806,
											"end": 8807,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8799,
											"end": 8830,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8853,
											"end": 8857,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 8850,
											"end": 8851,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 8843,
											"end": 8858,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8881,
											"end": 8885,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 8878,
											"end": 8879,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8871,
											"end": 8886,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 8764,
											"end": 8896,
											"name": "tag",
											"source": 11,
											"value": "352"
										},
										{
											"begin": 8764,
											"end": 8896,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8910,
											"end": 8919,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 8910,
											"end": 8919,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8708,
											"end": 8925,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 8930,
											"end": 9098,
											"name": "tag",
											"source": 11,
											"value": "174"
										},
										{
											"begin": 8930,
											"end": 9098,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8970,
											"end": 8977,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9036,
											"end": 9037,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9032,
											"end": 9033,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9028,
											"end": 9034,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 9024,
											"end": 9038,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 9021,
											"end": 9022,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9018,
											"end": 9039,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 9013,
											"end": 9014,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9006,
											"end": 9015,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8999,
											"end": 9016,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8995,
											"end": 9040,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 8992,
											"end": 9063,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8992,
											"end": 9063,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "355"
										},
										{
											"begin": 8992,
											"end": 9063,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9043,
											"end": 9061,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "355"
										},
										{
											"begin": 9043,
											"end": 9061,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "350"
										},
										{
											"begin": 9043,
											"end": 9061,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9043,
											"end": 9061,
											"name": "tag",
											"source": 11,
											"value": "355"
										},
										{
											"begin": 9043,
											"end": 9061,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9083,
											"end": 9092,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 9083,
											"end": 9092,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8930,
											"end": 9098,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9103,
											"end": 9228,
											"name": "tag",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 9103,
											"end": 9228,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9143,
											"end": 9147,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9171,
											"end": 9172,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9168,
											"end": 9169,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9165,
											"end": 9173,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "358"
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9176,
											"end": 9194,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "358"
										},
										{
											"begin": 9176,
											"end": 9194,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "350"
										},
										{
											"begin": 9176,
											"end": 9194,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 9176,
											"end": 9194,
											"name": "tag",
											"source": 11,
											"value": "358"
										},
										{
											"begin": 9176,
											"end": 9194,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9213,
											"end": 9222,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 9213,
											"end": 9222,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9103,
											"end": 9228,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9233,
											"end": 9491,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 9233,
											"end": 9491,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9305,
											"end": 9306,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "tag",
											"source": 11,
											"value": "360"
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9329,
											"end": 9335,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9326,
											"end": 9327,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9323,
											"end": 9336,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 9405,
											"end": 9416,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9405,
											"end": 9416,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9405,
											"end": 9416,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9399,
											"end": 9417,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 9386,
											"end": 9397,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9386,
											"end": 9397,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9386,
											"end": 9397,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9379,
											"end": 9418,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9351,
											"end": 9353,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9344,
											"end": 9354,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "360"
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "tag",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 9315,
											"end": 9428,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9446,
											"end": 9452,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9443,
											"end": 9444,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9440,
											"end": 9453,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 9437,
											"end": 9485,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 9437,
											"end": 9485,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 9437,
											"end": 9485,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9481,
											"end": 9482,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9463,
											"end": 9479,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9463,
											"end": 9479,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9456,
											"end": 9483,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9233,
											"end": 9491,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9496,
											"end": 9623,
											"name": "tag",
											"source": 11,
											"value": "350"
										},
										{
											"begin": 9496,
											"end": 9623,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9557,
											"end": 9567,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 9552,
											"end": 9555,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 9548,
											"end": 9568,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 9545,
											"end": 9546,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9538,
											"end": 9569,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9588,
											"end": 9592,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 9585,
											"end": 9586,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 9578,
											"end": 9593,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9612,
											"end": 9616,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 9609,
											"end": 9610,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9602,
											"end": 9617,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"AdminAddToken(uint256)": "c0cd40ee",
							"AdminWithDrawToken(uint256,address)": "866e58af",
							"Deposit(uint256)": "4d6ce1e5",
							"DepositNFT(uint256,uint256)": "934ed772",
							"Details(address)": "e88cc2be",
							"ERC20Address()": "a6021ace",
							"ERC721address()": "b7171a2e",
							"Reward(address)": "57488064",
							"TotalToken()": "3f601972",
							"UpdateERC20(address)": "275bd33f",
							"UpdateERC721(address)": "ee0106d2",
							"UpdateRatePersentage(uint256)": "f89d832f",
							"UserRate(address)": "e4458b30",
							"Utilization()": "7b2f247f",
							"Withdraw()": "57ea89b6",
							"calculateIntrest(address)": "8b73e331",
							"onERC721Received(address,address,uint256,bytes)": "150b7a02",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"showReward(address)": "c45af5d8",
							"transferOwnership(address)": "f2fde38b",
							"withdrawNFT(uint256)": "023245d7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratePersentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AdminWithDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Details\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC20Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20Address\",\"type\":\"address\"}],\"name\":\"UpdateERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC721address\",\"type\":\"address\"}],\"name\":\"UpdateERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratePersentage\",\"type\":\"uint256\"}],\"name\":\"UpdateRatePersentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Utilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"calculateIntrest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"showReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIds\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Token&NFTStaking/TokenNFT1.sol\":\"ERC20Stakeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://daae589a9d6fa7e55f99f86c0a16796ca490f243fb3693632c3711c0646c1d56\",\"dweb:/ipfs/QmR3zpd7wNw3rcUdekwiv6FYHJqksuTCXLVioTxu6Fbxk3\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"contracts/Token&NFTStaking/TokenNFT1.sol\":{\"keccak256\":\"0xeaf4143dc82d9ea4e09cae22c0edc8252b866def30f3e938cd83bc9232ac2efd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://118ed185073821b056a1e6775b7c1edd369e9d89e4c5f02290d7418fcb40a216\",\"dweb:/ipfs/QmUWmEoawjyAqBa8aUtGGhcCYNwMVHonRpM68jkYUcm9U4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1052,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "ERC721address",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 1054,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "ERC20Address",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1056,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "TotalToken",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 1058,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "rate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1077,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "Details",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_struct(Staker)1065_storage)"
							},
							{
								"astId": 1081,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "Reward",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1086,
								"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
								"label": "UserRate",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(StakerNFT)1072_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Staker)1065_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20Stakeable.Staker)",
								"numberOfBytes": "32",
								"value": "t_struct(Staker)1065_storage"
							},
							"t_mapping(t_address,t_struct(StakerNFT)1072_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct ERC20Stakeable.StakerNFT)",
								"numberOfBytes": "32",
								"value": "t_struct(StakerNFT)1072_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Staker)1065_storage": {
								"encoding": "inplace",
								"label": "struct ERC20Stakeable.Staker",
								"members": [
									{
										"astId": 1060,
										"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
										"label": "deposited",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1062,
										"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
										"label": "timestake",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1064,
										"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
										"label": "check",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(StakerNFT)1072_storage": {
								"encoding": "inplace",
								"label": "struct ERC20Stakeable.StakerNFT",
								"members": [
									{
										"astId": 1067,
										"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
										"label": "userRate",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1069,
										"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
										"label": "tokenId",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1071,
										"contract": "contracts/Token&NFTStaking/TokenNFT1.sol:ERC20Stakeable",
										"label": "check",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1024
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 1025,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1024,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								1024
							],
							"name": "Ownable",
							"nameLocation": "672:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "713:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "732:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "769:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "800:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1014,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nameLocation": "1072:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1210:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1014,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1368:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1840:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2090:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2116:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2514:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2442:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2469:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0",
							"usedErrors": []
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							190
						]
					},
					"id": 191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 190,
							"linearizedBaseContracts": [
								190
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 124,
									"name": "Transfer",
									"nameLocation": "394:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "403:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "425:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "445:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:1"
									},
									"src": "388:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 133,
									"name": "Approval",
									"nameLocation": "625:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "634:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "657:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "682:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:1"
									},
									"src": "619:78:1"
								},
								{
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 139,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:1"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "820:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:1"
									},
									"scope": 190,
									"src": "774:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 147,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 190,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1211:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1223:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:1"
									},
									"returnParameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "1257:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 154,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:1"
									},
									"scope": 190,
									"src": "1193:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1557:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1572:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:1"
									},
									"returnParameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 167,
												"src": "1612:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:1"
									},
									"scope": 190,
									"src": "1538:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 173,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2291:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2308:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:1"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "2342:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 174,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:1"
									},
									"scope": 190,
									"src": "2274:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 189,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2677:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2699:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2719:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:1"
									},
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "2758:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 186,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:1"
									},
									"scope": 190,
									"src": "2646:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 191,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2661:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							226
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 193,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:2",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:2",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 211,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1471:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1494:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1519:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1542:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1568:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 203,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1585:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 205,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1604:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 207,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:2"
									},
									"returnParameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:2"
									},
									"scope": 226,
									"src": "1446:183:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:2",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1950:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 213,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "1988:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:2"
									},
									"scope": 226,
									"src": "1934:63:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:2",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 225,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:2"
									},
									"returnParameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2240:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 222,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:2"
									},
									"scope": 226,
									"src": "2189:60:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 227,
							"src": "620:1631:2",
							"usedErrors": []
						}
					],
					"src": "114:2138:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1002
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"SafeERC20": [
							507
						]
					},
					"id": 508,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 229,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 191,
							"src": "140:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
							"file": "../extensions/draft-IERC20Permit.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 227,
							"src": "164:46:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 508,
							"sourceUnit": 1003,
							"src": "211:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 232,
								"nodeType": "StructuredDocumentation",
								"src": "249:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 507,
							"linearizedBaseContracts": [
								507
							],
							"name": "SafeERC20",
							"nameLocation": "715:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 235,
									"libraryName": {
										"id": 233,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1002,
										"src": "737:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "731:26:3",
									"typeName": {
										"id": 234,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "749:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 257,
										"nodeType": "Block",
										"src": "865:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 246,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 238,
															"src": "895:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 249,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 238,
																			"src": "925:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 157,
																		"src": "925:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "925:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 252,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 240,
																	"src": "950:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 253,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "954:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 247,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "902:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 248,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "902:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "902:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 245,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "875:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "875:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 256,
												"nodeType": "ExpressionStatement",
												"src": "875:86:3"
											}
										]
									},
									"id": 258,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "772:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "801:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "794:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "794:6:3"
													},
													"referencedDeclaration": 190,
													"src": "794:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "824:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "816:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "844:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "836:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "784:71:3"
									},
									"returnParameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:0:3"
									},
									"scope": 507,
									"src": "763:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "1102:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 261,
															"src": "1132:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 274,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 261,
																			"src": "1162:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 189,
																		"src": "1162:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1162:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 277,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "1191:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 278,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "1197:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "1201:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 272,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1139:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 273,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1139:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1139:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 270,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1112:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1112:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "ExpressionStatement",
												"src": "1112:96:3"
											}
										]
									},
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "983:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1016:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1009:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1009:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1009:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1039:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1031:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1031:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1061:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1053:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1081:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "1073:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:93:3"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1102:0:3"
									},
									"scope": 507,
									"src": "974:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 327,
										"nodeType": "Block",
										"src": "1581:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 296,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 292,
																			"src": "1830:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1839:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1830:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 299,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1829:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 309,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 304,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1870:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$507",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 303,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1862:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 302,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1862:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 305,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1862:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 306,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 290,
																					"src": "1877:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 300,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 288,
																					"src": "1846:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 167,
																				"src": "1846:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 307,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1846:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 308,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1889:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1846:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 310,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1845:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1829:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 312,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1905:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1808:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1808:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 314,
												"nodeType": "ExpressionStatement",
												"src": "1808:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 288,
															"src": "2001:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 319,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 288,
																			"src": "2031:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2031:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2031:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 322,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 290,
																	"src": "2055:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 323,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "2064:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 317,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2008:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2008:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 324,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2008:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 315,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "1981:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1981:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "1981:90:3"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "1221:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 328,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1484:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1512:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1505:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 286,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "1505:6:3"
													},
													"referencedDeclaration": 190,
													"src": "1505:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1535:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1527:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 289,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1560:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 328,
												"src": "1552:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1552:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:76:3"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1581:0:3"
									},
									"scope": 507,
									"src": "1475:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "2200:194:3",
										"statements": [
											{
												"assignments": [
													339
												],
												"declarations": [
													{
														"constant": false,
														"id": 339,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2218:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "2210:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 338,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2210:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 344,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2257:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$507",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 342,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2249:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2249:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 346,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 333,
																"src": "2264:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 340,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 331,
																"src": "2233:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$190",
																	"typeString": "contract IERC20"
																}
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 167,
															"src": "2233:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 347,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2233:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 348,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "2275:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2233:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2210:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 331,
															"src": "2310:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 355,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 331,
																			"src": "2340:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 177,
																		"src": "2340:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2340:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 358,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 333,
																	"src": "2364:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 359,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 339,
																	"src": "2373:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 353,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2317:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 354,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2317:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2317:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 351,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "2290:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2290:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "2290:97:3"
											}
										]
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2093:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2131:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 330,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 329,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2124:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2124:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2154:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2146:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2146:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2179:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "2171:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2171:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2114:76:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2200:0:3"
									},
									"scope": 507,
									"src": "2084:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 411,
										"nodeType": "Block",
										"src": "2516:370:3",
										"statements": [
											{
												"id": 410,
												"nodeType": "UncheckedBlock",
												"src": "2526:354:3",
												"statements": [
													{
														"assignments": [
															375
														],
														"declarations": [
															{
																"constant": false,
																"id": 375,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2558:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2550:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 374,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2550:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 384,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 380,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2597:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$507",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 378,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 382,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 369,
																	"src": "2604:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 376,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2573:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 167,
																"src": "2573:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2573:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2550:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 388,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 386,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 375,
																		"src": "2634:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 387,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 371,
																		"src": "2650:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2634:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2657:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 385,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2626:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2626:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 391,
														"nodeType": "ExpressionStatement",
														"src": "2626:75:3"
													},
													{
														"assignments": [
															393
														],
														"declarations": [
															{
																"constant": false,
																"id": 393,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2723:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 410,
																"src": "2715:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 392,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2715:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 397,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 375,
																"src": "2738:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 395,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "2753:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2738:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2715:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 399,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 367,
																	"src": "2792:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 402,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 367,
																					"src": "2822:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$190",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 403,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 177,
																				"src": "2822:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2822:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 405,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 369,
																			"src": "2846:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 406,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 393,
																			"src": "2855:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 400,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2799:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2799:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 398,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 506,
																"src": "2772:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2772:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 409,
														"nodeType": "ExpressionStatement",
														"src": "2772:97:3"
													}
												]
											}
										]
									},
									"id": 412,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2409:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2447:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2440:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 366,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 365,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "2440:6:3"
													},
													"referencedDeclaration": 190,
													"src": "2440:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2470:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2462:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2462:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2495:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2487:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:76:3"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2516:0:3"
									},
									"scope": 507,
									"src": "2400:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 467,
										"nodeType": "Block",
										"src": "3107:257:3",
										"statements": [
											{
												"assignments": [
													433
												],
												"declarations": [
													{
														"constant": false,
														"id": 433,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "3125:11:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3117:19:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 432,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3117:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [
														{
															"id": 436,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3152:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 434,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3139:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 435,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3139:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3139:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3117:41:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3181:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 419,
															"src": "3188:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3197:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 445,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 423,
															"src": "3204:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 446,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "3214:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 447,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "3217:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 448,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "3220:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3168:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 441,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 211,
														"src": "3168:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3168:54:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "3168:54:3"
											},
											{
												"assignments": [
													452
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "3240:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 467,
														"src": "3232:18:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 451,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3232:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 457,
												"initialValue": {
													"arguments": [
														{
															"id": 455,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3266:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 453,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3253:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$226",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 219,
														"src": "3253:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3253:19:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3232:40:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "3290:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 460,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 433,
																	"src": "3304:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 461,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "3304:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3290:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3321:35:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 458,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3282:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3282:75:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 466,
												"nodeType": "ExpressionStatement",
												"src": "3282:75:3"
											}
										]
									},
									"id": 468,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "2901:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2934:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2921:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$226",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 414,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 413,
														"name": "IERC20Permit",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 226,
														"src": "2921:12:3"
													},
													"referencedDeclaration": 226,
													"src": "2921:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$226",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2957:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2949:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2949:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2980:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2972:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2972:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3005:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "2997:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2997:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3028:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3020:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3020:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3052:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3046:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 424,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3046:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3071:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3063:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3063:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3090:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 468,
												"src": "3082:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 428,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3082:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:186:3"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3107:0:3"
									},
									"scope": 507,
									"src": "2892:472:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 505,
										"nodeType": "Block",
										"src": "3817:636:3",
										"statements": [
											{
												"assignments": [
													478
												],
												"declarations": [
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4179:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 505,
														"src": "4166:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 477,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4166:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 487,
												"initialValue": {
													"arguments": [
														{
															"id": 484,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "4220:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4226:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 481,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "4200:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$190",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4192:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 479,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4192:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4192:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 762,
														"src": "4192:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4192:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4166:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 488,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "4275:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 489,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4275:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4295:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4275:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 504,
												"nodeType": "IfStatement",
												"src": "4271:176:3",
												"trueBody": {
													"id": 503,
													"nodeType": "Block",
													"src": "4298:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 495,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "4370:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 497,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4383:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 496,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4383:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 498,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4382:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 493,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4359:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4359:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4359:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4391:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 492,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4351:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4351:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 502,
															"nodeType": "ExpressionStatement",
															"src": "4351:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 469,
										"nodeType": "StructuredDocumentation",
										"src": "3370:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3756:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3783:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$190",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 470,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 190,
														"src": "3776:6:3"
													},
													"referencedDeclaration": 190,
													"src": "3776:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$190",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3803:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 506,
												"src": "3790:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 473,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3790:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:33:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3817:0:3"
									},
									"scope": 507,
									"src": "3747:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 508,
							"src": "707:3748:3",
							"usedErrors": []
						}
					],
					"src": "115:4341:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1036
						],
						"IERC721": [
							623
						]
					},
					"id": 624,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 509,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 510,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 624,
							"sourceUnit": 1037,
							"src": "133:47:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 512,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1036,
										"src": "271:7:4"
									},
									"id": 513,
									"nodeType": "InheritanceSpecifier",
									"src": "271:7:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 511,
								"nodeType": "StructuredDocumentation",
								"src": "182:67:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 623,
							"linearizedBaseContracts": [
								623,
								1036
							],
							"name": "IERC721",
							"nameLocation": "260:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "285:88:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 522,
									"name": "Transfer",
									"nameLocation": "384:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "409:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "393:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "393:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "431:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "415:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "415:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "451:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "435:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "435:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "392:67:4"
									},
									"src": "378:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 523,
										"nodeType": "StructuredDocumentation",
										"src": "466:94:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 531,
									"name": "Approval",
									"nameLocation": "571:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "596:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "580:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 527,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "619:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "603:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "645:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "629:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "629:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "579:74:4"
									},
									"src": "565:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "660:117:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 540,
									"name": "ApprovalForAll",
									"nameLocation": "788:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "819:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "803:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "803:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "842:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "826:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 535,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "826:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 538,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "857:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "852:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 537,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "852:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "802:64:4"
									},
									"src": "782:85:4"
								},
								{
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "873:76:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "981:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "973:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:15:4"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1019:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "1011:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1010:17:4"
									},
									"scope": 623,
									"src": "954:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "1034:131:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 556,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1179:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1195:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1187:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1187:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1186:17:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 554,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1235:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "1227:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 553,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1227:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1226:15:4"
									},
									"scope": 623,
									"src": "1170:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "1248:556:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1818:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1852:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1844:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1844:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1874:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1866:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1894:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1886:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1886:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1926:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "1911:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 564,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1911:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1834:102:4"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1945:0:4"
									},
									"scope": 623,
									"src": "1809:137:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "1952:687:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2653:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2687:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2679:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2709:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2701:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2729:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "2721:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2721:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2669:73:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2751:0:4"
									},
									"scope": 623,
									"src": "2644:108:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "2758:732:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 588,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3504:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3534:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3526:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3526:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3556:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3548:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 582,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3576:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "3568:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3516:73:4"
									},
									"returnParameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3598:0:4"
									},
									"scope": 623,
									"src": "3495:104:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "3605:452:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 596,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4071:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4087:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4079:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4079:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4099:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 596,
												"src": "4091:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4091:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4078:29:4"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4116:0:4"
									},
									"scope": 623,
									"src": "4062:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 597,
										"nodeType": "StructuredDocumentation",
										"src": "4123:309:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 604,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4446:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 599,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4472:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4464:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4464:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4487:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 604,
												"src": "4482:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 600,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4482:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4463:34:4"
									},
									"returnParameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4506:0:4"
									},
									"scope": 623,
									"src": "4437:70:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 605,
										"nodeType": "StructuredDocumentation",
										"src": "4513:139:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 612,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4666:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4686:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4678:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4678:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4677:17:4"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4726:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4718:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 609,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4718:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4717:18:4"
									},
									"scope": 623,
									"src": "4657:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "4742:138:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 622,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4894:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4919:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4911:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4911:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4934:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4926:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4926:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4910:33:4"
									},
									"returnParameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4967:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 619,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4967:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4966:6:4"
									},
									"scope": 623,
									"src": "4885:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 624,
							"src": "250:4725:4",
							"usedErrors": []
						}
					],
					"src": "108:4868:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							641
						]
					},
					"id": 642,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 625,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 626,
								"nodeType": "StructuredDocumentation",
								"src": "141:152:5",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 641,
							"linearizedBaseContracts": [
								641
							],
							"name": "IERC721Receiver",
							"nameLocation": "304:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 627,
										"nodeType": "StructuredDocumentation",
										"src": "326:493:5",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "833:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "867:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "859:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 628,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 631,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "893:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "885:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "915:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "907:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "947:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "932:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 634,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "932:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "849:108:5"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "976:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 637,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "976:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:8:5"
									},
									"scope": 641,
									"src": "824:160:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 642,
							"src": "294:692:5",
							"usedErrors": []
						}
					],
					"src": "116:871:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
					"exportedSymbols": {
						"IERC165": [
							1036
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							672
						]
					},
					"id": 673,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 643,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 644,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 673,
							"sourceUnit": 624,
							"src": "154:24:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 646,
										"name": "IERC721",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 623,
										"src": "348:7:6"
									},
									"id": 647,
									"nodeType": "InheritanceSpecifier",
									"src": "348:7:6"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 645,
								"nodeType": "StructuredDocumentation",
								"src": "180:136:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 672,
							"linearizedBaseContracts": [
								672,
								623,
								1036
							],
							"name": "IERC721Enumerable",
							"nameLocation": "327:17:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "362:82:6",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "458:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "469:2:6"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "495:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:9:6"
									},
									"scope": 672,
									"src": "449:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "510:171:6",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 663,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "695:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "723:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "715:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "738:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "730:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "730:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:30:6"
									},
									"returnParameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "768:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "768:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "767:9:6"
									},
									"scope": 672,
									"src": "686:91:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "783:164:6",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 671,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "961:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "982:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "974:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "974:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "973:15:6"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "1012:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1012:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1011:9:6"
									},
									"scope": 672,
									"src": "952:69:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 673,
							"src": "317:706:6",
							"usedErrors": []
						}
					],
					"src": "129:895:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1002
						]
					},
					"id": 1003,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 674,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 675,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:7",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1002,
							"linearizedBaseContracts": [
								1002
							],
							"name": "Address",
							"nameLocation": "202:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "1241:254:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 683,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "1465:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 685,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 686,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 682,
												"id": 688,
												"nodeType": "Return",
												"src": "1458:30:7"
											}
										]
									},
									"documentation": {
										"id": 676,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:7",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1195:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:7"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "1235:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 680,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:7"
									},
									"scope": 1002,
									"src": "1175:320:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 723,
										"nodeType": "Block",
										"src": "2483:241:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 701,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		],
																		"id": 700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 699,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 704,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "2526:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 698,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 708,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:7"
											},
											{
												"assignments": [
													710,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 710,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 723,
														"src": "2578:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 709,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 717,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 715,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 711,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "2596:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 714,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 713,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 695,
																"src": "2618:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 719,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "2647:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 718,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 722,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:7"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:7",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 724,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2431:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 724,
												"src": "2458:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:7"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:7"
									},
									"scope": 1002,
									"src": "2412:312:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 741,
										"nodeType": "Block",
										"src": "3555:96:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 735,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "3594:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 736,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "3602:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 737,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3608:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 738,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3611:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 734,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															826
														],
														"referencedDeclaration": 826,
														"src": "3572:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:72:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 733,
												"id": 740,
												"nodeType": "Return",
												"src": "3565:79:7"
											}
										]
									},
									"documentation": {
										"id": 725,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:7",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 742,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "3488:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "3504:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 728,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:7"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "3541:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 731,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:7"
									},
									"scope": 1002,
									"src": "3466:185:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "4020:76:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 755,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "4059:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 756,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 747,
															"src": "4067:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 757,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4073:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 758,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4076:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 754,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															826
														],
														"referencedDeclaration": 826,
														"src": "4037:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4037:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 753,
												"id": 760,
												"nodeType": "Return",
												"src": "4030:59:7"
											}
										]
									},
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "3657:211:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3882:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 745,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3912:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "3904:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 744,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3904:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3941:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "3928:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 746,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3928:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3969:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "3955:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 748,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3955:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3894:93:7"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "4006:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 751,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4006:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4005:14:7"
									},
									"scope": 1002,
									"src": "3873:223:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 781,
										"nodeType": "Block",
										"src": "4601:111:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 775,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 765,
															"src": "4640:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 776,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "4648:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 777,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "4654:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4661:43:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 774,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															782,
															826
														],
														"referencedDeclaration": 826,
														"src": "4618:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4618:87:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 773,
												"id": 780,
												"nodeType": "Return",
												"src": "4611:94:7"
											}
										]
									},
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "4102:351:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 782,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4467:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4506:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4498:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 764,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4535:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4522:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 766,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4522:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4557:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4549:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4549:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4488:80:7"
									},
									"returnParameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "4587:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 771,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4587:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4586:14:7"
									},
									"scope": 1002,
									"src": "4458:254:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 825,
										"nodeType": "Block",
										"src": "5139:267:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 799,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5165:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1002",
																				"typeString": "library Address"
																			}
																		],
																		"id": 798,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5157:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 797,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5157:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5157:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5157:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 802,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 789,
																"src": "5182:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5157:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5189:40:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 796,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5149:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5149:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 806,
												"nodeType": "ExpressionStatement",
												"src": "5149:81:7"
											},
											{
												"assignments": [
													808,
													810
												],
												"declarations": [
													{
														"constant": false,
														"id": 808,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5246:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 825,
														"src": "5241:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 807,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5241:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 810,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5268:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 825,
														"src": "5255:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 809,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5255:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 817,
												"initialValue": {
													"arguments": [
														{
															"id": 815,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "5308:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 811,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "5282:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 812,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5282:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 814,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 813,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 789,
																"src": "5301:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5282:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5282:31:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5240:73:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 819,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "5357:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 820,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "5365:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 821,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 810,
															"src": "5374:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 822,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "5386:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 818,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "5330:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5330:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 795,
												"id": 824,
												"nodeType": "Return",
												"src": "5323:76:7"
											}
										]
									},
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "4718:237:7",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 826,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4969:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5008:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5000:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5037:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5024:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 786,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5024:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5059:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5051:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5051:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5088:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5074:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 790,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5074:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:116:7"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "5125:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 793,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5125:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5124:14:7"
									},
									"scope": 1002,
									"src": "4960:446:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 842,
										"nodeType": "Block",
										"src": "5683:97:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 837,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 829,
															"src": "5719:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 838,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "5727:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5733:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 836,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															843,
															872
														],
														"referencedDeclaration": 872,
														"src": "5700:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5700:73:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 835,
												"id": 841,
												"nodeType": "Return",
												"src": "5693:80:7"
											}
										]
									},
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "5412:166:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5592:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5619:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "5611:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5611:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5640:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "5627:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 830,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5627:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5610:35:7"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "5669:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 833,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5669:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5668:14:7"
									},
									"scope": 1002,
									"src": "5583:197:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 871,
										"nodeType": "Block",
										"src": "6122:168:7",
										"statements": [
											{
												"assignments": [
													856,
													858
												],
												"declarations": [
													{
														"constant": false,
														"id": 856,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6138:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "6133:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 855,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6133:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 858,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6160:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "6147:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 857,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6147:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 863,
												"initialValue": {
													"arguments": [
														{
															"id": 861,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 848,
															"src": "6192:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 859,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "6174:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6174:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6174:23:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6132:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 865,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 846,
															"src": "6241:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 866,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 856,
															"src": "6249:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 867,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 858,
															"src": "6258:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 868,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 850,
															"src": "6270:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 864,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "6214:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6214:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 854,
												"id": 870,
												"nodeType": "Return",
												"src": "6207:76:7"
											}
										]
									},
									"documentation": {
										"id": 844,
										"nodeType": "StructuredDocumentation",
										"src": "5786:173:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5973:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 846,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6009:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6001:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6001:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6038:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6025:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 847,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6025:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6066:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6052:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 849,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6052:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5991:93:7"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "6108:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 852,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6108:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6107:14:7"
									},
									"scope": 1002,
									"src": "5964:326:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "6566:101:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 883,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "6604:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 884,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "6612:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6618:41:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 882,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															889,
															918
														],
														"referencedDeclaration": 918,
														"src": "6583:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6583:77:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 881,
												"id": 887,
												"nodeType": "Return",
												"src": "6576:84:7"
											}
										]
									},
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "6296:168:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6478:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6507:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "6499:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 874,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6499:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6528:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "6515:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 876,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6515:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6498:35:7"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "6552:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 879,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6552:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6551:14:7"
									},
									"scope": 1002,
									"src": "6469:198:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 917,
										"nodeType": "Block",
										"src": "7008:170:7",
										"statements": [
											{
												"assignments": [
													902,
													904
												],
												"declarations": [
													{
														"constant": false,
														"id": 902,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7024:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 917,
														"src": "7019:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 901,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7019:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 904,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7046:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 917,
														"src": "7033:23:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 903,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7033:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 909,
												"initialValue": {
													"arguments": [
														{
															"id": 907,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "7080:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 905,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "7060:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 906,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7060:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7060:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7018:67:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 911,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 892,
															"src": "7129:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 912,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 902,
															"src": "7137:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 913,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 904,
															"src": "7146:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 914,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 896,
															"src": "7158:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 910,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "7102:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7102:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 900,
												"id": 916,
												"nodeType": "Return",
												"src": "7095:76:7"
											}
										]
									},
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "6673:175:7",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6862:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6900:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6892:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6892:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6929:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6916:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 893,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6916:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6957:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6943:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 895,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6943:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6882:93:7"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "6994:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 898,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6993:14:7"
									},
									"scope": 1002,
									"src": "6853:325:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 956,
										"nodeType": "Block",
										"src": "7660:434:7",
										"statements": [
											{
												"condition": {
													"id": 932,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 923,
													"src": "7674:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 954,
													"nodeType": "Block",
													"src": "8030:58:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 950,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 925,
																		"src": "8052:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 951,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 927,
																		"src": "8064:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 949,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1001,
																	"src": "8044:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8044:33:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 953,
															"nodeType": "ExpressionStatement",
															"src": "8044:33:7"
														}
													]
												},
												"id": 955,
												"nodeType": "IfStatement",
												"src": "7670:418:7",
												"trueBody": {
													"id": 948,
													"nodeType": "Block",
													"src": "7683:341:7",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 933,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 925,
																		"src": "7701:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 934,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7701:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7722:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7701:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 945,
															"nodeType": "IfStatement",
															"src": "7697:286:7",
															"trueBody": {
																"id": 944,
																"nodeType": "Block",
																"src": "7725:258:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 939,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 921,
																							"src": "7927:6:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 938,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 690,
																						"src": "7916:10:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 940,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7916:18:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 941,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7936:31:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 937,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7908:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 942,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7908:60:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 943,
																		"nodeType": "ExpressionStatement",
																		"src": "7908:60:7"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 946,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 925,
																"src": "8003:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 931,
															"id": 947,
															"nodeType": "Return",
															"src": "7996:17:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 919,
										"nodeType": "StructuredDocumentation",
										"src": "7184:277:7",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7475:26:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7519:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7511:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7511:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7540:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7535:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 922,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7535:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7570:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7557:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 924,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7557:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7604:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7590:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 926,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7590:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7501:121:7"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "7646:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 929,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7646:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7645:14:7"
									},
									"scope": 1002,
									"src": "7466:628:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 980,
										"nodeType": "Block",
										"src": "8475:135:7",
										"statements": [
											{
												"condition": {
													"id": 969,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 960,
													"src": "8489:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 978,
													"nodeType": "Block",
													"src": "8546:58:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 974,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 962,
																		"src": "8568:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 975,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 964,
																		"src": "8580:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 973,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1001,
																	"src": "8560:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 976,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8560:33:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 977,
															"nodeType": "ExpressionStatement",
															"src": "8560:33:7"
														}
													]
												},
												"id": 979,
												"nodeType": "IfStatement",
												"src": "8485:119:7",
												"trueBody": {
													"id": 972,
													"nodeType": "Block",
													"src": "8498:42:7",
													"statements": [
														{
															"expression": {
																"id": 970,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "8519:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 968,
															"id": 971,
															"nodeType": "Return",
															"src": "8512:17:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 958,
										"nodeType": "StructuredDocumentation",
										"src": "8100:210:7",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 981,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8324:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8355:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8350:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 959,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8350:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8385:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8372:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 961,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8372:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8419:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8405:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 963,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8405:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:97:7"
									},
									"returnParameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "8461:12:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 966,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8461:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8460:14:7"
									},
									"scope": 1002,
									"src": "8315:295:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1000,
										"nodeType": "Block",
										"src": "8699:457:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 988,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 983,
															"src": "8775:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 989,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8775:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 990,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8795:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8775:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 998,
													"nodeType": "Block",
													"src": "9105:45:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 995,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "9126:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 994,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9119:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 996,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9119:20:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 997,
															"nodeType": "ExpressionStatement",
															"src": "9119:20:7"
														}
													]
												},
												"id": 999,
												"nodeType": "IfStatement",
												"src": "8771:379:7",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "8798:301:7",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8956:133:7",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8974:40:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9003:10:7"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8997:5:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8997:17:7"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8978:15:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9042:2:7",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9046:10:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9038:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9038:19:7"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9059:15:7"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9031:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9031:44:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9031:44:7"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 983,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9003:10:7",
																	"valueSize": 1
																},
																{
																	"declaration": 983,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9046:10:7",
																	"valueSize": 1
																}
															],
															"id": 992,
															"nodeType": "InlineAssembly",
															"src": "8947:142:7"
														}
													]
												}
											}
										]
									},
									"id": 1001,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8625:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8646:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "8633:23:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 982,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8633:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8672:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 1001,
												"src": "8658:26:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 984,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8658:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8632:53:7"
									},
									"returnParameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8699:0:7"
									},
									"scope": 1002,
									"src": "8616:540:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1003,
							"src": "194:8964:7",
							"usedErrors": []
						}
					],
					"src": "101:9058:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1024
						]
					},
					"id": 1025,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1004,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1005,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1024,
							"linearizedBaseContracts": [
								1024
							],
							"name": "Context",
							"nameLocation": "626:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1013,
										"nodeType": "Block",
										"src": "702:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1010,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1009,
												"id": 1012,
												"nodeType": "Return",
												"src": "712:17:8"
											}
										]
									},
									"id": 1014,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:8"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "693:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:8"
									},
									"scope": 1024,
									"src": "640:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "809:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1019,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1018,
												"id": 1021,
												"nodeType": "Return",
												"src": "819:15:8"
											}
										]
									},
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:8"
									},
									"returnParameters": {
										"id": 1018,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1017,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "793:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1016,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:8"
									},
									"scope": 1024,
									"src": "742:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1025,
							"src": "608:235:8",
							"usedErrors": []
						}
					],
					"src": "86:758:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1036
						]
					},
					"id": 1037,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1026,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1027,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:9",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1036,
							"linearizedBaseContracts": [
								1036
							],
							"name": "IERC165",
							"nameLocation": "415:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1028,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1035,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "801:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1029,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:9"
									},
									"returnParameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "844:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1032,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:9"
									},
									"scope": 1036,
									"src": "774:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1037,
							"src": "405:447:9",
							"usedErrors": []
						}
					],
					"src": "100:753:9"
				},
				"id": 9
			},
			"contracts/Token&NFTStaking/TokenNFT1.sol": {
				"ast": {
					"absolutePath": "contracts/Token&NFTStaking/TokenNFT1.sol",
					"exportedSymbols": {
						"Address": [
							1002
						],
						"Context": [
							1024
						],
						"ERC20Stakeable": [
							1717
						],
						"IERC165": [
							1036
						],
						"IERC20": [
							190
						],
						"IERC20Permit": [
							226
						],
						"IERC721": [
							623
						],
						"IERC721Enumerable": [
							672
						],
						"IERC721Receiver": [
							641
						],
						"Ownable": [
							112
						],
						"SafeERC20": [
							507
						]
					},
					"id": 1718,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1038,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "56:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1039,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1718,
							"sourceUnit": 113,
							"src": "81:52:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1040,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1718,
							"sourceUnit": 508,
							"src": "134:65:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol",
							"id": 1041,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1718,
							"sourceUnit": 673,
							"src": "200:79:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol",
							"id": 1042,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1718,
							"sourceUnit": 642,
							"src": "280:66:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1043,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "375:7:10"
									},
									"id": 1044,
									"nodeType": "InheritanceSpecifier",
									"src": "375:7:10"
								},
								{
									"baseName": {
										"id": 1045,
										"name": "IERC721Receiver",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 641,
										"src": "383:15:10"
									},
									"id": 1046,
									"nodeType": "InheritanceSpecifier",
									"src": "383:15:10"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1717,
							"linearizedBaseContracts": [
								1717,
								641,
								112,
								1024
							],
							"name": "ERC20Stakeable",
							"nameLocation": "357:14:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1050,
									"libraryName": {
										"id": 1047,
										"name": "SafeERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 507,
										"src": "410:9:10"
									},
									"nodeType": "UsingForDirective",
									"src": "404:27:10",
									"typeName": {
										"id": 1049,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1048,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 190,
											"src": "424:6:10"
										},
										"referencedDeclaration": 190,
										"src": "424:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$190",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "b7171a2e",
									"id": 1052,
									"mutability": "mutable",
									"name": "ERC721address",
									"nameLocation": "451:13:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "436:28:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1051,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "436:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a6021ace",
									"id": 1054,
									"mutability": "mutable",
									"name": "ERC20Address",
									"nameLocation": "485:12:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "470:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1053,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "470:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3f601972",
									"id": 1056,
									"mutability": "mutable",
									"name": "TotalToken",
									"nameLocation": "515:10:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "503:22:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1055,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "503:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1058,
									"mutability": "mutable",
									"name": "rate",
									"nameLocation": "536:4:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "531:9:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1057,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "531:4:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "ERC20Stakeable.Staker",
									"id": 1065,
									"members": [
										{
											"constant": false,
											"id": 1060,
											"mutability": "mutable",
											"name": "deposited",
											"nameLocation": "578:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 1065,
											"src": "570:17:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1059,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "570:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1062,
											"mutability": "mutable",
											"name": "timestake",
											"nameLocation": "605:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 1065,
											"src": "597:17:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1061,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "597:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1064,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "629:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1065,
											"src": "624:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1063,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "624:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Staker",
									"nameLocation": "553:6:10",
									"nodeType": "StructDefinition",
									"scope": 1717,
									"src": "546:96:10",
									"visibility": "public"
								},
								{
									"canonicalName": "ERC20Stakeable.StakerNFT",
									"id": 1072,
									"members": [
										{
											"constant": false,
											"id": 1067,
											"mutability": "mutable",
											"name": "userRate",
											"nameLocation": "682:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1072,
											"src": "674:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1066,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "674:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1069,
											"mutability": "mutable",
											"name": "tokenId",
											"nameLocation": "708:7:10",
											"nodeType": "VariableDeclaration",
											"scope": 1072,
											"src": "700:15:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1068,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "700:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1071,
											"mutability": "mutable",
											"name": "check",
											"nameLocation": "730:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1072,
											"src": "725:10:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1070,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "725:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakerNFT",
									"nameLocation": "654:9:10",
									"nodeType": "StructDefinition",
									"scope": 1717,
									"src": "647:96:10",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e88cc2be",
									"id": 1077,
									"mutability": "mutable",
									"name": "Details",
									"nameLocation": "783:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "748:42:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
										"typeString": "mapping(address => struct ERC20Stakeable.Staker)"
									},
									"typeName": {
										"id": 1076,
										"keyType": {
											"id": 1073,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "757:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "748:27:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
											"typeString": "mapping(address => struct ERC20Stakeable.Staker)"
										},
										"valueType": {
											"id": 1075,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1074,
												"name": "Staker",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1065,
												"src": "768:6:10"
											},
											"referencedDeclaration": 1065,
											"src": "768:6:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Staker_$1065_storage_ptr",
												"typeString": "struct ERC20Stakeable.Staker"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "57488064",
									"id": 1081,
									"mutability": "mutable",
									"name": "Reward",
									"nameLocation": "829:6:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "796:39:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1080,
										"keyType": {
											"id": 1078,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "805:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "796:25:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1079,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "816:4:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e4458b30",
									"id": 1086,
									"mutability": "mutable",
									"name": "UserRate",
									"nameLocation": "880:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 1717,
									"src": "841:47:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
										"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT)"
									},
									"typeName": {
										"id": 1085,
										"keyType": {
											"id": 1082,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "850:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "841:31:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
											"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT)"
										},
										"valueType": {
											"id": 1084,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1083,
												"name": "StakerNFT",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1072,
												"src": "861:9:10"
											},
											"referencedDeclaration": 1072,
											"src": "861:9:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_StakerNFT_$1072_storage_ptr",
												"typeString": "struct ERC20Stakeable.StakerNFT"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1107,
										"nodeType": "Block",
										"src": "1353:117:10",
										"statements": [
											{
												"expression": {
													"id": 1097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1095,
														"name": "ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "1363:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1096,
														"name": "_ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1088,
														"src": "1379:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1363:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1098,
												"nodeType": "ExpressionStatement",
												"src": "1363:30:10"
											},
											{
												"expression": {
													"id": 1101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1099,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "1403:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1100,
														"name": "_ratePersentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1090,
														"src": "1410:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1403:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1102,
												"nodeType": "ExpressionStatement",
												"src": "1403:22:10"
											},
											{
												"expression": {
													"id": 1105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1103,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "1435:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1104,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1092,
														"src": "1450:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1435:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1106,
												"nodeType": "ExpressionStatement",
												"src": "1435:28:10"
											}
										]
									},
									"id": 1108,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "_ERC721address",
												"nameLocation": "1289:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1281:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "_ratePersentage",
												"nameLocation": "1313:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1305:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1305:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "1338:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1330:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1091,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1330:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1280:72:10"
									},
									"returnParameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1353:0:10"
									},
									"scope": 1717,
									"src": "1269:201:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1132,
										"nodeType": "Block",
										"src": "1749:121:10",
										"statements": [
											{
												"expression": {
													"id": 1117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1115,
														"name": "TotalToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "1759:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1116,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1110,
														"src": "1773:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1759:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1118,
												"nodeType": "ExpressionStatement",
												"src": "1759:21:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1123,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1828:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1828:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1127,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1848:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1126,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1840:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1125,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1840:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1840:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1129,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1110,
															"src": "1855:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1120,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1054,
																	"src": "1797:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1119,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "1790:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1790:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1122,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 284,
														"src": "1790:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1790:73:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1131,
												"nodeType": "ExpressionStatement",
												"src": "1790:73:10"
											}
										]
									},
									"functionSelector": "c0cd40ee",
									"id": 1133,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1113,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1112,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1740:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1740:9:10"
										}
									],
									"name": "AdminAddToken",
									"nameLocation": "1705:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "1724:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "1719:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1719:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1718:14:10"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1749:0:10"
									},
									"scope": 1717,
									"src": "1696:174:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1150,
										"nodeType": "Block",
										"src": "2131:63:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1146,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1137,
															"src": "2175:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1147,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1135,
															"src": "2180:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1143,
																	"name": "ERC20Address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1054,
																	"src": "2148:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1142,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "2141:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2141:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$190",
																"typeString": "contract IERC20"
															}
														},
														"id": 1145,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 258,
														"src": "2141:33:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2141:46:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1149,
												"nodeType": "ExpressionStatement",
												"src": "2141:46:10"
											}
										]
									},
									"functionSelector": "866e58af",
									"id": 1151,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1140,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1139,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2122:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "2122:9:10"
										}
									],
									"name": "AdminWithDrawToken",
									"nameLocation": "2071:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2095:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "2090:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1134,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2090:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "2110:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "2102:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2102:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2089:25:10"
									},
									"returnParameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2131:0:10"
									},
									"scope": 1717,
									"src": "2062:132:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "2454:126:10",
										"statements": [
											{
												"assignments": [
													1157
												],
												"declarations": [
													{
														"constant": false,
														"id": 1157,
														"mutability": "mutable",
														"name": "Persentage",
														"nameLocation": "2469:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 1175,
														"src": "2464:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1156,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2464:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1172,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1164,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "2522:4:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																						"typeString": "contract ERC20Stakeable"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																						"typeString": "contract ERC20Stakeable"
																					}
																				],
																				"id": 1163,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2514:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1162,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2514:7:10",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1165,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2514:13:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"arguments": [
																				{
																					"id": 1159,
																					"name": "ERC20Address",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1054,
																					"src": "2490:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1158,
																				"name": "IERC20",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 190,
																				"src": "2483:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																					"typeString": "type(contract IERC20)"
																				}
																			},
																			"id": 1160,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2483:20:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$190",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 147,
																		"src": "2483:30:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1166,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2483:45:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2531:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "2483:51:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1169,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2482:53:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1170,
														"name": "TotalToken",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "2536:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2482:64:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2464:82:10"
											},
											{
												"expression": {
													"id": 1173,
													"name": "Persentage",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1157,
													"src": "2563:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1155,
												"id": 1174,
												"nodeType": "Return",
												"src": "2556:17:10"
											}
										]
									},
									"functionSelector": "7b2f247f",
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Utilization",
									"nameLocation": "2411:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2422:2:10"
									},
									"returnParameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "2445:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2445:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2444:9:10"
									},
									"scope": 1717,
									"src": "2402:178:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1264,
										"nodeType": "Block",
										"src": "2914:568:10",
										"statements": [
											{
												"condition": {
													"id": 1186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2927:26:10",
													"subExpression": {
														"expression": {
															"baseExpression": {
																"id": 1181,
																"name": "Details",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1077,
																"src": "2928:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																	"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																}
															},
															"id": 1184,
															"indexExpression": {
																"expression": {
																	"id": 1182,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2936:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2936:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2928:19:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Staker_$1065_storage",
																"typeString": "struct ERC20Stakeable.Staker storage ref"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "check",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1064,
														"src": "2928:25:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1262,
													"nodeType": "Block",
													"src": "3173:303:10",
													"statements": [
														{
															"expression": {
																"id": 1219,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1217,
																	"name": "TotalToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "3187:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1218,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1178,
																	"src": "3201:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3187:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1220,
															"nodeType": "ExpressionStatement",
															"src": "3187:21:10"
														},
														{
															"expression": {
																"id": 1229,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1221,
																		"name": "Reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1081,
																		"src": "3222:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1224,
																	"indexExpression": {
																		"expression": {
																			"id": 1222,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3229:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1223,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3229:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3222:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1226,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "3262:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1227,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "3262:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1225,
																		"name": "calculateIntrest",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1574,
																		"src": "3245:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view returns (uint256)"
																		}
																	},
																	"id": 1228,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3245:28:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3222:51:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1230,
															"nodeType": "ExpressionStatement",
															"src": "3222:51:10"
														},
														{
															"expression": {
																"id": 1247,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1231,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "3287:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1234,
																	"indexExpression": {
																		"expression": {
																			"id": 1232,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3295:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3295:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3287:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1242,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1236,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1077,
																						"src": "3316:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1239,
																					"indexExpression": {
																						"expression": {
																							"id": 1237,
																							"name": "msg",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967281,
																							"src": "3324:3:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_magic_message",
																								"typeString": "msg"
																							}
																						},
																						"id": 1238,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberName": "sender",
																						"nodeType": "MemberAccess",
																						"src": "3324:10:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3316:19:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1065_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1240,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1060,
																				"src": "3316:29:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 1241,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1178,
																				"src": "3348:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3316:39:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"expression": {
																				"id": 1243,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "3356:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "3356:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "74727565",
																			"id": 1245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3372:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1235,
																		"name": "Staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1065,
																		"src": "3309:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_Staker_$1065_storage_ptr_$",
																			"typeString": "type(struct ERC20Stakeable.Staker storage pointer)"
																		}
																	},
																	"id": 1246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3309:68:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_memory_ptr",
																		"typeString": "struct ERC20Stakeable.Staker memory"
																	}
																},
																"src": "3287:90:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1065_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1248,
															"nodeType": "ExpressionStatement",
															"src": "3287:90:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1253,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3429:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1254,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3429:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1257,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3449:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																					"typeString": "contract ERC20Stakeable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																					"typeString": "contract ERC20Stakeable"
																				}
																			],
																			"id": 1256,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3441:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1255,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3441:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3441:13:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1259,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1178,
																		"src": "3457:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1250,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1054,
																				"src": "3398:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1249,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "3391:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3391:20:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "3391:37:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1260,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3391:74:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1261,
															"nodeType": "ExpressionStatement",
															"src": "3391:74:10"
														}
													]
												},
												"id": 1263,
												"nodeType": "IfStatement",
												"src": "2924:552:10",
												"trueBody": {
													"id": 1216,
													"nodeType": "Block",
													"src": "2954:206:10",
													"statements": [
														{
															"expression": {
																"id": 1189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1187,
																	"name": "TotalToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "2968:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1188,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1178,
																	"src": "2982:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2968:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1190,
															"nodeType": "ExpressionStatement",
															"src": "2968:21:10"
														},
														{
															"expression": {
																"id": 1201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1191,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "3003:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1194,
																	"indexExpression": {
																		"expression": {
																			"id": 1192,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3011:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3011:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3003:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1196,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1178,
																			"src": "3032:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"expression": {
																				"id": 1197,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "3040:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1198,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "3040:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"hexValue": "74727565",
																			"id": 1199,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3056:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		],
																		"id": 1195,
																		"name": "Staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1065,
																		"src": "3025:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_struct$_Staker_$1065_storage_ptr_$",
																			"typeString": "type(struct ERC20Stakeable.Staker storage pointer)"
																		}
																	},
																	"id": 1200,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "structConstructorCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3025:36:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_memory_ptr",
																		"typeString": "struct ERC20Stakeable.Staker memory"
																	}
																},
																"src": "3003:58:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1065_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1202,
															"nodeType": "ExpressionStatement",
															"src": "3003:58:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1207,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3113:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3113:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1211,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3133:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																					"typeString": "contract ERC20Stakeable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																					"typeString": "contract ERC20Stakeable"
																				}
																			],
																			"id": 1210,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3125:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1209,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3125:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3125:13:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1213,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1178,
																		"src": "3141:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1204,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1054,
																				"src": "3082:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1203,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "3075:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1205,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3075:20:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 284,
																	"src": "3075:37:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$190_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$190_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1214,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3075:74:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1215,
															"nodeType": "ExpressionStatement",
															"src": "3075:74:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "4d6ce1e5",
									"id": 1265,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Deposit",
									"nameLocation": "2882:7:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "2898:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1265,
												"src": "2890:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2890:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2889:17:10"
									},
									"returnParameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2914:0:10"
									},
									"scope": 1717,
									"src": "2873:609:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1395,
										"nodeType": "Block",
										"src": "3704:874:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1269,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1077,
																	"src": "3722:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																	}
																},
																"id": 1272,
																"indexExpression": {
																	"expression": {
																		"id": 1270,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3730:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3730:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3722:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1065_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1273,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1064,
															"src": "3722:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205374616b65",
															"id": 1274,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3748:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd",
																"typeString": "literal_string \"Please First Stake\""
															},
															"value": "Please First Stake"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_53c8d237d2d31edafe54f154d90626ffdd2ceb4ec1cb5e919017840ee802a1cd",
																"typeString": "literal_string \"Please First Stake\""
															}
														],
														"id": 1268,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3714:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3714:55:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1276,
												"nodeType": "ExpressionStatement",
												"src": "3714:55:10"
											},
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1277,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "3783:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1280,
														"indexExpression": {
															"expression": {
																"id": 1278,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3792:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3792:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3783:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"id": 1281,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1071,
													"src": "3783:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1393,
													"nodeType": "Block",
													"src": "4272:296:10",
													"statements": [
														{
															"assignments": [
																1351
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1351,
																	"mutability": "mutable",
																	"name": "amount",
																	"nameLocation": "4291:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1393,
																	"src": "4286:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1350,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4286:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1357,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 1352,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "4300:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1355,
																	"indexExpression": {
																		"expression": {
																			"id": 1353,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4308:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4308:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4300:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"id": 1356,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "deposited",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1060,
																"src": "4300:29:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4286:43:10"
														},
														{
															"assignments": [
																1359
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1359,
																	"mutability": "mutable",
																	"name": "newval",
																	"nameLocation": "4348:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1393,
																	"src": "4343:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1358,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4343:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1364,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1361,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4374:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4374:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1360,
																	"name": "calculateIntrest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1574,
																	"src": "4357:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1363,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4357:28:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4343:42:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1369,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4429:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1370,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4429:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1378,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1371,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1351,
																				"src": "4441:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 1372,
																				"name": "newval",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1359,
																				"src": "4450:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4441:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1374,
																				"name": "Reward",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1081,
																				"src": "4459:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1377,
																			"indexExpression": {
																				"expression": {
																					"id": 1375,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "4466:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1376,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "4466:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4459:18:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4441:36:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1366,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1054,
																				"src": "4406:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1365,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "4399:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1367,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4399:20:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1368,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 157,
																	"src": "4399:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1379,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4399:79:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1380,
															"nodeType": "ExpressionStatement",
															"src": "4399:79:10"
														},
														{
															"expression": {
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4492:25:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1381,
																		"name": "Reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1081,
																		"src": "4499:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1384,
																	"indexExpression": {
																		"expression": {
																			"id": 1382,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4506:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1383,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4506:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4499:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1386,
															"nodeType": "ExpressionStatement",
															"src": "4492:25:10"
														},
														{
															"expression": {
																"id": 1391,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4531:26:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1387,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "4538:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1390,
																	"indexExpression": {
																		"expression": {
																			"id": 1388,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4546:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1389,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4546:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4538:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1392,
															"nodeType": "ExpressionStatement",
															"src": "4531:26:10"
														}
													]
												},
												"id": 1394,
												"nodeType": "IfStatement",
												"src": "3779:789:10",
												"trueBody": {
													"id": 1349,
													"nodeType": "Block",
													"src": "3810:449:10",
													"statements": [
														{
															"assignments": [
																1283
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1283,
																	"mutability": "mutable",
																	"name": "amount",
																	"nameLocation": "3829:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1349,
																	"src": "3824:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1282,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "3824:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1289,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 1284,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "3838:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1287,
																	"indexExpression": {
																		"expression": {
																			"id": 1285,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3846:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3846:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3838:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"id": 1288,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "deposited",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1060,
																"src": "3838:29:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3824:43:10"
														},
														{
															"assignments": [
																1291
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1291,
																	"mutability": "mutable",
																	"name": "newval",
																	"nameLocation": "3886:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1349,
																	"src": "3881:11:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1290,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "3881:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1296,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1293,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3912:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1294,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3912:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1292,
																	"name": "calculateIntrest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1574,
																	"src": "3895:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 1295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3895:28:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3881:42:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1303,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3985:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																					"typeString": "contract ERC20Stakeable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																					"typeString": "contract ERC20Stakeable"
																				}
																			],
																			"id": 1302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3977:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1301,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3977:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3977:13:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1305,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3992:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1306,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3992:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"baseExpression": {
																				"id": 1307,
																				"name": "UserRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1086,
																				"src": "4003:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																					"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																				}
																			},
																			"id": 1310,
																			"indexExpression": {
																				"expression": {
																					"id": 1308,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "4012:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1309,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "4012:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4003:20:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
																				"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																			}
																		},
																		"id": 1311,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "tokenId",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1069,
																		"src": "4003:28:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"hexValue": "",
																		"id": 1312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4032:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1298,
																				"name": "ERC721address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1052,
																				"src": "3945:13:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1297,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 623,
																			"src": "3937:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																				"typeString": "type(contract IERC721)"
																			}
																		},
																		"id": 1299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3937:22:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721_$623",
																			"typeString": "contract IERC721"
																		}
																	},
																	"id": 1300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 568,
																	"src": "3937:39:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (address,address,uint256,bytes memory) external"
																	}
																},
																"id": 1313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3937:98:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1314,
															"nodeType": "ExpressionStatement",
															"src": "3937:98:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1319,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4079:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4079:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1328,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1323,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1321,
																				"name": "amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1283,
																				"src": "4091:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 1322,
																				"name": "newval",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1291,
																				"src": "4100:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4091:15:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"baseExpression": {
																				"id": 1324,
																				"name": "Reward",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1081,
																				"src": "4109:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1327,
																			"indexExpression": {
																				"expression": {
																					"id": 1325,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "4116:3:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1326,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "4116:10:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4109:18:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4091:36:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1316,
																				"name": "ERC20Address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1054,
																				"src": "4056:12:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1315,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "4049:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$190_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4049:20:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$190",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1318,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 157,
																	"src": "4049:29:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4049:79:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1330,
															"nodeType": "ExpressionStatement",
															"src": "4049:79:10"
														},
														{
															"expression": {
																"id": 1335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4142:27:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1331,
																		"name": "UserRate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1086,
																		"src": "4149:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																		}
																	},
																	"id": 1334,
																	"indexExpression": {
																		"expression": {
																			"id": 1332,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4158:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1333,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4158:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4149:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
																		"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1336,
															"nodeType": "ExpressionStatement",
															"src": "4142:27:10"
														},
														{
															"expression": {
																"id": 1341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4183:25:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1337,
																		"name": "Reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1081,
																		"src": "4190:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1340,
																	"indexExpression": {
																		"expression": {
																			"id": 1338,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4197:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1339,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4197:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4190:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1342,
															"nodeType": "ExpressionStatement",
															"src": "4183:25:10"
														},
														{
															"expression": {
																"id": 1347,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "4222:26:10",
																"subExpression": {
																	"baseExpression": {
																		"id": 1343,
																		"name": "Details",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1077,
																		"src": "4229:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																		}
																	},
																	"id": 1346,
																	"indexExpression": {
																		"expression": {
																			"id": 1344,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4237:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1345,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4237:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4229:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Staker_$1065_storage",
																		"typeString": "struct ERC20Stakeable.Staker storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1348,
															"nodeType": "ExpressionStatement",
															"src": "4222:26:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "57ea89b6",
									"id": 1396,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Withdraw",
									"nameLocation": "3686:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3694:2:10"
									},
									"returnParameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3704:0:10"
									},
									"scope": 1717,
									"src": "3677:901:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1495,
										"nodeType": "Block",
										"src": "4841:653:10",
										"statements": [
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1403,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "4855:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1405,
														"indexExpression": {
															"id": 1404,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1398,
															"src": "4864:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4855:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"id": 1406,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1071,
													"src": "4855:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1493,
													"nodeType": "Block",
													"src": "5202:277:10",
													"statements": [
														{
															"assignments": [
																1453
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1453,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "5221:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1493,
																	"src": "5216:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1452,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5216:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1473,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1459,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1454,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1077,
																						"src": "5234:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1456,
																					"indexExpression": {
																						"id": 1455,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1398,
																						"src": "5242:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5234:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1065_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1457,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1060,
																				"src": "5234:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1458,
																				"name": "rate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1058,
																				"src": "5259:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5234:29:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1460,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5233:31:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1470,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1467,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1461,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "5269:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1462,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "5269:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1463,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1077,
																									"src": "5287:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1465,
																								"indexExpression": {
																									"id": 1464,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1398,
																									"src": "5295:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5287:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1065_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1466,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1062,
																							"src": "5287:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "5269:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1468,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5268:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1469,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5311:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "5268:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1471,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5267:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5233:81:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5216:98:10"
														},
														{
															"assignments": [
																1475
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1475,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "5333:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1493,
																	"src": "5328:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1474,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5328:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1479,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1476,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1453,
																	"src": "5347:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5359:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "5347:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5328:34:10"
														},
														{
															"expression": {
																"id": 1487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1480,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1401,
																	"src": "5376:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1486,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1481,
																		"name": "TotalReward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1475,
																		"src": "5385:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1482,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1077,
																				"src": "5399:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																					"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																				}
																			},
																			"id": 1484,
																			"indexExpression": {
																				"id": 1483,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1398,
																				"src": "5407:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5399:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1065_storage",
																				"typeString": "struct ERC20Stakeable.Staker storage ref"
																			}
																		},
																		"id": 1485,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "deposited",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1060,
																		"src": "5399:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5385:36:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5376:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1488,
															"nodeType": "ExpressionStatement",
															"src": "5376:45:10"
														},
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1489,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1401,
																	"src": "5442:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030303030303030303030303030303030",
																	"id": 1490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5449:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1000000000000000000"
																},
																"src": "5442:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1402,
															"id": 1492,
															"nodeType": "Return",
															"src": "5435:33:10"
														}
													]
												},
												"id": 1494,
												"nodeType": "IfStatement",
												"src": "4851:628:10",
												"trueBody": {
													"id": 1451,
													"nodeType": "Block",
													"src": "4884:296:10",
													"statements": [
														{
															"assignments": [
																1408
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1408,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "4903:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1451,
																	"src": "4898:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1407,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "4898:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1431,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1417,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1409,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1077,
																						"src": "4916:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1411,
																					"indexExpression": {
																						"id": 1410,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1398,
																						"src": "4924:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4916:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1065_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1412,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1060,
																				"src": "4916:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1413,
																						"name": "UserRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1086,
																						"src": "4941:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																						}
																					},
																					"id": 1415,
																					"indexExpression": {
																						"id": 1414,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1398,
																						"src": "4950:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "4941:13:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
																						"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																					}
																				},
																				"id": 1416,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "userRate",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1067,
																				"src": "4941:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4916:47:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1418,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4915:49:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1425,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1419,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "4969:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1420,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "4969:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1421,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1077,
																									"src": "4987:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1423,
																								"indexExpression": {
																									"id": 1422,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1398,
																									"src": "4995:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "4987:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1065_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1424,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1062,
																							"src": "4987:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "4969:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1426,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4968:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5011:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "4968:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1429,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4967:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4915:99:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4898:116:10"
														},
														{
															"assignments": [
																1433
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1433,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "5033:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1451,
																	"src": "5028:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1432,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5028:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1437,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1436,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1434,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1408,
																	"src": "5047:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1435,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5059:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "5047:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5028:34:10"
														},
														{
															"expression": {
																"id": 1445,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1438,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1401,
																	"src": "5076:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1439,
																		"name": "TotalReward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1433,
																		"src": "5085:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 1440,
																				"name": "Details",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1077,
																				"src": "5099:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																					"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																				}
																			},
																			"id": 1442,
																			"indexExpression": {
																				"id": 1441,
																				"name": "_to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1398,
																				"src": "5107:3:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5099:12:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Staker_$1065_storage",
																				"typeString": "struct ERC20Stakeable.Staker storage ref"
																			}
																		},
																		"id": 1443,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "deposited",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1060,
																		"src": "5099:22:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5085:36:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5076:45:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1446,
															"nodeType": "ExpressionStatement",
															"src": "5076:45:10"
														},
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1447,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1401,
																	"src": "5142:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030303030303030303030303030303030",
																	"id": 1448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5149:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000"
																	},
																	"value": "1000000000000000000"
																},
																"src": "5142:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1402,
															"id": 1450,
															"nodeType": "Return",
															"src": "5135:33:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "c45af5d8",
									"id": 1496,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "showReward",
									"nameLocation": "4780:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "4799:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1496,
												"src": "4791:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4791:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4790:13:10"
									},
									"returnParameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "4829:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1496,
												"src": "4824:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1400,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4824:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4823:13:10"
									},
									"scope": 1717,
									"src": "4771:723:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1573,
										"nodeType": "Block",
										"src": "5825:495:10",
										"statements": [
											{
												"condition": {
													"expression": {
														"baseExpression": {
															"id": 1503,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "5839:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1505,
														"indexExpression": {
															"id": 1504,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1498,
															"src": "5848:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5839:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"id": 1506,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "check",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1071,
													"src": "5839:19:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1571,
													"nodeType": "Block",
													"src": "6111:203:10",
													"statements": [
														{
															"assignments": [
																1542
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1542,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "6130:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1571,
																	"src": "6125:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1541,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6125:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1562,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1543,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1077,
																						"src": "6143:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1545,
																					"indexExpression": {
																						"id": 1544,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1498,
																						"src": "6151:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "6143:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1065_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1546,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1060,
																				"src": "6143:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1547,
																				"name": "rate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1058,
																				"src": "6168:4:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6143:29:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1549,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6142:31:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1559,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1556,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1550,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "6178:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1551,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "6178:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1552,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1077,
																									"src": "6196:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1554,
																								"indexExpression": {
																									"id": 1553,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1498,
																									"src": "6204:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "6196:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1065_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1555,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1062,
																							"src": "6196:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "6178:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1557,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "6177:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1558,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6220:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "6177:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1560,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6176:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6142:81:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6125:98:10"
														},
														{
															"assignments": [
																1564
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1564,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "6242:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1571,
																	"src": "6237:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1563,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6237:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1568,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1567,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1565,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1542,
																	"src": "6256:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6268:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "6256:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6237:34:10"
														},
														{
															"expression": {
																"id": 1569,
																"name": "TotalReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1564,
																"src": "6292:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1502,
															"id": 1570,
															"nodeType": "Return",
															"src": "6285:18:10"
														}
													]
												},
												"id": 1572,
												"nodeType": "IfStatement",
												"src": "5835:479:10",
												"trueBody": {
													"id": 1540,
													"nodeType": "Block",
													"src": "5868:221:10",
													"statements": [
														{
															"assignments": [
																1508
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1508,
																	"mutability": "mutable",
																	"name": "RewardEst",
																	"nameLocation": "5887:9:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1540,
																	"src": "5882:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1507,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "5882:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1531,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1530,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1517,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1509,
																						"name": "Details",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1077,
																						"src": "5900:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																						}
																					},
																					"id": 1511,
																					"indexExpression": {
																						"id": 1510,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1498,
																						"src": "5908:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5900:12:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Staker_$1065_storage",
																						"typeString": "struct ERC20Stakeable.Staker storage ref"
																					}
																				},
																				"id": 1512,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "deposited",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1060,
																				"src": "5900:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 1513,
																						"name": "UserRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1086,
																						"src": "5925:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																							"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																						}
																					},
																					"id": 1515,
																					"indexExpression": {
																						"id": 1514,
																						"name": "_to",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1498,
																						"src": "5934:3:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5925:13:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
																						"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																					}
																				},
																				"id": 1516,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "userRate",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1067,
																				"src": "5925:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5900:47:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1518,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5899:49:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1528,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1525,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"expression": {
																								"id": 1519,
																								"name": "block",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967292,
																								"src": "5953:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_magic_block",
																									"typeString": "block"
																								}
																							},
																							"id": 1520,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestamp",
																							"nodeType": "MemberAccess",
																							"src": "5953:15:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "-",
																						"rightExpression": {
																							"expression": {
																								"baseExpression": {
																									"id": 1521,
																									"name": "Details",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1077,
																									"src": "5971:7:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																										"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																									}
																								},
																								"id": 1523,
																								"indexExpression": {
																									"id": 1522,
																									"name": "_to",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1498,
																									"src": "5979:3:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_address",
																										"typeString": "address"
																									}
																								},
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"nodeType": "IndexAccess",
																								"src": "5971:12:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_Staker_$1065_storage",
																									"typeString": "struct ERC20Stakeable.Staker storage ref"
																								}
																							},
																							"id": 1524,
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "timestake",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1062,
																							"src": "5971:22:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"src": "5953:40:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 1526,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5952:42:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "/",
																			"rightExpression": {
																				"hexValue": "3630",
																				"id": 1527,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5995:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_60_by_1",
																					"typeString": "int_const 60"
																				},
																				"value": "60"
																			},
																			"src": "5952:45:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1529,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5951:47:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5899:99:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5882:116:10"
														},
														{
															"assignments": [
																1533
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1533,
																	"mutability": "mutable",
																	"name": "TotalReward",
																	"nameLocation": "6017:11:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 1540,
																	"src": "6012:16:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1532,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "6012:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1537,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1534,
																	"name": "RewardEst",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1508,
																	"src": "6031:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "313030",
																	"id": 1535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6043:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "6031:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6012:34:10"
														},
														{
															"expression": {
																"id": 1538,
																"name": "TotalReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1533,
																"src": "6067:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1502,
															"id": 1539,
															"nodeType": "Return",
															"src": "6060:18:10"
														}
													]
												}
											}
										]
									},
									"functionSelector": "8b73e331",
									"id": 1574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateIntrest",
									"nameLocation": "5767:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1498,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "5792:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1574,
												"src": "5784:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5784:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5783:13:10"
									},
									"returnParameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1574,
												"src": "5817:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5817:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5816:9:10"
									},
									"scope": 1717,
									"src": "5758:562:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1585,
										"nodeType": "Block",
										"src": "6564:47:10",
										"statements": [
											{
												"expression": {
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1581,
														"name": "ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "6574:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1582,
														"name": "_ERC721address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1576,
														"src": "6590:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6574:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1584,
												"nodeType": "ExpressionStatement",
												"src": "6574:30:10"
											}
										]
									},
									"functionSelector": "ee0106d2",
									"id": 1586,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1579,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1578,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "6555:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "6555:9:10"
										}
									],
									"name": "UpdateERC721",
									"nameLocation": "6511:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1576,
												"mutability": "mutable",
												"name": "_ERC721address",
												"nameLocation": "6532:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1586,
												"src": "6524:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1575,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6524:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6523:24:10"
									},
									"returnParameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6564:0:10"
									},
									"scope": 1717,
									"src": "6502:109:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1597,
										"nodeType": "Block",
										"src": "6850:45:10",
										"statements": [
											{
												"expression": {
													"id": 1595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1593,
														"name": "ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "6860:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1594,
														"name": "_ERC20Address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1588,
														"src": "6875:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6860:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1596,
												"nodeType": "ExpressionStatement",
												"src": "6860:28:10"
											}
										]
									},
									"functionSelector": "275bd33f",
									"id": 1598,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1591,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1590,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "6841:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "6841:9:10"
										}
									],
									"name": "UpdateERC20",
									"nameLocation": "6797:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "_ERC20Address",
												"nameLocation": "6819:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1598,
												"src": "6811:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1587,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6811:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6809:24:10"
									},
									"returnParameters": {
										"id": 1592,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6850:0:10"
									},
									"scope": 1717,
									"src": "6788:107:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1609,
										"nodeType": "Block",
										"src": "7148:39:10",
										"statements": [
											{
												"expression": {
													"id": 1607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1605,
														"name": "rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "7158:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1606,
														"name": "_ratePersentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1600,
														"src": "7165:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7158:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1608,
												"nodeType": "ExpressionStatement",
												"src": "7158:22:10"
											}
										]
									},
									"functionSelector": "f89d832f",
									"id": 1610,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1603,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1602,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "7139:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "7139:9:10"
										}
									],
									"name": "UpdateRatePersentage",
									"nameLocation": "7086:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "_ratePersentage",
												"nameLocation": "7115:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1610,
												"src": "7107:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1599,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7107:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7106:25:10"
									},
									"returnParameters": {
										"id": 1604,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7148:0:10"
									},
									"scope": 1717,
									"src": "7077:110:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1661,
										"nodeType": "Block",
										"src": "7486:307:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1618,
																	"name": "Details",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1077,
																	"src": "7504:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Staker_$1065_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.Staker storage ref)"
																	}
																},
																"id": 1621,
																"indexExpression": {
																	"expression": {
																		"id": 1619,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7512:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7512:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7504:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Staker_$1065_storage",
																	"typeString": "struct ERC20Stakeable.Staker storage ref"
																}
															},
															"id": 1622,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1064,
															"src": "7504:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4669727374204465706f73697420546f6b656e73",
															"id": 1623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7530:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937",
																"typeString": "literal_string \"First Deposit Tokens\""
															},
															"value": "First Deposit Tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_37ff7ae395529772c90b7f5a0581d51053b2eee440e3785f42b31d018a5eb937",
																"typeString": "literal_string \"First Deposit Tokens\""
															}
														],
														"id": 1617,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7496:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7496:57:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1625,
												"nodeType": "ExpressionStatement",
												"src": "7496:57:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1632,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "7571:27:10",
															"subExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1627,
																		"name": "UserRate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1086,
																		"src": "7572:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																			"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																		}
																	},
																	"id": 1630,
																	"indexExpression": {
																		"expression": {
																			"id": 1628,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "7581:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1629,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "7581:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7572:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
																		"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																	}
																},
																"id": 1631,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "check",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1071,
																"src": "7572:26:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c6561736520556e7374616b6520796f7572206465706f7369746564204e4654",
															"id": 1633,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7599:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab",
																"typeString": "literal_string \"Please Unstake your deposited NFT\""
															},
															"value": "Please Unstake your deposited NFT"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f9c681cddd568764e66993921d38bc68da72158d434eadff5cc67cb4aff47aab",
																"typeString": "literal_string \"Please Unstake your deposited NFT\""
															}
														],
														"id": 1626,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7563:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7563:72:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1635,
												"nodeType": "ExpressionStatement",
												"src": "7563:72:10"
											},
											{
												"expression": {
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1636,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "7645:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1639,
														"indexExpression": {
															"expression": {
																"id": 1637,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7654:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1638,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7654:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7645:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1641,
																"name": "_rate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1614,
																"src": "7678:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1642,
																"name": "tokenIds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1612,
																"src": "7684:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 1643,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7693:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1640,
															"name": "StakerNFT",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "7668:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_StakerNFT_$1072_storage_ptr_$",
																"typeString": "type(struct ERC20Stakeable.StakerNFT storage pointer)"
															}
														},
														"id": 1644,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7668:30:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1072_memory_ptr",
															"typeString": "struct ERC20Stakeable.StakerNFT memory"
														}
													},
													"src": "7645:53:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
														"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
													}
												},
												"id": 1646,
												"nodeType": "ExpressionStatement",
												"src": "7645:53:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1651,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7749:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7749:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1655,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "7768:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7760:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1653,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7760:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7760:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1657,
															"name": "tokenIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1612,
															"src": "7774:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7783:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1648,
																	"name": "ERC721address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1052,
																	"src": "7717:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1647,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "7709:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 1649,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7709:22:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$623",
																"typeString": "contract IERC721"
															}
														},
														"id": 1650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 568,
														"src": "7709:39:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7709:77:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1660,
												"nodeType": "ExpressionStatement",
												"src": "7709:77:10"
											}
										]
									},
									"functionSelector": "934ed772",
									"id": 1662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DepositNFT",
									"nameLocation": "7439:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "7458:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "7450:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7450:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "_rate",
												"nameLocation": "7472:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "7467:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1613,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7467:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7449:29:10"
									},
									"returnParameters": {
										"id": 1616,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7486:0:10"
									},
									"scope": 1717,
									"src": "7430:363:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1696,
										"nodeType": "Block",
										"src": "8051:203:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1668,
																	"name": "UserRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1086,
																	"src": "8069:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																		"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
																	}
																},
																"id": 1671,
																"indexExpression": {
																	"expression": {
																		"id": 1669,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "8078:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "8078:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8069:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
																	"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
																}
															},
															"id": 1672,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "check",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1071,
															"src": "8069:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "506c65617365204669727374205374616b65204e465473",
															"id": 1673,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8096:25:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9",
																"typeString": "literal_string \"Please First Stake NFTs\""
															},
															"value": "Please First Stake NFTs"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_80658633b1b1848af080bcec8bf60b38a9be9339ba68ff8e557f938a97f47ed9",
																"typeString": "literal_string \"Please First Stake NFTs\""
															}
														],
														"id": 1667,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8061:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8061:61:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1675,
												"nodeType": "ExpressionStatement",
												"src": "8061:61:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1682,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "8180:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																		"typeString": "contract ERC20Stakeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20Stakeable_$1717",
																		"typeString": "contract ERC20Stakeable"
																	}
																],
																"id": 1681,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8172:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1680,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8172:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8172:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1684,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8187:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1685,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8187:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1686,
															"name": "tokenIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1664,
															"src": "8198:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1687,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8207:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1677,
																	"name": "ERC721address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1052,
																	"src": "8140:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1676,
																"name": "IERC721",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 623,
																"src": "8132:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC721_$623_$",
																	"typeString": "type(contract IERC721)"
																}
															},
															"id": 1678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8132:22:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC721_$623",
																"typeString": "contract IERC721"
															}
														},
														"id": 1679,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 568,
														"src": "8132:39:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory) external"
														}
													},
													"id": 1688,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8132:78:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1689,
												"nodeType": "ExpressionStatement",
												"src": "8132:78:10"
											},
											{
												"expression": {
													"id": 1694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "8220:27:10",
													"subExpression": {
														"baseExpression": {
															"id": 1690,
															"name": "UserRate",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "8227:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakerNFT_$1072_storage_$",
																"typeString": "mapping(address => struct ERC20Stakeable.StakerNFT storage ref)"
															}
														},
														"id": 1693,
														"indexExpression": {
															"expression": {
																"id": 1691,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8236:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1692,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8236:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8227:20:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakerNFT_$1072_storage",
															"typeString": "struct ERC20Stakeable.StakerNFT storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1695,
												"nodeType": "ExpressionStatement",
												"src": "8220:27:10"
											}
										]
									},
									"functionSelector": "023245d7",
									"id": 1697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawNFT",
									"nameLocation": "8014:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1664,
												"mutability": "mutable",
												"name": "tokenIds",
												"nameLocation": "8034:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1697,
												"src": "8026:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1663,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8026:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8025:18:10"
									},
									"returnParameters": {
										"id": 1666,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8051:0:10"
									},
									"scope": 1717,
									"src": "8005:249:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										640
									],
									"body": {
										"id": 1715,
										"nodeType": "Block",
										"src": "8365:65:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 1711,
															"name": "IERC721Receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 641,
															"src": "8382:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$641_$",
																"typeString": "type(contract IERC721Receiver)"
															}
														},
														"id": 1712,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "onERC721Received",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 640,
														"src": "8382:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
															"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
														}
													},
													"id": 1713,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberName": "selector",
													"nodeType": "MemberAccess",
													"src": "8382:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 1710,
												"id": 1714,
												"nodeType": "Return",
												"src": "8375:48:10"
											}
										]
									},
									"functionSelector": "150b7a02",
									"id": 1716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "8268:16:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1707,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "8339:8:10"
									},
									"parameters": {
										"id": 1706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "8285:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8285:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "8293:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8293:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1703,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "8301:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8301:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1705,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "8309:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1704,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8309:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8284:40:10"
									},
									"returnParameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1716,
												"src": "8357:6:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1708,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "8357:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8356:8:10"
									},
									"scope": 1717,
									"src": "8259:171:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1718,
							"src": "348:8084:10",
							"usedErrors": []
						}
					],
					"src": "56:8376:10"
				},
				"id": 10
			}
		}
	}
}